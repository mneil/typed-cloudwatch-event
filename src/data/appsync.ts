/**
 * STOP. This file is autogenerated. DO NOT EDIT by hand
 */
export interface AssociateApi {
  readonly domainName: string;
  readonly apiId: string;
}
export interface CreateApiCache {
  readonly apiId: string;
  readonly ttl: number;
  readonly transitEncryptionEnabled?: boolean;
  readonly atRestEncryptionEnabled?: boolean;
  readonly apiCachingBehavior: string;
  readonly type: string;
}
export interface CreateApiKey {
  readonly apiId: string;
  readonly description?: string;
  readonly expires?: number;
}
export interface CreateDataSource {
  readonly apiId: string;
  readonly name: string;
  readonly description?: string;
  readonly type: string;
  readonly serviceRoleArn?: string;
  readonly dynamodbConfig?: DynamodbDataSourceConfig;
  readonly lambdaConfig?: LambdaDataSourceConfig;
  readonly elasticsearchConfig?: ElasticsearchDataSourceConfig;
  readonly openSearchServiceConfig?: OpenSearchServiceDataSourceConfig;
  readonly httpConfig?: HttpDataSourceConfig;
  readonly relationalDatabaseConfig?: RelationalDatabaseDataSourceConfig;
}
export interface CreateDomainName {
  readonly domainName: string;
  readonly certificateArn: string;
  readonly description?: string;
}
export interface CreateFunction {
  readonly apiId: string;
  readonly name: string;
  readonly description?: string;
  readonly dataSourceName: string;
  readonly requestMappingTemplate?: string;
  readonly responseMappingTemplate?: string;
  readonly functionVersion: string;
  readonly syncConfig?: SyncConfig;
}
export interface CreateGraphqlApi {
  readonly name: string;
  readonly logConfig?: LogConfig;
  readonly authenticationType: string;
  readonly userPoolConfig?: UserPoolConfig;
  readonly openIDConnectConfig?: OpenIDConnectConfig;
  readonly tags?: {[key: string]: any};
  readonly additionalAuthenticationProviders?: [];
  readonly xrayEnabled?: boolean;
  readonly lambdaAuthorizerConfig?: LambdaAuthorizerConfig;
}
export interface CreateResolver {
  readonly apiId: string;
  readonly typeName: string;
  readonly fieldName: string;
  readonly dataSourceName?: string;
  readonly requestMappingTemplate?: string;
  readonly responseMappingTemplate?: string;
  readonly kind?: string;
  readonly pipelineConfig?: PipelineConfig;
  readonly syncConfig?: SyncConfig;
  readonly cachingConfig?: CachingConfig;
}
export interface CreateType {
  readonly apiId: string;
  readonly definition: string;
  readonly format: string;
}
export interface DeleteApiCache {
  readonly apiId: string;
}
export interface DeleteApiKey {
  readonly apiId: string;
  readonly id: string;
}
export interface DeleteDataSource {
  readonly apiId: string;
  readonly name: string;
}
export interface DeleteDomainName {
  readonly domainName: string;
}
export interface DeleteFunction {
  readonly apiId: string;
  readonly functionId: string;
}
export interface DeleteGraphqlApi {
  readonly apiId: string;
}
export interface DeleteResolver {
  readonly apiId: string;
  readonly typeName: string;
  readonly fieldName: string;
}
export interface DeleteType {
  readonly apiId: string;
  readonly typeName: string;
}
export interface DisassociateApi {
  readonly domainName: string;
}
export interface FlushApiCache {
  readonly apiId: string;
}
export interface GetApiAssociation {
  readonly domainName: string;
}
export interface GetApiCache {
  readonly apiId: string;
}
export interface GetDataSource {
  readonly apiId: string;
  readonly name: string;
}
export interface GetDomainName {
  readonly domainName: string;
}
export interface GetFunction {
  readonly apiId: string;
  readonly functionId: string;
}
export interface GetGraphqlApi {
  readonly apiId: string;
}
export interface GetIntrospectionSchema {
  readonly apiId: string;
  readonly format: string;
  readonly includeDirectives?: boolean;
}
export interface GetResolver {
  readonly apiId: string;
  readonly typeName: string;
  readonly fieldName: string;
}
export interface GetSchemaCreationStatus {
  readonly apiId: string;
}
export interface GetType {
  readonly apiId: string;
  readonly typeName: string;
  readonly format: string;
}
export interface ListApiKeys {
  readonly apiId: string;
  readonly nextToken?: string;
  readonly maxResults?: number;
}
export interface ListDataSources {
  readonly apiId: string;
  readonly nextToken?: string;
  readonly maxResults?: number;
}
export interface ListDomainNames {
  readonly nextToken?: string;
  readonly maxResults?: number;
}
export interface ListFunctions {
  readonly apiId: string;
  readonly nextToken?: string;
  readonly maxResults?: number;
}
export interface ListGraphqlApis {
  readonly nextToken?: string;
  readonly maxResults?: number;
}
export interface ListResolvers {
  readonly apiId: string;
  readonly typeName: string;
  readonly nextToken?: string;
  readonly maxResults?: number;
}
export interface ListResolversByFunction {
  readonly apiId: string;
  readonly functionId: string;
  readonly nextToken?: string;
  readonly maxResults?: number;
}
export interface ListTagsForResource {
  readonly resourceArn: string;
}
export interface ListTypes {
  readonly apiId: string;
  readonly format: string;
  readonly nextToken?: string;
  readonly maxResults?: number;
}
export interface StartSchemaCreation {
  readonly apiId: string;
  readonly definition: unknown;
}
export interface TagResource {
  readonly resourceArn: string;
  readonly tags: {[key: string]: any};
}
export interface UntagResource {
  readonly resourceArn: string;
  readonly tagKeys: [];
}
export interface UpdateApiCache {
  readonly apiId: string;
  readonly ttl: number;
  readonly apiCachingBehavior: string;
  readonly type: string;
}
export interface UpdateApiKey {
  readonly apiId: string;
  readonly id: string;
  readonly description?: string;
  readonly expires?: number;
}
export interface UpdateDataSource {
  readonly apiId: string;
  readonly name: string;
  readonly description?: string;
  readonly type: string;
  readonly serviceRoleArn?: string;
  readonly dynamodbConfig?: DynamodbDataSourceConfig;
  readonly lambdaConfig?: LambdaDataSourceConfig;
  readonly elasticsearchConfig?: ElasticsearchDataSourceConfig;
  readonly openSearchServiceConfig?: OpenSearchServiceDataSourceConfig;
  readonly httpConfig?: HttpDataSourceConfig;
  readonly relationalDatabaseConfig?: RelationalDatabaseDataSourceConfig;
}
export interface UpdateDomainName {
  readonly domainName: string;
  readonly description?: string;
}
export interface UpdateFunction {
  readonly apiId: string;
  readonly name: string;
  readonly description?: string;
  readonly functionId: string;
  readonly dataSourceName: string;
  readonly requestMappingTemplate?: string;
  readonly responseMappingTemplate?: string;
  readonly functionVersion: string;
  readonly syncConfig?: SyncConfig;
}
export interface UpdateGraphqlApi {
  readonly apiId: string;
  readonly name: string;
  readonly logConfig?: LogConfig;
  readonly authenticationType?: string;
  readonly userPoolConfig?: UserPoolConfig;
  readonly openIDConnectConfig?: OpenIDConnectConfig;
  readonly additionalAuthenticationProviders?: [];
  readonly xrayEnabled?: boolean;
  readonly lambdaAuthorizerConfig?: LambdaAuthorizerConfig;
}
export interface UpdateResolver {
  readonly apiId: string;
  readonly typeName: string;
  readonly fieldName: string;
  readonly dataSourceName?: string;
  readonly requestMappingTemplate?: string;
  readonly responseMappingTemplate?: string;
  readonly kind?: string;
  readonly pipelineConfig?: PipelineConfig;
  readonly syncConfig?: SyncConfig;
  readonly cachingConfig?: CachingConfig;
}
export interface UpdateType {
  readonly apiId: string;
  readonly typeName: string;
  readonly definition?: string;
  readonly format: string;
}



interface AccessDeniedException {
  readonly message: string;
}

interface AdditionalAuthenticationProvider {
  readonly authenticationType: string;
  readonly openIDConnectConfig: OpenIDConnectConfig;
  readonly userPoolConfig: CognitoUserPoolConfig;
  readonly lambdaAuthorizerConfig: LambdaAuthorizerConfig;
}

interface ApiAssociation {
  readonly domainName: string;
  readonly apiId: string;
  readonly associationStatus: string;
  readonly deploymentDetail: string;
}

interface ApiCache {
  readonly ttl: number;
  readonly apiCachingBehavior: string;
  readonly transitEncryptionEnabled: boolean;
  readonly atRestEncryptionEnabled: boolean;
  readonly type: string;
  readonly status: string;
}

interface ApiKey {
  readonly id: string;
  readonly description: string;
  readonly expires: number;
  readonly deletes: number;
}

interface ApiKeyLimitExceededException {
  readonly message: string;
}

interface ApiKeyValidityOutOfBoundsException {
  readonly message: string;
}

interface ApiLimitExceededException {
  readonly message: string;
}

interface AssociateApiRequest {
  readonly domainName: string;
  readonly apiId: string;
}

interface AssociateApiResponse {
  readonly apiAssociation: ApiAssociation;
}

interface AuthorizationConfig {
  readonly authorizationType: string;
  readonly awsIamConfig: AwsIamConfig;
}

interface AwsIamConfig {
  readonly signingRegion: string;
  readonly signingServiceName: string;
}

interface BadRequestException {
  readonly message: string;
}

interface CachingConfig {
  readonly ttl: number;
  readonly cachingKeys: [];
}

interface CognitoUserPoolConfig {
  readonly userPoolId: string;
  readonly awsRegion: string;
  readonly appIdClientRegex: string;
}

interface ConcurrentModificationException {
  readonly message: string;
}

interface CreateApiCacheRequest {
  readonly apiId: string;
  readonly ttl: number;
  readonly transitEncryptionEnabled: boolean;
  readonly atRestEncryptionEnabled: boolean;
  readonly apiCachingBehavior: string;
  readonly type: string;
}

interface CreateApiCacheResponse {
  readonly apiCache: ApiCache;
}

interface CreateApiKeyRequest {
  readonly apiId: string;
  readonly description: string;
  readonly expires: number;
}

interface CreateApiKeyResponse {
  readonly apiKey: ApiKey;
}

interface CreateDataSourceRequest {
  readonly apiId: string;
  readonly name: string;
  readonly description: string;
  readonly type: string;
  readonly serviceRoleArn: string;
  readonly dynamodbConfig: DynamodbDataSourceConfig;
  readonly lambdaConfig: LambdaDataSourceConfig;
  readonly elasticsearchConfig: ElasticsearchDataSourceConfig;
  readonly openSearchServiceConfig: OpenSearchServiceDataSourceConfig;
  readonly httpConfig: HttpDataSourceConfig;
  readonly relationalDatabaseConfig: RelationalDatabaseDataSourceConfig;
}

interface CreateDataSourceResponse {
  readonly dataSource: DataSource;
}

interface CreateDomainNameRequest {
  readonly domainName: string;
  readonly certificateArn: string;
  readonly description: string;
}

interface CreateDomainNameResponse {
  readonly domainNameConfig: DomainNameConfig;
}

interface CreateFunctionRequest {
  readonly apiId: string;
  readonly name: string;
  readonly description: string;
  readonly dataSourceName: string;
  readonly requestMappingTemplate: string;
  readonly responseMappingTemplate: string;
  readonly functionVersion: string;
  readonly syncConfig: SyncConfig;
}

interface CreateFunctionResponse {
  readonly functionConfiguration: FunctionConfiguration;
}

interface CreateGraphqlApiRequest {
  readonly name: string;
  readonly logConfig: LogConfig;
  readonly authenticationType: string;
  readonly userPoolConfig: UserPoolConfig;
  readonly openIDConnectConfig: OpenIDConnectConfig;
  readonly tags: {[key: string]: any};
  readonly additionalAuthenticationProviders: [];
  readonly xrayEnabled: boolean;
  readonly lambdaAuthorizerConfig: LambdaAuthorizerConfig;
}

interface CreateGraphqlApiResponse {
  readonly graphqlApi: GraphqlApi;
}

interface CreateResolverRequest {
  readonly apiId: string;
  readonly typeName: string;
  readonly fieldName: string;
  readonly dataSourceName: string;
  readonly requestMappingTemplate: string;
  readonly responseMappingTemplate: string;
  readonly kind: string;
  readonly pipelineConfig: PipelineConfig;
  readonly syncConfig: SyncConfig;
  readonly cachingConfig: CachingConfig;
}

interface CreateResolverResponse {
  readonly resolver: Resolver;
}

interface CreateTypeRequest {
  readonly apiId: string;
  readonly definition: string;
  readonly format: string;
}

interface CreateTypeResponse {
  readonly type: Type;
}

interface DataSource {
  readonly dataSourceArn: string;
  readonly name: string;
  readonly description: string;
  readonly type: string;
  readonly serviceRoleArn: string;
  readonly dynamodbConfig: DynamodbDataSourceConfig;
  readonly lambdaConfig: LambdaDataSourceConfig;
  readonly elasticsearchConfig: ElasticsearchDataSourceConfig;
  readonly openSearchServiceConfig: OpenSearchServiceDataSourceConfig;
  readonly httpConfig: HttpDataSourceConfig;
  readonly relationalDatabaseConfig: RelationalDatabaseDataSourceConfig;
}

interface DeleteApiCacheRequest {
  readonly apiId: string;
}

interface DeleteApiCacheResponse {
}

interface DeleteApiKeyRequest {
  readonly apiId: string;
  readonly id: string;
}

interface DeleteApiKeyResponse {
}

interface DeleteDataSourceRequest {
  readonly apiId: string;
  readonly name: string;
}

interface DeleteDataSourceResponse {
}

interface DeleteDomainNameRequest {
  readonly domainName: string;
}

interface DeleteDomainNameResponse {
}

interface DeleteFunctionRequest {
  readonly apiId: string;
  readonly functionId: string;
}

interface DeleteFunctionResponse {
}

interface DeleteGraphqlApiRequest {
  readonly apiId: string;
}

interface DeleteGraphqlApiResponse {
}

interface DeleteResolverRequest {
  readonly apiId: string;
  readonly typeName: string;
  readonly fieldName: string;
}

interface DeleteResolverResponse {
}

interface DeleteTypeRequest {
  readonly apiId: string;
  readonly typeName: string;
}

interface DeleteTypeResponse {
}

interface DeltaSyncConfig {
  readonly baseTableTTL: number;
  readonly deltaSyncTableName: string;
  readonly deltaSyncTableTTL: number;
}

interface DisassociateApiRequest {
  readonly domainName: string;
}

interface DisassociateApiResponse {
}

interface DomainNameConfig {
  readonly domainName: string;
  readonly description: string;
  readonly certificateArn: string;
  readonly appsyncDomainName: string;
  readonly hostedZoneId: string;
}

interface DynamodbDataSourceConfig {
  readonly tableName: string;
  readonly awsRegion: string;
  readonly useCallerCredentials: boolean;
  readonly deltaSyncConfig: DeltaSyncConfig;
  readonly versioned: boolean;
}

interface ElasticsearchDataSourceConfig {
  readonly endpoint: string;
  readonly awsRegion: string;
}

interface FlushApiCacheRequest {
  readonly apiId: string;
}

interface FlushApiCacheResponse {
}

interface FunctionConfiguration {
  readonly functionId: string;
  readonly functionArn: string;
  readonly name: string;
  readonly description: string;
  readonly dataSourceName: string;
  readonly requestMappingTemplate: string;
  readonly responseMappingTemplate: string;
  readonly functionVersion: string;
  readonly syncConfig: SyncConfig;
}

interface GetApiAssociationRequest {
  readonly domainName: string;
}

interface GetApiAssociationResponse {
  readonly apiAssociation: ApiAssociation;
}

interface GetApiCacheRequest {
  readonly apiId: string;
}

interface GetApiCacheResponse {
  readonly apiCache: ApiCache;
}

interface GetDataSourceRequest {
  readonly apiId: string;
  readonly name: string;
}

interface GetDataSourceResponse {
  readonly dataSource: DataSource;
}

interface GetDomainNameRequest {
  readonly domainName: string;
}

interface GetDomainNameResponse {
  readonly domainNameConfig: DomainNameConfig;
}

interface GetFunctionRequest {
  readonly apiId: string;
  readonly functionId: string;
}

interface GetFunctionResponse {
  readonly functionConfiguration: FunctionConfiguration;
}

interface GetGraphqlApiRequest {
  readonly apiId: string;
}

interface GetGraphqlApiResponse {
  readonly graphqlApi: GraphqlApi;
}

interface GetIntrospectionSchemaRequest {
  readonly apiId: string;
  readonly format: string;
  readonly includeDirectives: boolean;
}

interface GetIntrospectionSchemaResponse {
  readonly schema: unknown;
}

interface GetResolverRequest {
  readonly apiId: string;
  readonly typeName: string;
  readonly fieldName: string;
}

interface GetResolverResponse {
  readonly resolver: Resolver;
}

interface GetSchemaCreationStatusRequest {
  readonly apiId: string;
}

interface GetSchemaCreationStatusResponse {
  readonly status: string;
  readonly details: string;
}

interface GetTypeRequest {
  readonly apiId: string;
  readonly typeName: string;
  readonly format: string;
}

interface GetTypeResponse {
  readonly type: Type;
}

interface GraphQLSchemaException {
  readonly message: string;
}

interface GraphqlApi {
  readonly name: string;
  readonly apiId: string;
  readonly authenticationType: string;
  readonly logConfig: LogConfig;
  readonly userPoolConfig: UserPoolConfig;
  readonly openIDConnectConfig: OpenIDConnectConfig;
  readonly arn: string;
  readonly uris: {[key: string]: any};
  readonly tags: {[key: string]: any};
  readonly additionalAuthenticationProviders: [];
  readonly xrayEnabled: boolean;
  readonly wafWebAclArn: string;
  readonly lambdaAuthorizerConfig: LambdaAuthorizerConfig;
}

interface HttpDataSourceConfig {
  readonly endpoint: string;
  readonly authorizationConfig: AuthorizationConfig;
}

interface InternalFailureException {
  readonly message: string;
}

interface LambdaAuthorizerConfig {
  readonly authorizerResultTtlInSeconds: number;
  readonly authorizerUri: string;
  readonly identityValidationExpression: string;
}

interface LambdaConflictHandlerConfig {
  readonly lambdaConflictHandlerArn: string;
}

interface LambdaDataSourceConfig {
  readonly lambdaFunctionArn: string;
}

interface LimitExceededException {
  readonly message: string;
}

interface ListApiKeysRequest {
  readonly apiId: string;
  readonly nextToken: string;
  readonly maxResults: number;
}

interface ListApiKeysResponse {
  readonly apiKeys: [];
  readonly nextToken: string;
}

interface ListDataSourcesRequest {
  readonly apiId: string;
  readonly nextToken: string;
  readonly maxResults: number;
}

interface ListDataSourcesResponse {
  readonly dataSources: [];
  readonly nextToken: string;
}

interface ListDomainNamesRequest {
  readonly nextToken: string;
  readonly maxResults: number;
}

interface ListDomainNamesResponse {
  readonly domainNameConfigs: [];
  readonly nextToken: string;
}

interface ListFunctionsRequest {
  readonly apiId: string;
  readonly nextToken: string;
  readonly maxResults: number;
}

interface ListFunctionsResponse {
  readonly functions: [];
  readonly nextToken: string;
}

interface ListGraphqlApisRequest {
  readonly nextToken: string;
  readonly maxResults: number;
}

interface ListGraphqlApisResponse {
  readonly graphqlApis: [];
  readonly nextToken: string;
}

interface ListResolversByFunctionRequest {
  readonly apiId: string;
  readonly functionId: string;
  readonly nextToken: string;
  readonly maxResults: number;
}

interface ListResolversByFunctionResponse {
  readonly resolvers: [];
  readonly nextToken: string;
}

interface ListResolversRequest {
  readonly apiId: string;
  readonly typeName: string;
  readonly nextToken: string;
  readonly maxResults: number;
}

interface ListResolversResponse {
  readonly resolvers: [];
  readonly nextToken: string;
}

interface ListTagsForResourceRequest {
  readonly resourceArn: string;
}

interface ListTagsForResourceResponse {
  readonly tags: {[key: string]: any};
}

interface ListTypesRequest {
  readonly apiId: string;
  readonly format: string;
  readonly nextToken: string;
  readonly maxResults: number;
}

interface ListTypesResponse {
  readonly types: [];
  readonly nextToken: string;
}

interface LogConfig {
  readonly fieldLogLevel: string;
  readonly cloudWatchLogsRoleArn: string;
  readonly excludeVerboseContent: boolean;
}

interface NotFoundException {
  readonly message: string;
}

interface OpenIDConnectConfig {
  readonly issuer: string;
  readonly clientId: string;
  readonly iatTTL: number;
  readonly authTTL: number;
}

interface OpenSearchServiceDataSourceConfig {
  readonly endpoint: string;
  readonly awsRegion: string;
}

interface PipelineConfig {
  readonly functions: [];
}

interface RdsHttpEndpointConfig {
  readonly awsRegion: string;
  readonly dbClusterIdentifier: string;
  readonly databaseName: string;
  readonly schema: string;
  readonly awsSecretStoreArn: string;
}

interface RelationalDatabaseDataSourceConfig {
  readonly relationalDatabaseSourceType: string;
  readonly rdsHttpEndpointConfig: RdsHttpEndpointConfig;
}

interface Resolver {
  readonly typeName: string;
  readonly fieldName: string;
  readonly dataSourceName: string;
  readonly resolverArn: string;
  readonly requestMappingTemplate: string;
  readonly responseMappingTemplate: string;
  readonly kind: string;
  readonly pipelineConfig: PipelineConfig;
  readonly syncConfig: SyncConfig;
  readonly cachingConfig: CachingConfig;
}

interface StartSchemaCreationRequest {
  readonly apiId: string;
  readonly definition: unknown;
}

interface StartSchemaCreationResponse {
  readonly status: string;
}

interface SyncConfig {
  readonly conflictHandler: string;
  readonly conflictDetection: string;
  readonly lambdaConflictHandlerConfig: LambdaConflictHandlerConfig;
}

interface TagResourceRequest {
  readonly resourceArn: string;
  readonly tags: {[key: string]: any};
}

interface TagResourceResponse {
}

interface Type {
  readonly name: string;
  readonly description: string;
  readonly arn: string;
  readonly definition: string;
  readonly format: string;
}

interface UnauthorizedException {
  readonly message: string;
}

interface UntagResourceRequest {
  readonly resourceArn: string;
  readonly tagKeys: [];
}

interface UntagResourceResponse {
}

interface UpdateApiCacheRequest {
  readonly apiId: string;
  readonly ttl: number;
  readonly apiCachingBehavior: string;
  readonly type: string;
}

interface UpdateApiCacheResponse {
  readonly apiCache: ApiCache;
}

interface UpdateApiKeyRequest {
  readonly apiId: string;
  readonly id: string;
  readonly description: string;
  readonly expires: number;
}

interface UpdateApiKeyResponse {
  readonly apiKey: ApiKey;
}

interface UpdateDataSourceRequest {
  readonly apiId: string;
  readonly name: string;
  readonly description: string;
  readonly type: string;
  readonly serviceRoleArn: string;
  readonly dynamodbConfig: DynamodbDataSourceConfig;
  readonly lambdaConfig: LambdaDataSourceConfig;
  readonly elasticsearchConfig: ElasticsearchDataSourceConfig;
  readonly openSearchServiceConfig: OpenSearchServiceDataSourceConfig;
  readonly httpConfig: HttpDataSourceConfig;
  readonly relationalDatabaseConfig: RelationalDatabaseDataSourceConfig;
}

interface UpdateDataSourceResponse {
  readonly dataSource: DataSource;
}

interface UpdateDomainNameRequest {
  readonly domainName: string;
  readonly description: string;
}

interface UpdateDomainNameResponse {
  readonly domainNameConfig: DomainNameConfig;
}

interface UpdateFunctionRequest {
  readonly apiId: string;
  readonly name: string;
  readonly description: string;
  readonly functionId: string;
  readonly dataSourceName: string;
  readonly requestMappingTemplate: string;
  readonly responseMappingTemplate: string;
  readonly functionVersion: string;
  readonly syncConfig: SyncConfig;
}

interface UpdateFunctionResponse {
  readonly functionConfiguration: FunctionConfiguration;
}

interface UpdateGraphqlApiRequest {
  readonly apiId: string;
  readonly name: string;
  readonly logConfig: LogConfig;
  readonly authenticationType: string;
  readonly userPoolConfig: UserPoolConfig;
  readonly openIDConnectConfig: OpenIDConnectConfig;
  readonly additionalAuthenticationProviders: [];
  readonly xrayEnabled: boolean;
  readonly lambdaAuthorizerConfig: LambdaAuthorizerConfig;
}

interface UpdateGraphqlApiResponse {
  readonly graphqlApi: GraphqlApi;
}

interface UpdateResolverRequest {
  readonly apiId: string;
  readonly typeName: string;
  readonly fieldName: string;
  readonly dataSourceName: string;
  readonly requestMappingTemplate: string;
  readonly responseMappingTemplate: string;
  readonly kind: string;
  readonly pipelineConfig: PipelineConfig;
  readonly syncConfig: SyncConfig;
  readonly cachingConfig: CachingConfig;
}

interface UpdateResolverResponse {
  readonly resolver: Resolver;
}

interface UpdateTypeRequest {
  readonly apiId: string;
  readonly typeName: string;
  readonly definition: string;
  readonly format: string;
}

interface UpdateTypeResponse {
  readonly type: Type;
}

interface UserPoolConfig {
  readonly userPoolId: string;
  readonly awsRegion: string;
  readonly defaultAction: string;
  readonly appIdClientRegex: string;
}

