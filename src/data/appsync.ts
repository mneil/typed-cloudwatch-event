/**
 * STOP. This file is autogenerated. DO NOT EDIT by hand
 */
export interface AssociateApi {
  readonly domainName: string;
  readonly apiId: string;
}

export interface CreateApiCache {
  readonly apiId: string;
  readonly ttl: number;
  readonly transitEncryptionEnabled?: boolean;
  readonly atRestEncryptionEnabled?: boolean;
  readonly apiCachingBehavior: string;
  readonly type: string;
}

export interface CreateApiKey {
  readonly apiId: string;
  readonly description?: string;
  readonly expires?: number;
}

export interface CreateDataSource {
  readonly apiId: string;
  readonly name: string;
  readonly description?: string;
  readonly type: string;
  readonly serviceRoleArn?: string;
  readonly dynamodbConfig?: DynamodbDataSourceConfig;
  readonly lambdaConfig?: LambdaDataSourceConfig;
  readonly elasticsearchConfig?: ElasticsearchDataSourceConfig;
  readonly openSearchServiceConfig?: OpenSearchServiceDataSourceConfig;
  readonly httpConfig?: HttpDataSourceConfig;
  readonly relationalDatabaseConfig?: RelationalDatabaseDataSourceConfig;
}

export interface CreateDomainName {
  readonly domainName: string;
  readonly certificateArn: string;
  readonly description?: string;
}

export interface CreateFunction {
  readonly apiId: string;
  readonly name: string;
  readonly description?: string;
  readonly dataSourceName: string;
  readonly requestMappingTemplate?: string;
  readonly responseMappingTemplate?: string;
  readonly functionVersion: string;
  readonly syncConfig?: SyncConfig;
}

export interface CreateGraphqlApi {
  readonly name: string;
  readonly logConfig?: LogConfig;
  readonly authenticationType: string;
  readonly userPoolConfig?: UserPoolConfig;
  readonly openIDConnectConfig?: OpenIDConnectConfig;
  readonly tags?: {[key: string]: any};
  readonly additionalAuthenticationProviders?: [];
  readonly xrayEnabled?: boolean;
  readonly lambdaAuthorizerConfig?: LambdaAuthorizerConfig;
}

export interface CreateResolver {
  readonly apiId: string;
  readonly typeName: string;
  readonly fieldName: string;
  readonly dataSourceName?: string;
  readonly requestMappingTemplate?: string;
  readonly responseMappingTemplate?: string;
  readonly kind?: string;
  readonly pipelineConfig?: PipelineConfig;
  readonly syncConfig?: SyncConfig;
  readonly cachingConfig?: CachingConfig;
}

export interface CreateType {
  readonly apiId: string;
  readonly definition: string;
  readonly format: string;
}

export interface DeleteApiCache {
  readonly apiId: string;
}

export interface DeleteApiKey {
  readonly apiId: string;
  readonly id: string;
}

export interface DeleteDataSource {
  readonly apiId: string;
  readonly name: string;
}

export interface DeleteDomainName {
  readonly domainName: string;
}

export interface DeleteFunction {
  readonly apiId: string;
  readonly functionId: string;
}

export interface DeleteGraphqlApi {
  readonly apiId: string;
}

export interface DeleteResolver {
  readonly apiId: string;
  readonly typeName: string;
  readonly fieldName: string;
}

export interface DeleteType {
  readonly apiId: string;
  readonly typeName: string;
}

export interface DisassociateApi {
  readonly domainName: string;
}

export interface FlushApiCache {
  readonly apiId: string;
}

export interface GetApiAssociation {
  readonly domainName: string;
}

export interface GetApiCache {
  readonly apiId: string;
}

export interface GetDataSource {
  readonly apiId: string;
  readonly name: string;
}

export interface GetDomainName {
  readonly domainName: string;
}

export interface GetFunction {
  readonly apiId: string;
  readonly functionId: string;
}

export interface GetGraphqlApi {
  readonly apiId: string;
}

export interface GetIntrospectionSchema {
  readonly apiId: string;
  readonly format: string;
  readonly includeDirectives?: boolean;
}

export interface GetResolver {
  readonly apiId: string;
  readonly typeName: string;
  readonly fieldName: string;
}

export interface GetSchemaCreationStatus {
  readonly apiId: string;
}

export interface GetType {
  readonly apiId: string;
  readonly typeName: string;
  readonly format: string;
}

export interface ListApiKeys {
  readonly apiId: string;
  readonly nextToken?: string;
  readonly maxResults?: number;
}

export interface ListDataSources {
  readonly apiId: string;
  readonly nextToken?: string;
  readonly maxResults?: number;
}

export interface ListDomainNames {
  readonly nextToken?: string;
  readonly maxResults?: number;
}

export interface ListFunctions {
  readonly apiId: string;
  readonly nextToken?: string;
  readonly maxResults?: number;
}

export interface ListGraphqlApis {
  readonly nextToken?: string;
  readonly maxResults?: number;
}

export interface ListResolvers {
  readonly apiId: string;
  readonly typeName: string;
  readonly nextToken?: string;
  readonly maxResults?: number;
}

export interface ListResolversByFunction {
  readonly apiId: string;
  readonly functionId: string;
  readonly nextToken?: string;
  readonly maxResults?: number;
}

export interface ListTagsForResource {
  readonly resourceArn: string;
}

export interface ListTypes {
  readonly apiId: string;
  readonly format: string;
  readonly nextToken?: string;
  readonly maxResults?: number;
}

export interface StartSchemaCreation {
  readonly apiId: string;
  readonly definition: unknown;
}

export interface TagResource {
  readonly resourceArn: string;
  readonly tags: {[key: string]: any};
}

export interface UntagResource {
  readonly resourceArn: string;
  readonly tagKeys: [];
}

export interface UpdateApiCache {
  readonly apiId: string;
  readonly ttl: number;
  readonly apiCachingBehavior: string;
  readonly type: string;
}

export interface UpdateApiKey {
  readonly apiId: string;
  readonly id: string;
  readonly description?: string;
  readonly expires?: number;
}

export interface UpdateDataSource {
  readonly apiId: string;
  readonly name: string;
  readonly description?: string;
  readonly type: string;
  readonly serviceRoleArn?: string;
  readonly dynamodbConfig?: DynamodbDataSourceConfig;
  readonly lambdaConfig?: LambdaDataSourceConfig;
  readonly elasticsearchConfig?: ElasticsearchDataSourceConfig;
  readonly openSearchServiceConfig?: OpenSearchServiceDataSourceConfig;
  readonly httpConfig?: HttpDataSourceConfig;
  readonly relationalDatabaseConfig?: RelationalDatabaseDataSourceConfig;
}

export interface UpdateDomainName {
  readonly domainName: string;
  readonly description?: string;
}

export interface UpdateFunction {
  readonly apiId: string;
  readonly name: string;
  readonly description?: string;
  readonly functionId: string;
  readonly dataSourceName: string;
  readonly requestMappingTemplate?: string;
  readonly responseMappingTemplate?: string;
  readonly functionVersion: string;
  readonly syncConfig?: SyncConfig;
}

export interface UpdateGraphqlApi {
  readonly apiId: string;
  readonly name: string;
  readonly logConfig?: LogConfig;
  readonly authenticationType?: string;
  readonly userPoolConfig?: UserPoolConfig;
  readonly openIDConnectConfig?: OpenIDConnectConfig;
  readonly additionalAuthenticationProviders?: [];
  readonly xrayEnabled?: boolean;
  readonly lambdaAuthorizerConfig?: LambdaAuthorizerConfig;
}

export interface UpdateResolver {
  readonly apiId: string;
  readonly typeName: string;
  readonly fieldName: string;
  readonly dataSourceName?: string;
  readonly requestMappingTemplate?: string;
  readonly responseMappingTemplate?: string;
  readonly kind?: string;
  readonly pipelineConfig?: PipelineConfig;
  readonly syncConfig?: SyncConfig;
  readonly cachingConfig?: CachingConfig;
}

export interface UpdateType {
  readonly apiId: string;
  readonly typeName: string;
  readonly definition?: string;
  readonly format: string;
}

export interface AccessDeniedException {
  readonly message?: string;
}

export interface AdditionalAuthenticationProvider {
  readonly authenticationType?: string;
  readonly openIDConnectConfig?: OpenIDConnectConfig;
  readonly userPoolConfig?: CognitoUserPoolConfig;
  readonly lambdaAuthorizerConfig?: LambdaAuthorizerConfig;
}

export interface ApiAssociation {
  readonly domainName?: string;
  readonly apiId?: string;
  readonly associationStatus?: string;
  readonly deploymentDetail?: string;
}

export interface ApiCache {
  readonly ttl?: number;
  readonly apiCachingBehavior?: string;
  readonly transitEncryptionEnabled?: boolean;
  readonly atRestEncryptionEnabled?: boolean;
  readonly type?: string;
  readonly status?: string;
}

export interface ApiKey {
  readonly id?: string;
  readonly description?: string;
  readonly expires?: number;
  readonly deletes?: number;
}

export interface ApiKeyLimitExceededException {
  readonly message?: string;
}

export interface ApiKeyValidityOutOfBoundsException {
  readonly message?: string;
}

export interface ApiLimitExceededException {
  readonly message?: string;
}

export interface AssociateApiRequest {
  readonly domainName: string;
  readonly apiId: string;
}

export interface AssociateApiResponse {
  readonly apiAssociation?: ApiAssociation;
}

export interface AuthorizationConfig {
  readonly authorizationType: string;
  readonly awsIamConfig?: AwsIamConfig;
}

export interface AwsIamConfig {
  readonly signingRegion?: string;
  readonly signingServiceName?: string;
}

export interface BadRequestException {
  readonly message?: string;
}

export interface CachingConfig {
  readonly ttl?: number;
  readonly cachingKeys?: [];
}

export interface CognitoUserPoolConfig {
  readonly userPoolId: string;
  readonly awsRegion: string;
  readonly appIdClientRegex?: string;
}

export interface ConcurrentModificationException {
  readonly message?: string;
}

export interface CreateApiCacheRequest {
  readonly apiId: string;
  readonly ttl: number;
  readonly transitEncryptionEnabled?: boolean;
  readonly atRestEncryptionEnabled?: boolean;
  readonly apiCachingBehavior: string;
  readonly type: string;
}

export interface CreateApiCacheResponse {
  readonly apiCache?: ApiCache;
}

export interface CreateApiKeyRequest {
  readonly apiId: string;
  readonly description?: string;
  readonly expires?: number;
}

export interface CreateApiKeyResponse {
  readonly apiKey?: ApiKey;
}

export interface CreateDataSourceRequest {
  readonly apiId: string;
  readonly name: string;
  readonly description?: string;
  readonly type: string;
  readonly serviceRoleArn?: string;
  readonly dynamodbConfig?: DynamodbDataSourceConfig;
  readonly lambdaConfig?: LambdaDataSourceConfig;
  readonly elasticsearchConfig?: ElasticsearchDataSourceConfig;
  readonly openSearchServiceConfig?: OpenSearchServiceDataSourceConfig;
  readonly httpConfig?: HttpDataSourceConfig;
  readonly relationalDatabaseConfig?: RelationalDatabaseDataSourceConfig;
}

export interface CreateDataSourceResponse {
  readonly dataSource?: DataSource;
}

export interface CreateDomainNameRequest {
  readonly domainName: string;
  readonly certificateArn: string;
  readonly description?: string;
}

export interface CreateDomainNameResponse {
  readonly domainNameConfig?: DomainNameConfig;
}

export interface CreateFunctionRequest {
  readonly apiId: string;
  readonly name: string;
  readonly description?: string;
  readonly dataSourceName: string;
  readonly requestMappingTemplate?: string;
  readonly responseMappingTemplate?: string;
  readonly functionVersion: string;
  readonly syncConfig?: SyncConfig;
}

export interface CreateFunctionResponse {
  readonly functionConfiguration?: FunctionConfiguration;
}

export interface CreateGraphqlApiRequest {
  readonly name: string;
  readonly logConfig?: LogConfig;
  readonly authenticationType: string;
  readonly userPoolConfig?: UserPoolConfig;
  readonly openIDConnectConfig?: OpenIDConnectConfig;
  readonly tags?: {[key: string]: any};
  readonly additionalAuthenticationProviders?: [];
  readonly xrayEnabled?: boolean;
  readonly lambdaAuthorizerConfig?: LambdaAuthorizerConfig;
}

export interface CreateGraphqlApiResponse {
  readonly graphqlApi?: GraphqlApi;
}

export interface CreateResolverRequest {
  readonly apiId: string;
  readonly typeName: string;
  readonly fieldName: string;
  readonly dataSourceName?: string;
  readonly requestMappingTemplate?: string;
  readonly responseMappingTemplate?: string;
  readonly kind?: string;
  readonly pipelineConfig?: PipelineConfig;
  readonly syncConfig?: SyncConfig;
  readonly cachingConfig?: CachingConfig;
}

export interface CreateResolverResponse {
  readonly resolver?: Resolver;
}

export interface CreateTypeRequest {
  readonly apiId: string;
  readonly definition: string;
  readonly format: string;
}

export interface CreateTypeResponse {
  readonly type?: Type;
}

export interface DataSource {
  readonly dataSourceArn?: string;
  readonly name?: string;
  readonly description?: string;
  readonly type?: string;
  readonly serviceRoleArn?: string;
  readonly dynamodbConfig?: DynamodbDataSourceConfig;
  readonly lambdaConfig?: LambdaDataSourceConfig;
  readonly elasticsearchConfig?: ElasticsearchDataSourceConfig;
  readonly openSearchServiceConfig?: OpenSearchServiceDataSourceConfig;
  readonly httpConfig?: HttpDataSourceConfig;
  readonly relationalDatabaseConfig?: RelationalDatabaseDataSourceConfig;
}

export interface DeleteApiCacheRequest {
  readonly apiId: string;
}

export interface DeleteApiCacheResponse {
}

export interface DeleteApiKeyRequest {
  readonly apiId: string;
  readonly id: string;
}

export interface DeleteApiKeyResponse {
}

export interface DeleteDataSourceRequest {
  readonly apiId: string;
  readonly name: string;
}

export interface DeleteDataSourceResponse {
}

export interface DeleteDomainNameRequest {
  readonly domainName: string;
}

export interface DeleteDomainNameResponse {
}

export interface DeleteFunctionRequest {
  readonly apiId: string;
  readonly functionId: string;
}

export interface DeleteFunctionResponse {
}

export interface DeleteGraphqlApiRequest {
  readonly apiId: string;
}

export interface DeleteGraphqlApiResponse {
}

export interface DeleteResolverRequest {
  readonly apiId: string;
  readonly typeName: string;
  readonly fieldName: string;
}

export interface DeleteResolverResponse {
}

export interface DeleteTypeRequest {
  readonly apiId: string;
  readonly typeName: string;
}

export interface DeleteTypeResponse {
}

export interface DeltaSyncConfig {
  readonly baseTableTTL?: number;
  readonly deltaSyncTableName?: string;
  readonly deltaSyncTableTTL?: number;
}

export interface DisassociateApiRequest {
  readonly domainName: string;
}

export interface DisassociateApiResponse {
}

export interface DomainNameConfig {
  readonly domainName?: string;
  readonly description?: string;
  readonly certificateArn?: string;
  readonly appsyncDomainName?: string;
  readonly hostedZoneId?: string;
}

export interface DynamodbDataSourceConfig {
  readonly tableName: string;
  readonly awsRegion: string;
  readonly useCallerCredentials?: boolean;
  readonly deltaSyncConfig?: DeltaSyncConfig;
  readonly versioned?: boolean;
}

export interface ElasticsearchDataSourceConfig {
  readonly endpoint: string;
  readonly awsRegion: string;
}

export interface FlushApiCacheRequest {
  readonly apiId: string;
}

export interface FlushApiCacheResponse {
}

export interface FunctionConfiguration {
  readonly functionId?: string;
  readonly functionArn?: string;
  readonly name?: string;
  readonly description?: string;
  readonly dataSourceName?: string;
  readonly requestMappingTemplate?: string;
  readonly responseMappingTemplate?: string;
  readonly functionVersion?: string;
  readonly syncConfig?: SyncConfig;
}

export interface GetApiAssociationRequest {
  readonly domainName: string;
}

export interface GetApiAssociationResponse {
  readonly apiAssociation?: ApiAssociation;
}

export interface GetApiCacheRequest {
  readonly apiId: string;
}

export interface GetApiCacheResponse {
  readonly apiCache?: ApiCache;
}

export interface GetDataSourceRequest {
  readonly apiId: string;
  readonly name: string;
}

export interface GetDataSourceResponse {
  readonly dataSource?: DataSource;
}

export interface GetDomainNameRequest {
  readonly domainName: string;
}

export interface GetDomainNameResponse {
  readonly domainNameConfig?: DomainNameConfig;
}

export interface GetFunctionRequest {
  readonly apiId: string;
  readonly functionId: string;
}

export interface GetFunctionResponse {
  readonly functionConfiguration?: FunctionConfiguration;
}

export interface GetGraphqlApiRequest {
  readonly apiId: string;
}

export interface GetGraphqlApiResponse {
  readonly graphqlApi?: GraphqlApi;
}

export interface GetIntrospectionSchemaRequest {
  readonly apiId: string;
  readonly format: string;
  readonly includeDirectives?: boolean;
}

export interface GetIntrospectionSchemaResponse {
  readonly schema?: unknown;
}

export interface GetResolverRequest {
  readonly apiId: string;
  readonly typeName: string;
  readonly fieldName: string;
}

export interface GetResolverResponse {
  readonly resolver?: Resolver;
}

export interface GetSchemaCreationStatusRequest {
  readonly apiId: string;
}

export interface GetSchemaCreationStatusResponse {
  readonly status?: string;
  readonly details?: string;
}

export interface GetTypeRequest {
  readonly apiId: string;
  readonly typeName: string;
  readonly format: string;
}

export interface GetTypeResponse {
  readonly type?: Type;
}

export interface GraphQLSchemaException {
  readonly message?: string;
}

export interface GraphqlApi {
  readonly name?: string;
  readonly apiId?: string;
  readonly authenticationType?: string;
  readonly logConfig?: LogConfig;
  readonly userPoolConfig?: UserPoolConfig;
  readonly openIDConnectConfig?: OpenIDConnectConfig;
  readonly arn?: string;
  readonly uris?: {[key: string]: any};
  readonly tags?: {[key: string]: any};
  readonly additionalAuthenticationProviders?: [];
  readonly xrayEnabled?: boolean;
  readonly wafWebAclArn?: string;
  readonly lambdaAuthorizerConfig?: LambdaAuthorizerConfig;
}

export interface HttpDataSourceConfig {
  readonly endpoint?: string;
  readonly authorizationConfig?: AuthorizationConfig;
}

export interface InternalFailureException {
  readonly message?: string;
}

export interface LambdaAuthorizerConfig {
  readonly authorizerResultTtlInSeconds?: number;
  readonly authorizerUri: string;
  readonly identityValidationExpression?: string;
}

export interface LambdaConflictHandlerConfig {
  readonly lambdaConflictHandlerArn?: string;
}

export interface LambdaDataSourceConfig {
  readonly lambdaFunctionArn: string;
}

export interface LimitExceededException {
  readonly message?: string;
}

export interface ListApiKeysRequest {
  readonly apiId: string;
  readonly nextToken?: string;
  readonly maxResults?: number;
}

export interface ListApiKeysResponse {
  readonly apiKeys?: [];
  readonly nextToken?: string;
}

export interface ListDataSourcesRequest {
  readonly apiId: string;
  readonly nextToken?: string;
  readonly maxResults?: number;
}

export interface ListDataSourcesResponse {
  readonly dataSources?: [];
  readonly nextToken?: string;
}

export interface ListDomainNamesRequest {
  readonly nextToken?: string;
  readonly maxResults?: number;
}

export interface ListDomainNamesResponse {
  readonly domainNameConfigs?: [];
  readonly nextToken?: string;
}

export interface ListFunctionsRequest {
  readonly apiId: string;
  readonly nextToken?: string;
  readonly maxResults?: number;
}

export interface ListFunctionsResponse {
  readonly functions?: [];
  readonly nextToken?: string;
}

export interface ListGraphqlApisRequest {
  readonly nextToken?: string;
  readonly maxResults?: number;
}

export interface ListGraphqlApisResponse {
  readonly graphqlApis?: [];
  readonly nextToken?: string;
}

export interface ListResolversByFunctionRequest {
  readonly apiId: string;
  readonly functionId: string;
  readonly nextToken?: string;
  readonly maxResults?: number;
}

export interface ListResolversByFunctionResponse {
  readonly resolvers?: [];
  readonly nextToken?: string;
}

export interface ListResolversRequest {
  readonly apiId: string;
  readonly typeName: string;
  readonly nextToken?: string;
  readonly maxResults?: number;
}

export interface ListResolversResponse {
  readonly resolvers?: [];
  readonly nextToken?: string;
}

export interface ListTagsForResourceRequest {
  readonly resourceArn: string;
}

export interface ListTagsForResourceResponse {
  readonly tags?: {[key: string]: any};
}

export interface ListTypesRequest {
  readonly apiId: string;
  readonly format: string;
  readonly nextToken?: string;
  readonly maxResults?: number;
}

export interface ListTypesResponse {
  readonly types?: [];
  readonly nextToken?: string;
}

export interface LogConfig {
  readonly fieldLogLevel: string;
  readonly cloudWatchLogsRoleArn: string;
  readonly excludeVerboseContent?: boolean;
}

export interface NotFoundException {
  readonly message?: string;
}

export interface OpenIDConnectConfig {
  readonly issuer: string;
  readonly clientId?: string;
  readonly iatTTL?: number;
  readonly authTTL?: number;
}

export interface OpenSearchServiceDataSourceConfig {
  readonly endpoint: string;
  readonly awsRegion: string;
}

export interface PipelineConfig {
  readonly functions?: [];
}

export interface RdsHttpEndpointConfig {
  readonly awsRegion?: string;
  readonly dbClusterIdentifier?: string;
  readonly databaseName?: string;
  readonly schema?: string;
  readonly awsSecretStoreArn?: string;
}

export interface RelationalDatabaseDataSourceConfig {
  readonly relationalDatabaseSourceType?: string;
  readonly rdsHttpEndpointConfig?: RdsHttpEndpointConfig;
}

export interface Resolver {
  readonly typeName?: string;
  readonly fieldName?: string;
  readonly dataSourceName?: string;
  readonly resolverArn?: string;
  readonly requestMappingTemplate?: string;
  readonly responseMappingTemplate?: string;
  readonly kind?: string;
  readonly pipelineConfig?: PipelineConfig;
  readonly syncConfig?: SyncConfig;
  readonly cachingConfig?: CachingConfig;
}

export interface StartSchemaCreationRequest {
  readonly apiId: string;
  readonly definition: unknown;
}

export interface StartSchemaCreationResponse {
  readonly status?: string;
}

export interface SyncConfig {
  readonly conflictHandler?: string;
  readonly conflictDetection?: string;
  readonly lambdaConflictHandlerConfig?: LambdaConflictHandlerConfig;
}

export interface TagResourceRequest {
  readonly resourceArn: string;
  readonly tags: {[key: string]: any};
}

export interface TagResourceResponse {
}

export interface Type {
  readonly name?: string;
  readonly description?: string;
  readonly arn?: string;
  readonly definition?: string;
  readonly format?: string;
}

export interface UnauthorizedException {
  readonly message?: string;
}

export interface UntagResourceRequest {
  readonly resourceArn: string;
  readonly tagKeys: [];
}

export interface UntagResourceResponse {
}

export interface UpdateApiCacheRequest {
  readonly apiId: string;
  readonly ttl: number;
  readonly apiCachingBehavior: string;
  readonly type: string;
}

export interface UpdateApiCacheResponse {
  readonly apiCache?: ApiCache;
}

export interface UpdateApiKeyRequest {
  readonly apiId: string;
  readonly id: string;
  readonly description?: string;
  readonly expires?: number;
}

export interface UpdateApiKeyResponse {
  readonly apiKey?: ApiKey;
}

export interface UpdateDataSourceRequest {
  readonly apiId: string;
  readonly name: string;
  readonly description?: string;
  readonly type: string;
  readonly serviceRoleArn?: string;
  readonly dynamodbConfig?: DynamodbDataSourceConfig;
  readonly lambdaConfig?: LambdaDataSourceConfig;
  readonly elasticsearchConfig?: ElasticsearchDataSourceConfig;
  readonly openSearchServiceConfig?: OpenSearchServiceDataSourceConfig;
  readonly httpConfig?: HttpDataSourceConfig;
  readonly relationalDatabaseConfig?: RelationalDatabaseDataSourceConfig;
}

export interface UpdateDataSourceResponse {
  readonly dataSource?: DataSource;
}

export interface UpdateDomainNameRequest {
  readonly domainName: string;
  readonly description?: string;
}

export interface UpdateDomainNameResponse {
  readonly domainNameConfig?: DomainNameConfig;
}

export interface UpdateFunctionRequest {
  readonly apiId: string;
  readonly name: string;
  readonly description?: string;
  readonly functionId: string;
  readonly dataSourceName: string;
  readonly requestMappingTemplate?: string;
  readonly responseMappingTemplate?: string;
  readonly functionVersion: string;
  readonly syncConfig?: SyncConfig;
}

export interface UpdateFunctionResponse {
  readonly functionConfiguration?: FunctionConfiguration;
}

export interface UpdateGraphqlApiRequest {
  readonly apiId: string;
  readonly name: string;
  readonly logConfig?: LogConfig;
  readonly authenticationType?: string;
  readonly userPoolConfig?: UserPoolConfig;
  readonly openIDConnectConfig?: OpenIDConnectConfig;
  readonly additionalAuthenticationProviders?: [];
  readonly xrayEnabled?: boolean;
  readonly lambdaAuthorizerConfig?: LambdaAuthorizerConfig;
}

export interface UpdateGraphqlApiResponse {
  readonly graphqlApi?: GraphqlApi;
}

export interface UpdateResolverRequest {
  readonly apiId: string;
  readonly typeName: string;
  readonly fieldName: string;
  readonly dataSourceName?: string;
  readonly requestMappingTemplate?: string;
  readonly responseMappingTemplate?: string;
  readonly kind?: string;
  readonly pipelineConfig?: PipelineConfig;
  readonly syncConfig?: SyncConfig;
  readonly cachingConfig?: CachingConfig;
}

export interface UpdateResolverResponse {
  readonly resolver?: Resolver;
}

export interface UpdateTypeRequest {
  readonly apiId: string;
  readonly typeName: string;
  readonly definition?: string;
  readonly format: string;
}

export interface UpdateTypeResponse {
  readonly type?: Type;
}

export interface UserPoolConfig {
  readonly userPoolId: string;
  readonly awsRegion: string;
  readonly defaultAction: string;
  readonly appIdClientRegex?: string;
}


