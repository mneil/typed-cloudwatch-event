/**
 * STOP. This file is autogenerated. DO NOT EDIT by hand
 */
export interface BatchExecuteStatement {
  readonly database: string;
  readonly parameterSets: [];
  readonly resourceArn: string;
  readonly schema: string;
  readonly secretArn: string;
  readonly sql: string;
  readonly transactionId: string;
}
export interface BeginTransaction {
  readonly database: string;
  readonly resourceArn: string;
  readonly schema: string;
  readonly secretArn: string;
}
export interface CommitTransaction {
  readonly resourceArn: string;
  readonly secretArn: string;
  readonly transactionId: string;
}
export interface ExecuteSql {
  readonly awsSecretStoreArn: string;
  readonly database: string;
  readonly dbClusterOrInstanceArn: string;
  readonly schema: string;
  readonly sqlStatements: string;
}
export interface ExecuteStatement {
  readonly continueAfterTimeout: boolean;
  readonly database: string;
  readonly includeResultMetadata: boolean;
  readonly parameters: [];
  readonly resourceArn: string;
  readonly resultSetOptions: ResultSetOptions;
  readonly schema: string;
  readonly secretArn: string;
  readonly sql: string;
  readonly transactionId: string;
}
export interface RollbackTransaction {
  readonly resourceArn: string;
  readonly secretArn: string;
  readonly transactionId: string;
}



interface ArrayValue {
  readonly arrayValues: [];
  readonly booleanValues: [];
  readonly doubleValues: [];
  readonly longValues: [];
  readonly stringValues: [];
}

interface BadRequestException {
  readonly message: string;
}

interface BatchExecuteStatementRequest {
  readonly database: string;
  readonly parameterSets: [];
  readonly resourceArn: string;
  readonly schema: string;
  readonly secretArn: string;
  readonly sql: string;
  readonly transactionId: string;
}

interface BatchExecuteStatementResponse {
  readonly updateResults: [];
}

interface BeginTransactionRequest {
  readonly database: string;
  readonly resourceArn: string;
  readonly schema: string;
  readonly secretArn: string;
}

interface BeginTransactionResponse {
  readonly transactionId: string;
}

interface ColumnMetadata {
  readonly arrayBaseColumnType: number;
  readonly isAutoIncrement: boolean;
  readonly isCaseSensitive: boolean;
  readonly isCurrency: boolean;
  readonly isSigned: boolean;
  readonly label: string;
  readonly name: string;
  readonly nullable: number;
  readonly precision: number;
  readonly scale: number;
  readonly schemaName: string;
  readonly tableName: string;
  readonly type: number;
  readonly typeName: string;
}

interface CommitTransactionRequest {
  readonly resourceArn: string;
  readonly secretArn: string;
  readonly transactionId: string;
}

interface CommitTransactionResponse {
  readonly transactionStatus: string;
}

interface ExecuteSqlRequest {
  readonly awsSecretStoreArn: string;
  readonly database: string;
  readonly dbClusterOrInstanceArn: string;
  readonly schema: string;
  readonly sqlStatements: string;
}

interface ExecuteSqlResponse {
  readonly sqlStatementResults: [];
}

interface ExecuteStatementRequest {
  readonly continueAfterTimeout: boolean;
  readonly database: string;
  readonly includeResultMetadata: boolean;
  readonly parameters: [];
  readonly resourceArn: string;
  readonly resultSetOptions: ResultSetOptions;
  readonly schema: string;
  readonly secretArn: string;
  readonly sql: string;
  readonly transactionId: string;
}

interface ExecuteStatementResponse {
  readonly columnMetadata: [];
  readonly generatedFields: [];
  readonly numberOfRecordsUpdated: number;
  readonly records: [];
}

interface Field {
  readonly arrayValue: ArrayValue;
  readonly blobValue: unknown;
  readonly booleanValue: boolean;
  readonly doubleValue: unknown;
  readonly isNull: boolean;
  readonly longValue: number;
  readonly stringValue: string;
}

interface ForbiddenException {
  readonly message: string;
}

interface InternalServerErrorException {
}

interface NotFoundException {
  readonly message: string;
}

interface Record {
  readonly values: [];
}

interface ResultFrame {
  readonly records: [];
  readonly resultSetMetadata: ResultSetMetadata;
}

interface ResultSetMetadata {
  readonly columnCount: number;
  readonly columnMetadata: [];
}

interface ResultSetOptions {
  readonly decimalReturnType: string;
}

interface RollbackTransactionRequest {
  readonly resourceArn: string;
  readonly secretArn: string;
  readonly transactionId: string;
}

interface RollbackTransactionResponse {
  readonly transactionStatus: string;
}

interface ServiceUnavailableError {
}

interface SqlParameter {
  readonly name: string;
  readonly typeHint: string;
  readonly value: Field;
}

interface SqlStatementResult {
  readonly numberOfRecordsUpdated: number;
  readonly resultFrame: ResultFrame;
}

interface StatementTimeoutException {
  readonly dbConnectionId: number;
  readonly message: string;
}

interface StructValue {
  readonly attributes: [];
}

interface UpdateResult {
  readonly generatedFields: [];
}

interface Value {
  readonly arrayValues: [];
  readonly bigIntValue: number;
  readonly bitValue: boolean;
  readonly blobValue: unknown;
  readonly doubleValue: unknown;
  readonly intValue: number;
  readonly isNull: boolean;
  readonly realValue: unknown;
  readonly stringValue: string;
  readonly structValue: StructValue;
}

