/**
 * STOP. This file is autogenerated. DO NOT EDIT by hand
 */
export interface BatchExecuteStatement {
  readonly database?: string;
  readonly parameterSets?: [];
  readonly resourceArn: string;
  readonly schema?: string;
  readonly secretArn: string;
  readonly sql: string;
  readonly transactionId?: string;
}

export interface BeginTransaction {
  readonly database?: string;
  readonly resourceArn: string;
  readonly schema?: string;
  readonly secretArn: string;
}

export interface CommitTransaction {
  readonly resourceArn: string;
  readonly secretArn: string;
  readonly transactionId: string;
}

export interface ExecuteSql {
  readonly awsSecretStoreArn: string;
  readonly database?: string;
  readonly dbClusterOrInstanceArn: string;
  readonly schema?: string;
  readonly sqlStatements: string;
}

export interface ExecuteStatement {
  readonly continueAfterTimeout?: boolean;
  readonly database?: string;
  readonly includeResultMetadata?: boolean;
  readonly parameters?: [];
  readonly resourceArn: string;
  readonly resultSetOptions?: ResultSetOptions;
  readonly schema?: string;
  readonly secretArn: string;
  readonly sql: string;
  readonly transactionId?: string;
}

export interface RollbackTransaction {
  readonly resourceArn: string;
  readonly secretArn: string;
  readonly transactionId: string;
}

export interface ArrayValue {
  readonly arrayValues?: [];
  readonly booleanValues?: [];
  readonly doubleValues?: [];
  readonly longValues?: [];
  readonly stringValues?: [];
}

export interface BadRequestException {
  readonly message?: string;
}

export interface BatchExecuteStatementRequest {
  readonly database?: string;
  readonly parameterSets?: [];
  readonly resourceArn: string;
  readonly schema?: string;
  readonly secretArn: string;
  readonly sql: string;
  readonly transactionId?: string;
}

export interface BatchExecuteStatementResponse {
  readonly updateResults?: [];
}

export interface BeginTransactionRequest {
  readonly database?: string;
  readonly resourceArn: string;
  readonly schema?: string;
  readonly secretArn: string;
}

export interface BeginTransactionResponse {
  readonly transactionId?: string;
}

export interface ColumnMetadata {
  readonly arrayBaseColumnType?: number;
  readonly isAutoIncrement?: boolean;
  readonly isCaseSensitive?: boolean;
  readonly isCurrency?: boolean;
  readonly isSigned?: boolean;
  readonly label?: string;
  readonly name?: string;
  readonly nullable?: number;
  readonly precision?: number;
  readonly scale?: number;
  readonly schemaName?: string;
  readonly tableName?: string;
  readonly type?: number;
  readonly typeName?: string;
}

export interface CommitTransactionRequest {
  readonly resourceArn: string;
  readonly secretArn: string;
  readonly transactionId: string;
}

export interface CommitTransactionResponse {
  readonly transactionStatus?: string;
}

export interface ExecuteSqlRequest {
  readonly awsSecretStoreArn: string;
  readonly database?: string;
  readonly dbClusterOrInstanceArn: string;
  readonly schema?: string;
  readonly sqlStatements: string;
}

export interface ExecuteSqlResponse {
  readonly sqlStatementResults?: [];
}

export interface ExecuteStatementRequest {
  readonly continueAfterTimeout?: boolean;
  readonly database?: string;
  readonly includeResultMetadata?: boolean;
  readonly parameters?: [];
  readonly resourceArn: string;
  readonly resultSetOptions?: ResultSetOptions;
  readonly schema?: string;
  readonly secretArn: string;
  readonly sql: string;
  readonly transactionId?: string;
}

export interface ExecuteStatementResponse {
  readonly columnMetadata?: [];
  readonly generatedFields?: [];
  readonly numberOfRecordsUpdated?: number;
  readonly records?: [];
}

export interface Field {
  readonly arrayValue?: ArrayValue;
  readonly blobValue?: unknown;
  readonly booleanValue?: boolean;
  readonly doubleValue?: unknown;
  readonly isNull?: boolean;
  readonly longValue?: number;
  readonly stringValue?: string;
}

export interface ForbiddenException {
  readonly message?: string;
}

export interface InternalServerErrorException {
}

export interface NotFoundException {
  readonly message?: string;
}

export interface Record {
  readonly values?: [];
}

export interface ResultFrame {
  readonly records?: [];
  readonly resultSetMetadata?: ResultSetMetadata;
}

export interface ResultSetMetadata {
  readonly columnCount?: number;
  readonly columnMetadata?: [];
}

export interface ResultSetOptions {
  readonly decimalReturnType?: string;
}

export interface RollbackTransactionRequest {
  readonly resourceArn: string;
  readonly secretArn: string;
  readonly transactionId: string;
}

export interface RollbackTransactionResponse {
  readonly transactionStatus?: string;
}

export interface ServiceUnavailableError {
}

export interface SqlParameter {
  readonly name?: string;
  readonly typeHint?: string;
  readonly value?: Field;
}

export interface SqlStatementResult {
  readonly numberOfRecordsUpdated?: number;
  readonly resultFrame?: ResultFrame;
}

export interface StatementTimeoutException {
  readonly dbConnectionId?: number;
  readonly message?: string;
}

export interface StructValue {
  readonly attributes?: [];
}

export interface UpdateResult {
  readonly generatedFields?: [];
}

export interface Value {
  readonly arrayValues?: [];
  readonly bigIntValue?: number;
  readonly bitValue?: boolean;
  readonly blobValue?: unknown;
  readonly doubleValue?: unknown;
  readonly intValue?: number;
  readonly isNull?: boolean;
  readonly realValue?: unknown;
  readonly stringValue?: string;
  readonly structValue?: StructValue;
}


