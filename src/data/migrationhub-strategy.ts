/**
 * STOP. This file is autogenerated. DO NOT EDIT by hand
 */
export interface GetApplicationComponentDetails {
  readonly applicationComponentId: string;
}
export interface GetApplicationComponentStrategies {
  readonly applicationComponentId: string;
}
export interface GetAssessment {
  readonly id: string;
}
export interface GetImportFileTask {
  readonly id: string;
}
export interface GetPortfolioPreferences {
}
export interface GetPortfolioSummary {
}
export interface GetRecommendationReportDetails {
  readonly id: string;
}
export interface GetServerDetails {
  readonly maxResults?: number;
  readonly nextToken?: string;
  readonly serverId: string;
}
export interface GetServerStrategies {
  readonly serverId: string;
}
export interface ListApplicationComponents {
  readonly applicationComponentCriteria?: string;
  readonly filterValue?: string;
  readonly groupIdFilter?: [];
  readonly maxResults?: number;
  readonly nextToken?: string;
  readonly sort?: string;
}
export interface ListCollectors {
  readonly maxResults?: number;
  readonly nextToken?: string;
}
export interface ListImportFileTask {
  readonly maxResults?: number;
  readonly nextToken?: string;
}
export interface ListServers {
  readonly filterValue?: string;
  readonly groupIdFilter?: [];
  readonly maxResults?: number;
  readonly nextToken?: string;
  readonly serverCriteria?: string;
  readonly sort?: string;
}
export interface PutPortfolioPreferences {
  readonly applicationPreferences?: ApplicationPreferences;
  readonly databasePreferences?: DatabasePreferences;
  readonly prioritizeBusinessGoals?: PrioritizeBusinessGoals;
}
export interface StartAssessment {
  readonly s3bucketForAnalysisData?: string;
  readonly s3bucketForReportData?: string;
}
export interface StartImportFileTask {
  readonly S3Bucket: string;
  readonly dataSourceType?: string;
  readonly groupId?: [];
  readonly name: string;
  readonly s3bucketForReportData?: string;
  readonly s3key: string;
}
export interface StartRecommendationReportGeneration {
  readonly groupIdFilter?: [];
  readonly outputFormat?: string;
}
export interface StopAssessment {
  readonly assessmentId: string;
}
export interface UpdateApplicationComponentConfig {
  readonly applicationComponentId: string;
  readonly inclusionStatus?: string;
  readonly secretsManagerKey?: string;
  readonly sourceCodeList?: [];
  readonly strategyOption?: StrategyOption;
}
export interface UpdateServerConfig {
  readonly serverId: string;
  readonly strategyOption?: StrategyOption;
}



interface AccessDeniedException {
  readonly message: string;
}

interface AntipatternSeveritySummary {
  readonly count: number;
  readonly severity: string;
}

interface ApplicationComponentDetail {
  readonly analysisStatus: string;
  readonly antipatternReportS3Object: S3Object;
  readonly antipatternReportStatus: string;
  readonly antipatternReportStatusMessage: string;
  readonly appType: string;
  readonly associatedServerId: string;
  readonly databaseConfigDetail: DatabaseConfigDetail;
  readonly id: string;
  readonly inclusionStatus: string;
  readonly lastAnalyzedTimestamp: Date;
  readonly listAntipatternSeveritySummary: [];
  readonly moreServerAssociationExists: boolean;
  readonly name: string;
  readonly osDriver: string;
  readonly osVersion: string;
  readonly recommendationSet: RecommendationSet;
  readonly resourceSubType: string;
  readonly sourceCodeRepositories: [];
  readonly statusMessage: string;
}

interface ApplicationComponentStrategy {
  readonly isPreferred: boolean;
  readonly recommendation: RecommendationSet;
  readonly status: string;
}

interface ApplicationComponentSummary {
  readonly appType: string;
  readonly count: number;
}

interface ApplicationPreferences {
  readonly managementPreference: ManagementPreference;
}

interface AssessmentSummary {
  readonly antipatternReportS3Object: S3Object;
  readonly antipatternReportStatus: string;
  readonly antipatternReportStatusMessage: string;
  readonly lastAnalyzedTimestamp: Date;
  readonly listAntipatternSeveritySummary: [];
  readonly listApplicationComponentStrategySummary: [];
  readonly listApplicationComponentSummary: [];
  readonly listServerStrategySummary: [];
  readonly listServerSummary: [];
}

interface AssociatedApplication {
  readonly id: string;
  readonly name: string;
}

interface AwsManagedResources {
  readonly targetDestination: [];
}

interface BusinessGoals {
  readonly licenseCostReduction: number;
  readonly modernizeInfrastructureWithCloudNativeTechnologies: number;
  readonly reduceOperationalOverheadWithManagedServices: number;
  readonly speedOfMigration: number;
}

interface Collector {
  readonly collectorHealth: string;
  readonly collectorId: string;
  readonly collectorVersion: string;
  readonly hostName: string;
  readonly ipAddress: string;
  readonly lastActivityTimeStamp: string;
  readonly registeredTimeStamp: string;
}

interface ConflictException {
  readonly message: string;
}

interface DataCollectionDetails {
  readonly completionTime: Date;
  readonly failed: number;
  readonly inProgress: number;
  readonly servers: number;
  readonly startTime: Date;
  readonly status: string;
  readonly success: number;
}

interface DatabaseConfigDetail {
  readonly secretName: string;
}

interface DatabaseMigrationPreference {
  readonly heterogeneous: Heterogeneous;
  readonly homogeneous: Homogeneous;
  readonly noPreference: NoDatabaseMigrationPreference;
}

interface DatabasePreferences {
  readonly databaseManagementPreference: string;
  readonly databaseMigrationPreference: DatabaseMigrationPreference;
}

interface GetApplicationComponentDetailsRequest {
  readonly applicationComponentId: string;
}

interface GetApplicationComponentDetailsResponse {
  readonly applicationComponentDetail: ApplicationComponentDetail;
  readonly associatedApplications: [];
  readonly associatedServerIds: [];
  readonly moreApplicationResource: boolean;
}

interface GetApplicationComponentStrategiesRequest {
  readonly applicationComponentId: string;
}

interface GetApplicationComponentStrategiesResponse {
  readonly applicationComponentStrategies: [];
}

interface GetAssessmentRequest {
  readonly id: string;
}

interface GetAssessmentResponse {
  readonly dataCollectionDetails: DataCollectionDetails;
  readonly id: string;
}

interface GetImportFileTaskRequest {
  readonly id: string;
}

interface GetImportFileTaskResponse {
  readonly completionTime: Date;
  readonly id: string;
  readonly importName: string;
  readonly inputS3Bucket: string;
  readonly inputS3Key: string;
  readonly numberOfRecordsFailed: number;
  readonly numberOfRecordsSuccess: number;
  readonly startTime: Date;
  readonly status: string;
  readonly statusReportS3Bucket: string;
  readonly statusReportS3Key: string;
}

interface GetPortfolioPreferencesRequest {
}

interface GetPortfolioPreferencesResponse {
  readonly applicationPreferences: ApplicationPreferences;
  readonly databasePreferences: DatabasePreferences;
  readonly prioritizeBusinessGoals: PrioritizeBusinessGoals;
}

interface GetPortfolioSummaryRequest {
}

interface GetPortfolioSummaryResponse {
  readonly assessmentSummary: AssessmentSummary;
}

interface GetRecommendationReportDetailsRequest {
  readonly id: string;
}

interface GetRecommendationReportDetailsResponse {
  readonly id: string;
  readonly recommendationReportDetails: RecommendationReportDetails;
}

interface GetServerDetailsRequest {
  readonly maxResults: number;
  readonly nextToken: string;
  readonly serverId: string;
}

interface GetServerDetailsResponse {
  readonly associatedApplications: [];
  readonly nextToken: string;
  readonly serverDetail: ServerDetail;
}

interface GetServerStrategiesRequest {
  readonly serverId: string;
}

interface GetServerStrategiesResponse {
  readonly serverStrategies: [];
}

interface Group {
  readonly name: string;
  readonly value: string;
}

interface Heterogeneous {
  readonly targetDatabaseEngine: [];
}

interface Homogeneous {
  readonly targetDatabaseEngine: [];
}

interface ImportFileTaskInformation {
  readonly completionTime: Date;
  readonly id: string;
  readonly importName: string;
  readonly inputS3Bucket: string;
  readonly inputS3Key: string;
  readonly numberOfRecordsFailed: number;
  readonly numberOfRecordsSuccess: number;
  readonly startTime: Date;
  readonly status: string;
  readonly statusReportS3Bucket: string;
  readonly statusReportS3Key: string;
}

interface InternalServerException {
  readonly message: string;
}

interface ListApplicationComponentsRequest {
  readonly applicationComponentCriteria: string;
  readonly filterValue: string;
  readonly groupIdFilter: [];
  readonly maxResults: number;
  readonly nextToken: string;
  readonly sort: string;
}

interface ListApplicationComponentsResponse {
  readonly applicationComponentInfos: [];
  readonly nextToken: string;
}

interface ListCollectorsRequest {
  readonly maxResults: number;
  readonly nextToken: string;
}

interface ListCollectorsResponse {
  readonly Collectors: [];
  readonly nextToken: string;
}

interface ListImportFileTaskRequest {
  readonly maxResults: number;
  readonly nextToken: string;
}

interface ListImportFileTaskResponse {
  readonly nextToken: string;
  readonly taskInfos: [];
}

interface ListServersRequest {
  readonly filterValue: string;
  readonly groupIdFilter: [];
  readonly maxResults: number;
  readonly nextToken: string;
  readonly serverCriteria: string;
  readonly sort: string;
}

interface ListServersResponse {
  readonly nextToken: string;
  readonly serverInfos: [];
}

interface ManagementPreference {
  readonly awsManagedResources: AwsManagedResources;
  readonly noPreference: NoManagementPreference;
  readonly selfManageResources: SelfManageResources;
}

interface NetworkInfo {
  readonly interfaceName: string;
  readonly ipAddress: string;
  readonly macAddress: string;
  readonly netMask: string;
}

interface NoDatabaseMigrationPreference {
  readonly targetDatabaseEngine: [];
}

interface NoManagementPreference {
  readonly targetDestination: [];
}

interface OSInfo {
  readonly type: string;
  readonly version: string;
}

interface PrioritizeBusinessGoals {
  readonly businessGoals: BusinessGoals;
}

interface PutPortfolioPreferencesRequest {
  readonly applicationPreferences: ApplicationPreferences;
  readonly databasePreferences: DatabasePreferences;
  readonly prioritizeBusinessGoals: PrioritizeBusinessGoals;
}

interface PutPortfolioPreferencesResponse {
}

interface RecommendationReportDetails {
  readonly completionTime: Date;
  readonly s3Bucket: string;
  readonly s3Keys: [];
  readonly startTime: Date;
  readonly status: string;
  readonly statusMessage: string;
}

interface RecommendationSet {
  readonly strategy: string;
  readonly targetDestination: string;
  readonly transformationTool: TransformationTool;
}

interface ResourceNotFoundException {
  readonly message: string;
}

interface S3Object {
  readonly s3Bucket: string;
  readonly s3key: string;
}

interface SelfManageResources {
  readonly targetDestination: [];
}

interface ServerDetail {
  readonly antipatternReportS3Object: S3Object;
  readonly antipatternReportStatus: string;
  readonly antipatternReportStatusMessage: string;
  readonly applicationComponentStrategySummary: [];
  readonly dataCollectionStatus: string;
  readonly id: string;
  readonly lastAnalyzedTimestamp: Date;
  readonly listAntipatternSeveritySummary: [];
  readonly name: string;
  readonly recommendationSet: RecommendationSet;
  readonly serverType: string;
  readonly statusMessage: string;
  readonly systemInfo: SystemInfo;
}

interface ServerStrategy {
  readonly isPreferred: boolean;
  readonly numberOfApplicationComponents: number;
  readonly recommendation: RecommendationSet;
  readonly status: string;
}

interface ServerSummary {
  readonly ServerOsType: string;
  readonly count: number;
}

interface ServiceLinkedRoleLockClientException {
  readonly message: string;
}

interface ServiceQuotaExceededException {
  readonly message: string;
}

interface SourceCode {
  readonly location: string;
  readonly sourceVersion: string;
  readonly versionControl: string;
}

interface SourceCodeRepository {
  readonly branch: string;
  readonly repository: string;
  readonly versionControlType: string;
}

interface StartAssessmentRequest {
  readonly s3bucketForAnalysisData: string;
  readonly s3bucketForReportData: string;
}

interface StartAssessmentResponse {
  readonly assessmentId: string;
}

interface StartImportFileTaskRequest {
  readonly S3Bucket: string;
  readonly dataSourceType: string;
  readonly groupId: [];
  readonly name: string;
  readonly s3bucketForReportData: string;
  readonly s3key: string;
}

interface StartImportFileTaskResponse {
  readonly id: string;
}

interface StartRecommendationReportGenerationRequest {
  readonly groupIdFilter: [];
  readonly outputFormat: string;
}

interface StartRecommendationReportGenerationResponse {
  readonly id: string;
}

interface StopAssessmentRequest {
  readonly assessmentId: string;
}

interface StopAssessmentResponse {
}

interface StrategyOption {
  readonly isPreferred: boolean;
  readonly strategy: string;
  readonly targetDestination: string;
  readonly toolName: string;
}

interface StrategySummary {
  readonly count: number;
  readonly strategy: string;
}

interface SystemInfo {
  readonly cpuArchitecture: string;
  readonly fileSystemType: string;
  readonly networkInfoList: [];
  readonly osInfo: OSInfo;
}

interface ThrottlingException {
  readonly message: string;
}

interface TransformationTool {
  readonly description: string;
  readonly name: string;
  readonly tranformationToolInstallationLink: string;
}

interface UpdateApplicationComponentConfigRequest {
  readonly applicationComponentId: string;
  readonly inclusionStatus: string;
  readonly secretsManagerKey: string;
  readonly sourceCodeList: [];
  readonly strategyOption: StrategyOption;
}

interface UpdateApplicationComponentConfigResponse {
}

interface UpdateServerConfigRequest {
  readonly serverId: string;
  readonly strategyOption: StrategyOption;
}

interface UpdateServerConfigResponse {
}

interface ValidationException {
  readonly message: string;
}

