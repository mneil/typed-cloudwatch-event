/**
 * STOP. This file is autogenerated. DO NOT EDIT by hand
 */
export interface GetApplicationComponentDetails {
  readonly applicationComponentId: string;
}

export interface GetApplicationComponentStrategies {
  readonly applicationComponentId: string;
}

export interface GetAssessment {
  readonly id: string;
}

export interface GetImportFileTask {
  readonly id: string;
}

export interface GetPortfolioPreferences {
}

export interface GetPortfolioSummary {
}

export interface GetRecommendationReportDetails {
  readonly id: string;
}

export interface GetServerDetails {
  readonly maxResults?: number;
  readonly nextToken?: string;
  readonly serverId: string;
}

export interface GetServerStrategies {
  readonly serverId: string;
}

export interface ListApplicationComponents {
  readonly applicationComponentCriteria?: string;
  readonly filterValue?: string;
  readonly groupIdFilter?: [];
  readonly maxResults?: number;
  readonly nextToken?: string;
  readonly sort?: string;
}

export interface ListCollectors {
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface ListImportFileTask {
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface ListServers {
  readonly filterValue?: string;
  readonly groupIdFilter?: [];
  readonly maxResults?: number;
  readonly nextToken?: string;
  readonly serverCriteria?: string;
  readonly sort?: string;
}

export interface PutPortfolioPreferences {
  readonly applicationPreferences?: ApplicationPreferences;
  readonly databasePreferences?: DatabasePreferences;
  readonly prioritizeBusinessGoals?: PrioritizeBusinessGoals;
}

export interface StartAssessment {
  readonly s3bucketForAnalysisData?: string;
  readonly s3bucketForReportData?: string;
}

export interface StartImportFileTask {
  readonly S3Bucket: string;
  readonly dataSourceType?: string;
  readonly groupId?: [];
  readonly name: string;
  readonly s3bucketForReportData?: string;
  readonly s3key: string;
}

export interface StartRecommendationReportGeneration {
  readonly groupIdFilter?: [];
  readonly outputFormat?: string;
}

export interface StopAssessment {
  readonly assessmentId: string;
}

export interface UpdateApplicationComponentConfig {
  readonly applicationComponentId: string;
  readonly inclusionStatus?: string;
  readonly secretsManagerKey?: string;
  readonly sourceCodeList?: [];
  readonly strategyOption?: StrategyOption;
}

export interface UpdateServerConfig {
  readonly serverId: string;
  readonly strategyOption?: StrategyOption;
}

export interface AccessDeniedException {
  readonly message: string;
}

export interface AntipatternSeveritySummary {
  readonly count?: number;
  readonly severity?: string;
}

export interface ApplicationComponentDetail {
  readonly analysisStatus?: string;
  readonly antipatternReportS3Object?: S3Object;
  readonly antipatternReportStatus?: string;
  readonly antipatternReportStatusMessage?: string;
  readonly appType?: string;
  readonly associatedServerId?: string;
  readonly databaseConfigDetail?: DatabaseConfigDetail;
  readonly id?: string;
  readonly inclusionStatus?: string;
  readonly lastAnalyzedTimestamp?: Date;
  readonly listAntipatternSeveritySummary?: [];
  readonly moreServerAssociationExists?: boolean;
  readonly name?: string;
  readonly osDriver?: string;
  readonly osVersion?: string;
  readonly recommendationSet?: RecommendationSet;
  readonly resourceSubType?: string;
  readonly sourceCodeRepositories?: [];
  readonly statusMessage?: string;
}

export interface ApplicationComponentStrategy {
  readonly isPreferred?: boolean;
  readonly recommendation?: RecommendationSet;
  readonly status?: string;
}

export interface ApplicationComponentSummary {
  readonly appType?: string;
  readonly count?: number;
}

export interface ApplicationPreferences {
  readonly managementPreference?: ManagementPreference;
}

export interface AssessmentSummary {
  readonly antipatternReportS3Object?: S3Object;
  readonly antipatternReportStatus?: string;
  readonly antipatternReportStatusMessage?: string;
  readonly lastAnalyzedTimestamp?: Date;
  readonly listAntipatternSeveritySummary?: [];
  readonly listApplicationComponentStrategySummary?: [];
  readonly listApplicationComponentSummary?: [];
  readonly listServerStrategySummary?: [];
  readonly listServerSummary?: [];
}

export interface AssociatedApplication {
  readonly id?: string;
  readonly name?: string;
}

export interface AwsManagedResources {
  readonly targetDestination: [];
}

export interface BusinessGoals {
  readonly licenseCostReduction?: number;
  readonly modernizeInfrastructureWithCloudNativeTechnologies?: number;
  readonly reduceOperationalOverheadWithManagedServices?: number;
  readonly speedOfMigration?: number;
}

export interface Collector {
  readonly collectorHealth?: string;
  readonly collectorId?: string;
  readonly collectorVersion?: string;
  readonly hostName?: string;
  readonly ipAddress?: string;
  readonly lastActivityTimeStamp?: string;
  readonly registeredTimeStamp?: string;
}

export interface ConflictException {
  readonly message: string;
}

export interface DataCollectionDetails {
  readonly completionTime?: Date;
  readonly failed?: number;
  readonly inProgress?: number;
  readonly servers?: number;
  readonly startTime?: Date;
  readonly status?: string;
  readonly success?: number;
}

export interface DatabaseConfigDetail {
  readonly secretName?: string;
}

export interface DatabaseMigrationPreference {
  readonly heterogeneous?: Heterogeneous;
  readonly homogeneous?: Homogeneous;
  readonly noPreference?: NoDatabaseMigrationPreference;
}

export interface DatabasePreferences {
  readonly databaseManagementPreference?: string;
  readonly databaseMigrationPreference?: DatabaseMigrationPreference;
}

export interface GetApplicationComponentDetailsRequest {
  readonly applicationComponentId: string;
}

export interface GetApplicationComponentDetailsResponse {
  readonly applicationComponentDetail?: ApplicationComponentDetail;
  readonly associatedApplications?: [];
  readonly associatedServerIds?: [];
  readonly moreApplicationResource?: boolean;
}

export interface GetApplicationComponentStrategiesRequest {
  readonly applicationComponentId: string;
}

export interface GetApplicationComponentStrategiesResponse {
  readonly applicationComponentStrategies?: [];
}

export interface GetAssessmentRequest {
  readonly id: string;
}

export interface GetAssessmentResponse {
  readonly dataCollectionDetails?: DataCollectionDetails;
  readonly id?: string;
}

export interface GetImportFileTaskRequest {
  readonly id: string;
}

export interface GetImportFileTaskResponse {
  readonly completionTime?: Date;
  readonly id?: string;
  readonly importName?: string;
  readonly inputS3Bucket?: string;
  readonly inputS3Key?: string;
  readonly numberOfRecordsFailed?: number;
  readonly numberOfRecordsSuccess?: number;
  readonly startTime?: Date;
  readonly status?: string;
  readonly statusReportS3Bucket?: string;
  readonly statusReportS3Key?: string;
}

export interface GetPortfolioPreferencesRequest {
}

export interface GetPortfolioPreferencesResponse {
  readonly applicationPreferences?: ApplicationPreferences;
  readonly databasePreferences?: DatabasePreferences;
  readonly prioritizeBusinessGoals?: PrioritizeBusinessGoals;
}

export interface GetPortfolioSummaryRequest {
}

export interface GetPortfolioSummaryResponse {
  readonly assessmentSummary?: AssessmentSummary;
}

export interface GetRecommendationReportDetailsRequest {
  readonly id: string;
}

export interface GetRecommendationReportDetailsResponse {
  readonly id?: string;
  readonly recommendationReportDetails?: RecommendationReportDetails;
}

export interface GetServerDetailsRequest {
  readonly maxResults?: number;
  readonly nextToken?: string;
  readonly serverId: string;
}

export interface GetServerDetailsResponse {
  readonly associatedApplications?: [];
  readonly nextToken?: string;
  readonly serverDetail?: ServerDetail;
}

export interface GetServerStrategiesRequest {
  readonly serverId: string;
}

export interface GetServerStrategiesResponse {
  readonly serverStrategies?: [];
}

export interface Group {
  readonly name?: string;
  readonly value?: string;
}

export interface Heterogeneous {
  readonly targetDatabaseEngine: [];
}

export interface Homogeneous {
  readonly targetDatabaseEngine?: [];
}

export interface ImportFileTaskInformation {
  readonly completionTime?: Date;
  readonly id?: string;
  readonly importName?: string;
  readonly inputS3Bucket?: string;
  readonly inputS3Key?: string;
  readonly numberOfRecordsFailed?: number;
  readonly numberOfRecordsSuccess?: number;
  readonly startTime?: Date;
  readonly status?: string;
  readonly statusReportS3Bucket?: string;
  readonly statusReportS3Key?: string;
}

export interface InternalServerException {
  readonly message?: string;
}

export interface ListApplicationComponentsRequest {
  readonly applicationComponentCriteria?: string;
  readonly filterValue?: string;
  readonly groupIdFilter?: [];
  readonly maxResults?: number;
  readonly nextToken?: string;
  readonly sort?: string;
}

export interface ListApplicationComponentsResponse {
  readonly applicationComponentInfos?: [];
  readonly nextToken?: string;
}

export interface ListCollectorsRequest {
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface ListCollectorsResponse {
  readonly Collectors?: [];
  readonly nextToken?: string;
}

export interface ListImportFileTaskRequest {
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface ListImportFileTaskResponse {
  readonly nextToken?: string;
  readonly taskInfos?: [];
}

export interface ListServersRequest {
  readonly filterValue?: string;
  readonly groupIdFilter?: [];
  readonly maxResults?: number;
  readonly nextToken?: string;
  readonly serverCriteria?: string;
  readonly sort?: string;
}

export interface ListServersResponse {
  readonly nextToken?: string;
  readonly serverInfos?: [];
}

export interface ManagementPreference {
  readonly awsManagedResources?: AwsManagedResources;
  readonly noPreference?: NoManagementPreference;
  readonly selfManageResources?: SelfManageResources;
}

export interface NetworkInfo {
  readonly interfaceName: string;
  readonly ipAddress: string;
  readonly macAddress: string;
  readonly netMask: string;
}

export interface NoDatabaseMigrationPreference {
  readonly targetDatabaseEngine: [];
}

export interface NoManagementPreference {
  readonly targetDestination: [];
}

export interface OSInfo {
  readonly type?: string;
  readonly version?: string;
}

export interface PrioritizeBusinessGoals {
  readonly businessGoals?: BusinessGoals;
}

export interface PutPortfolioPreferencesRequest {
  readonly applicationPreferences?: ApplicationPreferences;
  readonly databasePreferences?: DatabasePreferences;
  readonly prioritizeBusinessGoals?: PrioritizeBusinessGoals;
}

export interface PutPortfolioPreferencesResponse {
}

export interface RecommendationReportDetails {
  readonly completionTime?: Date;
  readonly s3Bucket?: string;
  readonly s3Keys?: [];
  readonly startTime?: Date;
  readonly status?: string;
  readonly statusMessage?: string;
}

export interface RecommendationSet {
  readonly strategy?: string;
  readonly targetDestination?: string;
  readonly transformationTool?: TransformationTool;
}

export interface ResourceNotFoundException {
  readonly message?: string;
}

export interface S3Object {
  readonly s3Bucket?: string;
  readonly s3key?: string;
}

export interface SelfManageResources {
  readonly targetDestination: [];
}

export interface ServerDetail {
  readonly antipatternReportS3Object?: S3Object;
  readonly antipatternReportStatus?: string;
  readonly antipatternReportStatusMessage?: string;
  readonly applicationComponentStrategySummary?: [];
  readonly dataCollectionStatus?: string;
  readonly id?: string;
  readonly lastAnalyzedTimestamp?: Date;
  readonly listAntipatternSeveritySummary?: [];
  readonly name?: string;
  readonly recommendationSet?: RecommendationSet;
  readonly serverType?: string;
  readonly statusMessage?: string;
  readonly systemInfo?: SystemInfo;
}

export interface ServerStrategy {
  readonly isPreferred?: boolean;
  readonly numberOfApplicationComponents?: number;
  readonly recommendation?: RecommendationSet;
  readonly status?: string;
}

export interface ServerSummary {
  readonly ServerOsType?: string;
  readonly count?: number;
}

export interface ServiceLinkedRoleLockClientException {
  readonly message?: string;
}

export interface ServiceQuotaExceededException {
  readonly message: string;
}

export interface SourceCode {
  readonly location?: string;
  readonly sourceVersion?: string;
  readonly versionControl?: string;
}

export interface SourceCodeRepository {
  readonly branch?: string;
  readonly repository?: string;
  readonly versionControlType?: string;
}

export interface StartAssessmentRequest {
  readonly s3bucketForAnalysisData?: string;
  readonly s3bucketForReportData?: string;
}

export interface StartAssessmentResponse {
  readonly assessmentId?: string;
}

export interface StartImportFileTaskRequest {
  readonly S3Bucket: string;
  readonly dataSourceType?: string;
  readonly groupId?: [];
  readonly name: string;
  readonly s3bucketForReportData?: string;
  readonly s3key: string;
}

export interface StartImportFileTaskResponse {
  readonly id?: string;
}

export interface StartRecommendationReportGenerationRequest {
  readonly groupIdFilter?: [];
  readonly outputFormat?: string;
}

export interface StartRecommendationReportGenerationResponse {
  readonly id?: string;
}

export interface StopAssessmentRequest {
  readonly assessmentId: string;
}

export interface StopAssessmentResponse {
}

export interface StrategyOption {
  readonly isPreferred?: boolean;
  readonly strategy?: string;
  readonly targetDestination?: string;
  readonly toolName?: string;
}

export interface StrategySummary {
  readonly count?: number;
  readonly strategy?: string;
}

export interface SystemInfo {
  readonly cpuArchitecture?: string;
  readonly fileSystemType?: string;
  readonly networkInfoList?: [];
  readonly osInfo?: OSInfo;
}

export interface ThrottlingException {
  readonly message?: string;
}

export interface TransformationTool {
  readonly description?: string;
  readonly name?: string;
  readonly tranformationToolInstallationLink?: string;
}

export interface UpdateApplicationComponentConfigRequest {
  readonly applicationComponentId: string;
  readonly inclusionStatus?: string;
  readonly secretsManagerKey?: string;
  readonly sourceCodeList?: [];
  readonly strategyOption?: StrategyOption;
}

export interface UpdateApplicationComponentConfigResponse {
}

export interface UpdateServerConfigRequest {
  readonly serverId: string;
  readonly strategyOption?: StrategyOption;
}

export interface UpdateServerConfigResponse {
}

export interface ValidationException {
  readonly message?: string;
}


