/**
 * STOP. This file is autogenerated. DO NOT EDIT by hand
 */
export interface AssociateExternalConnection {
  readonly domain: string;
  readonly domainOwner?: string;
  readonly repository: string;
  readonly externalConnection: string;
}

export interface CopyPackageVersions {
  readonly domain: string;
  readonly domainOwner?: string;
  readonly sourceRepository: string;
  readonly destinationRepository: string;
  readonly format: string;
  readonly namespace?: string;
  readonly package: string;
  readonly versions?: [];
  readonly versionRevisions?: {[key: string]: any};
  readonly allowOverwrite?: boolean;
  readonly includeFromUpstream?: boolean;
}

export interface CreateDomain {
  readonly domain: string;
  readonly encryptionKey?: string;
  readonly tags?: [];
}

export interface CreateRepository {
  readonly domain: string;
  readonly domainOwner?: string;
  readonly repository: string;
  readonly description?: string;
  readonly upstreams?: [];
  readonly tags?: [];
}

export interface DeleteDomain {
  readonly domain: string;
  readonly domainOwner?: string;
}

export interface DeleteDomainPermissionsPolicy {
  readonly domain: string;
  readonly domainOwner?: string;
  readonly policyRevision?: string;
}

export interface DeletePackageVersions {
  readonly domain: string;
  readonly domainOwner?: string;
  readonly repository: string;
  readonly format: string;
  readonly namespace?: string;
  readonly package: string;
  readonly versions: [];
  readonly expectedStatus?: string;
}

export interface DeleteRepository {
  readonly domain: string;
  readonly domainOwner?: string;
  readonly repository: string;
}

export interface DeleteRepositoryPermissionsPolicy {
  readonly domain: string;
  readonly domainOwner?: string;
  readonly repository: string;
  readonly policyRevision?: string;
}

export interface DescribeDomain {
  readonly domain: string;
  readonly domainOwner?: string;
}

export interface DescribePackageVersion {
  readonly domain: string;
  readonly domainOwner?: string;
  readonly repository: string;
  readonly format: string;
  readonly namespace?: string;
  readonly package: string;
  readonly packageVersion: string;
}

export interface DescribeRepository {
  readonly domain: string;
  readonly domainOwner?: string;
  readonly repository: string;
}

export interface DisassociateExternalConnection {
  readonly domain: string;
  readonly domainOwner?: string;
  readonly repository: string;
  readonly externalConnection: string;
}

export interface DisposePackageVersions {
  readonly domain: string;
  readonly domainOwner?: string;
  readonly repository: string;
  readonly format: string;
  readonly namespace?: string;
  readonly package: string;
  readonly versions: [];
  readonly versionRevisions?: {[key: string]: any};
  readonly expectedStatus?: string;
}

export interface GetAuthorizationToken {
  readonly domain: string;
  readonly domainOwner?: string;
  readonly durationSeconds?: number;
}

export interface GetDomainPermissionsPolicy {
  readonly domain: string;
  readonly domainOwner?: string;
}

export interface GetPackageVersionAsset {
  readonly domain: string;
  readonly domainOwner?: string;
  readonly repository: string;
  readonly format: string;
  readonly namespace?: string;
  readonly package: string;
  readonly packageVersion: string;
  readonly asset: string;
  readonly packageVersionRevision?: string;
}

export interface GetPackageVersionReadme {
  readonly domain: string;
  readonly domainOwner?: string;
  readonly repository: string;
  readonly format: string;
  readonly namespace?: string;
  readonly package: string;
  readonly packageVersion: string;
}

export interface GetRepositoryEndpoint {
  readonly domain: string;
  readonly domainOwner?: string;
  readonly repository: string;
  readonly format: string;
}

export interface GetRepositoryPermissionsPolicy {
  readonly domain: string;
  readonly domainOwner?: string;
  readonly repository: string;
}

export interface ListDomains {
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface ListPackageVersionAssets {
  readonly domain: string;
  readonly domainOwner?: string;
  readonly repository: string;
  readonly format: string;
  readonly namespace?: string;
  readonly package: string;
  readonly packageVersion: string;
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface ListPackageVersionDependencies {
  readonly domain: string;
  readonly domainOwner?: string;
  readonly repository: string;
  readonly format: string;
  readonly namespace?: string;
  readonly package: string;
  readonly packageVersion: string;
  readonly nextToken?: string;
}

export interface ListPackageVersions {
  readonly domain: string;
  readonly domainOwner?: string;
  readonly repository: string;
  readonly format: string;
  readonly namespace?: string;
  readonly package: string;
  readonly status?: string;
  readonly sortBy?: string;
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface ListPackages {
  readonly domain: string;
  readonly domainOwner?: string;
  readonly repository: string;
  readonly format?: string;
  readonly namespace?: string;
  readonly packagePrefix?: string;
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface ListRepositories {
  readonly repositoryPrefix?: string;
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface ListRepositoriesInDomain {
  readonly domain: string;
  readonly domainOwner?: string;
  readonly administratorAccount?: string;
  readonly repositoryPrefix?: string;
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface ListTagsForResource {
  readonly resourceArn: string;
}

export interface PutDomainPermissionsPolicy {
  readonly domain: string;
  readonly domainOwner?: string;
  readonly policyRevision?: string;
  readonly policyDocument: string;
}

export interface PutRepositoryPermissionsPolicy {
  readonly domain: string;
  readonly domainOwner?: string;
  readonly repository: string;
  readonly policyRevision?: string;
  readonly policyDocument: string;
}

export interface TagResource {
  readonly resourceArn: string;
  readonly tags: [];
}

export interface UntagResource {
  readonly resourceArn: string;
  readonly tagKeys: [];
}

export interface UpdatePackageVersionsStatus {
  readonly domain: string;
  readonly domainOwner?: string;
  readonly repository: string;
  readonly format: string;
  readonly namespace?: string;
  readonly package: string;
  readonly versions: [];
  readonly versionRevisions?: {[key: string]: any};
  readonly expectedStatus?: string;
  readonly targetStatus: string;
}

export interface UpdateRepository {
  readonly domain: string;
  readonly domainOwner?: string;
  readonly repository: string;
  readonly description?: string;
  readonly upstreams?: [];
}

export interface AccessDeniedException {
  readonly message: string;
}

export interface AssetSummary {
  readonly name: string;
  readonly size?: number;
  readonly hashes?: {[key: string]: any};
}

export interface AssociateExternalConnectionRequest {
  readonly domain: string;
  readonly domainOwner?: string;
  readonly repository: string;
  readonly externalConnection: string;
}

export interface AssociateExternalConnectionResult {
  readonly repository?: RepositoryDescription;
}

export interface ConflictException {
  readonly message: string;
  readonly resourceId?: string;
  readonly resourceType?: string;
}

export interface CopyPackageVersionsRequest {
  readonly domain: string;
  readonly domainOwner?: string;
  readonly sourceRepository: string;
  readonly destinationRepository: string;
  readonly format: string;
  readonly namespace?: string;
  readonly package: string;
  readonly versions?: [];
  readonly versionRevisions?: {[key: string]: any};
  readonly allowOverwrite?: boolean;
  readonly includeFromUpstream?: boolean;
}

export interface CopyPackageVersionsResult {
  readonly successfulVersions?: {[key: string]: any};
  readonly failedVersions?: {[key: string]: any};
}

export interface CreateDomainRequest {
  readonly domain: string;
  readonly encryptionKey?: string;
  readonly tags?: [];
}

export interface CreateDomainResult {
  readonly domain?: DomainDescription;
}

export interface CreateRepositoryRequest {
  readonly domain: string;
  readonly domainOwner?: string;
  readonly repository: string;
  readonly description?: string;
  readonly upstreams?: [];
  readonly tags?: [];
}

export interface CreateRepositoryResult {
  readonly repository?: RepositoryDescription;
}

export interface DeleteDomainPermissionsPolicyRequest {
  readonly domain: string;
  readonly domainOwner?: string;
  readonly policyRevision?: string;
}

export interface DeleteDomainPermissionsPolicyResult {
  readonly policy?: ResourcePolicy;
}

export interface DeleteDomainRequest {
  readonly domain: string;
  readonly domainOwner?: string;
}

export interface DeleteDomainResult {
  readonly domain?: DomainDescription;
}

export interface DeletePackageVersionsRequest {
  readonly domain: string;
  readonly domainOwner?: string;
  readonly repository: string;
  readonly format: string;
  readonly namespace?: string;
  readonly package: string;
  readonly versions: [];
  readonly expectedStatus?: string;
}

export interface DeletePackageVersionsResult {
  readonly successfulVersions?: {[key: string]: any};
  readonly failedVersions?: {[key: string]: any};
}

export interface DeleteRepositoryPermissionsPolicyRequest {
  readonly domain: string;
  readonly domainOwner?: string;
  readonly repository: string;
  readonly policyRevision?: string;
}

export interface DeleteRepositoryPermissionsPolicyResult {
  readonly policy?: ResourcePolicy;
}

export interface DeleteRepositoryRequest {
  readonly domain: string;
  readonly domainOwner?: string;
  readonly repository: string;
}

export interface DeleteRepositoryResult {
  readonly repository?: RepositoryDescription;
}

export interface DescribeDomainRequest {
  readonly domain: string;
  readonly domainOwner?: string;
}

export interface DescribeDomainResult {
  readonly domain?: DomainDescription;
}

export interface DescribePackageVersionRequest {
  readonly domain: string;
  readonly domainOwner?: string;
  readonly repository: string;
  readonly format: string;
  readonly namespace?: string;
  readonly package: string;
  readonly packageVersion: string;
}

export interface DescribePackageVersionResult {
  readonly packageVersion: PackageVersionDescription;
}

export interface DescribeRepositoryRequest {
  readonly domain: string;
  readonly domainOwner?: string;
  readonly repository: string;
}

export interface DescribeRepositoryResult {
  readonly repository?: RepositoryDescription;
}

export interface DisassociateExternalConnectionRequest {
  readonly domain: string;
  readonly domainOwner?: string;
  readonly repository: string;
  readonly externalConnection: string;
}

export interface DisassociateExternalConnectionResult {
  readonly repository?: RepositoryDescription;
}

export interface DisposePackageVersionsRequest {
  readonly domain: string;
  readonly domainOwner?: string;
  readonly repository: string;
  readonly format: string;
  readonly namespace?: string;
  readonly package: string;
  readonly versions: [];
  readonly versionRevisions?: {[key: string]: any};
  readonly expectedStatus?: string;
}

export interface DisposePackageVersionsResult {
  readonly successfulVersions?: {[key: string]: any};
  readonly failedVersions?: {[key: string]: any};
}

export interface DomainDescription {
  readonly name?: string;
  readonly owner?: string;
  readonly arn?: string;
  readonly status?: string;
  readonly createdTime?: Date;
  readonly encryptionKey?: string;
  readonly repositoryCount?: number;
  readonly assetSizeBytes?: number;
  readonly s3BucketArn?: string;
}

export interface DomainSummary {
  readonly name?: string;
  readonly owner?: string;
  readonly arn?: string;
  readonly status?: string;
  readonly createdTime?: Date;
  readonly encryptionKey?: string;
}

export interface GetAuthorizationTokenRequest {
  readonly domain: string;
  readonly domainOwner?: string;
  readonly durationSeconds?: number;
}

export interface GetAuthorizationTokenResult {
  readonly authorizationToken?: string;
  readonly expiration?: Date;
}

export interface GetDomainPermissionsPolicyRequest {
  readonly domain: string;
  readonly domainOwner?: string;
}

export interface GetDomainPermissionsPolicyResult {
  readonly policy?: ResourcePolicy;
}

export interface GetPackageVersionAssetRequest {
  readonly domain: string;
  readonly domainOwner?: string;
  readonly repository: string;
  readonly format: string;
  readonly namespace?: string;
  readonly package: string;
  readonly packageVersion: string;
  readonly asset: string;
  readonly packageVersionRevision?: string;
}

export interface GetPackageVersionAssetResult {
  readonly asset?: unknown;
  readonly assetName?: string;
  readonly packageVersion?: string;
  readonly packageVersionRevision?: string;
}

export interface GetPackageVersionReadmeRequest {
  readonly domain: string;
  readonly domainOwner?: string;
  readonly repository: string;
  readonly format: string;
  readonly namespace?: string;
  readonly package: string;
  readonly packageVersion: string;
}

export interface GetPackageVersionReadmeResult {
  readonly format?: string;
  readonly namespace?: string;
  readonly package?: string;
  readonly version?: string;
  readonly versionRevision?: string;
  readonly readme?: string;
}

export interface GetRepositoryEndpointRequest {
  readonly domain: string;
  readonly domainOwner?: string;
  readonly repository: string;
  readonly format: string;
}

export interface GetRepositoryEndpointResult {
  readonly repositoryEndpoint?: string;
}

export interface GetRepositoryPermissionsPolicyRequest {
  readonly domain: string;
  readonly domainOwner?: string;
  readonly repository: string;
}

export interface GetRepositoryPermissionsPolicyResult {
  readonly policy?: ResourcePolicy;
}

export interface InternalServerException {
  readonly message: string;
}

export interface LicenseInfo {
  readonly name?: string;
  readonly url?: string;
}

export interface ListDomainsRequest {
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface ListDomainsResult {
  readonly domains?: [];
  readonly nextToken?: string;
}

export interface ListPackageVersionAssetsRequest {
  readonly domain: string;
  readonly domainOwner?: string;
  readonly repository: string;
  readonly format: string;
  readonly namespace?: string;
  readonly package: string;
  readonly packageVersion: string;
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface ListPackageVersionAssetsResult {
  readonly format?: string;
  readonly namespace?: string;
  readonly package?: string;
  readonly version?: string;
  readonly versionRevision?: string;
  readonly nextToken?: string;
  readonly assets?: [];
}

export interface ListPackageVersionDependenciesRequest {
  readonly domain: string;
  readonly domainOwner?: string;
  readonly repository: string;
  readonly format: string;
  readonly namespace?: string;
  readonly package: string;
  readonly packageVersion: string;
  readonly nextToken?: string;
}

export interface ListPackageVersionDependenciesResult {
  readonly format?: string;
  readonly namespace?: string;
  readonly package?: string;
  readonly version?: string;
  readonly versionRevision?: string;
  readonly nextToken?: string;
  readonly dependencies?: [];
}

export interface ListPackageVersionsRequest {
  readonly domain: string;
  readonly domainOwner?: string;
  readonly repository: string;
  readonly format: string;
  readonly namespace?: string;
  readonly package: string;
  readonly status?: string;
  readonly sortBy?: string;
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface ListPackageVersionsResult {
  readonly defaultDisplayVersion?: string;
  readonly format?: string;
  readonly namespace?: string;
  readonly package?: string;
  readonly versions?: [];
  readonly nextToken?: string;
}

export interface ListPackagesRequest {
  readonly domain: string;
  readonly domainOwner?: string;
  readonly repository: string;
  readonly format?: string;
  readonly namespace?: string;
  readonly packagePrefix?: string;
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface ListPackagesResult {
  readonly packages?: [];
  readonly nextToken?: string;
}

export interface ListRepositoriesInDomainRequest {
  readonly domain: string;
  readonly domainOwner?: string;
  readonly administratorAccount?: string;
  readonly repositoryPrefix?: string;
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface ListRepositoriesInDomainResult {
  readonly repositories?: [];
  readonly nextToken?: string;
}

export interface ListRepositoriesRequest {
  readonly repositoryPrefix?: string;
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface ListRepositoriesResult {
  readonly repositories?: [];
  readonly nextToken?: string;
}

export interface ListTagsForResourceRequest {
  readonly resourceArn: string;
}

export interface ListTagsForResourceResult {
  readonly tags?: [];
}

export interface PackageDependency {
  readonly namespace?: string;
  readonly package?: string;
  readonly dependencyType?: string;
  readonly versionRequirement?: string;
}

export interface PackageSummary {
  readonly format?: string;
  readonly namespace?: string;
  readonly package?: string;
}

export interface PackageVersionDescription {
  readonly format?: string;
  readonly namespace?: string;
  readonly packageName?: string;
  readonly displayName?: string;
  readonly version?: string;
  readonly summary?: string;
  readonly homePage?: string;
  readonly sourceCodeRepository?: string;
  readonly publishedTime?: Date;
  readonly licenses?: [];
  readonly revision?: string;
  readonly status?: string;
}

export interface PackageVersionError {
  readonly errorCode?: string;
  readonly errorMessage?: string;
}

export interface PackageVersionSummary {
  readonly version: string;
  readonly revision?: string;
  readonly status: string;
}

export interface PutDomainPermissionsPolicyRequest {
  readonly domain: string;
  readonly domainOwner?: string;
  readonly policyRevision?: string;
  readonly policyDocument: string;
}

export interface PutDomainPermissionsPolicyResult {
  readonly policy?: ResourcePolicy;
}

export interface PutRepositoryPermissionsPolicyRequest {
  readonly domain: string;
  readonly domainOwner?: string;
  readonly repository: string;
  readonly policyRevision?: string;
  readonly policyDocument: string;
}

export interface PutRepositoryPermissionsPolicyResult {
  readonly policy?: ResourcePolicy;
}

export interface RepositoryDescription {
  readonly name?: string;
  readonly administratorAccount?: string;
  readonly domainName?: string;
  readonly domainOwner?: string;
  readonly arn?: string;
  readonly description?: string;
  readonly upstreams?: [];
  readonly externalConnections?: [];
}

export interface RepositoryExternalConnectionInfo {
  readonly externalConnectionName?: string;
  readonly packageFormat?: string;
  readonly status?: string;
}

export interface RepositorySummary {
  readonly name?: string;
  readonly administratorAccount?: string;
  readonly domainName?: string;
  readonly domainOwner?: string;
  readonly arn?: string;
  readonly description?: string;
}

export interface ResourceNotFoundException {
  readonly message: string;
  readonly resourceId?: string;
  readonly resourceType?: string;
}

export interface ResourcePolicy {
  readonly resourceArn?: string;
  readonly revision?: string;
  readonly document?: string;
}

export interface ServiceQuotaExceededException {
  readonly message: string;
  readonly resourceId?: string;
  readonly resourceType?: string;
}

export interface SuccessfulPackageVersionInfo {
  readonly revision?: string;
  readonly status?: string;
}

export interface Tag {
  readonly key: string;
  readonly value: string;
}

export interface TagResourceRequest {
  readonly resourceArn: string;
  readonly tags: [];
}

export interface TagResourceResult {
}

export interface ThrottlingException {
  readonly message: string;
  readonly retryAfterSeconds?: number;
}

export interface UntagResourceRequest {
  readonly resourceArn: string;
  readonly tagKeys: [];
}

export interface UntagResourceResult {
}

export interface UpdatePackageVersionsStatusRequest {
  readonly domain: string;
  readonly domainOwner?: string;
  readonly repository: string;
  readonly format: string;
  readonly namespace?: string;
  readonly package: string;
  readonly versions: [];
  readonly versionRevisions?: {[key: string]: any};
  readonly expectedStatus?: string;
  readonly targetStatus: string;
}

export interface UpdatePackageVersionsStatusResult {
  readonly successfulVersions?: {[key: string]: any};
  readonly failedVersions?: {[key: string]: any};
}

export interface UpdateRepositoryRequest {
  readonly domain: string;
  readonly domainOwner?: string;
  readonly repository: string;
  readonly description?: string;
  readonly upstreams?: [];
}

export interface UpdateRepositoryResult {
  readonly repository?: RepositoryDescription;
}

export interface UpstreamRepository {
  readonly repositoryName: string;
}

export interface UpstreamRepositoryInfo {
  readonly repositoryName?: string;
}

export interface ValidationException {
  readonly message: string;
  readonly reason?: string;
}


