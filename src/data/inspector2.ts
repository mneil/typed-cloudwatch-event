/**
 * STOP. This file is autogenerated. DO NOT EDIT by hand
 */
export interface AssociateMember {
  readonly accountId: string;
}

export interface BatchGetAccountStatus {
  readonly accountIds?: [];
}

export interface BatchGetFreeTrialInfo {
  readonly accountIds: [];
}

export interface CancelFindingsReport {
  readonly reportId: string;
}

export interface CreateFilter {
  readonly action: string;
  readonly description?: string;
  readonly filterCriteria: FilterCriteria;
  readonly name: string;
  readonly tags?: {[key: string]: any};
}

export interface CreateFindingsReport {
  readonly filterCriteria?: FilterCriteria;
  readonly reportFormat: string;
  readonly s3Destination: Destination;
}

export interface DeleteFilter {
  readonly arn: string;
}

export interface DescribeOrganizationConfiguration {
}

export interface Disable {
  readonly accountIds?: [];
  readonly resourceTypes?: [];
}

export interface DisableDelegatedAdminAccount {
  readonly delegatedAdminAccountId: string;
}

export interface DisassociateMember {
  readonly accountId: string;
}

export interface Enable {
  readonly accountIds?: [];
  readonly clientToken?: string;
  readonly resourceTypes: [];
}

export interface EnableDelegatedAdminAccount {
  readonly clientToken?: string;
  readonly delegatedAdminAccountId: string;
}

export interface GetDelegatedAdminAccount {
}

export interface GetFindingsReportStatus {
  readonly reportId?: string;
}

export interface GetMember {
  readonly accountId: string;
}

export interface ListAccountPermissions {
  readonly maxResults?: number;
  readonly nextToken?: string;
  readonly service?: string;
}

export interface ListCoverage {
  readonly filterCriteria?: CoverageFilterCriteria;
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface ListCoverageStatistics {
  readonly filterCriteria?: CoverageFilterCriteria;
  readonly groupBy?: string;
  readonly nextToken?: string;
}

export interface ListDelegatedAdminAccounts {
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface ListFilters {
  readonly action?: string;
  readonly arns?: [];
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface ListFindingAggregations {
  readonly accountIds?: [];
  readonly aggregationRequest?: AggregationRequest;
  readonly aggregationType: string;
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface ListFindings {
  readonly filterCriteria?: FilterCriteria;
  readonly maxResults?: number;
  readonly nextToken?: string;
  readonly sortCriteria?: SortCriteria;
}

export interface ListMembers {
  readonly maxResults?: number;
  readonly nextToken?: string;
  readonly onlyAssociated?: boolean;
}

export interface ListTagsForResource {
  readonly resourceArn: string;
}

export interface ListUsageTotals {
  readonly accountIds?: [];
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface TagResource {
  readonly resourceArn: string;
  readonly tags: {[key: string]: any};
}

export interface UntagResource {
  readonly resourceArn: string;
  readonly tagKeys: [];
}

export interface UpdateFilter {
  readonly action?: string;
  readonly description?: string;
  readonly filterArn: string;
  readonly filterCriteria?: FilterCriteria;
  readonly name?: string;
}

export interface UpdateOrganizationConfiguration {
  readonly autoEnable: AutoEnable;
}

export interface AccessDeniedException {
  readonly message: string;
}

export interface Account {
  readonly accountId: string;
  readonly resourceStatus: ResourceStatus;
  readonly status: string;
}

export interface AccountAggregation {
  readonly findingType?: string;
  readonly resourceType?: string;
  readonly sortBy?: string;
  readonly sortOrder?: string;
}

export interface AccountAggregationResponse {
  readonly accountId?: string;
  readonly severityCounts?: SeverityCounts;
}

export interface AccountState {
  readonly accountId: string;
  readonly resourceState: ResourceState;
  readonly state: State;
}

export interface AggregationRequest {
  readonly accountAggregation?: AccountAggregation;
  readonly amiAggregation?: AmiAggregation;
  readonly awsEcrContainerAggregation?: AwsEcrContainerAggregation;
  readonly ec2InstanceAggregation?: Ec2InstanceAggregation;
  readonly findingTypeAggregation?: FindingTypeAggregation;
  readonly imageLayerAggregation?: ImageLayerAggregation;
  readonly packageAggregation?: PackageAggregation;
  readonly repositoryAggregation?: RepositoryAggregation;
  readonly titleAggregation?: TitleAggregation;
}

export interface AggregationResponse {
  readonly accountAggregation?: AccountAggregationResponse;
  readonly amiAggregation?: AmiAggregationResponse;
  readonly awsEcrContainerAggregation?: AwsEcrContainerAggregationResponse;
  readonly ec2InstanceAggregation?: Ec2InstanceAggregationResponse;
  readonly findingTypeAggregation?: FindingTypeAggregationResponse;
  readonly imageLayerAggregation?: ImageLayerAggregationResponse;
  readonly packageAggregation?: PackageAggregationResponse;
  readonly repositoryAggregation?: RepositoryAggregationResponse;
  readonly titleAggregation?: TitleAggregationResponse;
}

export interface AmiAggregation {
  readonly amis?: [];
  readonly sortBy?: string;
  readonly sortOrder?: string;
}

export interface AmiAggregationResponse {
  readonly accountId?: string;
  readonly affectedInstances?: number;
  readonly ami: string;
  readonly severityCounts?: SeverityCounts;
}

export interface AssociateMemberRequest {
  readonly accountId: string;
}

export interface AssociateMemberResponse {
  readonly accountId: string;
}

export interface AutoEnable {
  readonly ec2: boolean;
  readonly ecr: boolean;
}

export interface AwsEc2InstanceDetails {
  readonly iamInstanceProfileArn?: string;
  readonly imageId?: string;
  readonly ipV4Addresses?: [];
  readonly ipV6Addresses?: [];
  readonly keyName?: string;
  readonly launchedAt?: Date;
  readonly platform?: string;
  readonly subnetId?: string;
  readonly type?: string;
  readonly vpcId?: string;
}

export interface AwsEcrContainerAggregation {
  readonly architectures?: [];
  readonly imageShas?: [];
  readonly imageTags?: [];
  readonly repositories?: [];
  readonly resourceIds?: [];
  readonly sortBy?: string;
  readonly sortOrder?: string;
}

export interface AwsEcrContainerAggregationResponse {
  readonly accountId?: string;
  readonly architecture?: string;
  readonly imageSha?: string;
  readonly imageTags?: [];
  readonly repository?: string;
  readonly resourceId: string;
  readonly severityCounts?: SeverityCounts;
}

export interface AwsEcrContainerImageDetails {
  readonly architecture?: string;
  readonly author?: string;
  readonly imageHash: string;
  readonly imageTags?: [];
  readonly platform?: string;
  readonly pushedAt?: Date;
  readonly registry: string;
  readonly repositoryName: string;
}

export interface BadRequestException {
  readonly message: string;
}

export interface BatchGetAccountStatusRequest {
  readonly accountIds?: [];
}

export interface BatchGetAccountStatusResponse {
  readonly accounts: [];
  readonly failedAccounts?: [];
}

export interface BatchGetFreeTrialInfoRequest {
  readonly accountIds: [];
}

export interface BatchGetFreeTrialInfoResponse {
  readonly accounts: [];
  readonly failedAccounts: [];
}

export interface CancelFindingsReportRequest {
  readonly reportId: string;
}

export interface CancelFindingsReportResponse {
  readonly reportId: string;
}

export interface ConflictException {
  readonly message: string;
  readonly resourceId: string;
  readonly resourceType: string;
}

export interface Counts {
  readonly count?: number;
  readonly groupKey?: string;
}

export interface CoverageFilterCriteria {
  readonly accountId?: [];
  readonly ec2InstanceTags?: [];
  readonly ecrImageTags?: [];
  readonly ecrRepositoryName?: [];
  readonly resourceId?: [];
  readonly resourceType?: [];
  readonly scanStatusCode?: [];
  readonly scanStatusReason?: [];
  readonly scanType?: [];
}

export interface CoverageMapFilter {
  readonly comparison: string;
  readonly key: string;
  readonly value?: string;
}

export interface CoverageStringFilter {
  readonly comparison: string;
  readonly value: string;
}

export interface CoveredResource {
  readonly accountId: string;
  readonly resourceId: string;
  readonly resourceMetadata?: ResourceScanMetadata;
  readonly resourceType: string;
  readonly scanStatus?: ScanStatus;
  readonly scanType: string;
}

export interface CreateFilterRequest {
  readonly action: string;
  readonly description?: string;
  readonly filterCriteria: FilterCriteria;
  readonly name: string;
  readonly tags?: {[key: string]: any};
}

export interface CreateFilterResponse {
  readonly arn: string;
}

export interface CreateFindingsReportRequest {
  readonly filterCriteria?: FilterCriteria;
  readonly reportFormat: string;
  readonly s3Destination: Destination;
}

export interface CreateFindingsReportResponse {
  readonly reportId?: string;
}

export interface CvssScore {
  readonly baseScore: unknown;
  readonly scoringVector: string;
  readonly source: string;
  readonly version: string;
}

export interface CvssScoreAdjustment {
  readonly metric: string;
  readonly reason: string;
}

export interface CvssScoreDetails {
  readonly adjustments?: [];
  readonly cvssSource?: string;
  readonly score: unknown;
  readonly scoreSource: string;
  readonly scoringVector: string;
  readonly version: string;
}

export interface DateFilter {
  readonly endInclusive?: Date;
  readonly startInclusive?: Date;
}

export interface DelegatedAdmin {
  readonly accountId?: string;
  readonly relationshipStatus?: string;
}

export interface DelegatedAdminAccount {
  readonly accountId?: string;
  readonly status?: string;
}

export interface DeleteFilterRequest {
  readonly arn: string;
}

export interface DeleteFilterResponse {
  readonly arn: string;
}

export interface DescribeOrganizationConfigurationRequest {
}

export interface DescribeOrganizationConfigurationResponse {
  readonly autoEnable?: AutoEnable;
  readonly maxAccountLimitReached?: boolean;
}

export interface Destination {
  readonly bucketName: string;
  readonly keyPrefix?: string;
  readonly kmsKeyArn: string;
}

export interface DisableDelegatedAdminAccountRequest {
  readonly delegatedAdminAccountId: string;
}

export interface DisableDelegatedAdminAccountResponse {
  readonly delegatedAdminAccountId: string;
}

export interface DisableRequest {
  readonly accountIds?: [];
  readonly resourceTypes?: [];
}

export interface DisableResponse {
  readonly accounts: [];
  readonly failedAccounts?: [];
}

export interface DisassociateMemberRequest {
  readonly accountId: string;
}

export interface DisassociateMemberResponse {
  readonly accountId: string;
}

export interface Ec2InstanceAggregation {
  readonly amis?: [];
  readonly instanceIds?: [];
  readonly instanceTags?: [];
  readonly operatingSystems?: [];
  readonly sortBy?: string;
  readonly sortOrder?: string;
}

export interface Ec2InstanceAggregationResponse {
  readonly accountId?: string;
  readonly ami?: string;
  readonly instanceId: string;
  readonly instanceTags?: {[key: string]: any};
  readonly networkFindings?: number;
  readonly operatingSystem?: string;
  readonly severityCounts?: SeverityCounts;
}

export interface Ec2Metadata {
  readonly amiId?: string;
  readonly platform?: string;
  readonly tags?: {[key: string]: any};
}

export interface EcrContainerImageMetadata {
  readonly tags?: [];
}

export interface EcrRepositoryMetadata {
  readonly name?: string;
  readonly scanFrequency?: string;
}

export interface EnableDelegatedAdminAccountRequest {
  readonly clientToken?: string;
  readonly delegatedAdminAccountId: string;
}

export interface EnableDelegatedAdminAccountResponse {
  readonly delegatedAdminAccountId: string;
}

export interface EnableRequest {
  readonly accountIds?: [];
  readonly clientToken?: string;
  readonly resourceTypes: [];
}

export interface EnableResponse {
  readonly accounts: [];
  readonly failedAccounts?: [];
}

export interface FailedAccount {
  readonly accountId: string;
  readonly errorCode: string;
  readonly errorMessage: string;
  readonly resourceStatus?: ResourceStatus;
  readonly status?: string;
}

export interface Filter {
  readonly action: string;
  readonly arn: string;
  readonly createdAt: Date;
  readonly criteria: FilterCriteria;
  readonly description?: string;
  readonly name: string;
  readonly ownerId: string;
  readonly reason?: string;
  readonly tags?: {[key: string]: any};
  readonly updatedAt: Date;
}

export interface FilterCriteria {
  readonly awsAccountId?: [];
  readonly componentId?: [];
  readonly componentType?: [];
  readonly ec2InstanceImageId?: [];
  readonly ec2InstanceSubnetId?: [];
  readonly ec2InstanceVpcId?: [];
  readonly ecrImageArchitecture?: [];
  readonly ecrImageHash?: [];
  readonly ecrImagePushedAt?: [];
  readonly ecrImageRegistry?: [];
  readonly ecrImageRepositoryName?: [];
  readonly ecrImageTags?: [];
  readonly findingArn?: [];
  readonly findingStatus?: [];
  readonly findingType?: [];
  readonly firstObservedAt?: [];
  readonly inspectorScore?: [];
  readonly lastObservedAt?: [];
  readonly networkProtocol?: [];
  readonly portRange?: [];
  readonly relatedVulnerabilities?: [];
  readonly resourceId?: [];
  readonly resourceTags?: [];
  readonly resourceType?: [];
  readonly severity?: [];
  readonly title?: [];
  readonly updatedAt?: [];
  readonly vendorSeverity?: [];
  readonly vulnerabilityId?: [];
  readonly vulnerabilitySource?: [];
  readonly vulnerablePackages?: [];
}

export interface Finding {
  readonly awsAccountId: string;
  readonly description: string;
  readonly findingArn: string;
  readonly firstObservedAt: Date;
  readonly inspectorScore?: unknown;
  readonly inspectorScoreDetails?: InspectorScoreDetails;
  readonly lastObservedAt: Date;
  readonly networkReachabilityDetails?: NetworkReachabilityDetails;
  readonly packageVulnerabilityDetails?: PackageVulnerabilityDetails;
  readonly remediation: Remediation;
  readonly resources: [];
  readonly severity: string;
  readonly status: string;
  readonly title?: string;
  readonly type: string;
  readonly updatedAt?: Date;
}

export interface FindingTypeAggregation {
  readonly findingType?: string;
  readonly resourceType?: string;
  readonly sortBy?: string;
  readonly sortOrder?: string;
}

export interface FindingTypeAggregationResponse {
  readonly accountId?: string;
  readonly severityCounts?: SeverityCounts;
}

export interface FreeTrialAccountInfo {
  readonly accountId: string;
  readonly freeTrialInfo: [];
}

export interface FreeTrialInfo {
  readonly end: Date;
  readonly start: Date;
  readonly status: string;
  readonly type: string;
}

export interface FreeTrialInfoError {
  readonly accountId: string;
  readonly code: string;
  readonly message: string;
}

export interface GetDelegatedAdminAccountRequest {
}

export interface GetDelegatedAdminAccountResponse {
  readonly delegatedAdmin?: DelegatedAdmin;
}

export interface GetFindingsReportStatusRequest {
  readonly reportId?: string;
}

export interface GetFindingsReportStatusResponse {
  readonly destination?: Destination;
  readonly errorCode?: string;
  readonly errorMessage?: string;
  readonly filterCriteria?: FilterCriteria;
  readonly reportId?: string;
  readonly status?: string;
}

export interface GetMemberRequest {
  readonly accountId: string;
}

export interface GetMemberResponse {
  readonly member?: Member;
}

export interface ImageLayerAggregation {
  readonly layerHashes?: [];
  readonly repositories?: [];
  readonly resourceIds?: [];
  readonly sortBy?: string;
  readonly sortOrder?: string;
}

export interface ImageLayerAggregationResponse {
  readonly accountId: string;
  readonly layerHash: string;
  readonly repository: string;
  readonly resourceId: string;
  readonly severityCounts?: SeverityCounts;
}

export interface InspectorScoreDetails {
  readonly adjustedCvss?: CvssScoreDetails;
}

export interface InternalServerException {
  readonly message: string;
  readonly retryAfterSeconds?: number;
}

export interface ListAccountPermissionsRequest {
  readonly maxResults?: number;
  readonly nextToken?: string;
  readonly service?: string;
}

export interface ListAccountPermissionsResponse {
  readonly nextToken?: string;
  readonly permissions: [];
}

export interface ListCoverageRequest {
  readonly filterCriteria?: CoverageFilterCriteria;
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface ListCoverageResponse {
  readonly coveredResources?: [];
  readonly nextToken?: string;
}

export interface ListCoverageStatisticsRequest {
  readonly filterCriteria?: CoverageFilterCriteria;
  readonly groupBy?: string;
  readonly nextToken?: string;
}

export interface ListCoverageStatisticsResponse {
  readonly countsByGroup?: [];
  readonly nextToken?: string;
  readonly totalCounts: number;
}

export interface ListDelegatedAdminAccountsRequest {
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface ListDelegatedAdminAccountsResponse {
  readonly delegatedAdminAccounts?: [];
  readonly nextToken?: string;
}

export interface ListFiltersRequest {
  readonly action?: string;
  readonly arns?: [];
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface ListFiltersResponse {
  readonly filters: [];
  readonly nextToken?: string;
}

export interface ListFindingAggregationsRequest {
  readonly accountIds?: [];
  readonly aggregationRequest?: AggregationRequest;
  readonly aggregationType: string;
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface ListFindingAggregationsResponse {
  readonly aggregationType: string;
  readonly nextToken?: string;
  readonly responses?: [];
}

export interface ListFindingsRequest {
  readonly filterCriteria?: FilterCriteria;
  readonly maxResults?: number;
  readonly nextToken?: string;
  readonly sortCriteria?: SortCriteria;
}

export interface ListFindingsResponse {
  readonly findings?: [];
  readonly nextToken?: string;
}

export interface ListMembersRequest {
  readonly maxResults?: number;
  readonly nextToken?: string;
  readonly onlyAssociated?: boolean;
}

export interface ListMembersResponse {
  readonly members?: [];
  readonly nextToken?: string;
}

export interface ListTagsForResourceRequest {
  readonly resourceArn: string;
}

export interface ListTagsForResourceResponse {
  readonly tags?: {[key: string]: any};
}

export interface ListUsageTotalsRequest {
  readonly accountIds?: [];
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface ListUsageTotalsResponse {
  readonly nextToken?: string;
  readonly totals?: [];
}

export interface MapFilter {
  readonly comparison: string;
  readonly key: string;
  readonly value?: string;
}

export interface Member {
  readonly accountId?: string;
  readonly delegatedAdminAccountId?: string;
  readonly relationshipStatus?: string;
  readonly updatedAt?: Date;
}

export interface NetworkPath {
  readonly steps?: [];
}

export interface NetworkReachabilityDetails {
  readonly networkPath: NetworkPath;
  readonly openPortRange: PortRange;
  readonly protocol: string;
}

export interface NumberFilter {
  readonly lowerInclusive?: unknown;
  readonly upperInclusive?: unknown;
}

export interface PackageAggregation {
  readonly packageNames?: [];
  readonly sortBy?: string;
  readonly sortOrder?: string;
}

export interface PackageAggregationResponse {
  readonly accountId?: string;
  readonly packageName: string;
  readonly severityCounts?: SeverityCounts;
}

export interface PackageFilter {
  readonly architecture?: StringFilter;
  readonly epoch?: NumberFilter;
  readonly name?: StringFilter;
  readonly release?: StringFilter;
  readonly sourceLayerHash?: StringFilter;
  readonly version?: StringFilter;
}

export interface PackageVulnerabilityDetails {
  readonly cvss?: [];
  readonly referenceUrls?: [];
  readonly relatedVulnerabilities?: [];
  readonly source: string;
  readonly sourceUrl?: string;
  readonly vendorCreatedAt?: Date;
  readonly vendorSeverity?: string;
  readonly vendorUpdatedAt?: Date;
  readonly vulnerabilityId: string;
  readonly vulnerablePackages: [];
}

export interface Permission {
  readonly operation: string;
  readonly service: string;
}

export interface PortRange {
  readonly begin: number;
  readonly end: number;
}

export interface PortRangeFilter {
  readonly beginInclusive?: number;
  readonly endInclusive?: number;
}

export interface Recommendation {
  readonly Url?: string;
  readonly text?: string;
}

export interface Remediation {
  readonly recommendation?: Recommendation;
}

export interface RepositoryAggregation {
  readonly repositories?: [];
  readonly sortBy?: string;
  readonly sortOrder?: string;
}

export interface RepositoryAggregationResponse {
  readonly accountId?: string;
  readonly affectedImages?: number;
  readonly repository: string;
  readonly severityCounts?: SeverityCounts;
}

export interface Resource {
  readonly details?: ResourceDetails;
  readonly id: string;
  readonly partition?: string;
  readonly region?: string;
  readonly tags?: {[key: string]: any};
  readonly type: string;
}

export interface ResourceDetails {
  readonly awsEc2Instance?: AwsEc2InstanceDetails;
  readonly awsEcrContainerImage?: AwsEcrContainerImageDetails;
}

export interface ResourceNotFoundException {
  readonly message: string;
}

export interface ResourceScanMetadata {
  readonly ec2?: Ec2Metadata;
  readonly ecrImage?: EcrContainerImageMetadata;
  readonly ecrRepository?: EcrRepositoryMetadata;
}

export interface ResourceState {
  readonly ec2: State;
  readonly ecr: State;
}

export interface ResourceStatus {
  readonly ec2: string;
  readonly ecr: string;
}

export interface ScanStatus {
  readonly reason: string;
  readonly statusCode: string;
}

export interface ServiceQuotaExceededException {
  readonly message: string;
  readonly resourceId: string;
}

export interface SeverityCounts {
  readonly all?: number;
  readonly critical?: number;
  readonly high?: number;
  readonly medium?: number;
}

export interface SortCriteria {
  readonly field: string;
  readonly sortOrder: string;
}

export interface State {
  readonly errorCode: string;
  readonly errorMessage: string;
  readonly status: string;
}

export interface Step {
  readonly componentId: string;
  readonly componentType: string;
}

export interface StringFilter {
  readonly comparison: string;
  readonly value: string;
}

export interface TagResourceRequest {
  readonly resourceArn: string;
  readonly tags: {[key: string]: any};
}

export interface TagResourceResponse {
}

export interface ThrottlingException {
  readonly message: string;
}

export interface TitleAggregation {
  readonly resourceType?: string;
  readonly sortBy?: string;
  readonly sortOrder?: string;
  readonly titles?: [];
  readonly vulnerabilityIds?: [];
}

export interface TitleAggregationResponse {
  readonly accountId?: string;
  readonly severityCounts?: SeverityCounts;
  readonly title: string;
  readonly vulnerabilityId?: string;
}

export interface UntagResourceRequest {
  readonly resourceArn: string;
  readonly tagKeys: [];
}

export interface UntagResourceResponse {
}

export interface UpdateFilterRequest {
  readonly action?: string;
  readonly description?: string;
  readonly filterArn: string;
  readonly filterCriteria?: FilterCriteria;
  readonly name?: string;
}

export interface UpdateFilterResponse {
  readonly arn: string;
}

export interface UpdateOrganizationConfigurationRequest {
  readonly autoEnable: AutoEnable;
}

export interface UpdateOrganizationConfigurationResponse {
  readonly autoEnable: AutoEnable;
}

export interface Usage {
  readonly currency?: string;
  readonly estimatedMonthlyCost?: unknown;
  readonly total?: unknown;
  readonly type?: string;
}

export interface UsageTotal {
  readonly accountId?: string;
  readonly usage?: [];
}

export interface ValidationException {
  readonly fields?: [];
  readonly message: string;
  readonly reason: string;
}

export interface ValidationExceptionField {
  readonly message: string;
  readonly name: string;
}

export interface VulnerablePackage {
  readonly arch?: string;
  readonly epoch?: number;
  readonly filePath?: string;
  readonly fixedInVersion?: string;
  readonly name: string;
  readonly packageManager?: string;
  readonly release?: string;
  readonly sourceLayerHash?: string;
  readonly version: string;
}


