/**
 * STOP. This file is autogenerated. DO NOT EDIT by hand
 */
export interface CreateLifecyclePolicy {
  readonly ExecutionRoleArn: string;
  readonly Description: string;
  readonly State: string;
  readonly PolicyDetails: PolicyDetails;
  readonly Tags?: {[key: string]: any};
}
export interface DeleteLifecyclePolicy {
  readonly PolicyId: string;
}
export interface GetLifecyclePolicies {
  readonly PolicyIds?: [];
  readonly State?: string;
  readonly ResourceTypes?: [];
  readonly TargetTags?: [];
  readonly TagsToAdd?: [];
}
export interface GetLifecyclePolicy {
  readonly PolicyId: string;
}
export interface ListTagsForResource {
  readonly ResourceArn: string;
}
export interface TagResource {
  readonly ResourceArn: string;
  readonly Tags: {[key: string]: any};
}
export interface UntagResource {
  readonly ResourceArn: string;
  readonly TagKeys: [];
}
export interface UpdateLifecyclePolicy {
  readonly PolicyId: string;
  readonly ExecutionRoleArn?: string;
  readonly State?: string;
  readonly Description?: string;
  readonly PolicyDetails?: PolicyDetails;
}



interface Action {
  readonly Name: string;
  readonly CrossRegionCopy: [];
}

interface CreateLifecyclePolicyRequest {
  readonly ExecutionRoleArn: string;
  readonly Description: string;
  readonly State: string;
  readonly PolicyDetails: PolicyDetails;
  readonly Tags: {[key: string]: any};
}

interface CreateLifecyclePolicyResponse {
  readonly PolicyId: string;
}

interface CreateRule {
  readonly Location: string;
  readonly Interval: number;
  readonly IntervalUnit: string;
  readonly Times: [];
  readonly CronExpression: string;
}

interface CrossRegionCopyAction {
  readonly Target: string;
  readonly EncryptionConfiguration: EncryptionConfiguration;
  readonly RetainRule: CrossRegionCopyRetainRule;
}

interface CrossRegionCopyDeprecateRule {
  readonly Interval: number;
  readonly IntervalUnit: string;
}

interface CrossRegionCopyRetainRule {
  readonly Interval: number;
  readonly IntervalUnit: string;
}

interface CrossRegionCopyRule {
  readonly TargetRegion: string;
  readonly Target: string;
  readonly Encrypted: boolean;
  readonly CmkArn: string;
  readonly CopyTags: boolean;
  readonly RetainRule: CrossRegionCopyRetainRule;
  readonly DeprecateRule: CrossRegionCopyDeprecateRule;
}

interface DeleteLifecyclePolicyRequest {
  readonly PolicyId: string;
}

interface DeleteLifecyclePolicyResponse {
}

interface DeprecateRule {
  readonly Count: number;
  readonly Interval: number;
  readonly IntervalUnit: string;
}

interface EncryptionConfiguration {
  readonly Encrypted: boolean;
  readonly CmkArn: string;
}

interface EventParameters {
  readonly EventType: string;
  readonly SnapshotOwner: [];
  readonly DescriptionRegex: string;
}

interface EventSource {
  readonly Type: string;
  readonly Parameters: EventParameters;
}

interface FastRestoreRule {
  readonly Count: number;
  readonly Interval: number;
  readonly IntervalUnit: string;
  readonly AvailabilityZones: [];
}

interface GetLifecyclePoliciesRequest {
  readonly PolicyIds: [];
  readonly State: string;
  readonly ResourceTypes: [];
  readonly TargetTags: [];
  readonly TagsToAdd: [];
}

interface GetLifecyclePoliciesResponse {
  readonly Policies: [];
}

interface GetLifecyclePolicyRequest {
  readonly PolicyId: string;
}

interface GetLifecyclePolicyResponse {
  readonly Policy: LifecyclePolicy;
}

interface InternalServerException {
  readonly Message: string;
  readonly Code: string;
}

interface InvalidRequestException {
  readonly Message: string;
  readonly Code: string;
  readonly RequiredParameters: [];
  readonly MutuallyExclusiveParameters: [];
}

interface LifecyclePolicy {
  readonly PolicyId: string;
  readonly Description: string;
  readonly State: string;
  readonly StatusMessage: string;
  readonly ExecutionRoleArn: string;
  readonly DateCreated: Date;
  readonly DateModified: Date;
  readonly PolicyDetails: PolicyDetails;
  readonly Tags: {[key: string]: any};
  readonly PolicyArn: string;
}

interface LifecyclePolicySummary {
  readonly PolicyId: string;
  readonly Description: string;
  readonly State: string;
  readonly Tags: {[key: string]: any};
  readonly PolicyType: string;
}

interface LimitExceededException {
  readonly Message: string;
  readonly Code: string;
  readonly ResourceType: string;
}

interface ListTagsForResourceRequest {
  readonly ResourceArn: string;
}

interface ListTagsForResourceResponse {
  readonly Tags: {[key: string]: any};
}

interface Parameters {
  readonly ExcludeBootVolume: boolean;
  readonly NoReboot: boolean;
}

interface PolicyDetails {
  readonly PolicyType: string;
  readonly ResourceTypes: [];
  readonly ResourceLocations: [];
  readonly TargetTags: [];
  readonly Schedules: [];
  readonly Parameters: Parameters;
  readonly EventSource: EventSource;
  readonly Actions: [];
}

interface ResourceNotFoundException {
  readonly Message: string;
  readonly Code: string;
  readonly ResourceType: string;
  readonly ResourceIds: [];
}

interface RetainRule {
  readonly Count: number;
  readonly Interval: number;
  readonly IntervalUnit: string;
}

interface Schedule {
  readonly Name: string;
  readonly CopyTags: boolean;
  readonly TagsToAdd: [];
  readonly VariableTags: [];
  readonly CreateRule: CreateRule;
  readonly RetainRule: RetainRule;
  readonly FastRestoreRule: FastRestoreRule;
  readonly CrossRegionCopyRules: [];
  readonly ShareRules: [];
  readonly DeprecateRule: DeprecateRule;
}

interface ShareRule {
  readonly TargetAccounts: [];
  readonly UnshareInterval: number;
  readonly UnshareIntervalUnit: string;
}

interface Tag {
  readonly Key: string;
  readonly Value: string;
}

interface TagResourceRequest {
  readonly ResourceArn: string;
  readonly Tags: {[key: string]: any};
}

interface TagResourceResponse {
}

interface UntagResourceRequest {
  readonly ResourceArn: string;
  readonly TagKeys: [];
}

interface UntagResourceResponse {
}

interface UpdateLifecyclePolicyRequest {
  readonly PolicyId: string;
  readonly ExecutionRoleArn: string;
  readonly State: string;
  readonly Description: string;
  readonly PolicyDetails: PolicyDetails;
}

interface UpdateLifecyclePolicyResponse {
}

