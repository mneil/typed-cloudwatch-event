/**
 * STOP. This file is autogenerated. DO NOT EDIT by hand
 */
export interface CreateBroker {
  readonly AuthenticationStrategy: string;
  readonly AutoMinorVersionUpgrade: boolean;
  readonly BrokerName: string;
  readonly Configuration: ConfigurationId;
  readonly CreatorRequestId: string;
  readonly DeploymentMode: string;
  readonly EncryptionOptions: EncryptionOptions;
  readonly EngineType: string;
  readonly EngineVersion: string;
  readonly HostInstanceType: string;
  readonly LdapServerMetadata: LdapServerMetadataInput;
  readonly Logs: Logs;
  readonly MaintenanceWindowStartTime: WeeklyStartTime;
  readonly PubliclyAccessible: boolean;
  readonly SecurityGroups: [];
  readonly StorageType: string;
  readonly SubnetIds: [];
  readonly Tags: {[key: string]: any};
  readonly Users: [];
}
export interface CreateConfiguration {
  readonly AuthenticationStrategy: string;
  readonly EngineType: string;
  readonly EngineVersion: string;
  readonly Name: string;
  readonly Tags: {[key: string]: any};
}
export interface CreateTags {
  readonly ResourceArn: string;
  readonly Tags: {[key: string]: any};
}
export interface CreateUser {
  readonly BrokerId: string;
  readonly ConsoleAccess: boolean;
  readonly Groups: [];
  readonly Password: string;
  readonly Username: string;
}
export interface DeleteBroker {
  readonly BrokerId: string;
}
export interface DeleteTags {
  readonly ResourceArn: string;
  readonly TagKeys: [];
}
export interface DeleteUser {
  readonly BrokerId: string;
  readonly Username: string;
}
export interface DescribeBroker {
  readonly BrokerId: string;
}
export interface DescribeBrokerEngineTypes {
  readonly EngineType: string;
  readonly MaxResults: number;
  readonly NextToken: string;
}
export interface DescribeBrokerInstanceOptions {
  readonly EngineType: string;
  readonly HostInstanceType: string;
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly StorageType: string;
}
export interface DescribeConfiguration {
  readonly ConfigurationId: string;
}
export interface DescribeConfigurationRevision {
  readonly ConfigurationId: string;
  readonly ConfigurationRevision: string;
}
export interface DescribeUser {
  readonly BrokerId: string;
  readonly Username: string;
}
export interface ListBrokers {
  readonly MaxResults: number;
  readonly NextToken: string;
}
export interface ListConfigurationRevisions {
  readonly ConfigurationId: string;
  readonly MaxResults: number;
  readonly NextToken: string;
}
export interface ListConfigurations {
  readonly MaxResults: number;
  readonly NextToken: string;
}
export interface ListTags {
  readonly ResourceArn: string;
}
export interface ListUsers {
  readonly BrokerId: string;
  readonly MaxResults: number;
  readonly NextToken: string;
}
export interface RebootBroker {
  readonly BrokerId: string;
}
export interface UpdateBroker {
  readonly AuthenticationStrategy: string;
  readonly AutoMinorVersionUpgrade: boolean;
  readonly BrokerId: string;
  readonly Configuration: ConfigurationId;
  readonly EngineVersion: string;
  readonly HostInstanceType: string;
  readonly LdapServerMetadata: LdapServerMetadataInput;
  readonly Logs: Logs;
  readonly MaintenanceWindowStartTime: WeeklyStartTime;
  readonly SecurityGroups: [];
}
export interface UpdateConfiguration {
  readonly ConfigurationId: string;
  readonly Data: string;
  readonly Description: string;
}
export interface UpdateUser {
  readonly BrokerId: string;
  readonly ConsoleAccess: boolean;
  readonly Groups: [];
  readonly Password: string;
  readonly Username: string;
}



interface AvailabilityZone {
  readonly Name: string;
}

interface BadRequestException {
  readonly ErrorAttribute: string;
  readonly Message: string;
}

interface BrokerEngineType {
  readonly EngineType: string;
  readonly EngineVersions: [];
}

interface BrokerEngineTypeOutput {
  readonly BrokerEngineTypes: [];
  readonly MaxResults: number;
  readonly NextToken: string;
}

interface BrokerInstance {
  readonly ConsoleURL: string;
  readonly Endpoints: [];
  readonly IpAddress: string;
}

interface BrokerInstanceOption {
  readonly AvailabilityZones: [];
  readonly EngineType: string;
  readonly HostInstanceType: string;
  readonly StorageType: string;
  readonly SupportedDeploymentModes: [];
  readonly SupportedEngineVersions: [];
}

interface BrokerInstanceOptionsOutput {
  readonly BrokerInstanceOptions: [];
  readonly MaxResults: number;
  readonly NextToken: string;
}

interface BrokerSummary {
  readonly BrokerArn: string;
  readonly BrokerId: string;
  readonly BrokerName: string;
  readonly BrokerState: string;
  readonly Created: Date;
  readonly DeploymentMode: string;
  readonly EngineType: string;
  readonly HostInstanceType: string;
}

interface Configuration {
  readonly Arn: string;
  readonly AuthenticationStrategy: string;
  readonly Created: Date;
  readonly Description: string;
  readonly EngineType: string;
  readonly EngineVersion: string;
  readonly Id: string;
  readonly LatestRevision: ConfigurationRevision;
  readonly Name: string;
  readonly Tags: {[key: string]: any};
}

interface ConfigurationId {
  readonly Id: string;
  readonly Revision: number;
}

interface ConfigurationRevision {
  readonly Created: Date;
  readonly Description: string;
  readonly Revision: number;
}

interface Configurations {
  readonly Current: ConfigurationId;
  readonly History: [];
  readonly Pending: ConfigurationId;
}

interface ConflictException {
  readonly ErrorAttribute: string;
  readonly Message: string;
}

interface CreateBrokerInput {
  readonly AuthenticationStrategy: string;
  readonly AutoMinorVersionUpgrade: boolean;
  readonly BrokerName: string;
  readonly Configuration: ConfigurationId;
  readonly CreatorRequestId: string;
  readonly DeploymentMode: string;
  readonly EncryptionOptions: EncryptionOptions;
  readonly EngineType: string;
  readonly EngineVersion: string;
  readonly HostInstanceType: string;
  readonly LdapServerMetadata: LdapServerMetadataInput;
  readonly Logs: Logs;
  readonly MaintenanceWindowStartTime: WeeklyStartTime;
  readonly PubliclyAccessible: boolean;
  readonly SecurityGroups: [];
  readonly StorageType: string;
  readonly SubnetIds: [];
  readonly Tags: {[key: string]: any};
  readonly Users: [];
}

interface CreateBrokerOutput {
  readonly BrokerArn: string;
  readonly BrokerId: string;
}

interface CreateBrokerRequest {
  readonly AuthenticationStrategy: string;
  readonly AutoMinorVersionUpgrade: boolean;
  readonly BrokerName: string;
  readonly Configuration: ConfigurationId;
  readonly CreatorRequestId: string;
  readonly DeploymentMode: string;
  readonly EncryptionOptions: EncryptionOptions;
  readonly EngineType: string;
  readonly EngineVersion: string;
  readonly HostInstanceType: string;
  readonly LdapServerMetadata: LdapServerMetadataInput;
  readonly Logs: Logs;
  readonly MaintenanceWindowStartTime: WeeklyStartTime;
  readonly PubliclyAccessible: boolean;
  readonly SecurityGroups: [];
  readonly StorageType: string;
  readonly SubnetIds: [];
  readonly Tags: {[key: string]: any};
  readonly Users: [];
}

interface CreateBrokerResponse {
  readonly BrokerArn: string;
  readonly BrokerId: string;
}

interface CreateConfigurationInput {
  readonly AuthenticationStrategy: string;
  readonly EngineType: string;
  readonly EngineVersion: string;
  readonly Name: string;
  readonly Tags: {[key: string]: any};
}

interface CreateConfigurationOutput {
  readonly Arn: string;
  readonly AuthenticationStrategy: string;
  readonly Created: Date;
  readonly Id: string;
  readonly LatestRevision: ConfigurationRevision;
  readonly Name: string;
}

interface CreateConfigurationRequest {
  readonly AuthenticationStrategy: string;
  readonly EngineType: string;
  readonly EngineVersion: string;
  readonly Name: string;
  readonly Tags: {[key: string]: any};
}

interface CreateConfigurationResponse {
  readonly Arn: string;
  readonly AuthenticationStrategy: string;
  readonly Created: Date;
  readonly Id: string;
  readonly LatestRevision: ConfigurationRevision;
  readonly Name: string;
}

interface CreateTagsRequest {
  readonly ResourceArn: string;
  readonly Tags: {[key: string]: any};
}

interface CreateUserInput {
  readonly ConsoleAccess: boolean;
  readonly Groups: [];
  readonly Password: string;
}

interface CreateUserRequest {
  readonly BrokerId: string;
  readonly ConsoleAccess: boolean;
  readonly Groups: [];
  readonly Password: string;
  readonly Username: string;
}

interface CreateUserResponse {
}

interface DeleteBrokerOutput {
  readonly BrokerId: string;
}

interface DeleteBrokerRequest {
  readonly BrokerId: string;
}

interface DeleteBrokerResponse {
  readonly BrokerId: string;
}

interface DeleteTagsRequest {
  readonly ResourceArn: string;
  readonly TagKeys: [];
}

interface DeleteUserRequest {
  readonly BrokerId: string;
  readonly Username: string;
}

interface DeleteUserResponse {
}

interface DescribeBrokerEngineTypesRequest {
  readonly EngineType: string;
  readonly MaxResults: number;
  readonly NextToken: string;
}

interface DescribeBrokerEngineTypesResponse {
  readonly BrokerEngineTypes: [];
  readonly MaxResults: number;
  readonly NextToken: string;
}

interface DescribeBrokerInstanceOptionsRequest {
  readonly EngineType: string;
  readonly HostInstanceType: string;
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly StorageType: string;
}

interface DescribeBrokerInstanceOptionsResponse {
  readonly BrokerInstanceOptions: [];
  readonly MaxResults: number;
  readonly NextToken: string;
}

interface DescribeBrokerOutput {
  readonly AuthenticationStrategy: string;
  readonly AutoMinorVersionUpgrade: boolean;
  readonly BrokerArn: string;
  readonly BrokerId: string;
  readonly BrokerInstances: [];
  readonly BrokerName: string;
  readonly BrokerState: string;
  readonly Configurations: Configurations;
  readonly Created: Date;
  readonly DeploymentMode: string;
  readonly EncryptionOptions: EncryptionOptions;
  readonly EngineType: string;
  readonly EngineVersion: string;
  readonly HostInstanceType: string;
  readonly LdapServerMetadata: LdapServerMetadataOutput;
  readonly Logs: LogsSummary;
  readonly MaintenanceWindowStartTime: WeeklyStartTime;
  readonly PendingAuthenticationStrategy: string;
  readonly PendingEngineVersion: string;
  readonly PendingHostInstanceType: string;
  readonly PendingLdapServerMetadata: LdapServerMetadataOutput;
  readonly PendingSecurityGroups: [];
  readonly PubliclyAccessible: boolean;
  readonly SecurityGroups: [];
  readonly StorageType: string;
  readonly SubnetIds: [];
  readonly Tags: {[key: string]: any};
  readonly Users: [];
}

interface DescribeBrokerRequest {
  readonly BrokerId: string;
}

interface DescribeBrokerResponse {
  readonly AuthenticationStrategy: string;
  readonly AutoMinorVersionUpgrade: boolean;
  readonly BrokerArn: string;
  readonly BrokerId: string;
  readonly BrokerInstances: [];
  readonly BrokerName: string;
  readonly BrokerState: string;
  readonly Configurations: Configurations;
  readonly Created: Date;
  readonly DeploymentMode: string;
  readonly EncryptionOptions: EncryptionOptions;
  readonly EngineType: string;
  readonly EngineVersion: string;
  readonly HostInstanceType: string;
  readonly LdapServerMetadata: LdapServerMetadataOutput;
  readonly Logs: LogsSummary;
  readonly MaintenanceWindowStartTime: WeeklyStartTime;
  readonly PendingAuthenticationStrategy: string;
  readonly PendingEngineVersion: string;
  readonly PendingHostInstanceType: string;
  readonly PendingLdapServerMetadata: LdapServerMetadataOutput;
  readonly PendingSecurityGroups: [];
  readonly PubliclyAccessible: boolean;
  readonly SecurityGroups: [];
  readonly StorageType: string;
  readonly SubnetIds: [];
  readonly Tags: {[key: string]: any};
  readonly Users: [];
}

interface DescribeConfigurationRequest {
  readonly ConfigurationId: string;
}

interface DescribeConfigurationResponse {
  readonly Arn: string;
  readonly AuthenticationStrategy: string;
  readonly Created: Date;
  readonly Description: string;
  readonly EngineType: string;
  readonly EngineVersion: string;
  readonly Id: string;
  readonly LatestRevision: ConfigurationRevision;
  readonly Name: string;
  readonly Tags: {[key: string]: any};
}

interface DescribeConfigurationRevisionOutput {
  readonly ConfigurationId: string;
  readonly Created: Date;
  readonly Data: string;
  readonly Description: string;
}

interface DescribeConfigurationRevisionRequest {
  readonly ConfigurationId: string;
  readonly ConfigurationRevision: string;
}

interface DescribeConfigurationRevisionResponse {
  readonly ConfigurationId: string;
  readonly Created: Date;
  readonly Data: string;
  readonly Description: string;
}

interface DescribeUserOutput {
  readonly BrokerId: string;
  readonly ConsoleAccess: boolean;
  readonly Groups: [];
  readonly Pending: UserPendingChanges;
  readonly Username: string;
}

interface DescribeUserRequest {
  readonly BrokerId: string;
  readonly Username: string;
}

interface DescribeUserResponse {
  readonly BrokerId: string;
  readonly ConsoleAccess: boolean;
  readonly Groups: [];
  readonly Pending: UserPendingChanges;
  readonly Username: string;
}

interface EncryptionOptions {
  readonly KmsKeyId: string;
  readonly UseAwsOwnedKey: boolean;
}

interface EngineVersion {
  readonly Name: string;
}

interface Error {
  readonly ErrorAttribute: string;
  readonly Message: string;
}

interface ForbiddenException {
  readonly ErrorAttribute: string;
  readonly Message: string;
}

interface InternalServerErrorException {
  readonly ErrorAttribute: string;
  readonly Message: string;
}

interface LdapServerMetadataInput {
  readonly Hosts: [];
  readonly RoleBase: string;
  readonly RoleName: string;
  readonly RoleSearchMatching: string;
  readonly RoleSearchSubtree: boolean;
  readonly ServiceAccountPassword: string;
  readonly ServiceAccountUsername: string;
  readonly UserBase: string;
  readonly UserRoleName: string;
  readonly UserSearchMatching: string;
  readonly UserSearchSubtree: boolean;
}

interface LdapServerMetadataOutput {
  readonly Hosts: [];
  readonly RoleBase: string;
  readonly RoleName: string;
  readonly RoleSearchMatching: string;
  readonly RoleSearchSubtree: boolean;
  readonly ServiceAccountUsername: string;
  readonly UserBase: string;
  readonly UserRoleName: string;
  readonly UserSearchMatching: string;
  readonly UserSearchSubtree: boolean;
}

interface ListBrokersOutput {
  readonly BrokerSummaries: [];
  readonly NextToken: string;
}

interface ListBrokersRequest {
  readonly MaxResults: number;
  readonly NextToken: string;
}

interface ListBrokersResponse {
  readonly BrokerSummaries: [];
  readonly NextToken: string;
}

interface ListConfigurationRevisionsOutput {
  readonly ConfigurationId: string;
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly Revisions: [];
}

interface ListConfigurationRevisionsRequest {
  readonly ConfigurationId: string;
  readonly MaxResults: number;
  readonly NextToken: string;
}

interface ListConfigurationRevisionsResponse {
  readonly ConfigurationId: string;
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly Revisions: [];
}

interface ListConfigurationsOutput {
  readonly Configurations: [];
  readonly MaxResults: number;
  readonly NextToken: string;
}

interface ListConfigurationsRequest {
  readonly MaxResults: number;
  readonly NextToken: string;
}

interface ListConfigurationsResponse {
  readonly Configurations: [];
  readonly MaxResults: number;
  readonly NextToken: string;
}

interface ListTagsRequest {
  readonly ResourceArn: string;
}

interface ListTagsResponse {
  readonly Tags: {[key: string]: any};
}

interface ListUsersOutput {
  readonly BrokerId: string;
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly Users: [];
}

interface ListUsersRequest {
  readonly BrokerId: string;
  readonly MaxResults: number;
  readonly NextToken: string;
}

interface ListUsersResponse {
  readonly BrokerId: string;
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly Users: [];
}

interface Logs {
  readonly Audit: boolean;
  readonly General: boolean;
}

interface LogsSummary {
  readonly Audit: boolean;
  readonly AuditLogGroup: string;
  readonly General: boolean;
  readonly GeneralLogGroup: string;
  readonly Pending: PendingLogs;
}

interface NotFoundException {
  readonly ErrorAttribute: string;
  readonly Message: string;
}

interface PendingLogs {
  readonly Audit: boolean;
  readonly General: boolean;
}

interface RebootBrokerRequest {
  readonly BrokerId: string;
}

interface RebootBrokerResponse {
}

interface SanitizationWarning {
  readonly AttributeName: string;
  readonly ElementName: string;
  readonly Reason: string;
}

interface Tags {
  readonly Tags: {[key: string]: any};
}

interface UnauthorizedException {
  readonly ErrorAttribute: string;
  readonly Message: string;
}

interface UpdateBrokerInput {
  readonly AuthenticationStrategy: string;
  readonly AutoMinorVersionUpgrade: boolean;
  readonly Configuration: ConfigurationId;
  readonly EngineVersion: string;
  readonly HostInstanceType: string;
  readonly LdapServerMetadata: LdapServerMetadataInput;
  readonly Logs: Logs;
  readonly MaintenanceWindowStartTime: WeeklyStartTime;
  readonly SecurityGroups: [];
}

interface UpdateBrokerOutput {
  readonly AuthenticationStrategy: string;
  readonly AutoMinorVersionUpgrade: boolean;
  readonly BrokerId: string;
  readonly Configuration: ConfigurationId;
  readonly EngineVersion: string;
  readonly HostInstanceType: string;
  readonly LdapServerMetadata: LdapServerMetadataOutput;
  readonly Logs: Logs;
  readonly MaintenanceWindowStartTime: WeeklyStartTime;
  readonly SecurityGroups: [];
}

interface UpdateBrokerRequest {
  readonly AuthenticationStrategy: string;
  readonly AutoMinorVersionUpgrade: boolean;
  readonly BrokerId: string;
  readonly Configuration: ConfigurationId;
  readonly EngineVersion: string;
  readonly HostInstanceType: string;
  readonly LdapServerMetadata: LdapServerMetadataInput;
  readonly Logs: Logs;
  readonly MaintenanceWindowStartTime: WeeklyStartTime;
  readonly SecurityGroups: [];
}

interface UpdateBrokerResponse {
  readonly AuthenticationStrategy: string;
  readonly AutoMinorVersionUpgrade: boolean;
  readonly BrokerId: string;
  readonly Configuration: ConfigurationId;
  readonly EngineVersion: string;
  readonly HostInstanceType: string;
  readonly LdapServerMetadata: LdapServerMetadataOutput;
  readonly Logs: Logs;
  readonly MaintenanceWindowStartTime: WeeklyStartTime;
  readonly SecurityGroups: [];
}

interface UpdateConfigurationInput {
  readonly Data: string;
  readonly Description: string;
}

interface UpdateConfigurationOutput {
  readonly Arn: string;
  readonly Created: Date;
  readonly Id: string;
  readonly LatestRevision: ConfigurationRevision;
  readonly Name: string;
  readonly Warnings: [];
}

interface UpdateConfigurationRequest {
  readonly ConfigurationId: string;
  readonly Data: string;
  readonly Description: string;
}

interface UpdateConfigurationResponse {
  readonly Arn: string;
  readonly Created: Date;
  readonly Id: string;
  readonly LatestRevision: ConfigurationRevision;
  readonly Name: string;
  readonly Warnings: [];
}

interface UpdateUserInput {
  readonly ConsoleAccess: boolean;
  readonly Groups: [];
  readonly Password: string;
}

interface UpdateUserRequest {
  readonly BrokerId: string;
  readonly ConsoleAccess: boolean;
  readonly Groups: [];
  readonly Password: string;
  readonly Username: string;
}

interface UpdateUserResponse {
}

interface User {
  readonly ConsoleAccess: boolean;
  readonly Groups: [];
  readonly Password: string;
  readonly Username: string;
}

interface UserPendingChanges {
  readonly ConsoleAccess: boolean;
  readonly Groups: [];
  readonly PendingChange: string;
}

interface UserSummary {
  readonly PendingChange: string;
  readonly Username: string;
}

interface WeeklyStartTime {
  readonly DayOfWeek: string;
  readonly TimeOfDay: string;
  readonly TimeZone: string;
}

