/**
 * STOP. This file is autogenerated. DO NOT EDIT by hand
 */
export interface AssociateApprovalRuleTemplateWithRepository {
  readonly approvalRuleTemplateName: string;
  readonly repositoryName: string;
}

export interface BatchAssociateApprovalRuleTemplateWithRepositories {
  readonly approvalRuleTemplateName: string;
  readonly repositoryNames: [];
}

export interface BatchDescribeMergeConflicts {
  readonly repositoryName: string;
  readonly destinationCommitSpecifier: string;
  readonly sourceCommitSpecifier: string;
  readonly mergeOption: string;
  readonly maxMergeHunks?: number;
  readonly maxConflictFiles?: number;
  readonly filePaths?: [];
  readonly conflictDetailLevel?: string;
  readonly conflictResolutionStrategy?: string;
  readonly nextToken?: string;
}

export interface BatchDisassociateApprovalRuleTemplateFromRepositories {
  readonly approvalRuleTemplateName: string;
  readonly repositoryNames: [];
}

export interface BatchGetCommits {
  readonly commitIds: [];
  readonly repositoryName: string;
}

export interface BatchGetRepositories {
  readonly repositoryNames: [];
}

export interface CreateApprovalRuleTemplate {
  readonly approvalRuleTemplateName: string;
  readonly approvalRuleTemplateContent: string;
  readonly approvalRuleTemplateDescription?: string;
}

export interface CreateBranch {
  readonly repositoryName: string;
  readonly branchName: string;
  readonly commitId: string;
}

export interface CreateCommit {
  readonly repositoryName: string;
  readonly branchName: string;
  readonly parentCommitId?: string;
  readonly authorName?: string;
  readonly email?: string;
  readonly commitMessage?: string;
  readonly keepEmptyFolders?: boolean;
  readonly putFiles?: [];
  readonly deleteFiles?: [];
  readonly setFileModes?: [];
}

export interface CreatePullRequest {
  readonly title: string;
  readonly description?: string;
  readonly targets: [];
  readonly clientRequestToken?: string;
}

export interface CreatePullRequestApprovalRule {
  readonly pullRequestId: string;
  readonly approvalRuleName: string;
  readonly approvalRuleContent: string;
}

export interface CreateRepository {
  readonly repositoryName: string;
  readonly repositoryDescription?: string;
  readonly tags?: {[key: string]: any};
}

export interface CreateUnreferencedMergeCommit {
  readonly repositoryName: string;
  readonly sourceCommitSpecifier: string;
  readonly destinationCommitSpecifier: string;
  readonly mergeOption: string;
  readonly conflictDetailLevel?: string;
  readonly conflictResolutionStrategy?: string;
  readonly authorName?: string;
  readonly email?: string;
  readonly commitMessage?: string;
  readonly keepEmptyFolders?: boolean;
  readonly conflictResolution?: ConflictResolution;
}

export interface DeleteApprovalRuleTemplate {
  readonly approvalRuleTemplateName: string;
}

export interface DeleteBranch {
  readonly repositoryName: string;
  readonly branchName: string;
}

export interface DeleteCommentContent {
  readonly commentId: string;
}

export interface DeleteFile {
  readonly repositoryName: string;
  readonly branchName: string;
  readonly filePath: string;
  readonly parentCommitId: string;
  readonly keepEmptyFolders?: boolean;
  readonly commitMessage?: string;
  readonly name?: string;
  readonly email?: string;
}

export interface DeletePullRequestApprovalRule {
  readonly pullRequestId: string;
  readonly approvalRuleName: string;
}

export interface DeleteRepository {
  readonly repositoryName: string;
}

export interface DescribeMergeConflicts {
  readonly repositoryName: string;
  readonly destinationCommitSpecifier: string;
  readonly sourceCommitSpecifier: string;
  readonly mergeOption: string;
  readonly maxMergeHunks?: number;
  readonly filePath: string;
  readonly conflictDetailLevel?: string;
  readonly conflictResolutionStrategy?: string;
  readonly nextToken?: string;
}

export interface DescribePullRequestEvents {
  readonly pullRequestId: string;
  readonly pullRequestEventType?: string;
  readonly actorArn?: string;
  readonly nextToken?: string;
  readonly maxResults?: number;
}

export interface DisassociateApprovalRuleTemplateFromRepository {
  readonly approvalRuleTemplateName: string;
  readonly repositoryName: string;
}

export interface EvaluatePullRequestApprovalRules {
  readonly pullRequestId: string;
  readonly revisionId: string;
}

export interface GetApprovalRuleTemplate {
  readonly approvalRuleTemplateName: string;
}

export interface GetBlob {
  readonly repositoryName: string;
  readonly blobId: string;
}

export interface GetBranch {
  readonly repositoryName?: string;
  readonly branchName?: string;
}

export interface GetComment {
  readonly commentId: string;
}

export interface GetCommentReactions {
  readonly commentId: string;
  readonly reactionUserArn?: string;
  readonly nextToken?: string;
  readonly maxResults?: number;
}

export interface GetCommentsForComparedCommit {
  readonly repositoryName: string;
  readonly beforeCommitId?: string;
  readonly afterCommitId: string;
  readonly nextToken?: string;
  readonly maxResults?: number;
}

export interface GetCommentsForPullRequest {
  readonly pullRequestId: string;
  readonly repositoryName?: string;
  readonly beforeCommitId?: string;
  readonly afterCommitId?: string;
  readonly nextToken?: string;
  readonly maxResults?: number;
}

export interface GetCommit {
  readonly repositoryName: string;
  readonly commitId: string;
}

export interface GetDifferences {
  readonly repositoryName: string;
  readonly beforeCommitSpecifier?: string;
  readonly afterCommitSpecifier: string;
  readonly beforePath?: string;
  readonly afterPath?: string;
  readonly MaxResults?: number;
  readonly NextToken?: string;
}

export interface GetFile {
  readonly repositoryName: string;
  readonly commitSpecifier?: string;
  readonly filePath: string;
}

export interface GetFolder {
  readonly repositoryName: string;
  readonly commitSpecifier?: string;
  readonly folderPath: string;
}

export interface GetMergeCommit {
  readonly repositoryName: string;
  readonly sourceCommitSpecifier: string;
  readonly destinationCommitSpecifier: string;
  readonly conflictDetailLevel?: string;
  readonly conflictResolutionStrategy?: string;
}

export interface GetMergeConflicts {
  readonly repositoryName: string;
  readonly destinationCommitSpecifier: string;
  readonly sourceCommitSpecifier: string;
  readonly mergeOption: string;
  readonly conflictDetailLevel?: string;
  readonly maxConflictFiles?: number;
  readonly conflictResolutionStrategy?: string;
  readonly nextToken?: string;
}

export interface GetMergeOptions {
  readonly repositoryName: string;
  readonly sourceCommitSpecifier: string;
  readonly destinationCommitSpecifier: string;
  readonly conflictDetailLevel?: string;
  readonly conflictResolutionStrategy?: string;
}

export interface GetPullRequest {
  readonly pullRequestId: string;
}

export interface GetPullRequestApprovalStates {
  readonly pullRequestId: string;
  readonly revisionId: string;
}

export interface GetPullRequestOverrideState {
  readonly pullRequestId: string;
  readonly revisionId: string;
}

export interface GetRepository {
  readonly repositoryName: string;
}

export interface GetRepositoryTriggers {
  readonly repositoryName: string;
}

export interface ListApprovalRuleTemplates {
  readonly nextToken?: string;
  readonly maxResults?: number;
}

export interface ListAssociatedApprovalRuleTemplatesForRepository {
  readonly repositoryName: string;
  readonly nextToken?: string;
  readonly maxResults?: number;
}

export interface ListBranches {
  readonly repositoryName: string;
  readonly nextToken?: string;
}

export interface ListPullRequests {
  readonly repositoryName: string;
  readonly authorArn?: string;
  readonly pullRequestStatus?: string;
  readonly nextToken?: string;
  readonly maxResults?: number;
}

export interface ListRepositories {
  readonly nextToken?: string;
  readonly sortBy?: string;
  readonly order?: string;
}

export interface ListRepositoriesForApprovalRuleTemplate {
  readonly approvalRuleTemplateName: string;
  readonly nextToken?: string;
  readonly maxResults?: number;
}

export interface ListTagsForResource {
  readonly resourceArn: string;
  readonly nextToken?: string;
}

export interface MergeBranchesByFastForward {
  readonly repositoryName: string;
  readonly sourceCommitSpecifier: string;
  readonly destinationCommitSpecifier: string;
  readonly targetBranch?: string;
}

export interface MergeBranchesBySquash {
  readonly repositoryName: string;
  readonly sourceCommitSpecifier: string;
  readonly destinationCommitSpecifier: string;
  readonly targetBranch?: string;
  readonly conflictDetailLevel?: string;
  readonly conflictResolutionStrategy?: string;
  readonly authorName?: string;
  readonly email?: string;
  readonly commitMessage?: string;
  readonly keepEmptyFolders?: boolean;
  readonly conflictResolution?: ConflictResolution;
}

export interface MergeBranchesByThreeWay {
  readonly repositoryName: string;
  readonly sourceCommitSpecifier: string;
  readonly destinationCommitSpecifier: string;
  readonly targetBranch?: string;
  readonly conflictDetailLevel?: string;
  readonly conflictResolutionStrategy?: string;
  readonly authorName?: string;
  readonly email?: string;
  readonly commitMessage?: string;
  readonly keepEmptyFolders?: boolean;
  readonly conflictResolution?: ConflictResolution;
}

export interface MergePullRequestByFastForward {
  readonly pullRequestId: string;
  readonly repositoryName: string;
  readonly sourceCommitId?: string;
}

export interface MergePullRequestBySquash {
  readonly pullRequestId: string;
  readonly repositoryName: string;
  readonly sourceCommitId?: string;
  readonly conflictDetailLevel?: string;
  readonly conflictResolutionStrategy?: string;
  readonly commitMessage?: string;
  readonly authorName?: string;
  readonly email?: string;
  readonly keepEmptyFolders?: boolean;
  readonly conflictResolution?: ConflictResolution;
}

export interface MergePullRequestByThreeWay {
  readonly pullRequestId: string;
  readonly repositoryName: string;
  readonly sourceCommitId?: string;
  readonly conflictDetailLevel?: string;
  readonly conflictResolutionStrategy?: string;
  readonly commitMessage?: string;
  readonly authorName?: string;
  readonly email?: string;
  readonly keepEmptyFolders?: boolean;
  readonly conflictResolution?: ConflictResolution;
}

export interface OverridePullRequestApprovalRules {
  readonly pullRequestId: string;
  readonly revisionId: string;
  readonly overrideStatus: string;
}

export interface PostCommentForComparedCommit {
  readonly repositoryName: string;
  readonly beforeCommitId?: string;
  readonly afterCommitId: string;
  readonly location?: Location;
  readonly content: string;
  readonly clientRequestToken?: string;
}

export interface PostCommentForPullRequest {
  readonly pullRequestId: string;
  readonly repositoryName: string;
  readonly beforeCommitId: string;
  readonly afterCommitId: string;
  readonly location?: Location;
  readonly content: string;
  readonly clientRequestToken?: string;
}

export interface PostCommentReply {
  readonly inReplyTo: string;
  readonly clientRequestToken?: string;
  readonly content: string;
}

export interface PutCommentReaction {
  readonly commentId: string;
  readonly reactionValue: string;
}

export interface PutFile {
  readonly repositoryName: string;
  readonly branchName: string;
  readonly fileContent: unknown;
  readonly filePath: string;
  readonly fileMode?: string;
  readonly parentCommitId?: string;
  readonly commitMessage?: string;
  readonly name?: string;
  readonly email?: string;
}

export interface PutRepositoryTriggers {
  readonly repositoryName: string;
  readonly triggers: [];
}

export interface TagResource {
  readonly resourceArn: string;
  readonly tags: {[key: string]: any};
}

export interface TestRepositoryTriggers {
  readonly repositoryName: string;
  readonly triggers: [];
}

export interface UntagResource {
  readonly resourceArn: string;
  readonly tagKeys: [];
}

export interface UpdateApprovalRuleTemplateContent {
  readonly approvalRuleTemplateName: string;
  readonly newRuleContent: string;
  readonly existingRuleContentSha256?: string;
}

export interface UpdateApprovalRuleTemplateDescription {
  readonly approvalRuleTemplateName: string;
  readonly approvalRuleTemplateDescription: string;
}

export interface UpdateApprovalRuleTemplateName {
  readonly oldApprovalRuleTemplateName: string;
  readonly newApprovalRuleTemplateName: string;
}

export interface UpdateComment {
  readonly commentId: string;
  readonly content: string;
}

export interface UpdateDefaultBranch {
  readonly repositoryName: string;
  readonly defaultBranchName: string;
}

export interface UpdatePullRequestApprovalRuleContent {
  readonly pullRequestId: string;
  readonly approvalRuleName: string;
  readonly existingRuleContentSha256?: string;
  readonly newRuleContent: string;
}

export interface UpdatePullRequestApprovalState {
  readonly pullRequestId: string;
  readonly revisionId: string;
  readonly approvalState: string;
}

export interface UpdatePullRequestDescription {
  readonly pullRequestId: string;
  readonly description: string;
}

export interface UpdatePullRequestStatus {
  readonly pullRequestId: string;
  readonly pullRequestStatus: string;
}

export interface UpdatePullRequestTitle {
  readonly pullRequestId: string;
  readonly title: string;
}

export interface UpdateRepositoryDescription {
  readonly repositoryName: string;
  readonly repositoryDescription?: string;
}

export interface UpdateRepositoryName {
  readonly oldName: string;
  readonly newName: string;
}

export interface ActorDoesNotExistException {
}

export interface Approval {
  readonly userArn?: string;
  readonly approvalState?: string;
}

export interface ApprovalRule {
  readonly approvalRuleId?: string;
  readonly approvalRuleName?: string;
  readonly approvalRuleContent?: string;
  readonly ruleContentSha256?: string;
  readonly lastModifiedDate?: Date;
  readonly creationDate?: Date;
  readonly lastModifiedUser?: string;
  readonly originApprovalRuleTemplate?: OriginApprovalRuleTemplate;
}

export interface ApprovalRuleContentRequiredException {
}

export interface ApprovalRuleDoesNotExistException {
}

export interface ApprovalRuleEventMetadata {
  readonly approvalRuleName?: string;
  readonly approvalRuleId?: string;
  readonly approvalRuleContent?: string;
}

export interface ApprovalRuleNameAlreadyExistsException {
}

export interface ApprovalRuleNameRequiredException {
}

export interface ApprovalRuleOverriddenEventMetadata {
  readonly revisionId?: string;
  readonly overrideStatus?: string;
}

export interface ApprovalRuleTemplate {
  readonly approvalRuleTemplateId?: string;
  readonly approvalRuleTemplateName?: string;
  readonly approvalRuleTemplateDescription?: string;
  readonly approvalRuleTemplateContent?: string;
  readonly ruleContentSha256?: string;
  readonly lastModifiedDate?: Date;
  readonly creationDate?: Date;
  readonly lastModifiedUser?: string;
}

export interface ApprovalRuleTemplateContentRequiredException {
}

export interface ApprovalRuleTemplateDoesNotExistException {
}

export interface ApprovalRuleTemplateInUseException {
}

export interface ApprovalRuleTemplateNameAlreadyExistsException {
}

export interface ApprovalRuleTemplateNameRequiredException {
}

export interface ApprovalStateChangedEventMetadata {
  readonly revisionId?: string;
  readonly approvalStatus?: string;
}

export interface ApprovalStateRequiredException {
}

export interface AssociateApprovalRuleTemplateWithRepositoryInput {
  readonly approvalRuleTemplateName: string;
  readonly repositoryName: string;
}

export interface AuthorDoesNotExistException {
}

export interface BatchAssociateApprovalRuleTemplateWithRepositoriesError {
  readonly repositoryName?: string;
  readonly errorCode?: string;
  readonly errorMessage?: string;
}

export interface BatchAssociateApprovalRuleTemplateWithRepositoriesInput {
  readonly approvalRuleTemplateName: string;
  readonly repositoryNames: [];
}

export interface BatchAssociateApprovalRuleTemplateWithRepositoriesOutput {
  readonly associatedRepositoryNames: [];
  readonly errors: [];
}

export interface BatchDescribeMergeConflictsError {
  readonly filePath: string;
  readonly exceptionName: string;
  readonly message: string;
}

export interface BatchDescribeMergeConflictsInput {
  readonly repositoryName: string;
  readonly destinationCommitSpecifier: string;
  readonly sourceCommitSpecifier: string;
  readonly mergeOption: string;
  readonly maxMergeHunks?: number;
  readonly maxConflictFiles?: number;
  readonly filePaths?: [];
  readonly conflictDetailLevel?: string;
  readonly conflictResolutionStrategy?: string;
  readonly nextToken?: string;
}

export interface BatchDescribeMergeConflictsOutput {
  readonly conflicts: [];
  readonly nextToken?: string;
  readonly errors?: [];
  readonly destinationCommitId: string;
  readonly sourceCommitId: string;
  readonly baseCommitId?: string;
}

export interface BatchDisassociateApprovalRuleTemplateFromRepositoriesError {
  readonly repositoryName?: string;
  readonly errorCode?: string;
  readonly errorMessage?: string;
}

export interface BatchDisassociateApprovalRuleTemplateFromRepositoriesInput {
  readonly approvalRuleTemplateName: string;
  readonly repositoryNames: [];
}

export interface BatchDisassociateApprovalRuleTemplateFromRepositoriesOutput {
  readonly disassociatedRepositoryNames: [];
  readonly errors: [];
}

export interface BatchGetCommitsError {
  readonly commitId?: string;
  readonly errorCode?: string;
  readonly errorMessage?: string;
}

export interface BatchGetCommitsInput {
  readonly commitIds: [];
  readonly repositoryName: string;
}

export interface BatchGetCommitsOutput {
  readonly commits?: [];
  readonly errors?: [];
}

export interface BatchGetRepositoriesInput {
  readonly repositoryNames: [];
}

export interface BatchGetRepositoriesOutput {
  readonly repositories?: [];
  readonly repositoriesNotFound?: [];
}

export interface BeforeCommitIdAndAfterCommitIdAreSameException {
}

export interface BlobIdDoesNotExistException {
}

export interface BlobIdRequiredException {
}

export interface BlobMetadata {
  readonly blobId?: string;
  readonly path?: string;
  readonly mode?: string;
}

export interface BranchDoesNotExistException {
}

export interface BranchInfo {
  readonly branchName?: string;
  readonly commitId?: string;
}

export interface BranchNameExistsException {
}

export interface BranchNameIsTagNameException {
}

export interface BranchNameRequiredException {
}

export interface CannotDeleteApprovalRuleFromTemplateException {
}

export interface CannotModifyApprovalRuleFromTemplateException {
}

export interface ClientRequestTokenRequiredException {
}

export interface Comment {
  readonly commentId?: string;
  readonly content?: string;
  readonly inReplyTo?: string;
  readonly creationDate?: Date;
  readonly lastModifiedDate?: Date;
  readonly authorArn?: string;
  readonly deleted?: boolean;
  readonly clientRequestToken?: string;
  readonly callerReactions?: [];
  readonly reactionCounts?: {[key: string]: any};
}

export interface CommentContentRequiredException {
}

export interface CommentContentSizeLimitExceededException {
}

export interface CommentDeletedException {
}

export interface CommentDoesNotExistException {
}

export interface CommentIdRequiredException {
}

export interface CommentNotCreatedByCallerException {
}

export interface CommentsForComparedCommit {
  readonly repositoryName?: string;
  readonly beforeCommitId?: string;
  readonly afterCommitId?: string;
  readonly beforeBlobId?: string;
  readonly afterBlobId?: string;
  readonly location?: Location;
  readonly comments?: [];
}

export interface CommentsForPullRequest {
  readonly pullRequestId?: string;
  readonly repositoryName?: string;
  readonly beforeCommitId?: string;
  readonly afterCommitId?: string;
  readonly beforeBlobId?: string;
  readonly afterBlobId?: string;
  readonly location?: Location;
  readonly comments?: [];
}

export interface Commit {
  readonly commitId?: string;
  readonly treeId?: string;
  readonly parents?: [];
  readonly message?: string;
  readonly author?: UserInfo;
  readonly committer?: UserInfo;
  readonly additionalData?: string;
}

export interface CommitDoesNotExistException {
}

export interface CommitIdDoesNotExistException {
}

export interface CommitIdRequiredException {
}

export interface CommitIdsLimitExceededException {
}

export interface CommitIdsListRequiredException {
}

export interface CommitMessageLengthExceededException {
}

export interface CommitRequiredException {
}

export interface ConcurrentReferenceUpdateException {
}

export interface Conflict {
  readonly conflictMetadata?: ConflictMetadata;
  readonly mergeHunks?: [];
}

export interface ConflictMetadata {
  readonly filePath?: string;
  readonly fileSizes?: FileSizes;
  readonly fileModes?: FileModes;
  readonly objectTypes?: ObjectTypes;
  readonly numberOfConflicts?: number;
  readonly isBinaryFile?: IsBinaryFile;
  readonly contentConflict?: boolean;
  readonly fileModeConflict?: boolean;
  readonly objectTypeConflict?: boolean;
  readonly mergeOperations?: MergeOperations;
}

export interface ConflictResolution {
  readonly replaceContents?: [];
  readonly deleteFiles?: [];
  readonly setFileModes?: [];
}

export interface CreateApprovalRuleTemplateInput {
  readonly approvalRuleTemplateName: string;
  readonly approvalRuleTemplateContent: string;
  readonly approvalRuleTemplateDescription?: string;
}

export interface CreateApprovalRuleTemplateOutput {
  readonly approvalRuleTemplate: ApprovalRuleTemplate;
}

export interface CreateBranchInput {
  readonly repositoryName: string;
  readonly branchName: string;
  readonly commitId: string;
}

export interface CreateCommitInput {
  readonly repositoryName: string;
  readonly branchName: string;
  readonly parentCommitId?: string;
  readonly authorName?: string;
  readonly email?: string;
  readonly commitMessage?: string;
  readonly keepEmptyFolders?: boolean;
  readonly putFiles?: [];
  readonly deleteFiles?: [];
  readonly setFileModes?: [];
}

export interface CreateCommitOutput {
  readonly commitId?: string;
  readonly treeId?: string;
  readonly filesAdded?: [];
  readonly filesUpdated?: [];
  readonly filesDeleted?: [];
}

export interface CreatePullRequestApprovalRuleInput {
  readonly pullRequestId: string;
  readonly approvalRuleName: string;
  readonly approvalRuleContent: string;
}

export interface CreatePullRequestApprovalRuleOutput {
  readonly approvalRule: ApprovalRule;
}

export interface CreatePullRequestInput {
  readonly title: string;
  readonly description?: string;
  readonly targets: [];
  readonly clientRequestToken?: string;
}

export interface CreatePullRequestOutput {
  readonly pullRequest: PullRequest;
}

export interface CreateRepositoryInput {
  readonly repositoryName: string;
  readonly repositoryDescription?: string;
  readonly tags?: {[key: string]: any};
}

export interface CreateRepositoryOutput {
  readonly repositoryMetadata?: RepositoryMetadata;
}

export interface CreateUnreferencedMergeCommitInput {
  readonly repositoryName: string;
  readonly sourceCommitSpecifier: string;
  readonly destinationCommitSpecifier: string;
  readonly mergeOption: string;
  readonly conflictDetailLevel?: string;
  readonly conflictResolutionStrategy?: string;
  readonly authorName?: string;
  readonly email?: string;
  readonly commitMessage?: string;
  readonly keepEmptyFolders?: boolean;
  readonly conflictResolution?: ConflictResolution;
}

export interface CreateUnreferencedMergeCommitOutput {
  readonly commitId?: string;
  readonly treeId?: string;
}

export interface DefaultBranchCannotBeDeletedException {
}

export interface DeleteApprovalRuleTemplateInput {
  readonly approvalRuleTemplateName: string;
}

export interface DeleteApprovalRuleTemplateOutput {
  readonly approvalRuleTemplateId: string;
}

export interface DeleteBranchInput {
  readonly repositoryName: string;
  readonly branchName: string;
}

export interface DeleteBranchOutput {
  readonly deletedBranch?: BranchInfo;
}

export interface DeleteCommentContentInput {
  readonly commentId: string;
}

export interface DeleteCommentContentOutput {
  readonly comment?: Comment;
}

export interface DeleteFileEntry {
  readonly filePath: string;
}

export interface DeleteFileInput {
  readonly repositoryName: string;
  readonly branchName: string;
  readonly filePath: string;
  readonly parentCommitId: string;
  readonly keepEmptyFolders?: boolean;
  readonly commitMessage?: string;
  readonly name?: string;
  readonly email?: string;
}

export interface DeleteFileOutput {
  readonly commitId: string;
  readonly blobId: string;
  readonly treeId: string;
  readonly filePath: string;
}

export interface DeletePullRequestApprovalRuleInput {
  readonly pullRequestId: string;
  readonly approvalRuleName: string;
}

export interface DeletePullRequestApprovalRuleOutput {
  readonly approvalRuleId: string;
}

export interface DeleteRepositoryInput {
  readonly repositoryName: string;
}

export interface DeleteRepositoryOutput {
  readonly repositoryId?: string;
}

export interface DescribeMergeConflictsInput {
  readonly repositoryName: string;
  readonly destinationCommitSpecifier: string;
  readonly sourceCommitSpecifier: string;
  readonly mergeOption: string;
  readonly maxMergeHunks?: number;
  readonly filePath: string;
  readonly conflictDetailLevel?: string;
  readonly conflictResolutionStrategy?: string;
  readonly nextToken?: string;
}

export interface DescribeMergeConflictsOutput {
  readonly conflictMetadata: ConflictMetadata;
  readonly mergeHunks: [];
  readonly nextToken?: string;
  readonly destinationCommitId: string;
  readonly sourceCommitId: string;
  readonly baseCommitId?: string;
}

export interface DescribePullRequestEventsInput {
  readonly pullRequestId: string;
  readonly pullRequestEventType?: string;
  readonly actorArn?: string;
  readonly nextToken?: string;
  readonly maxResults?: number;
}

export interface DescribePullRequestEventsOutput {
  readonly pullRequestEvents: [];
  readonly nextToken?: string;
}

export interface Difference {
  readonly beforeBlob?: BlobMetadata;
  readonly afterBlob?: BlobMetadata;
  readonly changeType?: string;
}

export interface DirectoryNameConflictsWithFileNameException {
}

export interface DisassociateApprovalRuleTemplateFromRepositoryInput {
  readonly approvalRuleTemplateName: string;
  readonly repositoryName: string;
}

export interface EncryptionIntegrityChecksFailedException {
}

export interface EncryptionKeyAccessDeniedException {
}

export interface EncryptionKeyDisabledException {
}

export interface EncryptionKeyNotFoundException {
}

export interface EncryptionKeyUnavailableException {
}

export interface EvaluatePullRequestApprovalRulesInput {
  readonly pullRequestId: string;
  readonly revisionId: string;
}

export interface EvaluatePullRequestApprovalRulesOutput {
  readonly evaluation: Evaluation;
}

export interface Evaluation {
  readonly approved?: boolean;
  readonly overridden?: boolean;
  readonly approvalRulesSatisfied?: [];
  readonly approvalRulesNotSatisfied?: [];
}

export interface File {
  readonly blobId?: string;
  readonly absolutePath?: string;
  readonly relativePath?: string;
  readonly fileMode?: string;
}

export interface FileContentAndSourceFileSpecifiedException {
}

export interface FileContentRequiredException {
}

export interface FileContentSizeLimitExceededException {
}

export interface FileDoesNotExistException {
}

export interface FileEntryRequiredException {
}

export interface FileMetadata {
  readonly absolutePath?: string;
  readonly blobId?: string;
  readonly fileMode?: string;
}

export interface FileModeRequiredException {
}

export interface FileModes {
  readonly source?: string;
  readonly destination?: string;
  readonly base?: string;
}

export interface FileNameConflictsWithDirectoryNameException {
}

export interface FilePathConflictsWithSubmodulePathException {
}

export interface FileSizes {
  readonly source?: number;
  readonly destination?: number;
  readonly base?: number;
}

export interface FileTooLargeException {
}

export interface Folder {
  readonly treeId?: string;
  readonly absolutePath?: string;
  readonly relativePath?: string;
}

export interface FolderContentSizeLimitExceededException {
}

export interface FolderDoesNotExistException {
}

export interface GetApprovalRuleTemplateInput {
  readonly approvalRuleTemplateName: string;
}

export interface GetApprovalRuleTemplateOutput {
  readonly approvalRuleTemplate: ApprovalRuleTemplate;
}

export interface GetBlobInput {
  readonly repositoryName: string;
  readonly blobId: string;
}

export interface GetBlobOutput {
  readonly content: unknown;
}

export interface GetBranchInput {
  readonly repositoryName?: string;
  readonly branchName?: string;
}

export interface GetBranchOutput {
  readonly branch?: BranchInfo;
}

export interface GetCommentInput {
  readonly commentId: string;
}

export interface GetCommentOutput {
  readonly comment?: Comment;
}

export interface GetCommentReactionsInput {
  readonly commentId: string;
  readonly reactionUserArn?: string;
  readonly nextToken?: string;
  readonly maxResults?: number;
}

export interface GetCommentReactionsOutput {
  readonly reactionsForComment: [];
  readonly nextToken?: string;
}

export interface GetCommentsForComparedCommitInput {
  readonly repositoryName: string;
  readonly beforeCommitId?: string;
  readonly afterCommitId: string;
  readonly nextToken?: string;
  readonly maxResults?: number;
}

export interface GetCommentsForComparedCommitOutput {
  readonly commentsForComparedCommitData?: [];
  readonly nextToken?: string;
}

export interface GetCommentsForPullRequestInput {
  readonly pullRequestId: string;
  readonly repositoryName?: string;
  readonly beforeCommitId?: string;
  readonly afterCommitId?: string;
  readonly nextToken?: string;
  readonly maxResults?: number;
}

export interface GetCommentsForPullRequestOutput {
  readonly commentsForPullRequestData?: [];
  readonly nextToken?: string;
}

export interface GetCommitInput {
  readonly repositoryName: string;
  readonly commitId: string;
}

export interface GetCommitOutput {
  readonly commit: Commit;
}

export interface GetDifferencesInput {
  readonly repositoryName: string;
  readonly beforeCommitSpecifier?: string;
  readonly afterCommitSpecifier: string;
  readonly beforePath?: string;
  readonly afterPath?: string;
  readonly MaxResults?: number;
  readonly NextToken?: string;
}

export interface GetDifferencesOutput {
  readonly differences?: [];
  readonly NextToken?: string;
}

export interface GetFileInput {
  readonly repositoryName: string;
  readonly commitSpecifier?: string;
  readonly filePath: string;
}

export interface GetFileOutput {
  readonly commitId: string;
  readonly blobId: string;
  readonly filePath: string;
  readonly fileMode: string;
  readonly fileSize: number;
  readonly fileContent: unknown;
}

export interface GetFolderInput {
  readonly repositoryName: string;
  readonly commitSpecifier?: string;
  readonly folderPath: string;
}

export interface GetFolderOutput {
  readonly commitId: string;
  readonly folderPath: string;
  readonly treeId?: string;
  readonly subFolders?: [];
  readonly files?: [];
  readonly symbolicLinks?: [];
  readonly subModules?: [];
}

export interface GetMergeCommitInput {
  readonly repositoryName: string;
  readonly sourceCommitSpecifier: string;
  readonly destinationCommitSpecifier: string;
  readonly conflictDetailLevel?: string;
  readonly conflictResolutionStrategy?: string;
}

export interface GetMergeCommitOutput {
  readonly sourceCommitId?: string;
  readonly destinationCommitId?: string;
  readonly baseCommitId?: string;
  readonly mergedCommitId?: string;
}

export interface GetMergeConflictsInput {
  readonly repositoryName: string;
  readonly destinationCommitSpecifier: string;
  readonly sourceCommitSpecifier: string;
  readonly mergeOption: string;
  readonly conflictDetailLevel?: string;
  readonly maxConflictFiles?: number;
  readonly conflictResolutionStrategy?: string;
  readonly nextToken?: string;
}

export interface GetMergeConflictsOutput {
  readonly mergeable: boolean;
  readonly destinationCommitId: string;
  readonly sourceCommitId: string;
  readonly baseCommitId?: string;
  readonly conflictMetadataList: [];
  readonly nextToken?: string;
}

export interface GetMergeOptionsInput {
  readonly repositoryName: string;
  readonly sourceCommitSpecifier: string;
  readonly destinationCommitSpecifier: string;
  readonly conflictDetailLevel?: string;
  readonly conflictResolutionStrategy?: string;
}

export interface GetMergeOptionsOutput {
  readonly mergeOptions: [];
  readonly sourceCommitId: string;
  readonly destinationCommitId: string;
  readonly baseCommitId: string;
}

export interface GetPullRequestApprovalStatesInput {
  readonly pullRequestId: string;
  readonly revisionId: string;
}

export interface GetPullRequestApprovalStatesOutput {
  readonly approvals?: [];
}

export interface GetPullRequestInput {
  readonly pullRequestId: string;
}

export interface GetPullRequestOutput {
  readonly pullRequest: PullRequest;
}

export interface GetPullRequestOverrideStateInput {
  readonly pullRequestId: string;
  readonly revisionId: string;
}

export interface GetPullRequestOverrideStateOutput {
  readonly overridden?: boolean;
  readonly overrider?: string;
}

export interface GetRepositoryInput {
  readonly repositoryName: string;
}

export interface GetRepositoryOutput {
  readonly repositoryMetadata?: RepositoryMetadata;
}

export interface GetRepositoryTriggersInput {
  readonly repositoryName: string;
}

export interface GetRepositoryTriggersOutput {
  readonly configurationId?: string;
  readonly triggers?: [];
}

export interface IdempotencyParameterMismatchException {
}

export interface InvalidActorArnException {
}

export interface InvalidApprovalRuleContentException {
}

export interface InvalidApprovalRuleNameException {
}

export interface InvalidApprovalRuleTemplateContentException {
}

export interface InvalidApprovalRuleTemplateDescriptionException {
}

export interface InvalidApprovalRuleTemplateNameException {
}

export interface InvalidApprovalStateException {
}

export interface InvalidAuthorArnException {
}

export interface InvalidBlobIdException {
}

export interface InvalidBranchNameException {
}

export interface InvalidClientRequestTokenException {
}

export interface InvalidCommentIdException {
}

export interface InvalidCommitException {
}

export interface InvalidCommitIdException {
}

export interface InvalidConflictDetailLevelException {
}

export interface InvalidConflictResolutionException {
}

export interface InvalidConflictResolutionStrategyException {
}

export interface InvalidContinuationTokenException {
}

export interface InvalidDeletionParameterException {
}

export interface InvalidDescriptionException {
}

export interface InvalidDestinationCommitSpecifierException {
}

export interface InvalidEmailException {
}

export interface InvalidFileLocationException {
}

export interface InvalidFileModeException {
}

export interface InvalidFilePositionException {
}

export interface InvalidMaxConflictFilesException {
}

export interface InvalidMaxMergeHunksException {
}

export interface InvalidMaxResultsException {
}

export interface InvalidMergeOptionException {
}

export interface InvalidOrderException {
}

export interface InvalidOverrideStatusException {
}

export interface InvalidParentCommitIdException {
}

export interface InvalidPathException {
}

export interface InvalidPullRequestEventTypeException {
}

export interface InvalidPullRequestIdException {
}

export interface InvalidPullRequestStatusException {
}

export interface InvalidPullRequestStatusUpdateException {
}

export interface InvalidReactionUserArnException {
}

export interface InvalidReactionValueException {
}

export interface InvalidReferenceNameException {
}

export interface InvalidRelativeFileVersionEnumException {
}

export interface InvalidReplacementContentException {
}

export interface InvalidReplacementTypeException {
}

export interface InvalidRepositoryDescriptionException {
}

export interface InvalidRepositoryNameException {
}

export interface InvalidRepositoryTriggerBranchNameException {
}

export interface InvalidRepositoryTriggerCustomDataException {
}

export interface InvalidRepositoryTriggerDestinationArnException {
}

export interface InvalidRepositoryTriggerEventsException {
}

export interface InvalidRepositoryTriggerNameException {
}

export interface InvalidRepositoryTriggerRegionException {
}

export interface InvalidResourceArnException {
}

export interface InvalidRevisionIdException {
}

export interface InvalidRuleContentSha256Exception {
}

export interface InvalidSortByException {
}

export interface InvalidSourceCommitSpecifierException {
}

export interface InvalidSystemTagUsageException {
}

export interface InvalidTagKeysListException {
}

export interface InvalidTagsMapException {
}

export interface InvalidTargetBranchException {
}

export interface InvalidTargetException {
}

export interface InvalidTargetsException {
}

export interface InvalidTitleException {
}

export interface IsBinaryFile {
  readonly source?: boolean;
  readonly destination?: boolean;
  readonly base?: boolean;
}

export interface ListApprovalRuleTemplatesInput {
  readonly nextToken?: string;
  readonly maxResults?: number;
}

export interface ListApprovalRuleTemplatesOutput {
  readonly approvalRuleTemplateNames?: [];
  readonly nextToken?: string;
}

export interface ListAssociatedApprovalRuleTemplatesForRepositoryInput {
  readonly repositoryName: string;
  readonly nextToken?: string;
  readonly maxResults?: number;
}

export interface ListAssociatedApprovalRuleTemplatesForRepositoryOutput {
  readonly approvalRuleTemplateNames?: [];
  readonly nextToken?: string;
}

export interface ListBranchesInput {
  readonly repositoryName: string;
  readonly nextToken?: string;
}

export interface ListBranchesOutput {
  readonly branches?: [];
  readonly nextToken?: string;
}

export interface ListPullRequestsInput {
  readonly repositoryName: string;
  readonly authorArn?: string;
  readonly pullRequestStatus?: string;
  readonly nextToken?: string;
  readonly maxResults?: number;
}

export interface ListPullRequestsOutput {
  readonly pullRequestIds: [];
  readonly nextToken?: string;
}

export interface ListRepositoriesForApprovalRuleTemplateInput {
  readonly approvalRuleTemplateName: string;
  readonly nextToken?: string;
  readonly maxResults?: number;
}

export interface ListRepositoriesForApprovalRuleTemplateOutput {
  readonly repositoryNames?: [];
  readonly nextToken?: string;
}

export interface ListRepositoriesInput {
  readonly nextToken?: string;
  readonly sortBy?: string;
  readonly order?: string;
}

export interface ListRepositoriesOutput {
  readonly repositories?: [];
  readonly nextToken?: string;
}

export interface ListTagsForResourceInput {
  readonly resourceArn: string;
  readonly nextToken?: string;
}

export interface ListTagsForResourceOutput {
  readonly tags?: {[key: string]: any};
  readonly nextToken?: string;
}

export interface Location {
  readonly filePath?: string;
  readonly filePosition?: number;
  readonly relativeFileVersion?: string;
}

export interface ManualMergeRequiredException {
}

export interface MaximumBranchesExceededException {
}

export interface MaximumConflictResolutionEntriesExceededException {
}

export interface MaximumFileContentToLoadExceededException {
}

export interface MaximumFileEntriesExceededException {
}

export interface MaximumItemsToCompareExceededException {
}

export interface MaximumNumberOfApprovalsExceededException {
}

export interface MaximumOpenPullRequestsExceededException {
}

export interface MaximumRepositoryNamesExceededException {
}

export interface MaximumRepositoryTriggersExceededException {
}

export interface MaximumRuleTemplatesAssociatedWithRepositoryException {
}

export interface MergeBranchesByFastForwardInput {
  readonly repositoryName: string;
  readonly sourceCommitSpecifier: string;
  readonly destinationCommitSpecifier: string;
  readonly targetBranch?: string;
}

export interface MergeBranchesByFastForwardOutput {
  readonly commitId?: string;
  readonly treeId?: string;
}

export interface MergeBranchesBySquashInput {
  readonly repositoryName: string;
  readonly sourceCommitSpecifier: string;
  readonly destinationCommitSpecifier: string;
  readonly targetBranch?: string;
  readonly conflictDetailLevel?: string;
  readonly conflictResolutionStrategy?: string;
  readonly authorName?: string;
  readonly email?: string;
  readonly commitMessage?: string;
  readonly keepEmptyFolders?: boolean;
  readonly conflictResolution?: ConflictResolution;
}

export interface MergeBranchesBySquashOutput {
  readonly commitId?: string;
  readonly treeId?: string;
}

export interface MergeBranchesByThreeWayInput {
  readonly repositoryName: string;
  readonly sourceCommitSpecifier: string;
  readonly destinationCommitSpecifier: string;
  readonly targetBranch?: string;
  readonly conflictDetailLevel?: string;
  readonly conflictResolutionStrategy?: string;
  readonly authorName?: string;
  readonly email?: string;
  readonly commitMessage?: string;
  readonly keepEmptyFolders?: boolean;
  readonly conflictResolution?: ConflictResolution;
}

export interface MergeBranchesByThreeWayOutput {
  readonly commitId?: string;
  readonly treeId?: string;
}

export interface MergeHunk {
  readonly isConflict?: boolean;
  readonly source?: MergeHunkDetail;
  readonly destination?: MergeHunkDetail;
  readonly base?: MergeHunkDetail;
}

export interface MergeHunkDetail {
  readonly startLine?: number;
  readonly endLine?: number;
  readonly hunkContent?: string;
}

export interface MergeMetadata {
  readonly isMerged?: boolean;
  readonly mergedBy?: string;
  readonly mergeCommitId?: string;
  readonly mergeOption?: string;
}

export interface MergeOperations {
  readonly source?: string;
  readonly destination?: string;
}

export interface MergeOptionRequiredException {
}

export interface MergePullRequestByFastForwardInput {
  readonly pullRequestId: string;
  readonly repositoryName: string;
  readonly sourceCommitId?: string;
}

export interface MergePullRequestByFastForwardOutput {
  readonly pullRequest?: PullRequest;
}

export interface MergePullRequestBySquashInput {
  readonly pullRequestId: string;
  readonly repositoryName: string;
  readonly sourceCommitId?: string;
  readonly conflictDetailLevel?: string;
  readonly conflictResolutionStrategy?: string;
  readonly commitMessage?: string;
  readonly authorName?: string;
  readonly email?: string;
  readonly keepEmptyFolders?: boolean;
  readonly conflictResolution?: ConflictResolution;
}

export interface MergePullRequestBySquashOutput {
  readonly pullRequest?: PullRequest;
}

export interface MergePullRequestByThreeWayInput {
  readonly pullRequestId: string;
  readonly repositoryName: string;
  readonly sourceCommitId?: string;
  readonly conflictDetailLevel?: string;
  readonly conflictResolutionStrategy?: string;
  readonly commitMessage?: string;
  readonly authorName?: string;
  readonly email?: string;
  readonly keepEmptyFolders?: boolean;
  readonly conflictResolution?: ConflictResolution;
}

export interface MergePullRequestByThreeWayOutput {
  readonly pullRequest?: PullRequest;
}

export interface MultipleConflictResolutionEntriesException {
}

export interface MultipleRepositoriesInPullRequestException {
}

export interface NameLengthExceededException {
}

export interface NoChangeException {
}

export interface NumberOfRuleTemplatesExceededException {
}

export interface NumberOfRulesExceededException {
}

export interface ObjectTypes {
  readonly source?: string;
  readonly destination?: string;
  readonly base?: string;
}

export interface OriginApprovalRuleTemplate {
  readonly approvalRuleTemplateId?: string;
  readonly approvalRuleTemplateName?: string;
}

export interface OverrideAlreadySetException {
}

export interface OverridePullRequestApprovalRulesInput {
  readonly pullRequestId: string;
  readonly revisionId: string;
  readonly overrideStatus: string;
}

export interface OverrideStatusRequiredException {
}

export interface ParentCommitDoesNotExistException {
}

export interface ParentCommitIdOutdatedException {
}

export interface ParentCommitIdRequiredException {
}

export interface PathDoesNotExistException {
}

export interface PathRequiredException {
}

export interface PostCommentForComparedCommitInput {
  readonly repositoryName: string;
  readonly beforeCommitId?: string;
  readonly afterCommitId: string;
  readonly location?: Location;
  readonly content: string;
  readonly clientRequestToken?: string;
}

export interface PostCommentForComparedCommitOutput {
  readonly repositoryName?: string;
  readonly beforeCommitId?: string;
  readonly afterCommitId?: string;
  readonly beforeBlobId?: string;
  readonly afterBlobId?: string;
  readonly location?: Location;
  readonly comment?: Comment;
}

export interface PostCommentForPullRequestInput {
  readonly pullRequestId: string;
  readonly repositoryName: string;
  readonly beforeCommitId: string;
  readonly afterCommitId: string;
  readonly location?: Location;
  readonly content: string;
  readonly clientRequestToken?: string;
}

export interface PostCommentForPullRequestOutput {
  readonly repositoryName?: string;
  readonly pullRequestId?: string;
  readonly beforeCommitId?: string;
  readonly afterCommitId?: string;
  readonly beforeBlobId?: string;
  readonly afterBlobId?: string;
  readonly location?: Location;
  readonly comment?: Comment;
}

export interface PostCommentReplyInput {
  readonly inReplyTo: string;
  readonly clientRequestToken?: string;
  readonly content: string;
}

export interface PostCommentReplyOutput {
  readonly comment?: Comment;
}

export interface PullRequest {
  readonly pullRequestId?: string;
  readonly title?: string;
  readonly description?: string;
  readonly lastActivityDate?: Date;
  readonly creationDate?: Date;
  readonly pullRequestStatus?: string;
  readonly authorArn?: string;
  readonly pullRequestTargets?: [];
  readonly clientRequestToken?: string;
  readonly revisionId?: string;
  readonly approvalRules?: [];
}

export interface PullRequestAlreadyClosedException {
}

export interface PullRequestApprovalRulesNotSatisfiedException {
}

export interface PullRequestCannotBeApprovedByAuthorException {
}

export interface PullRequestCreatedEventMetadata {
  readonly repositoryName?: string;
  readonly sourceCommitId?: string;
  readonly destinationCommitId?: string;
  readonly mergeBase?: string;
}

export interface PullRequestDoesNotExistException {
}

export interface PullRequestEvent {
  readonly pullRequestId?: string;
  readonly eventDate?: Date;
  readonly pullRequestEventType?: string;
  readonly actorArn?: string;
  readonly pullRequestCreatedEventMetadata?: PullRequestCreatedEventMetadata;
  readonly pullRequestStatusChangedEventMetadata?: PullRequestStatusChangedEventMetadata;
  readonly pullRequestSourceReferenceUpdatedEventMetadata?: PullRequestSourceReferenceUpdatedEventMetadata;
  readonly pullRequestMergedStateChangedEventMetadata?: PullRequestMergedStateChangedEventMetadata;
  readonly approvalRuleEventMetadata?: ApprovalRuleEventMetadata;
  readonly approvalStateChangedEventMetadata?: ApprovalStateChangedEventMetadata;
  readonly approvalRuleOverriddenEventMetadata?: ApprovalRuleOverriddenEventMetadata;
}

export interface PullRequestIdRequiredException {
}

export interface PullRequestMergedStateChangedEventMetadata {
  readonly repositoryName?: string;
  readonly destinationReference?: string;
  readonly mergeMetadata?: MergeMetadata;
}

export interface PullRequestSourceReferenceUpdatedEventMetadata {
  readonly repositoryName?: string;
  readonly beforeCommitId?: string;
  readonly afterCommitId?: string;
  readonly mergeBase?: string;
}

export interface PullRequestStatusChangedEventMetadata {
  readonly pullRequestStatus?: string;
}

export interface PullRequestStatusRequiredException {
}

export interface PullRequestTarget {
  readonly repositoryName?: string;
  readonly sourceReference?: string;
  readonly destinationReference?: string;
  readonly destinationCommit?: string;
  readonly sourceCommit?: string;
  readonly mergeBase?: string;
  readonly mergeMetadata?: MergeMetadata;
}

export interface PutCommentReactionInput {
  readonly commentId: string;
  readonly reactionValue: string;
}

export interface PutFileEntry {
  readonly filePath: string;
  readonly fileMode?: string;
  readonly fileContent?: unknown;
  readonly sourceFile?: SourceFileSpecifier;
}

export interface PutFileEntryConflictException {
}

export interface PutFileInput {
  readonly repositoryName: string;
  readonly branchName: string;
  readonly fileContent: unknown;
  readonly filePath: string;
  readonly fileMode?: string;
  readonly parentCommitId?: string;
  readonly commitMessage?: string;
  readonly name?: string;
  readonly email?: string;
}

export interface PutFileOutput {
  readonly commitId: string;
  readonly blobId: string;
  readonly treeId: string;
}

export interface PutRepositoryTriggersInput {
  readonly repositoryName: string;
  readonly triggers: [];
}

export interface PutRepositoryTriggersOutput {
  readonly configurationId?: string;
}

export interface ReactionForComment {
  readonly reaction?: ReactionValueFormats;
  readonly reactionUsers?: [];
  readonly reactionsFromDeletedUsersCount?: number;
}

export interface ReactionLimitExceededException {
}

export interface ReactionValueFormats {
  readonly emoji?: string;
  readonly shortCode?: string;
  readonly unicode?: string;
}

export interface ReactionValueRequiredException {
}

export interface ReferenceDoesNotExistException {
}

export interface ReferenceNameRequiredException {
}

export interface ReferenceTypeNotSupportedException {
}

export interface ReplaceContentEntry {
  readonly filePath: string;
  readonly replacementType: string;
  readonly content?: unknown;
  readonly fileMode?: string;
}

export interface ReplacementContentRequiredException {
}

export interface ReplacementTypeRequiredException {
}

export interface RepositoryDoesNotExistException {
}

export interface RepositoryLimitExceededException {
}

export interface RepositoryMetadata {
  readonly accountId?: string;
  readonly repositoryId?: string;
  readonly repositoryName?: string;
  readonly repositoryDescription?: string;
  readonly defaultBranch?: string;
  readonly lastModifiedDate?: Date;
  readonly creationDate?: Date;
  readonly cloneUrlHttp?: string;
  readonly cloneUrlSsh?: string;
  readonly Arn?: string;
}

export interface RepositoryNameExistsException {
}

export interface RepositoryNameIdPair {
  readonly repositoryName?: string;
  readonly repositoryId?: string;
}

export interface RepositoryNameRequiredException {
}

export interface RepositoryNamesRequiredException {
}

export interface RepositoryNotAssociatedWithPullRequestException {
}

export interface RepositoryTrigger {
  readonly name: string;
  readonly destinationArn: string;
  readonly customData?: string;
  readonly branches?: [];
  readonly events: [];
}

export interface RepositoryTriggerBranchNameListRequiredException {
}

export interface RepositoryTriggerDestinationArnRequiredException {
}

export interface RepositoryTriggerEventsListRequiredException {
}

export interface RepositoryTriggerExecutionFailure {
  readonly trigger?: string;
  readonly failureMessage?: string;
}

export interface RepositoryTriggerNameRequiredException {
}

export interface RepositoryTriggersListRequiredException {
}

export interface ResourceArnRequiredException {
}

export interface RestrictedSourceFileException {
}

export interface RevisionIdRequiredException {
}

export interface RevisionNotCurrentException {
}

export interface SameFileContentException {
}

export interface SamePathRequestException {
}

export interface SetFileModeEntry {
  readonly filePath: string;
  readonly fileMode: string;
}

export interface SourceAndDestinationAreSameException {
}

export interface SourceFileOrContentRequiredException {
}

export interface SourceFileSpecifier {
  readonly filePath: string;
  readonly isMove?: boolean;
}

export interface SubModule {
  readonly commitId?: string;
  readonly absolutePath?: string;
  readonly relativePath?: string;
}

export interface SymbolicLink {
  readonly blobId?: string;
  readonly absolutePath?: string;
  readonly relativePath?: string;
  readonly fileMode?: string;
}

export interface TagKeysListRequiredException {
}

export interface TagPolicyException {
}

export interface TagResourceInput {
  readonly resourceArn: string;
  readonly tags: {[key: string]: any};
}

export interface TagsMapRequiredException {
}

export interface Target {
  readonly repositoryName: string;
  readonly sourceReference: string;
  readonly destinationReference?: string;
}

export interface TargetRequiredException {
}

export interface TargetsRequiredException {
}

export interface TestRepositoryTriggersInput {
  readonly repositoryName: string;
  readonly triggers: [];
}

export interface TestRepositoryTriggersOutput {
  readonly successfulExecutions?: [];
  readonly failedExecutions?: [];
}

export interface TipOfSourceReferenceIsDifferentException {
}

export interface TipsDivergenceExceededException {
}

export interface TitleRequiredException {
}

export interface TooManyTagsException {
}

export interface UntagResourceInput {
  readonly resourceArn: string;
  readonly tagKeys: [];
}

export interface UpdateApprovalRuleTemplateContentInput {
  readonly approvalRuleTemplateName: string;
  readonly newRuleContent: string;
  readonly existingRuleContentSha256?: string;
}

export interface UpdateApprovalRuleTemplateContentOutput {
  readonly approvalRuleTemplate: ApprovalRuleTemplate;
}

export interface UpdateApprovalRuleTemplateDescriptionInput {
  readonly approvalRuleTemplateName: string;
  readonly approvalRuleTemplateDescription: string;
}

export interface UpdateApprovalRuleTemplateDescriptionOutput {
  readonly approvalRuleTemplate: ApprovalRuleTemplate;
}

export interface UpdateApprovalRuleTemplateNameInput {
  readonly oldApprovalRuleTemplateName: string;
  readonly newApprovalRuleTemplateName: string;
}

export interface UpdateApprovalRuleTemplateNameOutput {
  readonly approvalRuleTemplate: ApprovalRuleTemplate;
}

export interface UpdateCommentInput {
  readonly commentId: string;
  readonly content: string;
}

export interface UpdateCommentOutput {
  readonly comment?: Comment;
}

export interface UpdateDefaultBranchInput {
  readonly repositoryName: string;
  readonly defaultBranchName: string;
}

export interface UpdatePullRequestApprovalRuleContentInput {
  readonly pullRequestId: string;
  readonly approvalRuleName: string;
  readonly existingRuleContentSha256?: string;
  readonly newRuleContent: string;
}

export interface UpdatePullRequestApprovalRuleContentOutput {
  readonly approvalRule: ApprovalRule;
}

export interface UpdatePullRequestApprovalStateInput {
  readonly pullRequestId: string;
  readonly revisionId: string;
  readonly approvalState: string;
}

export interface UpdatePullRequestDescriptionInput {
  readonly pullRequestId: string;
  readonly description: string;
}

export interface UpdatePullRequestDescriptionOutput {
  readonly pullRequest: PullRequest;
}

export interface UpdatePullRequestStatusInput {
  readonly pullRequestId: string;
  readonly pullRequestStatus: string;
}

export interface UpdatePullRequestStatusOutput {
  readonly pullRequest: PullRequest;
}

export interface UpdatePullRequestTitleInput {
  readonly pullRequestId: string;
  readonly title: string;
}

export interface UpdatePullRequestTitleOutput {
  readonly pullRequest: PullRequest;
}

export interface UpdateRepositoryDescriptionInput {
  readonly repositoryName: string;
  readonly repositoryDescription?: string;
}

export interface UpdateRepositoryNameInput {
  readonly oldName: string;
  readonly newName: string;
}

export interface UserInfo {
  readonly name?: string;
  readonly email?: string;
  readonly date?: string;
}


