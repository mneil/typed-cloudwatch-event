/**
 * STOP. This file is autogenerated. DO NOT EDIT by hand
 */
export interface BatchPutPropertyValues {
  readonly entries: [];
  readonly workspaceId: string;
}

export interface CreateComponentType {
  readonly componentTypeId: string;
  readonly description?: string;
  readonly extendsFrom?: [];
  readonly functions?: {[key: string]: any};
  readonly isSingleton?: boolean;
  readonly propertyDefinitions?: {[key: string]: any};
  readonly tags?: {[key: string]: any};
  readonly workspaceId: string;
}

export interface CreateEntity {
  readonly components?: {[key: string]: any};
  readonly description?: string;
  readonly entityId?: string;
  readonly entityName: string;
  readonly parentEntityId?: string;
  readonly tags?: {[key: string]: any};
  readonly workspaceId: string;
}

export interface CreateScene {
  readonly capabilities?: [];
  readonly contentLocation: string;
  readonly description?: string;
  readonly sceneId: string;
  readonly tags?: {[key: string]: any};
  readonly workspaceId: string;
}

export interface CreateWorkspace {
  readonly description?: string;
  readonly role: string;
  readonly s3Location: string;
  readonly tags?: {[key: string]: any};
  readonly workspaceId: string;
}

export interface DeleteComponentType {
  readonly componentTypeId: string;
  readonly workspaceId: string;
}

export interface DeleteEntity {
  readonly entityId: string;
  readonly isRecursive?: boolean;
  readonly workspaceId: string;
}

export interface DeleteScene {
  readonly sceneId: string;
  readonly workspaceId: string;
}

export interface DeleteWorkspace {
  readonly workspaceId: string;
}

export interface GetComponentType {
  readonly componentTypeId: string;
  readonly workspaceId: string;
}

export interface GetEntity {
  readonly entityId: string;
  readonly workspaceId: string;
}

export interface GetPropertyValue {
  readonly componentName?: string;
  readonly componentTypeId?: string;
  readonly entityId?: string;
  readonly selectedProperties: [];
  readonly workspaceId: string;
}

export interface GetPropertyValueHistory {
  readonly componentName?: string;
  readonly componentTypeId?: string;
  readonly endDateTime: Date;
  readonly entityId?: string;
  readonly interpolation?: InterpolationParameters;
  readonly maxResults?: number;
  readonly nextToken?: string;
  readonly orderByTime?: string;
  readonly propertyFilters?: [];
  readonly selectedProperties: [];
  readonly startDateTime: Date;
  readonly workspaceId: string;
}

export interface GetScene {
  readonly sceneId: string;
  readonly workspaceId: string;
}

export interface GetWorkspace {
  readonly workspaceId: string;
}

export interface ListComponentTypes {
  readonly filters?: [];
  readonly maxResults?: number;
  readonly nextToken?: string;
  readonly workspaceId: string;
}

export interface ListEntities {
  readonly filters?: [];
  readonly maxResults?: number;
  readonly nextToken?: string;
  readonly workspaceId: string;
}

export interface ListScenes {
  readonly maxResults?: number;
  readonly nextToken?: string;
  readonly workspaceId: string;
}

export interface ListTagsForResource {
  readonly maxResults?: number;
  readonly nextToken?: string;
  readonly resourceARN: string;
}

export interface ListWorkspaces {
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface TagResource {
  readonly resourceARN: string;
  readonly tags: {[key: string]: any};
}

export interface UntagResource {
  readonly resourceARN: string;
  readonly tagKeys: [];
}

export interface UpdateComponentType {
  readonly componentTypeId: string;
  readonly description?: string;
  readonly extendsFrom?: [];
  readonly functions?: {[key: string]: any};
  readonly isSingleton?: boolean;
  readonly propertyDefinitions?: {[key: string]: any};
  readonly workspaceId: string;
}

export interface UpdateEntity {
  readonly componentUpdates?: {[key: string]: any};
  readonly description?: string;
  readonly entityId: string;
  readonly entityName?: string;
  readonly parentEntityUpdate?: ParentEntityUpdateRequest;
  readonly workspaceId: string;
}

export interface UpdateScene {
  readonly capabilities?: [];
  readonly contentLocation?: string;
  readonly description?: string;
  readonly sceneId: string;
  readonly workspaceId: string;
}

export interface UpdateWorkspace {
  readonly description?: string;
  readonly role?: string;
  readonly workspaceId: string;
}

export interface AccessDeniedException {
  readonly message?: string;
}

export interface BatchPutPropertyError {
  readonly entry: PropertyValueEntry;
  readonly errorCode: string;
  readonly errorMessage: string;
}

export interface BatchPutPropertyErrorEntry {
  readonly errors: [];
}

export interface BatchPutPropertyValuesRequest {
  readonly entries: [];
  readonly workspaceId: string;
}

export interface BatchPutPropertyValuesResponse {
  readonly errorEntries: [];
}

export interface ComponentRequest {
  readonly componentTypeId?: string;
  readonly description?: string;
  readonly properties?: {[key: string]: any};
}

export interface ComponentResponse {
  readonly componentName?: string;
  readonly componentTypeId?: string;
  readonly definedIn?: string;
  readonly description?: string;
  readonly properties?: {[key: string]: any};
  readonly status?: Status;
}

export interface ComponentTypeSummary {
  readonly arn: string;
  readonly componentTypeId: string;
  readonly creationDateTime: Date;
  readonly description?: string;
  readonly status?: Status;
  readonly updateDateTime: Date;
}

export interface ComponentUpdateRequest {
  readonly componentTypeId?: string;
  readonly description?: string;
  readonly propertyUpdates?: {[key: string]: any};
  readonly updateType?: string;
}

export interface ConflictException {
  readonly message?: string;
}

export interface ConnectorFailureException {
  readonly message?: string;
}

export interface ConnectorTimeoutException {
  readonly message?: string;
}

export interface CreateComponentTypeRequest {
  readonly componentTypeId: string;
  readonly description?: string;
  readonly extendsFrom?: [];
  readonly functions?: {[key: string]: any};
  readonly isSingleton?: boolean;
  readonly propertyDefinitions?: {[key: string]: any};
  readonly tags?: {[key: string]: any};
  readonly workspaceId: string;
}

export interface CreateComponentTypeResponse {
  readonly arn: string;
  readonly creationDateTime: Date;
  readonly state: string;
}

export interface CreateEntityRequest {
  readonly components?: {[key: string]: any};
  readonly description?: string;
  readonly entityId?: string;
  readonly entityName: string;
  readonly parentEntityId?: string;
  readonly tags?: {[key: string]: any};
  readonly workspaceId: string;
}

export interface CreateEntityResponse {
  readonly arn: string;
  readonly creationDateTime: Date;
  readonly entityId: string;
  readonly state: string;
}

export interface CreateSceneRequest {
  readonly capabilities?: [];
  readonly contentLocation: string;
  readonly description?: string;
  readonly sceneId: string;
  readonly tags?: {[key: string]: any};
  readonly workspaceId: string;
}

export interface CreateSceneResponse {
  readonly arn: string;
  readonly creationDateTime: Date;
}

export interface CreateWorkspaceRequest {
  readonly description?: string;
  readonly role: string;
  readonly s3Location: string;
  readonly tags?: {[key: string]: any};
  readonly workspaceId: string;
}

export interface CreateWorkspaceResponse {
  readonly arn: string;
  readonly creationDateTime: Date;
}

export interface DataConnector {
  readonly isNative?: boolean;
  readonly lambda?: LambdaFunction;
}

export interface DataType {
  readonly allowedValues?: [];
  readonly nestedType?: DataType;
  readonly relationship?: Relationship;
  readonly type: string;
  readonly unitOfMeasure?: string;
}

export interface DataValue {
  readonly booleanValue?: boolean;
  readonly doubleValue?: unknown;
  readonly expression?: string;
  readonly integerValue?: number;
  readonly listValue?: [];
  readonly longValue?: number;
  readonly mapValue?: {[key: string]: any};
  readonly relationshipValue?: RelationshipValue;
  readonly stringValue?: string;
}

export interface DeleteComponentTypeRequest {
  readonly componentTypeId: string;
  readonly workspaceId: string;
}

export interface DeleteComponentTypeResponse {
  readonly state: string;
}

export interface DeleteEntityRequest {
  readonly entityId: string;
  readonly isRecursive?: boolean;
  readonly workspaceId: string;
}

export interface DeleteEntityResponse {
  readonly state: string;
}

export interface DeleteSceneRequest {
  readonly sceneId: string;
  readonly workspaceId: string;
}

export interface DeleteSceneResponse {
}

export interface DeleteWorkspaceRequest {
  readonly workspaceId: string;
}

export interface DeleteWorkspaceResponse {
}

export interface EntityPropertyReference {
  readonly componentName?: string;
  readonly entityId?: string;
  readonly externalIdProperty?: {[key: string]: any};
  readonly propertyName: string;
}

export interface EntitySummary {
  readonly arn: string;
  readonly creationDateTime: Date;
  readonly description?: string;
  readonly entityId: string;
  readonly entityName: string;
  readonly hasChildEntities?: boolean;
  readonly parentEntityId?: string;
  readonly status: Status;
  readonly updateDateTime: Date;
}

export interface ErrorDetails {
  readonly code?: string;
  readonly message?: string;
}

export interface FunctionRequest {
  readonly implementedBy?: DataConnector;
  readonly requiredProperties?: [];
  readonly scope?: string;
}

export interface FunctionResponse {
  readonly implementedBy?: DataConnector;
  readonly isInherited?: boolean;
  readonly requiredProperties?: [];
  readonly scope?: string;
}

export interface GetComponentTypeRequest {
  readonly componentTypeId: string;
  readonly workspaceId: string;
}

export interface GetComponentTypeResponse {
  readonly arn: string;
  readonly componentTypeId: string;
  readonly creationDateTime: Date;
  readonly description?: string;
  readonly extendsFrom?: [];
  readonly functions?: {[key: string]: any};
  readonly isAbstract?: boolean;
  readonly isSchemaInitialized?: boolean;
  readonly isSingleton?: boolean;
  readonly propertyDefinitions?: {[key: string]: any};
  readonly status?: Status;
  readonly updateDateTime: Date;
  readonly workspaceId: string;
}

export interface GetEntityRequest {
  readonly entityId: string;
  readonly workspaceId: string;
}

export interface GetEntityResponse {
  readonly arn: string;
  readonly components?: {[key: string]: any};
  readonly creationDateTime: Date;
  readonly description?: string;
  readonly entityId: string;
  readonly entityName: string;
  readonly hasChildEntities: boolean;
  readonly parentEntityId: string;
  readonly status: Status;
  readonly updateDateTime: Date;
  readonly workspaceId: string;
}

export interface GetPropertyValueHistoryRequest {
  readonly componentName?: string;
  readonly componentTypeId?: string;
  readonly endDateTime: Date;
  readonly entityId?: string;
  readonly interpolation?: InterpolationParameters;
  readonly maxResults?: number;
  readonly nextToken?: string;
  readonly orderByTime?: string;
  readonly propertyFilters?: [];
  readonly selectedProperties: [];
  readonly startDateTime: Date;
  readonly workspaceId: string;
}

export interface GetPropertyValueHistoryResponse {
  readonly nextToken?: string;
  readonly propertyValues: [];
}

export interface GetPropertyValueRequest {
  readonly componentName?: string;
  readonly componentTypeId?: string;
  readonly entityId?: string;
  readonly selectedProperties: [];
  readonly workspaceId: string;
}

export interface GetPropertyValueResponse {
  readonly propertyValues: {[key: string]: any};
}

export interface GetSceneRequest {
  readonly sceneId: string;
  readonly workspaceId: string;
}

export interface GetSceneResponse {
  readonly arn: string;
  readonly capabilities?: [];
  readonly contentLocation: string;
  readonly creationDateTime: Date;
  readonly description?: string;
  readonly sceneId: string;
  readonly updateDateTime: Date;
  readonly workspaceId: string;
}

export interface GetWorkspaceRequest {
  readonly workspaceId: string;
}

export interface GetWorkspaceResponse {
  readonly arn: string;
  readonly creationDateTime: Date;
  readonly description?: string;
  readonly role: string;
  readonly s3Location: string;
  readonly updateDateTime: Date;
  readonly workspaceId: string;
}

export interface InternalServerException {
  readonly message?: string;
}

export interface InterpolationParameters {
  readonly interpolationType?: string;
  readonly intervalInSeconds?: number;
}

export interface LambdaFunction {
  readonly arn: string;
}

export interface ListComponentTypesFilter {
  readonly extendsFrom?: string;
  readonly isAbstract?: boolean;
  readonly namespace?: string;
}

export interface ListComponentTypesRequest {
  readonly filters?: [];
  readonly maxResults?: number;
  readonly nextToken?: string;
  readonly workspaceId: string;
}

export interface ListComponentTypesResponse {
  readonly componentTypeSummaries: [];
  readonly maxResults?: number;
  readonly nextToken?: string;
  readonly workspaceId: string;
}

export interface ListEntitiesFilter {
  readonly componentTypeId?: string;
  readonly parentEntityId?: string;
}

export interface ListEntitiesRequest {
  readonly filters?: [];
  readonly maxResults?: number;
  readonly nextToken?: string;
  readonly workspaceId: string;
}

export interface ListEntitiesResponse {
  readonly entitySummaries?: [];
  readonly nextToken?: string;
}

export interface ListScenesRequest {
  readonly maxResults?: number;
  readonly nextToken?: string;
  readonly workspaceId: string;
}

export interface ListScenesResponse {
  readonly nextToken?: string;
  readonly sceneSummaries?: [];
}

export interface ListTagsForResourceRequest {
  readonly maxResults?: number;
  readonly nextToken?: string;
  readonly resourceARN: string;
}

export interface ListTagsForResourceResponse {
  readonly nextToken?: string;
  readonly tags?: {[key: string]: any};
}

export interface ListWorkspacesRequest {
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface ListWorkspacesResponse {
  readonly nextToken?: string;
  readonly workspaceSummaries?: [];
}

export interface ParentEntityUpdateRequest {
  readonly parentEntityId?: string;
  readonly updateType: string;
}

export interface PropertyDefinitionRequest {
  readonly configuration?: {[key: string]: any};
  readonly dataType?: DataType;
  readonly defaultValue?: DataValue;
  readonly isExternalId?: boolean;
  readonly isRequiredInEntity?: boolean;
  readonly isStoredExternally?: boolean;
  readonly isTimeSeries?: boolean;
}

export interface PropertyDefinitionResponse {
  readonly configuration?: {[key: string]: any};
  readonly dataType: DataType;
  readonly defaultValue?: DataValue;
  readonly isExternalId: boolean;
  readonly isFinal: boolean;
  readonly isImported: boolean;
  readonly isInherited: boolean;
  readonly isRequiredInEntity: boolean;
  readonly isStoredExternally: boolean;
  readonly isTimeSeries: boolean;
}

export interface PropertyFilter {
  readonly operator?: string;
  readonly propertyName?: string;
  readonly value?: DataValue;
}

export interface PropertyLatestValue {
  readonly propertyReference: EntityPropertyReference;
  readonly propertyValue?: DataValue;
}

export interface PropertyRequest {
  readonly definition?: PropertyDefinitionRequest;
  readonly updateType?: string;
  readonly value?: DataValue;
}

export interface PropertyResponse {
  readonly definition?: PropertyDefinitionResponse;
  readonly value?: DataValue;
}

export interface PropertyValue {
  readonly timestamp: Date;
  readonly value: DataValue;
}

export interface PropertyValueEntry {
  readonly entityPropertyReference: EntityPropertyReference;
  readonly propertyValues?: [];
}

export interface PropertyValueHistory {
  readonly entityPropertyReference: EntityPropertyReference;
  readonly values?: [];
}

export interface Relationship {
  readonly relationshipType?: string;
  readonly targetComponentTypeId?: string;
}

export interface RelationshipValue {
  readonly targetComponentName?: string;
  readonly targetEntityId?: string;
}

export interface ResourceNotFoundException {
  readonly message?: string;
}

export interface SceneSummary {
  readonly arn: string;
  readonly contentLocation: string;
  readonly creationDateTime: Date;
  readonly description?: string;
  readonly sceneId: string;
  readonly updateDateTime: Date;
}

export interface ServiceQuotaExceededException {
  readonly message?: string;
}

export interface Status {
  readonly error?: ErrorDetails;
  readonly state?: string;
}

export interface TagResourceRequest {
  readonly resourceARN: string;
  readonly tags: {[key: string]: any};
}

export interface TagResourceResponse {
}

export interface ThrottlingException {
  readonly message?: string;
}

export interface TooManyTagsException {
  readonly message?: string;
}

export interface UntagResourceRequest {
  readonly resourceARN: string;
  readonly tagKeys: [];
}

export interface UntagResourceResponse {
}

export interface UpdateComponentTypeRequest {
  readonly componentTypeId: string;
  readonly description?: string;
  readonly extendsFrom?: [];
  readonly functions?: {[key: string]: any};
  readonly isSingleton?: boolean;
  readonly propertyDefinitions?: {[key: string]: any};
  readonly workspaceId: string;
}

export interface UpdateComponentTypeResponse {
  readonly arn: string;
  readonly componentTypeId: string;
  readonly state: string;
  readonly workspaceId: string;
}

export interface UpdateEntityRequest {
  readonly componentUpdates?: {[key: string]: any};
  readonly description?: string;
  readonly entityId: string;
  readonly entityName?: string;
  readonly parentEntityUpdate?: ParentEntityUpdateRequest;
  readonly workspaceId: string;
}

export interface UpdateEntityResponse {
  readonly state: string;
  readonly updateDateTime: Date;
}

export interface UpdateSceneRequest {
  readonly capabilities?: [];
  readonly contentLocation?: string;
  readonly description?: string;
  readonly sceneId: string;
  readonly workspaceId: string;
}

export interface UpdateSceneResponse {
  readonly updateDateTime: Date;
}

export interface UpdateWorkspaceRequest {
  readonly description?: string;
  readonly role?: string;
  readonly workspaceId: string;
}

export interface UpdateWorkspaceResponse {
  readonly updateDateTime: Date;
}

export interface ValidationException {
  readonly message?: string;
}

export interface WorkspaceSummary {
  readonly arn: string;
  readonly creationDateTime: Date;
  readonly description?: string;
  readonly updateDateTime: Date;
  readonly workspaceId: string;
}


