/**
 * STOP. This file is autogenerated. DO NOT EDIT by hand
 */
export interface BatchPutPropertyValues {
  readonly entries: [];
  readonly workspaceId: string;
}
export interface CreateComponentType {
  readonly componentTypeId: string;
  readonly description: string;
  readonly extendsFrom: [];
  readonly functions: {[key: string]: any};
  readonly isSingleton: boolean;
  readonly propertyDefinitions: {[key: string]: any};
  readonly tags: {[key: string]: any};
  readonly workspaceId: string;
}
export interface CreateEntity {
  readonly components: {[key: string]: any};
  readonly description: string;
  readonly entityId: string;
  readonly entityName: string;
  readonly parentEntityId: string;
  readonly tags: {[key: string]: any};
  readonly workspaceId: string;
}
export interface CreateScene {
  readonly capabilities: [];
  readonly contentLocation: string;
  readonly description: string;
  readonly sceneId: string;
  readonly tags: {[key: string]: any};
  readonly workspaceId: string;
}
export interface CreateWorkspace {
  readonly description: string;
  readonly role: string;
  readonly s3Location: string;
  readonly tags: {[key: string]: any};
  readonly workspaceId: string;
}
export interface DeleteComponentType {
  readonly componentTypeId: string;
  readonly workspaceId: string;
}
export interface DeleteEntity {
  readonly entityId: string;
  readonly isRecursive: boolean;
  readonly workspaceId: string;
}
export interface DeleteScene {
  readonly sceneId: string;
  readonly workspaceId: string;
}
export interface DeleteWorkspace {
  readonly workspaceId: string;
}
export interface GetComponentType {
  readonly componentTypeId: string;
  readonly workspaceId: string;
}
export interface GetEntity {
  readonly entityId: string;
  readonly workspaceId: string;
}
export interface GetPropertyValue {
  readonly componentName: string;
  readonly componentTypeId: string;
  readonly entityId: string;
  readonly selectedProperties: [];
  readonly workspaceId: string;
}
export interface GetPropertyValueHistory {
  readonly componentName: string;
  readonly componentTypeId: string;
  readonly endDateTime: Date;
  readonly entityId: string;
  readonly interpolation: InterpolationParameters;
  readonly maxResults: number;
  readonly nextToken: string;
  readonly orderByTime: string;
  readonly propertyFilters: [];
  readonly selectedProperties: [];
  readonly startDateTime: Date;
  readonly workspaceId: string;
}
export interface GetScene {
  readonly sceneId: string;
  readonly workspaceId: string;
}
export interface GetWorkspace {
  readonly workspaceId: string;
}
export interface ListComponentTypes {
  readonly filters: [];
  readonly maxResults: number;
  readonly nextToken: string;
  readonly workspaceId: string;
}
export interface ListEntities {
  readonly filters: [];
  readonly maxResults: number;
  readonly nextToken: string;
  readonly workspaceId: string;
}
export interface ListScenes {
  readonly maxResults: number;
  readonly nextToken: string;
  readonly workspaceId: string;
}
export interface ListTagsForResource {
  readonly maxResults: number;
  readonly nextToken: string;
  readonly resourceARN: string;
}
export interface ListWorkspaces {
  readonly maxResults: number;
  readonly nextToken: string;
}
export interface TagResource {
  readonly resourceARN: string;
  readonly tags: {[key: string]: any};
}
export interface UntagResource {
  readonly resourceARN: string;
  readonly tagKeys: [];
}
export interface UpdateComponentType {
  readonly componentTypeId: string;
  readonly description: string;
  readonly extendsFrom: [];
  readonly functions: {[key: string]: any};
  readonly isSingleton: boolean;
  readonly propertyDefinitions: {[key: string]: any};
  readonly workspaceId: string;
}
export interface UpdateEntity {
  readonly componentUpdates: {[key: string]: any};
  readonly description: string;
  readonly entityId: string;
  readonly entityName: string;
  readonly parentEntityUpdate: ParentEntityUpdateRequest;
  readonly workspaceId: string;
}
export interface UpdateScene {
  readonly capabilities: [];
  readonly contentLocation: string;
  readonly description: string;
  readonly sceneId: string;
  readonly workspaceId: string;
}
export interface UpdateWorkspace {
  readonly description: string;
  readonly role: string;
  readonly workspaceId: string;
}



interface AccessDeniedException {
  readonly message: string;
}

interface BatchPutPropertyError {
  readonly entry: PropertyValueEntry;
  readonly errorCode: string;
  readonly errorMessage: string;
}

interface BatchPutPropertyErrorEntry {
  readonly errors: [];
}

interface BatchPutPropertyValuesRequest {
  readonly entries: [];
  readonly workspaceId: string;
}

interface BatchPutPropertyValuesResponse {
  readonly errorEntries: [];
}

interface ComponentRequest {
  readonly componentTypeId: string;
  readonly description: string;
  readonly properties: {[key: string]: any};
}

interface ComponentResponse {
  readonly componentName: string;
  readonly componentTypeId: string;
  readonly definedIn: string;
  readonly description: string;
  readonly properties: {[key: string]: any};
  readonly status: Status;
}

interface ComponentTypeSummary {
  readonly arn: string;
  readonly componentTypeId: string;
  readonly creationDateTime: Date;
  readonly description: string;
  readonly status: Status;
  readonly updateDateTime: Date;
}

interface ComponentUpdateRequest {
  readonly componentTypeId: string;
  readonly description: string;
  readonly propertyUpdates: {[key: string]: any};
  readonly updateType: string;
}

interface ConflictException {
  readonly message: string;
}

interface ConnectorFailureException {
  readonly message: string;
}

interface ConnectorTimeoutException {
  readonly message: string;
}

interface CreateComponentTypeRequest {
  readonly componentTypeId: string;
  readonly description: string;
  readonly extendsFrom: [];
  readonly functions: {[key: string]: any};
  readonly isSingleton: boolean;
  readonly propertyDefinitions: {[key: string]: any};
  readonly tags: {[key: string]: any};
  readonly workspaceId: string;
}

interface CreateComponentTypeResponse {
  readonly arn: string;
  readonly creationDateTime: Date;
  readonly state: string;
}

interface CreateEntityRequest {
  readonly components: {[key: string]: any};
  readonly description: string;
  readonly entityId: string;
  readonly entityName: string;
  readonly parentEntityId: string;
  readonly tags: {[key: string]: any};
  readonly workspaceId: string;
}

interface CreateEntityResponse {
  readonly arn: string;
  readonly creationDateTime: Date;
  readonly entityId: string;
  readonly state: string;
}

interface CreateSceneRequest {
  readonly capabilities: [];
  readonly contentLocation: string;
  readonly description: string;
  readonly sceneId: string;
  readonly tags: {[key: string]: any};
  readonly workspaceId: string;
}

interface CreateSceneResponse {
  readonly arn: string;
  readonly creationDateTime: Date;
}

interface CreateWorkspaceRequest {
  readonly description: string;
  readonly role: string;
  readonly s3Location: string;
  readonly tags: {[key: string]: any};
  readonly workspaceId: string;
}

interface CreateWorkspaceResponse {
  readonly arn: string;
  readonly creationDateTime: Date;
}

interface DataConnector {
  readonly isNative: boolean;
  readonly lambda: LambdaFunction;
}

interface DataType {
  readonly allowedValues: [];
  readonly nestedType: DataType;
  readonly relationship: Relationship;
  readonly type: string;
  readonly unitOfMeasure: string;
}

interface DataValue {
  readonly booleanValue: boolean;
  readonly doubleValue: unknown;
  readonly expression: string;
  readonly integerValue: number;
  readonly listValue: [];
  readonly longValue: number;
  readonly mapValue: {[key: string]: any};
  readonly relationshipValue: RelationshipValue;
  readonly stringValue: string;
}

interface DeleteComponentTypeRequest {
  readonly componentTypeId: string;
  readonly workspaceId: string;
}

interface DeleteComponentTypeResponse {
  readonly state: string;
}

interface DeleteEntityRequest {
  readonly entityId: string;
  readonly isRecursive: boolean;
  readonly workspaceId: string;
}

interface DeleteEntityResponse {
  readonly state: string;
}

interface DeleteSceneRequest {
  readonly sceneId: string;
  readonly workspaceId: string;
}

interface DeleteSceneResponse {
}

interface DeleteWorkspaceRequest {
  readonly workspaceId: string;
}

interface DeleteWorkspaceResponse {
}

interface EntityPropertyReference {
  readonly componentName: string;
  readonly entityId: string;
  readonly externalIdProperty: {[key: string]: any};
  readonly propertyName: string;
}

interface EntitySummary {
  readonly arn: string;
  readonly creationDateTime: Date;
  readonly description: string;
  readonly entityId: string;
  readonly entityName: string;
  readonly hasChildEntities: boolean;
  readonly parentEntityId: string;
  readonly status: Status;
  readonly updateDateTime: Date;
}

interface ErrorDetails {
  readonly code: string;
  readonly message: string;
}

interface FunctionRequest {
  readonly implementedBy: DataConnector;
  readonly requiredProperties: [];
  readonly scope: string;
}

interface FunctionResponse {
  readonly implementedBy: DataConnector;
  readonly isInherited: boolean;
  readonly requiredProperties: [];
  readonly scope: string;
}

interface GetComponentTypeRequest {
  readonly componentTypeId: string;
  readonly workspaceId: string;
}

interface GetComponentTypeResponse {
  readonly arn: string;
  readonly componentTypeId: string;
  readonly creationDateTime: Date;
  readonly description: string;
  readonly extendsFrom: [];
  readonly functions: {[key: string]: any};
  readonly isAbstract: boolean;
  readonly isSchemaInitialized: boolean;
  readonly isSingleton: boolean;
  readonly propertyDefinitions: {[key: string]: any};
  readonly status: Status;
  readonly updateDateTime: Date;
  readonly workspaceId: string;
}

interface GetEntityRequest {
  readonly entityId: string;
  readonly workspaceId: string;
}

interface GetEntityResponse {
  readonly arn: string;
  readonly components: {[key: string]: any};
  readonly creationDateTime: Date;
  readonly description: string;
  readonly entityId: string;
  readonly entityName: string;
  readonly hasChildEntities: boolean;
  readonly parentEntityId: string;
  readonly status: Status;
  readonly updateDateTime: Date;
  readonly workspaceId: string;
}

interface GetPropertyValueHistoryRequest {
  readonly componentName: string;
  readonly componentTypeId: string;
  readonly endDateTime: Date;
  readonly entityId: string;
  readonly interpolation: InterpolationParameters;
  readonly maxResults: number;
  readonly nextToken: string;
  readonly orderByTime: string;
  readonly propertyFilters: [];
  readonly selectedProperties: [];
  readonly startDateTime: Date;
  readonly workspaceId: string;
}

interface GetPropertyValueHistoryResponse {
  readonly nextToken: string;
  readonly propertyValues: [];
}

interface GetPropertyValueRequest {
  readonly componentName: string;
  readonly componentTypeId: string;
  readonly entityId: string;
  readonly selectedProperties: [];
  readonly workspaceId: string;
}

interface GetPropertyValueResponse {
  readonly propertyValues: {[key: string]: any};
}

interface GetSceneRequest {
  readonly sceneId: string;
  readonly workspaceId: string;
}

interface GetSceneResponse {
  readonly arn: string;
  readonly capabilities: [];
  readonly contentLocation: string;
  readonly creationDateTime: Date;
  readonly description: string;
  readonly sceneId: string;
  readonly updateDateTime: Date;
  readonly workspaceId: string;
}

interface GetWorkspaceRequest {
  readonly workspaceId: string;
}

interface GetWorkspaceResponse {
  readonly arn: string;
  readonly creationDateTime: Date;
  readonly description: string;
  readonly role: string;
  readonly s3Location: string;
  readonly updateDateTime: Date;
  readonly workspaceId: string;
}

interface InternalServerException {
  readonly message: string;
}

interface InterpolationParameters {
  readonly interpolationType: string;
  readonly intervalInSeconds: number;
}

interface LambdaFunction {
  readonly arn: string;
}

interface ListComponentTypesFilter {
  readonly extendsFrom: string;
  readonly isAbstract: boolean;
  readonly namespace: string;
}

interface ListComponentTypesRequest {
  readonly filters: [];
  readonly maxResults: number;
  readonly nextToken: string;
  readonly workspaceId: string;
}

interface ListComponentTypesResponse {
  readonly componentTypeSummaries: [];
  readonly maxResults: number;
  readonly nextToken: string;
  readonly workspaceId: string;
}

interface ListEntitiesFilter {
  readonly componentTypeId: string;
  readonly parentEntityId: string;
}

interface ListEntitiesRequest {
  readonly filters: [];
  readonly maxResults: number;
  readonly nextToken: string;
  readonly workspaceId: string;
}

interface ListEntitiesResponse {
  readonly entitySummaries: [];
  readonly nextToken: string;
}

interface ListScenesRequest {
  readonly maxResults: number;
  readonly nextToken: string;
  readonly workspaceId: string;
}

interface ListScenesResponse {
  readonly nextToken: string;
  readonly sceneSummaries: [];
}

interface ListTagsForResourceRequest {
  readonly maxResults: number;
  readonly nextToken: string;
  readonly resourceARN: string;
}

interface ListTagsForResourceResponse {
  readonly nextToken: string;
  readonly tags: {[key: string]: any};
}

interface ListWorkspacesRequest {
  readonly maxResults: number;
  readonly nextToken: string;
}

interface ListWorkspacesResponse {
  readonly nextToken: string;
  readonly workspaceSummaries: [];
}

interface ParentEntityUpdateRequest {
  readonly parentEntityId: string;
  readonly updateType: string;
}

interface PropertyDefinitionRequest {
  readonly configuration: {[key: string]: any};
  readonly dataType: DataType;
  readonly defaultValue: DataValue;
  readonly isExternalId: boolean;
  readonly isRequiredInEntity: boolean;
  readonly isStoredExternally: boolean;
  readonly isTimeSeries: boolean;
}

interface PropertyDefinitionResponse {
  readonly configuration: {[key: string]: any};
  readonly dataType: DataType;
  readonly defaultValue: DataValue;
  readonly isExternalId: boolean;
  readonly isFinal: boolean;
  readonly isImported: boolean;
  readonly isInherited: boolean;
  readonly isRequiredInEntity: boolean;
  readonly isStoredExternally: boolean;
  readonly isTimeSeries: boolean;
}

interface PropertyFilter {
  readonly operator: string;
  readonly propertyName: string;
  readonly value: DataValue;
}

interface PropertyLatestValue {
  readonly propertyReference: EntityPropertyReference;
  readonly propertyValue: DataValue;
}

interface PropertyRequest {
  readonly definition: PropertyDefinitionRequest;
  readonly updateType: string;
  readonly value: DataValue;
}

interface PropertyResponse {
  readonly definition: PropertyDefinitionResponse;
  readonly value: DataValue;
}

interface PropertyValue {
  readonly timestamp: Date;
  readonly value: DataValue;
}

interface PropertyValueEntry {
  readonly entityPropertyReference: EntityPropertyReference;
  readonly propertyValues: [];
}

interface PropertyValueHistory {
  readonly entityPropertyReference: EntityPropertyReference;
  readonly values: [];
}

interface Relationship {
  readonly relationshipType: string;
  readonly targetComponentTypeId: string;
}

interface RelationshipValue {
  readonly targetComponentName: string;
  readonly targetEntityId: string;
}

interface ResourceNotFoundException {
  readonly message: string;
}

interface SceneSummary {
  readonly arn: string;
  readonly contentLocation: string;
  readonly creationDateTime: Date;
  readonly description: string;
  readonly sceneId: string;
  readonly updateDateTime: Date;
}

interface ServiceQuotaExceededException {
  readonly message: string;
}

interface Status {
  readonly error: ErrorDetails;
  readonly state: string;
}

interface TagResourceRequest {
  readonly resourceARN: string;
  readonly tags: {[key: string]: any};
}

interface TagResourceResponse {
}

interface ThrottlingException {
  readonly message: string;
}

interface TooManyTagsException {
  readonly message: string;
}

interface UntagResourceRequest {
  readonly resourceARN: string;
  readonly tagKeys: [];
}

interface UntagResourceResponse {
}

interface UpdateComponentTypeRequest {
  readonly componentTypeId: string;
  readonly description: string;
  readonly extendsFrom: [];
  readonly functions: {[key: string]: any};
  readonly isSingleton: boolean;
  readonly propertyDefinitions: {[key: string]: any};
  readonly workspaceId: string;
}

interface UpdateComponentTypeResponse {
  readonly arn: string;
  readonly componentTypeId: string;
  readonly state: string;
  readonly workspaceId: string;
}

interface UpdateEntityRequest {
  readonly componentUpdates: {[key: string]: any};
  readonly description: string;
  readonly entityId: string;
  readonly entityName: string;
  readonly parentEntityUpdate: ParentEntityUpdateRequest;
  readonly workspaceId: string;
}

interface UpdateEntityResponse {
  readonly state: string;
  readonly updateDateTime: Date;
}

interface UpdateSceneRequest {
  readonly capabilities: [];
  readonly contentLocation: string;
  readonly description: string;
  readonly sceneId: string;
  readonly workspaceId: string;
}

interface UpdateSceneResponse {
  readonly updateDateTime: Date;
}

interface UpdateWorkspaceRequest {
  readonly description: string;
  readonly role: string;
  readonly workspaceId: string;
}

interface UpdateWorkspaceResponse {
  readonly updateDateTime: Date;
}

interface ValidationException {
  readonly message: string;
}

interface WorkspaceSummary {
  readonly arn: string;
  readonly creationDateTime: Date;
  readonly description: string;
  readonly updateDateTime: Date;
  readonly workspaceId: string;
}

