/**
 * STOP. This file is autogenerated. DO NOT EDIT by hand
 */
export interface CreateIdentityPool {
  readonly IdentityPoolName: string;
  readonly AllowUnauthenticatedIdentities: boolean;
  readonly AllowClassicFlow?: boolean;
  readonly SupportedLoginProviders?: {[key: string]: any};
  readonly DeveloperProviderName?: string;
  readonly OpenIdConnectProviderARNs?: [];
  readonly CognitoIdentityProviders?: [];
  readonly SamlProviderARNs?: [];
  readonly IdentityPoolTags?: {[key: string]: any};
}

export interface DeleteIdentities {
  readonly IdentityIdsToDelete: [];
}

export interface DeleteIdentityPool {
  readonly IdentityPoolId: string;
}

export interface DescribeIdentity {
  readonly IdentityId: string;
}

export interface DescribeIdentityPool {
  readonly IdentityPoolId: string;
}

export interface GetCredentialsForIdentity {
  readonly IdentityId: string;
  readonly Logins?: {[key: string]: any};
  readonly CustomRoleArn?: string;
}

export interface GetId {
  readonly AccountId?: string;
  readonly IdentityPoolId: string;
  readonly Logins?: {[key: string]: any};
}

export interface GetIdentityPoolRoles {
  readonly IdentityPoolId: string;
}

export interface GetOpenIdToken {
  readonly IdentityId: string;
  readonly Logins?: {[key: string]: any};
}

export interface GetOpenIdTokenForDeveloperIdentity {
  readonly IdentityPoolId: string;
  readonly IdentityId?: string;
  readonly Logins: {[key: string]: any};
  readonly PrincipalTags?: {[key: string]: any};
  readonly TokenDuration?: number;
}

export interface GetPrincipalTagAttributeMap {
  readonly IdentityPoolId: string;
  readonly IdentityProviderName: string;
}

export interface ListIdentities {
  readonly IdentityPoolId: string;
  readonly MaxResults: number;
  readonly NextToken?: string;
  readonly HideDisabled?: boolean;
}

export interface ListIdentityPools {
  readonly MaxResults: number;
  readonly NextToken?: string;
}

export interface ListTagsForResource {
  readonly ResourceArn: string;
}

export interface LookupDeveloperIdentity {
  readonly IdentityPoolId: string;
  readonly IdentityId?: string;
  readonly DeveloperUserIdentifier?: string;
  readonly MaxResults?: number;
  readonly NextToken?: string;
}

export interface MergeDeveloperIdentities {
  readonly SourceUserIdentifier: string;
  readonly DestinationUserIdentifier: string;
  readonly DeveloperProviderName: string;
  readonly IdentityPoolId: string;
}

export interface SetIdentityPoolRoles {
  readonly IdentityPoolId: string;
  readonly Roles: {[key: string]: any};
  readonly RoleMappings?: {[key: string]: any};
}

export interface SetPrincipalTagAttributeMap {
  readonly IdentityPoolId: string;
  readonly IdentityProviderName: string;
  readonly UseDefaults?: boolean;
  readonly PrincipalTags?: {[key: string]: any};
}

export interface TagResource {
  readonly ResourceArn: string;
  readonly Tags: {[key: string]: any};
}

export interface UnlinkDeveloperIdentity {
  readonly IdentityId: string;
  readonly IdentityPoolId: string;
  readonly DeveloperProviderName: string;
  readonly DeveloperUserIdentifier: string;
}

export interface UnlinkIdentity {
  readonly IdentityId: string;
  readonly Logins: {[key: string]: any};
  readonly LoginsToRemove: [];
}

export interface UntagResource {
  readonly ResourceArn: string;
  readonly TagKeys: [];
}

export interface UpdateIdentityPool {
  readonly IdentityPoolId: string;
  readonly IdentityPoolName: string;
  readonly AllowUnauthenticatedIdentities: boolean;
  readonly AllowClassicFlow?: boolean;
  readonly SupportedLoginProviders?: {[key: string]: any};
  readonly DeveloperProviderName?: string;
  readonly OpenIdConnectProviderARNs?: [];
  readonly CognitoIdentityProviders?: [];
  readonly SamlProviderARNs?: [];
  readonly IdentityPoolTags?: {[key: string]: any};
}

export interface CognitoIdentityProvider {
  readonly ProviderName?: string;
  readonly ClientId?: string;
  readonly ServerSideTokenCheck?: boolean;
}

export interface ConcurrentModificationException {
  readonly message?: string;
}

export interface CreateIdentityPoolInput {
  readonly IdentityPoolName: string;
  readonly AllowUnauthenticatedIdentities: boolean;
  readonly AllowClassicFlow?: boolean;
  readonly SupportedLoginProviders?: {[key: string]: any};
  readonly DeveloperProviderName?: string;
  readonly OpenIdConnectProviderARNs?: [];
  readonly CognitoIdentityProviders?: [];
  readonly SamlProviderARNs?: [];
  readonly IdentityPoolTags?: {[key: string]: any};
}

export interface Credentials {
  readonly AccessKeyId?: string;
  readonly SecretKey?: string;
  readonly SessionToken?: string;
  readonly Expiration?: Date;
}

export interface DeleteIdentitiesInput {
  readonly IdentityIdsToDelete: [];
}

export interface DeleteIdentitiesResponse {
  readonly UnprocessedIdentityIds?: [];
}

export interface DeleteIdentityPoolInput {
  readonly IdentityPoolId: string;
}

export interface DescribeIdentityInput {
  readonly IdentityId: string;
}

export interface DescribeIdentityPoolInput {
  readonly IdentityPoolId: string;
}

export interface DeveloperUserAlreadyRegisteredException {
  readonly message?: string;
}

export interface ExternalServiceException {
  readonly message?: string;
}

export interface GetCredentialsForIdentityInput {
  readonly IdentityId: string;
  readonly Logins?: {[key: string]: any};
  readonly CustomRoleArn?: string;
}

export interface GetCredentialsForIdentityResponse {
  readonly IdentityId?: string;
  readonly Credentials?: Credentials;
}

export interface GetIdInput {
  readonly AccountId?: string;
  readonly IdentityPoolId: string;
  readonly Logins?: {[key: string]: any};
}

export interface GetIdResponse {
  readonly IdentityId?: string;
}

export interface GetIdentityPoolRolesInput {
  readonly IdentityPoolId: string;
}

export interface GetIdentityPoolRolesResponse {
  readonly IdentityPoolId?: string;
  readonly Roles?: {[key: string]: any};
  readonly RoleMappings?: {[key: string]: any};
}

export interface GetOpenIdTokenForDeveloperIdentityInput {
  readonly IdentityPoolId: string;
  readonly IdentityId?: string;
  readonly Logins: {[key: string]: any};
  readonly PrincipalTags?: {[key: string]: any};
  readonly TokenDuration?: number;
}

export interface GetOpenIdTokenForDeveloperIdentityResponse {
  readonly IdentityId?: string;
  readonly Token?: string;
}

export interface GetOpenIdTokenInput {
  readonly IdentityId: string;
  readonly Logins?: {[key: string]: any};
}

export interface GetOpenIdTokenResponse {
  readonly IdentityId?: string;
  readonly Token?: string;
}

export interface GetPrincipalTagAttributeMapInput {
  readonly IdentityPoolId: string;
  readonly IdentityProviderName: string;
}

export interface GetPrincipalTagAttributeMapResponse {
  readonly IdentityPoolId?: string;
  readonly IdentityProviderName?: string;
  readonly UseDefaults?: boolean;
  readonly PrincipalTags?: {[key: string]: any};
}

export interface IdentityDescription {
  readonly IdentityId?: string;
  readonly Logins?: [];
  readonly CreationDate?: Date;
  readonly LastModifiedDate?: Date;
}

export interface IdentityPool {
  readonly IdentityPoolId: string;
  readonly IdentityPoolName: string;
  readonly AllowUnauthenticatedIdentities: boolean;
  readonly AllowClassicFlow?: boolean;
  readonly SupportedLoginProviders?: {[key: string]: any};
  readonly DeveloperProviderName?: string;
  readonly OpenIdConnectProviderARNs?: [];
  readonly CognitoIdentityProviders?: [];
  readonly SamlProviderARNs?: [];
  readonly IdentityPoolTags?: {[key: string]: any};
}

export interface IdentityPoolShortDescription {
  readonly IdentityPoolId?: string;
  readonly IdentityPoolName?: string;
}

export interface InternalErrorException {
  readonly message?: string;
}

export interface InvalidIdentityPoolConfigurationException {
  readonly message?: string;
}

export interface InvalidParameterException {
  readonly message?: string;
}

export interface LimitExceededException {
  readonly message?: string;
}

export interface ListIdentitiesInput {
  readonly IdentityPoolId: string;
  readonly MaxResults: number;
  readonly NextToken?: string;
  readonly HideDisabled?: boolean;
}

export interface ListIdentitiesResponse {
  readonly IdentityPoolId?: string;
  readonly Identities?: [];
  readonly NextToken?: string;
}

export interface ListIdentityPoolsInput {
  readonly MaxResults: number;
  readonly NextToken?: string;
}

export interface ListIdentityPoolsResponse {
  readonly IdentityPools?: [];
  readonly NextToken?: string;
}

export interface ListTagsForResourceInput {
  readonly ResourceArn: string;
}

export interface ListTagsForResourceResponse {
  readonly Tags?: {[key: string]: any};
}

export interface LookupDeveloperIdentityInput {
  readonly IdentityPoolId: string;
  readonly IdentityId?: string;
  readonly DeveloperUserIdentifier?: string;
  readonly MaxResults?: number;
  readonly NextToken?: string;
}

export interface LookupDeveloperIdentityResponse {
  readonly IdentityId?: string;
  readonly DeveloperUserIdentifierList?: [];
  readonly NextToken?: string;
}

export interface MappingRule {
  readonly Claim: string;
  readonly MatchType: string;
  readonly Value: string;
  readonly RoleARN: string;
}

export interface MergeDeveloperIdentitiesInput {
  readonly SourceUserIdentifier: string;
  readonly DestinationUserIdentifier: string;
  readonly DeveloperProviderName: string;
  readonly IdentityPoolId: string;
}

export interface MergeDeveloperIdentitiesResponse {
  readonly IdentityId?: string;
}

export interface NotAuthorizedException {
  readonly message?: string;
}

export interface ResourceConflictException {
  readonly message?: string;
}

export interface ResourceNotFoundException {
  readonly message?: string;
}

export interface RoleMapping {
  readonly Type: string;
  readonly AmbiguousRoleResolution?: string;
  readonly RulesConfiguration?: RulesConfigurationType;
}

export interface RulesConfigurationType {
  readonly Rules: [];
}

export interface SetIdentityPoolRolesInput {
  readonly IdentityPoolId: string;
  readonly Roles: {[key: string]: any};
  readonly RoleMappings?: {[key: string]: any};
}

export interface SetPrincipalTagAttributeMapInput {
  readonly IdentityPoolId: string;
  readonly IdentityProviderName: string;
  readonly UseDefaults?: boolean;
  readonly PrincipalTags?: {[key: string]: any};
}

export interface SetPrincipalTagAttributeMapResponse {
  readonly IdentityPoolId?: string;
  readonly IdentityProviderName?: string;
  readonly UseDefaults?: boolean;
  readonly PrincipalTags?: {[key: string]: any};
}

export interface TagResourceInput {
  readonly ResourceArn: string;
  readonly Tags: {[key: string]: any};
}

export interface TagResourceResponse {
}

export interface TooManyRequestsException {
  readonly message?: string;
}

export interface UnlinkDeveloperIdentityInput {
  readonly IdentityId: string;
  readonly IdentityPoolId: string;
  readonly DeveloperProviderName: string;
  readonly DeveloperUserIdentifier: string;
}

export interface UnlinkIdentityInput {
  readonly IdentityId: string;
  readonly Logins: {[key: string]: any};
  readonly LoginsToRemove: [];
}

export interface UnprocessedIdentityId {
  readonly IdentityId?: string;
  readonly ErrorCode?: string;
}

export interface UntagResourceInput {
  readonly ResourceArn: string;
  readonly TagKeys: [];
}

export interface UntagResourceResponse {
}


