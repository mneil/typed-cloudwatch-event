/**
 * STOP. This file is autogenerated. DO NOT EDIT by hand
 */
export interface AssociateLicense {
  readonly licenseType: string;
  readonly workspaceId: string;
}
export interface CreateWorkspace {
  readonly accountAccessType: string;
  readonly authenticationProviders: [];
  readonly clientToken: string;
  readonly organizationRoleName: string;
  readonly permissionType: string;
  readonly stackSetName: string;
  readonly workspaceDataSources: [];
  readonly workspaceDescription: string;
  readonly workspaceName: string;
  readonly workspaceNotificationDestinations: [];
  readonly workspaceOrganizationalUnits: [];
  readonly workspaceRoleArn: string;
}
export interface DeleteWorkspace {
  readonly workspaceId: string;
}
export interface DescribeWorkspace {
  readonly workspaceId: string;
}
export interface DescribeWorkspaceAuthentication {
  readonly workspaceId: string;
}
export interface DisassociateLicense {
  readonly licenseType: string;
  readonly workspaceId: string;
}
export interface ListPermissions {
  readonly groupId: string;
  readonly maxResults: number;
  readonly nextToken: string;
  readonly userId: string;
  readonly userType: string;
  readonly workspaceId: string;
}
export interface ListWorkspaces {
  readonly maxResults: number;
  readonly nextToken: string;
}
export interface UpdatePermissions {
  readonly updateInstructionBatch: [];
  readonly workspaceId: string;
}
export interface UpdateWorkspace {
  readonly accountAccessType: string;
  readonly organizationRoleName: string;
  readonly permissionType: string;
  readonly stackSetName: string;
  readonly workspaceDataSources: [];
  readonly workspaceDescription: string;
  readonly workspaceId: string;
  readonly workspaceName: string;
  readonly workspaceNotificationDestinations: [];
  readonly workspaceOrganizationalUnits: [];
  readonly workspaceRoleArn: string;
}
export interface UpdateWorkspaceAuthentication {
  readonly authenticationProviders: [];
  readonly samlConfiguration: SamlConfiguration;
  readonly workspaceId: string;
}



interface AccessDeniedException {
  readonly message: string;
}

interface AssertionAttributes {
  readonly email: string;
  readonly groups: string;
  readonly login: string;
  readonly name: string;
  readonly org: string;
  readonly role: string;
}

interface AssociateLicenseRequest {
  readonly licenseType: string;
  readonly workspaceId: string;
}

interface AssociateLicenseResponse {
  readonly workspace: WorkspaceDescription;
}

interface AuthenticationDescription {
  readonly awsSso: AwsSsoAuthentication;
  readonly providers: [];
  readonly saml: SamlAuthentication;
}

interface AuthenticationSummary {
  readonly providers: [];
  readonly samlConfigurationStatus: string;
}

interface AwsSsoAuthentication {
  readonly ssoClientId: string;
}

interface ConflictException {
  readonly message: string;
  readonly resourceId: string;
  readonly resourceType: string;
}

interface CreateWorkspaceRequest {
  readonly accountAccessType: string;
  readonly authenticationProviders: [];
  readonly clientToken: string;
  readonly organizationRoleName: string;
  readonly permissionType: string;
  readonly stackSetName: string;
  readonly workspaceDataSources: [];
  readonly workspaceDescription: string;
  readonly workspaceName: string;
  readonly workspaceNotificationDestinations: [];
  readonly workspaceOrganizationalUnits: [];
  readonly workspaceRoleArn: string;
}

interface CreateWorkspaceResponse {
  readonly workspace: WorkspaceDescription;
}

interface DeleteWorkspaceRequest {
  readonly workspaceId: string;
}

interface DeleteWorkspaceResponse {
  readonly workspace: WorkspaceDescription;
}

interface DescribeWorkspaceAuthenticationRequest {
  readonly workspaceId: string;
}

interface DescribeWorkspaceAuthenticationResponse {
  readonly authentication: AuthenticationDescription;
}

interface DescribeWorkspaceRequest {
  readonly workspaceId: string;
}

interface DescribeWorkspaceResponse {
  readonly workspace: WorkspaceDescription;
}

interface DisassociateLicenseRequest {
  readonly licenseType: string;
  readonly workspaceId: string;
}

interface DisassociateLicenseResponse {
  readonly workspace: WorkspaceDescription;
}

interface IdpMetadata {
  readonly url: string;
  readonly xml: string;
}

interface InternalServerException {
  readonly message: string;
  readonly retryAfterSeconds: number;
}

interface ListPermissionsRequest {
  readonly groupId: string;
  readonly maxResults: number;
  readonly nextToken: string;
  readonly userId: string;
  readonly userType: string;
  readonly workspaceId: string;
}

interface ListPermissionsResponse {
  readonly nextToken: string;
  readonly permissions: [];
}

interface ListWorkspacesRequest {
  readonly maxResults: number;
  readonly nextToken: string;
}

interface ListWorkspacesResponse {
  readonly nextToken: string;
  readonly workspaces: [];
}

interface PermissionEntry {
  readonly role: string;
  readonly user: User;
}

interface ResourceNotFoundException {
  readonly message: string;
  readonly resourceId: string;
  readonly resourceType: string;
}

interface RoleValues {
  readonly admin: [];
  readonly editor: [];
}

interface SamlAuthentication {
  readonly configuration: SamlConfiguration;
  readonly status: string;
}

interface SamlConfiguration {
  readonly allowedOrganizations: [];
  readonly assertionAttributes: AssertionAttributes;
  readonly idpMetadata: IdpMetadata;
  readonly loginValidityDuration: number;
  readonly roleValues: RoleValues;
}

interface ServiceQuotaExceededException {
  readonly message: string;
  readonly quotaCode: string;
  readonly resourceId: string;
  readonly resourceType: string;
  readonly serviceCode: string;
}

interface ThrottlingException {
  readonly message: string;
  readonly quotaCode: string;
  readonly retryAfterSeconds: number;
  readonly serviceCode: string;
}

interface UpdateError {
  readonly causedBy: UpdateInstruction;
  readonly code: number;
  readonly message: string;
}

interface UpdateInstruction {
  readonly action: string;
  readonly role: string;
  readonly users: [];
}

interface UpdatePermissionsRequest {
  readonly updateInstructionBatch: [];
  readonly workspaceId: string;
}

interface UpdatePermissionsResponse {
  readonly errors: [];
}

interface UpdateWorkspaceAuthenticationRequest {
  readonly authenticationProviders: [];
  readonly samlConfiguration: SamlConfiguration;
  readonly workspaceId: string;
}

interface UpdateWorkspaceAuthenticationResponse {
  readonly authentication: AuthenticationDescription;
}

interface UpdateWorkspaceRequest {
  readonly accountAccessType: string;
  readonly organizationRoleName: string;
  readonly permissionType: string;
  readonly stackSetName: string;
  readonly workspaceDataSources: [];
  readonly workspaceDescription: string;
  readonly workspaceId: string;
  readonly workspaceName: string;
  readonly workspaceNotificationDestinations: [];
  readonly workspaceOrganizationalUnits: [];
  readonly workspaceRoleArn: string;
}

interface UpdateWorkspaceResponse {
  readonly workspace: WorkspaceDescription;
}

interface User {
  readonly id: string;
  readonly type: string;
}

interface ValidationException {
  readonly fieldList: [];
  readonly message: string;
  readonly reason: string;
}

interface ValidationExceptionField {
  readonly message: string;
  readonly name: string;
}

interface WorkspaceDescription {
  readonly accountAccessType: string;
  readonly authentication: AuthenticationSummary;
  readonly created: Date;
  readonly dataSources: [];
  readonly description: string;
  readonly endpoint: string;
  readonly freeTrialConsumed: boolean;
  readonly freeTrialExpiration: Date;
  readonly grafanaVersion: string;
  readonly id: string;
  readonly licenseExpiration: Date;
  readonly licenseType: string;
  readonly modified: Date;
  readonly name: string;
  readonly notificationDestinations: [];
  readonly organizationRoleName: string;
  readonly organizationalUnits: [];
  readonly permissionType: string;
  readonly stackSetName: string;
  readonly status: string;
  readonly workspaceRoleArn: string;
}

interface WorkspaceSummary {
  readonly authentication: AuthenticationSummary;
  readonly created: Date;
  readonly description: string;
  readonly endpoint: string;
  readonly grafanaVersion: string;
  readonly id: string;
  readonly modified: Date;
  readonly name: string;
  readonly notificationDestinations: [];
  readonly status: string;
}

