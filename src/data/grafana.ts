/**
 * STOP. This file is autogenerated. DO NOT EDIT by hand
 */
export interface AssociateLicense {
  readonly licenseType: string;
  readonly workspaceId: string;
}

export interface CreateWorkspace {
  readonly accountAccessType: string;
  readonly authenticationProviders: [];
  readonly clientToken?: string;
  readonly organizationRoleName?: string;
  readonly permissionType: string;
  readonly stackSetName?: string;
  readonly workspaceDataSources?: [];
  readonly workspaceDescription?: string;
  readonly workspaceName?: string;
  readonly workspaceNotificationDestinations?: [];
  readonly workspaceOrganizationalUnits?: [];
  readonly workspaceRoleArn?: string;
}

export interface DeleteWorkspace {
  readonly workspaceId: string;
}

export interface DescribeWorkspace {
  readonly workspaceId: string;
}

export interface DescribeWorkspaceAuthentication {
  readonly workspaceId: string;
}

export interface DisassociateLicense {
  readonly licenseType: string;
  readonly workspaceId: string;
}

export interface ListPermissions {
  readonly groupId?: string;
  readonly maxResults?: number;
  readonly nextToken?: string;
  readonly userId?: string;
  readonly userType?: string;
  readonly workspaceId: string;
}

export interface ListWorkspaces {
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface UpdatePermissions {
  readonly updateInstructionBatch: [];
  readonly workspaceId: string;
}

export interface UpdateWorkspace {
  readonly accountAccessType?: string;
  readonly organizationRoleName?: string;
  readonly permissionType?: string;
  readonly stackSetName?: string;
  readonly workspaceDataSources?: [];
  readonly workspaceDescription?: string;
  readonly workspaceId: string;
  readonly workspaceName?: string;
  readonly workspaceNotificationDestinations?: [];
  readonly workspaceOrganizationalUnits?: [];
  readonly workspaceRoleArn?: string;
}

export interface UpdateWorkspaceAuthentication {
  readonly authenticationProviders: [];
  readonly samlConfiguration?: SamlConfiguration;
  readonly workspaceId: string;
}

export interface AccessDeniedException {
  readonly message: string;
}

export interface AssertionAttributes {
  readonly email?: string;
  readonly groups?: string;
  readonly login?: string;
  readonly name?: string;
  readonly org?: string;
  readonly role?: string;
}

export interface AssociateLicenseRequest {
  readonly licenseType: string;
  readonly workspaceId: string;
}

export interface AssociateLicenseResponse {
  readonly workspace: WorkspaceDescription;
}

export interface AuthenticationDescription {
  readonly awsSso?: AwsSsoAuthentication;
  readonly providers: [];
  readonly saml?: SamlAuthentication;
}

export interface AuthenticationSummary {
  readonly providers: [];
  readonly samlConfigurationStatus?: string;
}

export interface AwsSsoAuthentication {
  readonly ssoClientId?: string;
}

export interface ConflictException {
  readonly message: string;
  readonly resourceId: string;
  readonly resourceType: string;
}

export interface CreateWorkspaceRequest {
  readonly accountAccessType: string;
  readonly authenticationProviders: [];
  readonly clientToken?: string;
  readonly organizationRoleName?: string;
  readonly permissionType: string;
  readonly stackSetName?: string;
  readonly workspaceDataSources?: [];
  readonly workspaceDescription?: string;
  readonly workspaceName?: string;
  readonly workspaceNotificationDestinations?: [];
  readonly workspaceOrganizationalUnits?: [];
  readonly workspaceRoleArn?: string;
}

export interface CreateWorkspaceResponse {
  readonly workspace: WorkspaceDescription;
}

export interface DeleteWorkspaceRequest {
  readonly workspaceId: string;
}

export interface DeleteWorkspaceResponse {
  readonly workspace: WorkspaceDescription;
}

export interface DescribeWorkspaceAuthenticationRequest {
  readonly workspaceId: string;
}

export interface DescribeWorkspaceAuthenticationResponse {
  readonly authentication: AuthenticationDescription;
}

export interface DescribeWorkspaceRequest {
  readonly workspaceId: string;
}

export interface DescribeWorkspaceResponse {
  readonly workspace: WorkspaceDescription;
}

export interface DisassociateLicenseRequest {
  readonly licenseType: string;
  readonly workspaceId: string;
}

export interface DisassociateLicenseResponse {
  readonly workspace: WorkspaceDescription;
}

export interface IdpMetadata {
  readonly url?: string;
  readonly xml?: string;
}

export interface InternalServerException {
  readonly message: string;
  readonly retryAfterSeconds?: number;
}

export interface ListPermissionsRequest {
  readonly groupId?: string;
  readonly maxResults?: number;
  readonly nextToken?: string;
  readonly userId?: string;
  readonly userType?: string;
  readonly workspaceId: string;
}

export interface ListPermissionsResponse {
  readonly nextToken?: string;
  readonly permissions: [];
}

export interface ListWorkspacesRequest {
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface ListWorkspacesResponse {
  readonly nextToken?: string;
  readonly workspaces: [];
}

export interface PermissionEntry {
  readonly role: string;
  readonly user: User;
}

export interface ResourceNotFoundException {
  readonly message: string;
  readonly resourceId: string;
  readonly resourceType: string;
}

export interface RoleValues {
  readonly admin?: [];
  readonly editor?: [];
}

export interface SamlAuthentication {
  readonly configuration?: SamlConfiguration;
  readonly status: string;
}

export interface SamlConfiguration {
  readonly allowedOrganizations?: [];
  readonly assertionAttributes?: AssertionAttributes;
  readonly idpMetadata: IdpMetadata;
  readonly loginValidityDuration?: number;
  readonly roleValues?: RoleValues;
}

export interface ServiceQuotaExceededException {
  readonly message: string;
  readonly quotaCode: string;
  readonly resourceId: string;
  readonly resourceType: string;
  readonly serviceCode: string;
}

export interface ThrottlingException {
  readonly message: string;
  readonly quotaCode?: string;
  readonly retryAfterSeconds?: number;
  readonly serviceCode?: string;
}

export interface UpdateError {
  readonly causedBy: UpdateInstruction;
  readonly code: number;
  readonly message: string;
}

export interface UpdateInstruction {
  readonly action: string;
  readonly role: string;
  readonly users: [];
}

export interface UpdatePermissionsRequest {
  readonly updateInstructionBatch: [];
  readonly workspaceId: string;
}

export interface UpdatePermissionsResponse {
  readonly errors: [];
}

export interface UpdateWorkspaceAuthenticationRequest {
  readonly authenticationProviders: [];
  readonly samlConfiguration?: SamlConfiguration;
  readonly workspaceId: string;
}

export interface UpdateWorkspaceAuthenticationResponse {
  readonly authentication: AuthenticationDescription;
}

export interface UpdateWorkspaceRequest {
  readonly accountAccessType?: string;
  readonly organizationRoleName?: string;
  readonly permissionType?: string;
  readonly stackSetName?: string;
  readonly workspaceDataSources?: [];
  readonly workspaceDescription?: string;
  readonly workspaceId: string;
  readonly workspaceName?: string;
  readonly workspaceNotificationDestinations?: [];
  readonly workspaceOrganizationalUnits?: [];
  readonly workspaceRoleArn?: string;
}

export interface UpdateWorkspaceResponse {
  readonly workspace: WorkspaceDescription;
}

export interface User {
  readonly id: string;
  readonly type: string;
}

export interface ValidationException {
  readonly fieldList?: [];
  readonly message: string;
  readonly reason: string;
}

export interface ValidationExceptionField {
  readonly message: string;
  readonly name: string;
}

export interface WorkspaceDescription {
  readonly accountAccessType?: string;
  readonly authentication: AuthenticationSummary;
  readonly created: Date;
  readonly dataSources: [];
  readonly description?: string;
  readonly endpoint: string;
  readonly freeTrialConsumed?: boolean;
  readonly freeTrialExpiration?: Date;
  readonly grafanaVersion: string;
  readonly id: string;
  readonly licenseExpiration?: Date;
  readonly licenseType?: string;
  readonly modified: Date;
  readonly name?: string;
  readonly notificationDestinations?: [];
  readonly organizationRoleName?: string;
  readonly organizationalUnits?: [];
  readonly permissionType?: string;
  readonly stackSetName?: string;
  readonly status: string;
  readonly workspaceRoleArn?: string;
}

export interface WorkspaceSummary {
  readonly authentication: AuthenticationSummary;
  readonly created: Date;
  readonly description?: string;
  readonly endpoint: string;
  readonly grafanaVersion: string;
  readonly id: string;
  readonly modified: Date;
  readonly name?: string;
  readonly notificationDestinations?: [];
  readonly status: string;
}


