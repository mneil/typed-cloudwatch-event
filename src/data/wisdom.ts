/**
 * STOP. This file is autogenerated. DO NOT EDIT by hand
 */
export interface CreateAssistant {
  readonly clientToken: string;
  readonly description: string;
  readonly name: string;
  readonly serverSideEncryptionConfiguration: ServerSideEncryptionConfiguration;
  readonly tags: {[key: string]: any};
  readonly type: string;
}
export interface CreateAssistantAssociation {
  readonly assistantId: string;
  readonly association: AssistantAssociationInputData;
  readonly associationType: string;
  readonly clientToken: string;
  readonly tags: {[key: string]: any};
}
export interface CreateContent {
  readonly clientToken: string;
  readonly knowledgeBaseId: string;
  readonly metadata: {[key: string]: any};
  readonly name: string;
  readonly overrideLinkOutUri: string;
  readonly tags: {[key: string]: any};
  readonly title: string;
  readonly uploadId: string;
}
export interface CreateKnowledgeBase {
  readonly clientToken: string;
  readonly description: string;
  readonly knowledgeBaseType: string;
  readonly name: string;
  readonly renderingConfiguration: RenderingConfiguration;
  readonly serverSideEncryptionConfiguration: ServerSideEncryptionConfiguration;
  readonly sourceConfiguration: SourceConfiguration;
  readonly tags: {[key: string]: any};
}
export interface CreateSession {
  readonly assistantId: string;
  readonly clientToken: string;
  readonly description: string;
  readonly name: string;
  readonly tags: {[key: string]: any};
}
export interface DeleteAssistant {
  readonly assistantId: string;
}
export interface DeleteAssistantAssociation {
  readonly assistantAssociationId: string;
  readonly assistantId: string;
}
export interface DeleteContent {
  readonly contentId: string;
  readonly knowledgeBaseId: string;
}
export interface DeleteKnowledgeBase {
  readonly knowledgeBaseId: string;
}
export interface GetAssistant {
  readonly assistantId: string;
}
export interface GetAssistantAssociation {
  readonly assistantAssociationId: string;
  readonly assistantId: string;
}
export interface GetContent {
  readonly contentId: string;
  readonly knowledgeBaseId: string;
}
export interface GetContentSummary {
  readonly contentId: string;
  readonly knowledgeBaseId: string;
}
export interface GetKnowledgeBase {
  readonly knowledgeBaseId: string;
}
export interface GetRecommendations {
  readonly assistantId: string;
  readonly maxResults: number;
  readonly sessionId: string;
  readonly waitTimeSeconds: number;
}
export interface GetSession {
  readonly assistantId: string;
  readonly sessionId: string;
}
export interface ListAssistantAssociations {
  readonly assistantId: string;
  readonly maxResults: number;
  readonly nextToken: string;
}
export interface ListAssistants {
  readonly maxResults: number;
  readonly nextToken: string;
}
export interface ListContents {
  readonly knowledgeBaseId: string;
  readonly maxResults: number;
  readonly nextToken: string;
}
export interface ListKnowledgeBases {
  readonly maxResults: number;
  readonly nextToken: string;
}
export interface ListTagsForResource {
  readonly resourceArn: string;
}
export interface NotifyRecommendationsReceived {
  readonly assistantId: string;
  readonly recommendationIds: [];
  readonly sessionId: string;
}
export interface QueryAssistant {
  readonly assistantId: string;
  readonly maxResults: number;
  readonly nextToken: string;
  readonly queryText: string;
}
export interface RemoveKnowledgeBaseTemplateUri {
  readonly knowledgeBaseId: string;
}
export interface SearchContent {
  readonly knowledgeBaseId: string;
  readonly maxResults: number;
  readonly nextToken: string;
  readonly searchExpression: SearchExpression;
}
export interface SearchSessions {
  readonly assistantId: string;
  readonly maxResults: number;
  readonly nextToken: string;
  readonly searchExpression: SearchExpression;
}
export interface StartContentUpload {
  readonly contentType: string;
  readonly knowledgeBaseId: string;
}
export interface TagResource {
  readonly resourceArn: string;
  readonly tags: {[key: string]: any};
}
export interface UntagResource {
  readonly resourceArn: string;
  readonly tagKeys: [];
}
export interface UpdateContent {
  readonly contentId: string;
  readonly knowledgeBaseId: string;
  readonly metadata: {[key: string]: any};
  readonly overrideLinkOutUri: string;
  readonly removeOverrideLinkOutUri: boolean;
  readonly revisionId: string;
  readonly title: string;
  readonly uploadId: string;
}
export interface UpdateKnowledgeBaseTemplateUri {
  readonly knowledgeBaseId: string;
  readonly templateUri: string;
}



interface AccessDeniedException {
  readonly message: string;
}

interface AppIntegrationsConfiguration {
  readonly appIntegrationArn: string;
  readonly objectFields: [];
}

interface AssistantAssociationData {
  readonly assistantArn: string;
  readonly assistantAssociationArn: string;
  readonly assistantAssociationId: string;
  readonly assistantId: string;
  readonly associationData: AssistantAssociationOutputData;
  readonly associationType: string;
  readonly tags: {[key: string]: any};
}

interface AssistantAssociationInputData {
  readonly knowledgeBaseId: string;
}

interface AssistantAssociationOutputData {
  readonly knowledgeBaseAssociation: KnowledgeBaseAssociationData;
}

interface AssistantAssociationSummary {
  readonly assistantArn: string;
  readonly assistantAssociationArn: string;
  readonly assistantAssociationId: string;
  readonly assistantId: string;
  readonly associationData: AssistantAssociationOutputData;
  readonly associationType: string;
  readonly tags: {[key: string]: any};
}

interface AssistantData {
  readonly assistantArn: string;
  readonly assistantId: string;
  readonly description: string;
  readonly name: string;
  readonly serverSideEncryptionConfiguration: ServerSideEncryptionConfiguration;
  readonly status: string;
  readonly tags: {[key: string]: any};
  readonly type: string;
}

interface AssistantSummary {
  readonly assistantArn: string;
  readonly assistantId: string;
  readonly description: string;
  readonly name: string;
  readonly serverSideEncryptionConfiguration: ServerSideEncryptionConfiguration;
  readonly status: string;
  readonly tags: {[key: string]: any};
  readonly type: string;
}

interface ConflictException {
  readonly message: string;
}

interface ContentData {
  readonly contentArn: string;
  readonly contentId: string;
  readonly contentType: string;
  readonly knowledgeBaseArn: string;
  readonly knowledgeBaseId: string;
  readonly linkOutUri: string;
  readonly metadata: {[key: string]: any};
  readonly name: string;
  readonly revisionId: string;
  readonly status: string;
  readonly tags: {[key: string]: any};
  readonly title: string;
  readonly url: string;
  readonly urlExpiry: Date;
}

interface ContentReference {
  readonly contentArn: string;
  readonly contentId: string;
  readonly knowledgeBaseArn: string;
  readonly knowledgeBaseId: string;
}

interface ContentSummary {
  readonly contentArn: string;
  readonly contentId: string;
  readonly contentType: string;
  readonly knowledgeBaseArn: string;
  readonly knowledgeBaseId: string;
  readonly metadata: {[key: string]: any};
  readonly name: string;
  readonly revisionId: string;
  readonly status: string;
  readonly tags: {[key: string]: any};
  readonly title: string;
}

interface CreateAssistantAssociationRequest {
  readonly assistantId: string;
  readonly association: AssistantAssociationInputData;
  readonly associationType: string;
  readonly clientToken: string;
  readonly tags: {[key: string]: any};
}

interface CreateAssistantAssociationResponse {
  readonly assistantAssociation: AssistantAssociationData;
}

interface CreateAssistantRequest {
  readonly clientToken: string;
  readonly description: string;
  readonly name: string;
  readonly serverSideEncryptionConfiguration: ServerSideEncryptionConfiguration;
  readonly tags: {[key: string]: any};
  readonly type: string;
}

interface CreateAssistantResponse {
  readonly assistant: AssistantData;
}

interface CreateContentRequest {
  readonly clientToken: string;
  readonly knowledgeBaseId: string;
  readonly metadata: {[key: string]: any};
  readonly name: string;
  readonly overrideLinkOutUri: string;
  readonly tags: {[key: string]: any};
  readonly title: string;
  readonly uploadId: string;
}

interface CreateContentResponse {
  readonly content: ContentData;
}

interface CreateKnowledgeBaseRequest {
  readonly clientToken: string;
  readonly description: string;
  readonly knowledgeBaseType: string;
  readonly name: string;
  readonly renderingConfiguration: RenderingConfiguration;
  readonly serverSideEncryptionConfiguration: ServerSideEncryptionConfiguration;
  readonly sourceConfiguration: SourceConfiguration;
  readonly tags: {[key: string]: any};
}

interface CreateKnowledgeBaseResponse {
  readonly knowledgeBase: KnowledgeBaseData;
}

interface CreateSessionRequest {
  readonly assistantId: string;
  readonly clientToken: string;
  readonly description: string;
  readonly name: string;
  readonly tags: {[key: string]: any};
}

interface CreateSessionResponse {
  readonly session: SessionData;
}

interface DeleteAssistantAssociationRequest {
  readonly assistantAssociationId: string;
  readonly assistantId: string;
}

interface DeleteAssistantAssociationResponse {
}

interface DeleteAssistantRequest {
  readonly assistantId: string;
}

interface DeleteAssistantResponse {
}

interface DeleteContentRequest {
  readonly contentId: string;
  readonly knowledgeBaseId: string;
}

interface DeleteContentResponse {
}

interface DeleteKnowledgeBaseRequest {
  readonly knowledgeBaseId: string;
}

interface DeleteKnowledgeBaseResponse {
}

interface Document {
  readonly contentReference: ContentReference;
  readonly excerpt: DocumentText;
  readonly title: DocumentText;
}

interface DocumentText {
  readonly highlights: [];
  readonly text: string;
}

interface Filter {
  readonly field: string;
  readonly operator: string;
  readonly value: string;
}

interface GetAssistantAssociationRequest {
  readonly assistantAssociationId: string;
  readonly assistantId: string;
}

interface GetAssistantAssociationResponse {
  readonly assistantAssociation: AssistantAssociationData;
}

interface GetAssistantRequest {
  readonly assistantId: string;
}

interface GetAssistantResponse {
  readonly assistant: AssistantData;
}

interface GetContentRequest {
  readonly contentId: string;
  readonly knowledgeBaseId: string;
}

interface GetContentResponse {
  readonly content: ContentData;
}

interface GetContentSummaryRequest {
  readonly contentId: string;
  readonly knowledgeBaseId: string;
}

interface GetContentSummaryResponse {
  readonly contentSummary: ContentSummary;
}

interface GetKnowledgeBaseRequest {
  readonly knowledgeBaseId: string;
}

interface GetKnowledgeBaseResponse {
  readonly knowledgeBase: KnowledgeBaseData;
}

interface GetRecommendationsRequest {
  readonly assistantId: string;
  readonly maxResults: number;
  readonly sessionId: string;
  readonly waitTimeSeconds: number;
}

interface GetRecommendationsResponse {
  readonly recommendations: [];
}

interface GetSessionRequest {
  readonly assistantId: string;
  readonly sessionId: string;
}

interface GetSessionResponse {
  readonly session: SessionData;
}

interface Highlight {
  readonly beginOffsetInclusive: number;
  readonly endOffsetExclusive: number;
}

interface KnowledgeBaseAssociationData {
  readonly knowledgeBaseArn: string;
  readonly knowledgeBaseId: string;
}

interface KnowledgeBaseData {
  readonly description: string;
  readonly knowledgeBaseArn: string;
  readonly knowledgeBaseId: string;
  readonly knowledgeBaseType: string;
  readonly lastContentModificationTime: Date;
  readonly name: string;
  readonly renderingConfiguration: RenderingConfiguration;
  readonly serverSideEncryptionConfiguration: ServerSideEncryptionConfiguration;
  readonly sourceConfiguration: SourceConfiguration;
  readonly status: string;
  readonly tags: {[key: string]: any};
}

interface KnowledgeBaseSummary {
  readonly description: string;
  readonly knowledgeBaseArn: string;
  readonly knowledgeBaseId: string;
  readonly knowledgeBaseType: string;
  readonly name: string;
  readonly renderingConfiguration: RenderingConfiguration;
  readonly serverSideEncryptionConfiguration: ServerSideEncryptionConfiguration;
  readonly sourceConfiguration: SourceConfiguration;
  readonly status: string;
  readonly tags: {[key: string]: any};
}

interface ListAssistantAssociationsRequest {
  readonly assistantId: string;
  readonly maxResults: number;
  readonly nextToken: string;
}

interface ListAssistantAssociationsResponse {
  readonly assistantAssociationSummaries: [];
  readonly nextToken: string;
}

interface ListAssistantsRequest {
  readonly maxResults: number;
  readonly nextToken: string;
}

interface ListAssistantsResponse {
  readonly assistantSummaries: [];
  readonly nextToken: string;
}

interface ListContentsRequest {
  readonly knowledgeBaseId: string;
  readonly maxResults: number;
  readonly nextToken: string;
}

interface ListContentsResponse {
  readonly contentSummaries: [];
  readonly nextToken: string;
}

interface ListKnowledgeBasesRequest {
  readonly maxResults: number;
  readonly nextToken: string;
}

interface ListKnowledgeBasesResponse {
  readonly knowledgeBaseSummaries: [];
  readonly nextToken: string;
}

interface ListTagsForResourceRequest {
  readonly resourceArn: string;
}

interface ListTagsForResourceResponse {
  readonly tags: {[key: string]: any};
}

interface NotifyRecommendationsReceivedError {
  readonly message: string;
  readonly recommendationId: string;
}

interface NotifyRecommendationsReceivedRequest {
  readonly assistantId: string;
  readonly recommendationIds: [];
  readonly sessionId: string;
}

interface NotifyRecommendationsReceivedResponse {
  readonly errors: [];
  readonly recommendationIds: [];
}

interface PreconditionFailedException {
  readonly message: string;
}

interface QueryAssistantRequest {
  readonly assistantId: string;
  readonly maxResults: number;
  readonly nextToken: string;
  readonly queryText: string;
}

interface QueryAssistantResponse {
  readonly nextToken: string;
  readonly results: [];
}

interface RecommendationData {
  readonly document: Document;
  readonly recommendationId: string;
  readonly relevanceLevel: string;
  readonly relevanceScore: unknown;
}

interface RemoveKnowledgeBaseTemplateUriRequest {
  readonly knowledgeBaseId: string;
}

interface RemoveKnowledgeBaseTemplateUriResponse {
}

interface RenderingConfiguration {
  readonly templateUri: string;
}

interface ResourceNotFoundException {
  readonly message: string;
  readonly resourceName: string;
}

interface ResultData {
  readonly document: Document;
  readonly relevanceScore: unknown;
  readonly resultId: string;
}

interface SearchContentRequest {
  readonly knowledgeBaseId: string;
  readonly maxResults: number;
  readonly nextToken: string;
  readonly searchExpression: SearchExpression;
}

interface SearchContentResponse {
  readonly contentSummaries: [];
  readonly nextToken: string;
}

interface SearchExpression {
  readonly filters: [];
}

interface SearchSessionsRequest {
  readonly assistantId: string;
  readonly maxResults: number;
  readonly nextToken: string;
  readonly searchExpression: SearchExpression;
}

interface SearchSessionsResponse {
  readonly nextToken: string;
  readonly sessionSummaries: [];
}

interface ServerSideEncryptionConfiguration {
  readonly kmsKeyId: string;
}

interface ServiceQuotaExceededException {
  readonly message: string;
}

interface SessionData {
  readonly description: string;
  readonly name: string;
  readonly sessionArn: string;
  readonly sessionId: string;
  readonly tags: {[key: string]: any};
}

interface SessionSummary {
  readonly assistantArn: string;
  readonly assistantId: string;
  readonly sessionArn: string;
  readonly sessionId: string;
}

interface SourceConfiguration {
  readonly appIntegrations: AppIntegrationsConfiguration;
}

interface StartContentUploadRequest {
  readonly contentType: string;
  readonly knowledgeBaseId: string;
}

interface StartContentUploadResponse {
  readonly headersToInclude: {[key: string]: any};
  readonly uploadId: string;
  readonly url: string;
  readonly urlExpiry: Date;
}

interface TagResourceRequest {
  readonly resourceArn: string;
  readonly tags: {[key: string]: any};
}

interface TagResourceResponse {
}

interface TooManyTagsException {
  readonly message: string;
  readonly resourceName: string;
}

interface UntagResourceRequest {
  readonly resourceArn: string;
  readonly tagKeys: [];
}

interface UntagResourceResponse {
}

interface UpdateContentRequest {
  readonly contentId: string;
  readonly knowledgeBaseId: string;
  readonly metadata: {[key: string]: any};
  readonly overrideLinkOutUri: string;
  readonly removeOverrideLinkOutUri: boolean;
  readonly revisionId: string;
  readonly title: string;
  readonly uploadId: string;
}

interface UpdateContentResponse {
  readonly content: ContentData;
}

interface UpdateKnowledgeBaseTemplateUriRequest {
  readonly knowledgeBaseId: string;
  readonly templateUri: string;
}

interface UpdateKnowledgeBaseTemplateUriResponse {
  readonly knowledgeBase: KnowledgeBaseData;
}

interface ValidationException {
  readonly message: string;
}

