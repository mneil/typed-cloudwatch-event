/**
 * STOP. This file is autogenerated. DO NOT EDIT by hand
 */
export interface AddTagsToStream {
  readonly StreamName: string;
  readonly Tags: {[key: string]: any};
}

export interface CreateStream {
  readonly StreamName: string;
  readonly ShardCount?: number;
  readonly StreamModeDetails?: StreamModeDetails;
}

export interface DecreaseStreamRetentionPeriod {
  readonly StreamName: string;
  readonly RetentionPeriodHours: number;
}

export interface DeleteStream {
  readonly StreamName: string;
  readonly EnforceConsumerDeletion?: boolean;
}

export interface DeregisterStreamConsumer {
  readonly StreamARN?: string;
  readonly ConsumerName?: string;
  readonly ConsumerARN?: string;
}

export interface DescribeLimits {
}

export interface DescribeStream {
  readonly StreamName: string;
  readonly Limit?: number;
  readonly ExclusiveStartShardId?: string;
}

export interface DescribeStreamConsumer {
  readonly StreamARN?: string;
  readonly ConsumerName?: string;
  readonly ConsumerARN?: string;
}

export interface DescribeStreamSummary {
  readonly StreamName: string;
}

export interface DisableEnhancedMonitoring {
  readonly StreamName: string;
  readonly ShardLevelMetrics: [];
}

export interface EnableEnhancedMonitoring {
  readonly StreamName: string;
  readonly ShardLevelMetrics: [];
}

export interface GetRecords {
  readonly ShardIterator: string;
  readonly Limit?: number;
}

export interface GetShardIterator {
  readonly StreamName: string;
  readonly ShardId: string;
  readonly ShardIteratorType: string;
  readonly StartingSequenceNumber?: string;
  readonly Timestamp?: Date;
}

export interface IncreaseStreamRetentionPeriod {
  readonly StreamName: string;
  readonly RetentionPeriodHours: number;
}

export interface ListShards {
  readonly StreamName?: string;
  readonly NextToken?: string;
  readonly ExclusiveStartShardId?: string;
  readonly MaxResults?: number;
  readonly StreamCreationTimestamp?: Date;
  readonly ShardFilter?: ShardFilter;
}

export interface ListStreamConsumers {
  readonly StreamARN: string;
  readonly NextToken?: string;
  readonly MaxResults?: number;
  readonly StreamCreationTimestamp?: Date;
}

export interface ListStreams {
  readonly Limit?: number;
  readonly ExclusiveStartStreamName?: string;
}

export interface ListTagsForStream {
  readonly StreamName: string;
  readonly ExclusiveStartTagKey?: string;
  readonly Limit?: number;
}

export interface MergeShards {
  readonly StreamName: string;
  readonly ShardToMerge: string;
  readonly AdjacentShardToMerge: string;
}

export interface PutRecord {
  readonly StreamName: string;
  readonly Data: unknown;
  readonly PartitionKey: string;
  readonly ExplicitHashKey?: string;
  readonly SequenceNumberForOrdering?: string;
}

export interface PutRecords {
  readonly Records: [];
  readonly StreamName: string;
}

export interface RegisterStreamConsumer {
  readonly StreamARN: string;
  readonly ConsumerName: string;
}

export interface RemoveTagsFromStream {
  readonly StreamName: string;
  readonly TagKeys: [];
}

export interface SplitShard {
  readonly StreamName: string;
  readonly ShardToSplit: string;
  readonly NewStartingHashKey: string;
}

export interface StartStreamEncryption {
  readonly StreamName: string;
  readonly EncryptionType: string;
  readonly KeyId: string;
}

export interface StopStreamEncryption {
  readonly StreamName: string;
  readonly EncryptionType: string;
  readonly KeyId: string;
}

export interface SubscribeToShard {
  readonly ConsumerARN: string;
  readonly ShardId: string;
  readonly StartingPosition: StartingPosition;
}

export interface UpdateShardCount {
  readonly StreamName: string;
  readonly TargetShardCount: number;
  readonly ScalingType: string;
}

export interface UpdateStreamMode {
  readonly StreamARN: string;
  readonly StreamModeDetails: StreamModeDetails;
}

export interface AddTagsToStreamInput {
  readonly StreamName: string;
  readonly Tags: {[key: string]: any};
}

export interface ChildShard {
  readonly ShardId: string;
  readonly ParentShards: [];
  readonly HashKeyRange: HashKeyRange;
}

export interface Consumer {
  readonly ConsumerName: string;
  readonly ConsumerARN: string;
  readonly ConsumerStatus: string;
  readonly ConsumerCreationTimestamp: Date;
}

export interface ConsumerDescription {
  readonly ConsumerName: string;
  readonly ConsumerARN: string;
  readonly ConsumerStatus: string;
  readonly ConsumerCreationTimestamp: Date;
  readonly StreamARN: string;
}

export interface CreateStreamInput {
  readonly StreamName: string;
  readonly ShardCount?: number;
  readonly StreamModeDetails?: StreamModeDetails;
}

export interface DecreaseStreamRetentionPeriodInput {
  readonly StreamName: string;
  readonly RetentionPeriodHours: number;
}

export interface DeleteStreamInput {
  readonly StreamName: string;
  readonly EnforceConsumerDeletion?: boolean;
}

export interface DeregisterStreamConsumerInput {
  readonly StreamARN?: string;
  readonly ConsumerName?: string;
  readonly ConsumerARN?: string;
}

export interface DescribeLimitsInput {
}

export interface DescribeLimitsOutput {
  readonly ShardLimit: number;
  readonly OpenShardCount: number;
  readonly OnDemandStreamCount: number;
  readonly OnDemandStreamCountLimit: number;
}

export interface DescribeStreamConsumerInput {
  readonly StreamARN?: string;
  readonly ConsumerName?: string;
  readonly ConsumerARN?: string;
}

export interface DescribeStreamConsumerOutput {
  readonly ConsumerDescription: ConsumerDescription;
}

export interface DescribeStreamInput {
  readonly StreamName: string;
  readonly Limit?: number;
  readonly ExclusiveStartShardId?: string;
}

export interface DescribeStreamOutput {
  readonly StreamDescription: StreamDescription;
}

export interface DescribeStreamSummaryInput {
  readonly StreamName: string;
}

export interface DescribeStreamSummaryOutput {
  readonly StreamDescriptionSummary: StreamDescriptionSummary;
}

export interface DisableEnhancedMonitoringInput {
  readonly StreamName: string;
  readonly ShardLevelMetrics: [];
}

export interface EnableEnhancedMonitoringInput {
  readonly StreamName: string;
  readonly ShardLevelMetrics: [];
}

export interface EnhancedMetrics {
  readonly ShardLevelMetrics?: [];
}

export interface EnhancedMonitoringOutput {
  readonly StreamName?: string;
  readonly CurrentShardLevelMetrics?: [];
  readonly DesiredShardLevelMetrics?: [];
}

export interface ExpiredIteratorException {
  readonly message?: string;
}

export interface ExpiredNextTokenException {
  readonly message?: string;
}

export interface GetRecordsInput {
  readonly ShardIterator: string;
  readonly Limit?: number;
}

export interface GetRecordsOutput {
  readonly Records: [];
  readonly NextShardIterator?: string;
  readonly MillisBehindLatest?: number;
  readonly ChildShards?: [];
}

export interface GetShardIteratorInput {
  readonly StreamName: string;
  readonly ShardId: string;
  readonly ShardIteratorType: string;
  readonly StartingSequenceNumber?: string;
  readonly Timestamp?: Date;
}

export interface GetShardIteratorOutput {
  readonly ShardIterator?: string;
}

export interface HashKeyRange {
  readonly StartingHashKey: string;
  readonly EndingHashKey: string;
}

export interface IncreaseStreamRetentionPeriodInput {
  readonly StreamName: string;
  readonly RetentionPeriodHours: number;
}

export interface InternalFailureException {
  readonly message?: string;
}

export interface InvalidArgumentException {
  readonly message?: string;
}

export interface KMSAccessDeniedException {
  readonly message?: string;
}

export interface KMSDisabledException {
  readonly message?: string;
}

export interface KMSInvalidStateException {
  readonly message?: string;
}

export interface KMSNotFoundException {
  readonly message?: string;
}

export interface KMSOptInRequired {
  readonly message?: string;
}

export interface KMSThrottlingException {
  readonly message?: string;
}

export interface LimitExceededException {
  readonly message?: string;
}

export interface ListShardsInput {
  readonly StreamName?: string;
  readonly NextToken?: string;
  readonly ExclusiveStartShardId?: string;
  readonly MaxResults?: number;
  readonly StreamCreationTimestamp?: Date;
  readonly ShardFilter?: ShardFilter;
}

export interface ListShardsOutput {
  readonly Shards?: [];
  readonly NextToken?: string;
}

export interface ListStreamConsumersInput {
  readonly StreamARN: string;
  readonly NextToken?: string;
  readonly MaxResults?: number;
  readonly StreamCreationTimestamp?: Date;
}

export interface ListStreamConsumersOutput {
  readonly Consumers?: [];
  readonly NextToken?: string;
}

export interface ListStreamsInput {
  readonly Limit?: number;
  readonly ExclusiveStartStreamName?: string;
}

export interface ListStreamsOutput {
  readonly StreamNames: [];
  readonly HasMoreStreams: boolean;
}

export interface ListTagsForStreamInput {
  readonly StreamName: string;
  readonly ExclusiveStartTagKey?: string;
  readonly Limit?: number;
}

export interface ListTagsForStreamOutput {
  readonly Tags: [];
  readonly HasMoreTags: boolean;
}

export interface MergeShardsInput {
  readonly StreamName: string;
  readonly ShardToMerge: string;
  readonly AdjacentShardToMerge: string;
}

export interface ProvisionedThroughputExceededException {
  readonly message?: string;
}

export interface PutRecordInput {
  readonly StreamName: string;
  readonly Data: unknown;
  readonly PartitionKey: string;
  readonly ExplicitHashKey?: string;
  readonly SequenceNumberForOrdering?: string;
}

export interface PutRecordOutput {
  readonly ShardId: string;
  readonly SequenceNumber: string;
  readonly EncryptionType?: string;
}

export interface PutRecordsInput {
  readonly Records: [];
  readonly StreamName: string;
}

export interface PutRecordsOutput {
  readonly FailedRecordCount?: number;
  readonly Records: [];
  readonly EncryptionType?: string;
}

export interface PutRecordsRequestEntry {
  readonly Data: unknown;
  readonly ExplicitHashKey?: string;
  readonly PartitionKey: string;
}

export interface PutRecordsResultEntry {
  readonly SequenceNumber?: string;
  readonly ShardId?: string;
  readonly ErrorCode?: string;
  readonly ErrorMessage?: string;
}

export interface Record {
  readonly SequenceNumber: string;
  readonly ApproximateArrivalTimestamp?: Date;
  readonly Data: unknown;
  readonly PartitionKey: string;
  readonly EncryptionType?: string;
}

export interface RegisterStreamConsumerInput {
  readonly StreamARN: string;
  readonly ConsumerName: string;
}

export interface RegisterStreamConsumerOutput {
  readonly Consumer: Consumer;
}

export interface RemoveTagsFromStreamInput {
  readonly StreamName: string;
  readonly TagKeys: [];
}

export interface ResourceInUseException {
  readonly message?: string;
}

export interface ResourceNotFoundException {
  readonly message?: string;
}

export interface SequenceNumberRange {
  readonly StartingSequenceNumber: string;
  readonly EndingSequenceNumber?: string;
}

export interface Shard {
  readonly ShardId: string;
  readonly ParentShardId?: string;
  readonly AdjacentParentShardId?: string;
  readonly HashKeyRange: HashKeyRange;
  readonly SequenceNumberRange: SequenceNumberRange;
}

export interface ShardFilter {
  readonly Type: string;
  readonly ShardId?: string;
  readonly Timestamp?: Date;
}

export interface SplitShardInput {
  readonly StreamName: string;
  readonly ShardToSplit: string;
  readonly NewStartingHashKey: string;
}

export interface StartStreamEncryptionInput {
  readonly StreamName: string;
  readonly EncryptionType: string;
  readonly KeyId: string;
}

export interface StartingPosition {
  readonly Type: string;
  readonly SequenceNumber?: string;
  readonly Timestamp?: Date;
}

export interface StopStreamEncryptionInput {
  readonly StreamName: string;
  readonly EncryptionType: string;
  readonly KeyId: string;
}

export interface StreamDescription {
  readonly StreamName: string;
  readonly StreamARN: string;
  readonly StreamStatus: string;
  readonly StreamModeDetails?: StreamModeDetails;
  readonly Shards: [];
  readonly HasMoreShards: boolean;
  readonly RetentionPeriodHours: number;
  readonly StreamCreationTimestamp: Date;
  readonly EnhancedMonitoring: [];
  readonly EncryptionType?: string;
  readonly KeyId?: string;
}

export interface StreamDescriptionSummary {
  readonly StreamName: string;
  readonly StreamARN: string;
  readonly StreamStatus: string;
  readonly StreamModeDetails?: StreamModeDetails;
  readonly RetentionPeriodHours: number;
  readonly StreamCreationTimestamp: Date;
  readonly EnhancedMonitoring: [];
  readonly EncryptionType?: string;
  readonly KeyId?: string;
  readonly OpenShardCount: number;
  readonly ConsumerCount?: number;
}

export interface StreamModeDetails {
  readonly StreamMode: string;
}

export interface SubscribeToShardEvent {
  readonly Records: [];
  readonly ContinuationSequenceNumber: string;
  readonly MillisBehindLatest: number;
  readonly ChildShards?: [];
}

export interface SubscribeToShardEventStream {
  readonly SubscribeToShardEvent: SubscribeToShardEvent;
  readonly ResourceNotFoundException?: ResourceNotFoundException;
  readonly ResourceInUseException?: ResourceInUseException;
  readonly KMSDisabledException?: KMSDisabledException;
  readonly KMSInvalidStateException?: KMSInvalidStateException;
  readonly KMSAccessDeniedException?: KMSAccessDeniedException;
  readonly KMSNotFoundException?: KMSNotFoundException;
  readonly KMSOptInRequired?: KMSOptInRequired;
  readonly KMSThrottlingException?: KMSThrottlingException;
  readonly InternalFailureException?: InternalFailureException;
}

export interface SubscribeToShardInput {
  readonly ConsumerARN: string;
  readonly ShardId: string;
  readonly StartingPosition: StartingPosition;
}

export interface SubscribeToShardOutput {
  readonly EventStream: SubscribeToShardEventStream;
}

export interface Tag {
  readonly Key: string;
  readonly Value?: string;
}

export interface UpdateShardCountInput {
  readonly StreamName: string;
  readonly TargetShardCount: number;
  readonly ScalingType: string;
}

export interface UpdateShardCountOutput {
  readonly StreamName?: string;
  readonly CurrentShardCount?: number;
  readonly TargetShardCount?: number;
}

export interface UpdateStreamModeInput {
  readonly StreamARN: string;
  readonly StreamModeDetails: StreamModeDetails;
}

export interface ValidationException {
  readonly message?: string;
}


