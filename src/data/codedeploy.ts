/**
 * STOP. This file is autogenerated. DO NOT EDIT by hand
 */
export interface AddTagsToOnPremisesInstances {
  readonly tags: [];
  readonly instanceNames: [];
}
export interface BatchGetApplicationRevisions {
  readonly applicationName: string;
  readonly revisions: [];
}
export interface BatchGetApplications {
  readonly applicationNames: [];
}
export interface BatchGetDeploymentGroups {
  readonly applicationName: string;
  readonly deploymentGroupNames: [];
}
export interface BatchGetDeploymentInstances {
  readonly deploymentId: string;
  readonly instanceIds: [];
}
export interface BatchGetDeploymentTargets {
  readonly deploymentId?: string;
  readonly targetIds?: [];
}
export interface BatchGetDeployments {
  readonly deploymentIds: [];
}
export interface BatchGetOnPremisesInstances {
  readonly instanceNames: [];
}
export interface ContinueDeployment {
  readonly deploymentId?: string;
  readonly deploymentWaitType?: string;
}
export interface CreateApplication {
  readonly applicationName: string;
  readonly computePlatform?: string;
  readonly tags?: [];
}
export interface CreateDeployment {
  readonly applicationName: string;
  readonly deploymentGroupName?: string;
  readonly revision?: RevisionLocation;
  readonly deploymentConfigName?: string;
  readonly description?: string;
  readonly ignoreApplicationStopFailures?: boolean;
  readonly targetInstances?: TargetInstances;
  readonly autoRollbackConfiguration?: AutoRollbackConfiguration;
  readonly updateOutdatedInstancesOnly?: boolean;
  readonly fileExistsBehavior?: string;
}
export interface CreateDeploymentConfig {
  readonly deploymentConfigName: string;
  readonly minimumHealthyHosts?: MinimumHealthyHosts;
  readonly trafficRoutingConfig?: TrafficRoutingConfig;
  readonly computePlatform?: string;
}
export interface CreateDeploymentGroup {
  readonly applicationName: string;
  readonly deploymentGroupName: string;
  readonly deploymentConfigName?: string;
  readonly ec2TagFilters?: [];
  readonly onPremisesInstanceTagFilters?: [];
  readonly autoScalingGroups?: [];
  readonly serviceRoleArn: string;
  readonly triggerConfigurations?: [];
  readonly alarmConfiguration?: AlarmConfiguration;
  readonly autoRollbackConfiguration?: AutoRollbackConfiguration;
  readonly outdatedInstancesStrategy?: string;
  readonly deploymentStyle?: DeploymentStyle;
  readonly blueGreenDeploymentConfiguration?: BlueGreenDeploymentConfiguration;
  readonly loadBalancerInfo?: LoadBalancerInfo;
  readonly ec2TagSet?: EC2TagSet;
  readonly ecsServices?: [];
  readonly onPremisesTagSet?: OnPremisesTagSet;
  readonly tags?: [];
}
export interface DeleteApplication {
  readonly applicationName: string;
}
export interface DeleteDeploymentConfig {
  readonly deploymentConfigName: string;
}
export interface DeleteDeploymentGroup {
  readonly applicationName: string;
  readonly deploymentGroupName: string;
}
export interface DeleteGitHubAccountToken {
  readonly tokenName?: string;
}
export interface DeleteResourcesByExternalId {
  readonly externalId?: string;
}
export interface DeregisterOnPremisesInstance {
  readonly instanceName: string;
}
export interface GetApplication {
  readonly applicationName: string;
}
export interface GetApplicationRevision {
  readonly applicationName: string;
  readonly revision: RevisionLocation;
}
export interface GetDeployment {
  readonly deploymentId: string;
}
export interface GetDeploymentConfig {
  readonly deploymentConfigName: string;
}
export interface GetDeploymentGroup {
  readonly applicationName: string;
  readonly deploymentGroupName: string;
}
export interface GetDeploymentInstance {
  readonly deploymentId: string;
  readonly instanceId: string;
}
export interface GetDeploymentTarget {
  readonly deploymentId?: string;
  readonly targetId?: string;
}
export interface GetOnPremisesInstance {
  readonly instanceName: string;
}
export interface ListApplicationRevisions {
  readonly applicationName: string;
  readonly sortBy?: string;
  readonly sortOrder?: string;
  readonly s3Bucket?: string;
  readonly s3KeyPrefix?: string;
  readonly deployed?: string;
  readonly nextToken?: string;
}
export interface ListApplications {
  readonly nextToken?: string;
}
export interface ListDeploymentConfigs {
  readonly nextToken?: string;
}
export interface ListDeploymentGroups {
  readonly applicationName: string;
  readonly nextToken?: string;
}
export interface ListDeploymentInstances {
  readonly deploymentId: string;
  readonly nextToken?: string;
  readonly instanceStatusFilter?: [];
  readonly instanceTypeFilter?: [];
}
export interface ListDeploymentTargets {
  readonly deploymentId?: string;
  readonly nextToken?: string;
  readonly targetFilters?: {[key: string]: any};
}
export interface ListDeployments {
  readonly applicationName?: string;
  readonly deploymentGroupName?: string;
  readonly externalId?: string;
  readonly includeOnlyStatuses?: [];
  readonly createTimeRange?: TimeRange;
  readonly nextToken?: string;
}
export interface ListGitHubAccountTokenNames {
  readonly nextToken?: string;
}
export interface ListOnPremisesInstances {
  readonly registrationStatus?: string;
  readonly tagFilters?: [];
  readonly nextToken?: string;
}
export interface ListTagsForResource {
  readonly ResourceArn: string;
  readonly NextToken?: string;
}
export interface PutLifecycleEventHookExecutionStatus {
  readonly deploymentId?: string;
  readonly lifecycleEventHookExecutionId?: string;
  readonly status?: string;
}
export interface RegisterApplicationRevision {
  readonly applicationName: string;
  readonly description?: string;
  readonly revision: RevisionLocation;
}
export interface RegisterOnPremisesInstance {
  readonly instanceName: string;
  readonly iamSessionArn?: string;
  readonly iamUserArn?: string;
}
export interface RemoveTagsFromOnPremisesInstances {
  readonly tags: [];
  readonly instanceNames: [];
}
export interface SkipWaitTimeForInstanceTermination {
  readonly deploymentId?: string;
}
export interface StopDeployment {
  readonly deploymentId: string;
  readonly autoRollbackEnabled?: boolean;
}
export interface TagResource {
  readonly ResourceArn: string;
  readonly Tags: [];
}
export interface UntagResource {
  readonly ResourceArn: string;
  readonly TagKeys: [];
}
export interface UpdateApplication {
  readonly applicationName?: string;
  readonly newApplicationName?: string;
}
export interface UpdateDeploymentGroup {
  readonly applicationName: string;
  readonly currentDeploymentGroupName: string;
  readonly newDeploymentGroupName?: string;
  readonly deploymentConfigName?: string;
  readonly ec2TagFilters?: [];
  readonly onPremisesInstanceTagFilters?: [];
  readonly autoScalingGroups?: [];
  readonly serviceRoleArn?: string;
  readonly triggerConfigurations?: [];
  readonly alarmConfiguration?: AlarmConfiguration;
  readonly autoRollbackConfiguration?: AutoRollbackConfiguration;
  readonly outdatedInstancesStrategy?: string;
  readonly deploymentStyle?: DeploymentStyle;
  readonly blueGreenDeploymentConfiguration?: BlueGreenDeploymentConfiguration;
  readonly loadBalancerInfo?: LoadBalancerInfo;
  readonly ec2TagSet?: EC2TagSet;
  readonly ecsServices?: [];
  readonly onPremisesTagSet?: OnPremisesTagSet;
}



interface AddTagsToOnPremisesInstancesInput {
  readonly tags: [];
  readonly instanceNames: [];
}

interface Alarm {
  readonly name: string;
}

interface AlarmConfiguration {
  readonly enabled: boolean;
  readonly ignorePollAlarmFailure: boolean;
  readonly alarms: [];
}

interface AlarmsLimitExceededException {
}

interface AppSpecContent {
  readonly content: string;
  readonly sha256: string;
}

interface ApplicationAlreadyExistsException {
}

interface ApplicationDoesNotExistException {
}

interface ApplicationInfo {
  readonly applicationId: string;
  readonly applicationName: string;
  readonly createTime: Date;
  readonly linkedToGitHub: boolean;
  readonly gitHubAccountName: string;
  readonly computePlatform: string;
}

interface ApplicationLimitExceededException {
}

interface ApplicationNameRequiredException {
}

interface ArnNotSupportedException {
}

interface AutoRollbackConfiguration {
  readonly enabled: boolean;
  readonly events: [];
}

interface AutoScalingGroup {
  readonly name: string;
  readonly hook: string;
}

interface BatchGetApplicationRevisionsInput {
  readonly applicationName: string;
  readonly revisions: [];
}

interface BatchGetApplicationRevisionsOutput {
  readonly applicationName: string;
  readonly errorMessage: string;
  readonly revisions: [];
}

interface BatchGetApplicationsInput {
  readonly applicationNames: [];
}

interface BatchGetApplicationsOutput {
  readonly applicationsInfo: [];
}

interface BatchGetDeploymentGroupsInput {
  readonly applicationName: string;
  readonly deploymentGroupNames: [];
}

interface BatchGetDeploymentGroupsOutput {
  readonly deploymentGroupsInfo: [];
  readonly errorMessage: string;
}

interface BatchGetDeploymentInstancesInput {
  readonly deploymentId: string;
  readonly instanceIds: [];
}

interface BatchGetDeploymentInstancesOutput {
  readonly instancesSummary: [];
  readonly errorMessage: string;
}

interface BatchGetDeploymentTargetsInput {
  readonly deploymentId: string;
  readonly targetIds: [];
}

interface BatchGetDeploymentTargetsOutput {
  readonly deploymentTargets: [];
}

interface BatchGetDeploymentsInput {
  readonly deploymentIds: [];
}

interface BatchGetDeploymentsOutput {
  readonly deploymentsInfo: [];
}

interface BatchGetOnPremisesInstancesInput {
  readonly instanceNames: [];
}

interface BatchGetOnPremisesInstancesOutput {
  readonly instanceInfos: [];
}

interface BatchLimitExceededException {
}

interface BlueGreenDeploymentConfiguration {
  readonly terminateBlueInstancesOnDeploymentSuccess: BlueInstanceTerminationOption;
  readonly deploymentReadyOption: DeploymentReadyOption;
  readonly greenFleetProvisioningOption: GreenFleetProvisioningOption;
}

interface BlueInstanceTerminationOption {
  readonly action: string;
  readonly terminationWaitTimeInMinutes: number;
}

interface BucketNameFilterRequiredException {
}

interface CloudFormationTarget {
  readonly deploymentId: string;
  readonly targetId: string;
  readonly lastUpdatedAt: Date;
  readonly lifecycleEvents: [];
  readonly status: string;
  readonly resourceType: string;
  readonly targetVersionWeight: unknown;
}

interface ContinueDeploymentInput {
  readonly deploymentId: string;
  readonly deploymentWaitType: string;
}

interface CreateApplicationInput {
  readonly applicationName: string;
  readonly computePlatform: string;
  readonly tags: [];
}

interface CreateApplicationOutput {
  readonly applicationId: string;
}

interface CreateDeploymentConfigInput {
  readonly deploymentConfigName: string;
  readonly minimumHealthyHosts: MinimumHealthyHosts;
  readonly trafficRoutingConfig: TrafficRoutingConfig;
  readonly computePlatform: string;
}

interface CreateDeploymentConfigOutput {
  readonly deploymentConfigId: string;
}

interface CreateDeploymentGroupInput {
  readonly applicationName: string;
  readonly deploymentGroupName: string;
  readonly deploymentConfigName: string;
  readonly ec2TagFilters: [];
  readonly onPremisesInstanceTagFilters: [];
  readonly autoScalingGroups: [];
  readonly serviceRoleArn: string;
  readonly triggerConfigurations: [];
  readonly alarmConfiguration: AlarmConfiguration;
  readonly autoRollbackConfiguration: AutoRollbackConfiguration;
  readonly outdatedInstancesStrategy: string;
  readonly deploymentStyle: DeploymentStyle;
  readonly blueGreenDeploymentConfiguration: BlueGreenDeploymentConfiguration;
  readonly loadBalancerInfo: LoadBalancerInfo;
  readonly ec2TagSet: EC2TagSet;
  readonly ecsServices: [];
  readonly onPremisesTagSet: OnPremisesTagSet;
  readonly tags: [];
}

interface CreateDeploymentGroupOutput {
  readonly deploymentGroupId: string;
}

interface CreateDeploymentInput {
  readonly applicationName: string;
  readonly deploymentGroupName: string;
  readonly revision: RevisionLocation;
  readonly deploymentConfigName: string;
  readonly description: string;
  readonly ignoreApplicationStopFailures: boolean;
  readonly targetInstances: TargetInstances;
  readonly autoRollbackConfiguration: AutoRollbackConfiguration;
  readonly updateOutdatedInstancesOnly: boolean;
  readonly fileExistsBehavior: string;
}

interface CreateDeploymentOutput {
  readonly deploymentId: string;
}

interface DeleteApplicationInput {
  readonly applicationName: string;
}

interface DeleteDeploymentConfigInput {
  readonly deploymentConfigName: string;
}

interface DeleteDeploymentGroupInput {
  readonly applicationName: string;
  readonly deploymentGroupName: string;
}

interface DeleteDeploymentGroupOutput {
  readonly hooksNotCleanedUp: [];
}

interface DeleteGitHubAccountTokenInput {
  readonly tokenName: string;
}

interface DeleteGitHubAccountTokenOutput {
  readonly tokenName: string;
}

interface DeleteResourcesByExternalIdInput {
  readonly externalId: string;
}

interface DeleteResourcesByExternalIdOutput {
}

interface DeploymentAlreadyCompletedException {
}

interface DeploymentAlreadyStartedException {
}

interface DeploymentConfigAlreadyExistsException {
}

interface DeploymentConfigDoesNotExistException {
}

interface DeploymentConfigInUseException {
}

interface DeploymentConfigInfo {
  readonly deploymentConfigId: string;
  readonly deploymentConfigName: string;
  readonly minimumHealthyHosts: MinimumHealthyHosts;
  readonly createTime: Date;
  readonly computePlatform: string;
  readonly trafficRoutingConfig: TrafficRoutingConfig;
}

interface DeploymentConfigLimitExceededException {
}

interface DeploymentConfigNameRequiredException {
}

interface DeploymentDoesNotExistException {
}

interface DeploymentGroupAlreadyExistsException {
}

interface DeploymentGroupDoesNotExistException {
}

interface DeploymentGroupInfo {
  readonly applicationName: string;
  readonly deploymentGroupId: string;
  readonly deploymentGroupName: string;
  readonly deploymentConfigName: string;
  readonly ec2TagFilters: [];
  readonly onPremisesInstanceTagFilters: [];
  readonly autoScalingGroups: [];
  readonly serviceRoleArn: string;
  readonly targetRevision: RevisionLocation;
  readonly triggerConfigurations: [];
  readonly alarmConfiguration: AlarmConfiguration;
  readonly autoRollbackConfiguration: AutoRollbackConfiguration;
  readonly deploymentStyle: DeploymentStyle;
  readonly outdatedInstancesStrategy: string;
  readonly blueGreenDeploymentConfiguration: BlueGreenDeploymentConfiguration;
  readonly loadBalancerInfo: LoadBalancerInfo;
  readonly lastSuccessfulDeployment: LastDeploymentInfo;
  readonly lastAttemptedDeployment: LastDeploymentInfo;
  readonly ec2TagSet: EC2TagSet;
  readonly onPremisesTagSet: OnPremisesTagSet;
  readonly computePlatform: string;
  readonly ecsServices: [];
}

interface DeploymentGroupLimitExceededException {
}

interface DeploymentGroupNameRequiredException {
}

interface DeploymentIdRequiredException {
}

interface DeploymentInfo {
  readonly applicationName: string;
  readonly deploymentGroupName: string;
  readonly deploymentConfigName: string;
  readonly deploymentId: string;
  readonly previousRevision: RevisionLocation;
  readonly revision: RevisionLocation;
  readonly status: string;
  readonly errorInformation: ErrorInformation;
  readonly createTime: Date;
  readonly startTime: Date;
  readonly completeTime: Date;
  readonly deploymentOverview: DeploymentOverview;
  readonly description: string;
  readonly creator: string;
  readonly ignoreApplicationStopFailures: boolean;
  readonly autoRollbackConfiguration: AutoRollbackConfiguration;
  readonly updateOutdatedInstancesOnly: boolean;
  readonly rollbackInfo: RollbackInfo;
  readonly deploymentStyle: DeploymentStyle;
  readonly targetInstances: TargetInstances;
  readonly instanceTerminationWaitTimeStarted: boolean;
  readonly blueGreenDeploymentConfiguration: BlueGreenDeploymentConfiguration;
  readonly loadBalancerInfo: LoadBalancerInfo;
  readonly additionalDeploymentStatusInfo: string;
  readonly fileExistsBehavior: string;
  readonly deploymentStatusMessages: [];
  readonly computePlatform: string;
  readonly externalId: string;
  readonly relatedDeployments: RelatedDeployments;
}

interface DeploymentIsNotInReadyStateException {
}

interface DeploymentLimitExceededException {
}

interface DeploymentNotStartedException {
}

interface DeploymentOverview {
  readonly Pending: number;
  readonly InProgress: number;
  readonly Succeeded: number;
  readonly Failed: number;
  readonly Skipped: number;
  readonly Ready: number;
}

interface DeploymentReadyOption {
  readonly actionOnTimeout: string;
  readonly waitTimeInMinutes: number;
}

interface DeploymentStyle {
  readonly deploymentType: string;
  readonly deploymentOption: string;
}

interface DeploymentTarget {
  readonly deploymentTargetType: string;
  readonly instanceTarget: InstanceTarget;
  readonly lambdaTarget: LambdaTarget;
  readonly ecsTarget: ECSTarget;
  readonly cloudFormationTarget: CloudFormationTarget;
}

interface DeploymentTargetDoesNotExistException {
}

interface DeploymentTargetIdRequiredException {
}

interface DeploymentTargetListSizeExceededException {
}

interface DeregisterOnPremisesInstanceInput {
  readonly instanceName: string;
}

interface DescriptionTooLongException {
}

interface Diagnostics {
  readonly errorCode: string;
  readonly scriptName: string;
  readonly message: string;
  readonly logTail: string;
}

interface EC2TagFilter {
  readonly Key: string;
  readonly Value: string;
  readonly Type: string;
}

interface EC2TagSet {
  readonly ec2TagSetList: [];
}

interface ECSService {
  readonly serviceName: string;
  readonly clusterName: string;
}

interface ECSServiceMappingLimitExceededException {
}

interface ECSTarget {
  readonly deploymentId: string;
  readonly targetId: string;
  readonly targetArn: string;
  readonly lastUpdatedAt: Date;
  readonly lifecycleEvents: [];
  readonly status: string;
  readonly taskSetsInfo: [];
}

interface ECSTaskSet {
  readonly identifer: string;
  readonly desiredCount: number;
  readonly pendingCount: number;
  readonly runningCount: number;
  readonly status: string;
  readonly trafficWeight: unknown;
  readonly targetGroup: TargetGroupInfo;
  readonly taskSetLabel: string;
}

interface ELBInfo {
  readonly name: string;
}

interface ErrorInformation {
  readonly code: string;
  readonly message: string;
}

interface GenericRevisionInfo {
  readonly description: string;
  readonly deploymentGroups: [];
  readonly firstUsedTime: Date;
  readonly lastUsedTime: Date;
  readonly registerTime: Date;
}

interface GetApplicationInput {
  readonly applicationName: string;
}

interface GetApplicationOutput {
  readonly application: ApplicationInfo;
}

interface GetApplicationRevisionInput {
  readonly applicationName: string;
  readonly revision: RevisionLocation;
}

interface GetApplicationRevisionOutput {
  readonly applicationName: string;
  readonly revision: RevisionLocation;
  readonly revisionInfo: GenericRevisionInfo;
}

interface GetDeploymentConfigInput {
  readonly deploymentConfigName: string;
}

interface GetDeploymentConfigOutput {
  readonly deploymentConfigInfo: DeploymentConfigInfo;
}

interface GetDeploymentGroupInput {
  readonly applicationName: string;
  readonly deploymentGroupName: string;
}

interface GetDeploymentGroupOutput {
  readonly deploymentGroupInfo: DeploymentGroupInfo;
}

interface GetDeploymentInput {
  readonly deploymentId: string;
}

interface GetDeploymentInstanceInput {
  readonly deploymentId: string;
  readonly instanceId: string;
}

interface GetDeploymentInstanceOutput {
  readonly instanceSummary: InstanceSummary;
}

interface GetDeploymentOutput {
  readonly deploymentInfo: DeploymentInfo;
}

interface GetDeploymentTargetInput {
  readonly deploymentId: string;
  readonly targetId: string;
}

interface GetDeploymentTargetOutput {
  readonly deploymentTarget: DeploymentTarget;
}

interface GetOnPremisesInstanceInput {
  readonly instanceName: string;
}

interface GetOnPremisesInstanceOutput {
  readonly instanceInfo: InstanceInfo;
}

interface GitHubAccountTokenDoesNotExistException {
}

interface GitHubAccountTokenNameRequiredException {
}

interface GitHubLocation {
  readonly repository: string;
  readonly commitId: string;
}

interface GreenFleetProvisioningOption {
  readonly action: string;
}

interface IamArnRequiredException {
}

interface IamSessionArnAlreadyRegisteredException {
}

interface IamUserArnAlreadyRegisteredException {
}

interface IamUserArnRequiredException {
}

interface InstanceDoesNotExistException {
}

interface InstanceIdRequiredException {
}

interface InstanceInfo {
  readonly instanceName: string;
  readonly iamSessionArn: string;
  readonly iamUserArn: string;
  readonly instanceArn: string;
  readonly registerTime: Date;
  readonly deregisterTime: Date;
  readonly tags: [];
}

interface InstanceLimitExceededException {
}

interface InstanceNameAlreadyRegisteredException {
}

interface InstanceNameRequiredException {
}

interface InstanceNotRegisteredException {
}

interface InstanceSummary {
  readonly deploymentId: string;
  readonly instanceId: string;
  readonly status: string;
  readonly lastUpdatedAt: Date;
  readonly lifecycleEvents: [];
  readonly instanceType: string;
}

interface InstanceTarget {
  readonly deploymentId: string;
  readonly targetId: string;
  readonly targetArn: string;
  readonly status: string;
  readonly lastUpdatedAt: Date;
  readonly lifecycleEvents: [];
  readonly instanceLabel: string;
}

interface InvalidAlarmConfigException {
}

interface InvalidApplicationNameException {
}

interface InvalidArnException {
}

interface InvalidAutoRollbackConfigException {
}

interface InvalidAutoScalingGroupException {
}

interface InvalidBlueGreenDeploymentConfigurationException {
}

interface InvalidBucketNameFilterException {
}

interface InvalidComputePlatformException {
}

interface InvalidDeployedStateFilterException {
}

interface InvalidDeploymentConfigNameException {
}

interface InvalidDeploymentGroupNameException {
}

interface InvalidDeploymentIdException {
}

interface InvalidDeploymentInstanceTypeException {
}

interface InvalidDeploymentStatusException {
}

interface InvalidDeploymentStyleException {
}

interface InvalidDeploymentTargetIdException {
}

interface InvalidDeploymentWaitTypeException {
}

interface InvalidEC2TagCombinationException {
}

interface InvalidEC2TagException {
}

interface InvalidECSServiceException {
}

interface InvalidExternalIdException {
}

interface InvalidFileExistsBehaviorException {
}

interface InvalidGitHubAccountTokenException {
}

interface InvalidGitHubAccountTokenNameException {
}

interface InvalidIamSessionArnException {
}

interface InvalidIamUserArnException {
}

interface InvalidIgnoreApplicationStopFailuresValueException {
}

interface InvalidInputException {
}

interface InvalidInstanceIdException {
}

interface InvalidInstanceNameException {
}

interface InvalidInstanceStatusException {
}

interface InvalidInstanceTypeException {
}

interface InvalidKeyPrefixFilterException {
}

interface InvalidLifecycleEventHookExecutionIdException {
}

interface InvalidLifecycleEventHookExecutionStatusException {
}

interface InvalidLoadBalancerInfoException {
}

interface InvalidMinimumHealthyHostValueException {
}

interface InvalidNextTokenException {
}

interface InvalidOnPremisesTagCombinationException {
}

interface InvalidOperationException {
}

interface InvalidRegistrationStatusException {
}

interface InvalidRevisionException {
}

interface InvalidRoleException {
}

interface InvalidSortByException {
}

interface InvalidSortOrderException {
}

interface InvalidTagException {
}

interface InvalidTagFilterException {
}

interface InvalidTagsToAddException {
}

interface InvalidTargetException {
}

interface InvalidTargetFilterNameException {
}

interface InvalidTargetGroupPairException {
}

interface InvalidTargetInstancesException {
}

interface InvalidTimeRangeException {
}

interface InvalidTrafficRoutingConfigurationException {
}

interface InvalidTriggerConfigException {
}

interface InvalidUpdateOutdatedInstancesOnlyValueException {
}

interface LambdaFunctionInfo {
  readonly functionName: string;
  readonly functionAlias: string;
  readonly currentVersion: string;
  readonly targetVersion: string;
  readonly targetVersionWeight: unknown;
}

interface LambdaTarget {
  readonly deploymentId: string;
  readonly targetId: string;
  readonly targetArn: string;
  readonly status: string;
  readonly lastUpdatedAt: Date;
  readonly lifecycleEvents: [];
  readonly lambdaFunctionInfo: LambdaFunctionInfo;
}

interface LastDeploymentInfo {
  readonly deploymentId: string;
  readonly status: string;
  readonly endTime: Date;
  readonly createTime: Date;
}

interface LifecycleEvent {
  readonly lifecycleEventName: string;
  readonly diagnostics: Diagnostics;
  readonly startTime: Date;
  readonly endTime: Date;
  readonly status: string;
}

interface LifecycleEventAlreadyCompletedException {
}

interface LifecycleHookLimitExceededException {
}

interface ListApplicationRevisionsInput {
  readonly applicationName: string;
  readonly sortBy: string;
  readonly sortOrder: string;
  readonly s3Bucket: string;
  readonly s3KeyPrefix: string;
  readonly deployed: string;
  readonly nextToken: string;
}

interface ListApplicationRevisionsOutput {
  readonly revisions: [];
  readonly nextToken: string;
}

interface ListApplicationsInput {
  readonly nextToken: string;
}

interface ListApplicationsOutput {
  readonly applications: [];
  readonly nextToken: string;
}

interface ListDeploymentConfigsInput {
  readonly nextToken: string;
}

interface ListDeploymentConfigsOutput {
  readonly deploymentConfigsList: [];
  readonly nextToken: string;
}

interface ListDeploymentGroupsInput {
  readonly applicationName: string;
  readonly nextToken: string;
}

interface ListDeploymentGroupsOutput {
  readonly applicationName: string;
  readonly deploymentGroups: [];
  readonly nextToken: string;
}

interface ListDeploymentInstancesInput {
  readonly deploymentId: string;
  readonly nextToken: string;
  readonly instanceStatusFilter: [];
  readonly instanceTypeFilter: [];
}

interface ListDeploymentInstancesOutput {
  readonly instancesList: [];
  readonly nextToken: string;
}

interface ListDeploymentTargetsInput {
  readonly deploymentId: string;
  readonly nextToken: string;
  readonly targetFilters: {[key: string]: any};
}

interface ListDeploymentTargetsOutput {
  readonly targetIds: [];
  readonly nextToken: string;
}

interface ListDeploymentsInput {
  readonly applicationName: string;
  readonly deploymentGroupName: string;
  readonly externalId: string;
  readonly includeOnlyStatuses: [];
  readonly createTimeRange: TimeRange;
  readonly nextToken: string;
}

interface ListDeploymentsOutput {
  readonly deployments: [];
  readonly nextToken: string;
}

interface ListGitHubAccountTokenNamesInput {
  readonly nextToken: string;
}

interface ListGitHubAccountTokenNamesOutput {
  readonly tokenNameList: [];
  readonly nextToken: string;
}

interface ListOnPremisesInstancesInput {
  readonly registrationStatus: string;
  readonly tagFilters: [];
  readonly nextToken: string;
}

interface ListOnPremisesInstancesOutput {
  readonly instanceNames: [];
  readonly nextToken: string;
}

interface ListTagsForResourceInput {
  readonly ResourceArn: string;
  readonly NextToken: string;
}

interface ListTagsForResourceOutput {
  readonly Tags: [];
  readonly NextToken: string;
}

interface LoadBalancerInfo {
  readonly elbInfoList: [];
  readonly targetGroupInfoList: [];
  readonly targetGroupPairInfoList: [];
}

interface MinimumHealthyHosts {
  readonly type: string;
  readonly value: number;
}

interface MultipleIamArnsProvidedException {
}

interface OnPremisesTagSet {
  readonly onPremisesTagSetList: [];
}

interface OperationNotSupportedException {
}

interface PutLifecycleEventHookExecutionStatusInput {
  readonly deploymentId: string;
  readonly lifecycleEventHookExecutionId: string;
  readonly status: string;
}

interface PutLifecycleEventHookExecutionStatusOutput {
  readonly lifecycleEventHookExecutionId: string;
}

interface RawString {
  readonly content: string;
  readonly sha256: string;
}

interface RegisterApplicationRevisionInput {
  readonly applicationName: string;
  readonly description: string;
  readonly revision: RevisionLocation;
}

interface RegisterOnPremisesInstanceInput {
  readonly instanceName: string;
  readonly iamSessionArn: string;
  readonly iamUserArn: string;
}

interface RelatedDeployments {
  readonly autoUpdateOutdatedInstancesRootDeploymentId: string;
  readonly autoUpdateOutdatedInstancesDeploymentIds: [];
}

interface RemoveTagsFromOnPremisesInstancesInput {
  readonly tags: [];
  readonly instanceNames: [];
}

interface ResourceArnRequiredException {
}

interface ResourceValidationException {
}

interface RevisionDoesNotExistException {
}

interface RevisionInfo {
  readonly revisionLocation: RevisionLocation;
  readonly genericRevisionInfo: GenericRevisionInfo;
}

interface RevisionLocation {
  readonly revisionType: string;
  readonly s3Location: S3Location;
  readonly gitHubLocation: GitHubLocation;
  readonly string: RawString;
  readonly appSpecContent: AppSpecContent;
}

interface RevisionRequiredException {
}

interface RoleRequiredException {
}

interface RollbackInfo {
  readonly rollbackDeploymentId: string;
  readonly rollbackTriggeringDeploymentId: string;
  readonly rollbackMessage: string;
}

interface S3Location {
  readonly bucket: string;
  readonly key: string;
  readonly bundleType: string;
  readonly version: string;
  readonly eTag: string;
}

interface SkipWaitTimeForInstanceTerminationInput {
  readonly deploymentId: string;
}

interface StopDeploymentInput {
  readonly deploymentId: string;
  readonly autoRollbackEnabled: boolean;
}

interface StopDeploymentOutput {
  readonly status: string;
  readonly statusMessage: string;
}

interface Tag {
  readonly Key: string;
  readonly Value: string;
}

interface TagFilter {
  readonly Key: string;
  readonly Value: string;
  readonly Type: string;
}

interface TagLimitExceededException {
}

interface TagRequiredException {
}

interface TagResourceInput {
  readonly ResourceArn: string;
  readonly Tags: [];
}

interface TagResourceOutput {
}

interface TagSetListLimitExceededException {
}

interface TargetGroupInfo {
  readonly name: string;
}

interface TargetGroupPairInfo {
  readonly targetGroups: [];
  readonly prodTrafficRoute: TrafficRoute;
  readonly testTrafficRoute: TrafficRoute;
}

interface TargetInstances {
  readonly tagFilters: [];
  readonly autoScalingGroups: [];
  readonly ec2TagSet: EC2TagSet;
}

interface ThrottlingException {
}

interface TimeBasedCanary {
  readonly canaryPercentage: number;
  readonly canaryInterval: number;
}

interface TimeBasedLinear {
  readonly linearPercentage: number;
  readonly linearInterval: number;
}

interface TimeRange {
  readonly start: Date;
  readonly end: Date;
}

interface TrafficRoute {
  readonly listenerArns: [];
}

interface TrafficRoutingConfig {
  readonly type: string;
  readonly timeBasedCanary: TimeBasedCanary;
  readonly timeBasedLinear: TimeBasedLinear;
}

interface TriggerConfig {
  readonly triggerName: string;
  readonly triggerTargetArn: string;
  readonly triggerEvents: [];
}

interface TriggerTargetsLimitExceededException {
}

interface UnsupportedActionForDeploymentTypeException {
}

interface UntagResourceInput {
  readonly ResourceArn: string;
  readonly TagKeys: [];
}

interface UntagResourceOutput {
}

interface UpdateApplicationInput {
  readonly applicationName: string;
  readonly newApplicationName: string;
}

interface UpdateDeploymentGroupInput {
  readonly applicationName: string;
  readonly currentDeploymentGroupName: string;
  readonly newDeploymentGroupName: string;
  readonly deploymentConfigName: string;
  readonly ec2TagFilters: [];
  readonly onPremisesInstanceTagFilters: [];
  readonly autoScalingGroups: [];
  readonly serviceRoleArn: string;
  readonly triggerConfigurations: [];
  readonly alarmConfiguration: AlarmConfiguration;
  readonly autoRollbackConfiguration: AutoRollbackConfiguration;
  readonly outdatedInstancesStrategy: string;
  readonly deploymentStyle: DeploymentStyle;
  readonly blueGreenDeploymentConfiguration: BlueGreenDeploymentConfiguration;
  readonly loadBalancerInfo: LoadBalancerInfo;
  readonly ec2TagSet: EC2TagSet;
  readonly ecsServices: [];
  readonly onPremisesTagSet: OnPremisesTagSet;
}

interface UpdateDeploymentGroupOutput {
  readonly hooksNotCleanedUp: [];
}

