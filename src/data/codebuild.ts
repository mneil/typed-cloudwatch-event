/**
 * STOP. This file is autogenerated. DO NOT EDIT by hand
 */
export interface BatchDeleteBuilds {
  readonly ids: [];
}

export interface BatchGetBuildBatches {
  readonly ids: [];
}

export interface BatchGetBuilds {
  readonly ids: [];
}

export interface BatchGetProjects {
  readonly names: [];
}

export interface BatchGetReportGroups {
  readonly reportGroupArns: [];
}

export interface BatchGetReports {
  readonly reportArns: [];
}

export interface CreateProject {
  readonly name: string;
  readonly description?: string;
  readonly source: ProjectSource;
  readonly secondarySources?: [];
  readonly sourceVersion?: string;
  readonly secondarySourceVersions?: [];
  readonly artifacts: ProjectArtifacts;
  readonly secondaryArtifacts?: [];
  readonly cache?: ProjectCache;
  readonly environment: ProjectEnvironment;
  readonly serviceRole: string;
  readonly timeoutInMinutes?: number;
  readonly queuedTimeoutInMinutes?: number;
  readonly encryptionKey?: string;
  readonly tags?: [];
  readonly vpcConfig?: VpcConfig;
  readonly badgeEnabled?: boolean;
  readonly logsConfig?: LogsConfig;
  readonly fileSystemLocations?: [];
  readonly buildBatchConfig?: ProjectBuildBatchConfig;
  readonly concurrentBuildLimit?: number;
}

export interface CreateReportGroup {
  readonly name: string;
  readonly type: string;
  readonly exportConfig: ReportExportConfig;
  readonly tags?: [];
}

export interface CreateWebhook {
  readonly projectName: string;
  readonly branchFilter?: string;
  readonly filterGroups?: [];
  readonly buildType?: string;
}

export interface DeleteBuildBatch {
  readonly id: string;
}

export interface DeleteProject {
  readonly name: string;
}

export interface DeleteReport {
  readonly arn: string;
}

export interface DeleteReportGroup {
  readonly arn: string;
  readonly deleteReports?: boolean;
}

export interface DeleteResourcePolicy {
  readonly resourceArn: string;
}

export interface DeleteSourceCredentials {
  readonly arn: string;
}

export interface DeleteWebhook {
  readonly projectName: string;
}

export interface DescribeCodeCoverages {
  readonly reportArn: string;
  readonly nextToken?: string;
  readonly maxResults?: number;
  readonly sortOrder?: string;
  readonly sortBy?: string;
  readonly minLineCoveragePercentage?: unknown;
  readonly maxLineCoveragePercentage?: unknown;
}

export interface DescribeTestCases {
  readonly reportArn: string;
  readonly nextToken?: string;
  readonly maxResults?: number;
  readonly filter?: TestCaseFilter;
}

export interface GetReportGroupTrend {
  readonly reportGroupArn: string;
  readonly numOfReports?: number;
  readonly trendField: string;
}

export interface GetResourcePolicy {
  readonly resourceArn: string;
}

export interface ImportSourceCredentials {
  readonly username?: string;
  readonly token: string;
  readonly serverType: string;
  readonly authType: string;
  readonly shouldOverwrite?: boolean;
}

export interface InvalidateProjectCache {
  readonly projectName: string;
}

export interface ListBuildBatches {
  readonly filter?: BuildBatchFilter;
  readonly maxResults?: number;
  readonly sortOrder?: string;
  readonly nextToken?: string;
}

export interface ListBuildBatchesForProject {
  readonly projectName?: string;
  readonly filter?: BuildBatchFilter;
  readonly maxResults?: number;
  readonly sortOrder?: string;
  readonly nextToken?: string;
}

export interface ListBuilds {
  readonly sortOrder?: string;
  readonly nextToken?: string;
}

export interface ListBuildsForProject {
  readonly projectName: string;
  readonly sortOrder?: string;
  readonly nextToken?: string;
}

export interface ListCuratedEnvironmentImages {
}

export interface ListProjects {
  readonly sortBy?: string;
  readonly sortOrder?: string;
  readonly nextToken?: string;
}

export interface ListReportGroups {
  readonly sortOrder?: string;
  readonly sortBy?: string;
  readonly nextToken?: string;
  readonly maxResults?: number;
}

export interface ListReports {
  readonly sortOrder?: string;
  readonly nextToken?: string;
  readonly maxResults?: number;
  readonly filter?: ReportFilter;
}

export interface ListReportsForReportGroup {
  readonly reportGroupArn: string;
  readonly nextToken?: string;
  readonly sortOrder?: string;
  readonly maxResults?: number;
  readonly filter?: ReportFilter;
}

export interface ListSharedProjects {
  readonly sortBy?: string;
  readonly sortOrder?: string;
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface ListSharedReportGroups {
  readonly sortOrder?: string;
  readonly sortBy?: string;
  readonly nextToken?: string;
  readonly maxResults?: number;
}

export interface ListSourceCredentials {
}

export interface PutResourcePolicy {
  readonly policy: string;
  readonly resourceArn: string;
}

export interface RetryBuild {
  readonly id?: string;
  readonly idempotencyToken?: string;
}

export interface RetryBuildBatch {
  readonly id?: string;
  readonly idempotencyToken?: string;
  readonly retryType?: string;
}

export interface StartBuild {
  readonly projectName: string;
  readonly secondarySourcesOverride?: [];
  readonly secondarySourcesVersionOverride?: [];
  readonly sourceVersion?: string;
  readonly artifactsOverride?: ProjectArtifacts;
  readonly secondaryArtifactsOverride?: [];
  readonly environmentVariablesOverride?: [];
  readonly sourceTypeOverride?: string;
  readonly sourceLocationOverride?: string;
  readonly sourceAuthOverride?: SourceAuth;
  readonly gitCloneDepthOverride?: number;
  readonly gitSubmodulesConfigOverride?: GitSubmodulesConfig;
  readonly buildspecOverride?: string;
  readonly insecureSslOverride?: boolean;
  readonly reportBuildStatusOverride?: boolean;
  readonly buildStatusConfigOverride?: BuildStatusConfig;
  readonly environmentTypeOverride?: string;
  readonly imageOverride?: string;
  readonly computeTypeOverride?: string;
  readonly certificateOverride?: string;
  readonly cacheOverride?: ProjectCache;
  readonly serviceRoleOverride?: string;
  readonly privilegedModeOverride?: boolean;
  readonly timeoutInMinutesOverride?: number;
  readonly queuedTimeoutInMinutesOverride?: number;
  readonly encryptionKeyOverride?: string;
  readonly idempotencyToken?: string;
  readonly logsConfigOverride?: LogsConfig;
  readonly registryCredentialOverride?: RegistryCredential;
  readonly imagePullCredentialsTypeOverride?: string;
  readonly debugSessionEnabled?: boolean;
}

export interface StartBuildBatch {
  readonly projectName: string;
  readonly secondarySourcesOverride?: [];
  readonly secondarySourcesVersionOverride?: [];
  readonly sourceVersion?: string;
  readonly artifactsOverride?: ProjectArtifacts;
  readonly secondaryArtifactsOverride?: [];
  readonly environmentVariablesOverride?: [];
  readonly sourceTypeOverride?: string;
  readonly sourceLocationOverride?: string;
  readonly sourceAuthOverride?: SourceAuth;
  readonly gitCloneDepthOverride?: number;
  readonly gitSubmodulesConfigOverride?: GitSubmodulesConfig;
  readonly buildspecOverride?: string;
  readonly insecureSslOverride?: boolean;
  readonly reportBuildBatchStatusOverride?: boolean;
  readonly environmentTypeOverride?: string;
  readonly imageOverride?: string;
  readonly computeTypeOverride?: string;
  readonly certificateOverride?: string;
  readonly cacheOverride?: ProjectCache;
  readonly serviceRoleOverride?: string;
  readonly privilegedModeOverride?: boolean;
  readonly buildTimeoutInMinutesOverride?: number;
  readonly queuedTimeoutInMinutesOverride?: number;
  readonly encryptionKeyOverride?: string;
  readonly idempotencyToken?: string;
  readonly logsConfigOverride?: LogsConfig;
  readonly registryCredentialOverride?: RegistryCredential;
  readonly imagePullCredentialsTypeOverride?: string;
  readonly buildBatchConfigOverride?: ProjectBuildBatchConfig;
  readonly debugSessionEnabled?: boolean;
}

export interface StopBuild {
  readonly id: string;
}

export interface StopBuildBatch {
  readonly id: string;
}

export interface UpdateProject {
  readonly name: string;
  readonly description?: string;
  readonly source?: ProjectSource;
  readonly secondarySources?: [];
  readonly sourceVersion?: string;
  readonly secondarySourceVersions?: [];
  readonly artifacts?: ProjectArtifacts;
  readonly secondaryArtifacts?: [];
  readonly cache?: ProjectCache;
  readonly environment?: ProjectEnvironment;
  readonly serviceRole?: string;
  readonly timeoutInMinutes?: number;
  readonly queuedTimeoutInMinutes?: number;
  readonly encryptionKey?: string;
  readonly tags?: [];
  readonly vpcConfig?: VpcConfig;
  readonly badgeEnabled?: boolean;
  readonly logsConfig?: LogsConfig;
  readonly fileSystemLocations?: [];
  readonly buildBatchConfig?: ProjectBuildBatchConfig;
  readonly concurrentBuildLimit?: number;
}

export interface UpdateProjectVisibility {
  readonly projectArn: string;
  readonly projectVisibility: string;
  readonly resourceAccessRole?: string;
}

export interface UpdateReportGroup {
  readonly arn: string;
  readonly exportConfig?: ReportExportConfig;
  readonly tags?: [];
}

export interface UpdateWebhook {
  readonly projectName: string;
  readonly branchFilter?: string;
  readonly rotateSecret?: boolean;
  readonly filterGroups?: [];
  readonly buildType?: string;
}

export interface AccountLimitExceededException {
}

export interface BatchDeleteBuildsInput {
  readonly ids: [];
}

export interface BatchDeleteBuildsOutput {
  readonly buildsDeleted?: [];
  readonly buildsNotDeleted?: [];
}

export interface BatchGetBuildBatchesInput {
  readonly ids: [];
}

export interface BatchGetBuildBatchesOutput {
  readonly buildBatches?: [];
  readonly buildBatchesNotFound?: [];
}

export interface BatchGetBuildsInput {
  readonly ids: [];
}

export interface BatchGetBuildsOutput {
  readonly builds?: [];
  readonly buildsNotFound?: [];
}

export interface BatchGetProjectsInput {
  readonly names: [];
}

export interface BatchGetProjectsOutput {
  readonly projects?: [];
  readonly projectsNotFound?: [];
}

export interface BatchGetReportGroupsInput {
  readonly reportGroupArns: [];
}

export interface BatchGetReportGroupsOutput {
  readonly reportGroups?: [];
  readonly reportGroupsNotFound?: [];
}

export interface BatchGetReportsInput {
  readonly reportArns: [];
}

export interface BatchGetReportsOutput {
  readonly reports?: [];
  readonly reportsNotFound?: [];
}

export interface BatchRestrictions {
  readonly maximumBuildsAllowed?: number;
  readonly computeTypesAllowed?: [];
}

export interface Build {
  readonly id?: string;
  readonly arn?: string;
  readonly buildNumber?: number;
  readonly startTime?: Date;
  readonly endTime?: Date;
  readonly currentPhase?: string;
  readonly buildStatus?: string;
  readonly sourceVersion?: string;
  readonly resolvedSourceVersion?: string;
  readonly projectName?: string;
  readonly phases?: [];
  readonly source?: ProjectSource;
  readonly secondarySources?: [];
  readonly secondarySourceVersions?: [];
  readonly artifacts?: BuildArtifacts;
  readonly secondaryArtifacts?: [];
  readonly cache?: ProjectCache;
  readonly environment?: ProjectEnvironment;
  readonly serviceRole?: string;
  readonly logs?: LogsLocation;
  readonly timeoutInMinutes?: number;
  readonly queuedTimeoutInMinutes?: number;
  readonly buildComplete?: boolean;
  readonly initiator?: string;
  readonly vpcConfig?: VpcConfig;
  readonly networkInterface?: NetworkInterface;
  readonly encryptionKey?: string;
  readonly exportedEnvironmentVariables?: [];
  readonly reportArns?: [];
  readonly fileSystemLocations?: [];
  readonly debugSession?: DebugSession;
  readonly buildBatchArn?: string;
}

export interface BuildArtifacts {
  readonly location?: string;
  readonly sha256sum?: string;
  readonly md5sum?: string;
  readonly overrideArtifactName?: boolean;
  readonly encryptionDisabled?: boolean;
  readonly artifactIdentifier?: string;
  readonly bucketOwnerAccess?: string;
}

export interface BuildBatch {
  readonly id?: string;
  readonly arn?: string;
  readonly startTime?: Date;
  readonly endTime?: Date;
  readonly currentPhase?: string;
  readonly buildBatchStatus?: string;
  readonly sourceVersion?: string;
  readonly resolvedSourceVersion?: string;
  readonly projectName?: string;
  readonly phases?: [];
  readonly source?: ProjectSource;
  readonly secondarySources?: [];
  readonly secondarySourceVersions?: [];
  readonly artifacts?: BuildArtifacts;
  readonly secondaryArtifacts?: [];
  readonly cache?: ProjectCache;
  readonly environment?: ProjectEnvironment;
  readonly serviceRole?: string;
  readonly logConfig?: LogsConfig;
  readonly buildTimeoutInMinutes?: number;
  readonly queuedTimeoutInMinutes?: number;
  readonly complete?: boolean;
  readonly initiator?: string;
  readonly vpcConfig?: VpcConfig;
  readonly encryptionKey?: string;
  readonly buildBatchNumber?: number;
  readonly fileSystemLocations?: [];
  readonly buildBatchConfig?: ProjectBuildBatchConfig;
  readonly buildGroups?: [];
  readonly debugSessionEnabled?: boolean;
}

export interface BuildBatchFilter {
  readonly status?: string;
}

export interface BuildBatchPhase {
  readonly phaseType?: string;
  readonly phaseStatus?: string;
  readonly startTime?: Date;
  readonly endTime?: Date;
  readonly durationInSeconds?: number;
  readonly contexts?: [];
}

export interface BuildGroup {
  readonly identifier?: string;
  readonly dependsOn?: [];
  readonly ignoreFailure?: boolean;
  readonly currentBuildSummary?: BuildSummary;
  readonly priorBuildSummaryList?: [];
}

export interface BuildNotDeleted {
  readonly id?: string;
  readonly statusCode?: string;
}

export interface BuildPhase {
  readonly phaseType?: string;
  readonly phaseStatus?: string;
  readonly startTime?: Date;
  readonly endTime?: Date;
  readonly durationInSeconds?: number;
  readonly contexts?: [];
}

export interface BuildStatusConfig {
  readonly context?: string;
  readonly targetUrl?: string;
}

export interface BuildSummary {
  readonly arn?: string;
  readonly requestedOn?: Date;
  readonly buildStatus?: string;
  readonly primaryArtifact?: ResolvedArtifact;
  readonly secondaryArtifacts?: [];
}

export interface CloudWatchLogsConfig {
  readonly status: string;
  readonly groupName?: string;
  readonly streamName?: string;
}

export interface CodeCoverage {
  readonly id?: string;
  readonly reportARN?: string;
  readonly filePath?: string;
  readonly lineCoveragePercentage?: unknown;
  readonly linesCovered?: number;
  readonly linesMissed?: number;
  readonly branchCoveragePercentage?: unknown;
  readonly branchesCovered?: number;
  readonly branchesMissed?: number;
  readonly expired?: Date;
}

export interface CodeCoverageReportSummary {
  readonly lineCoveragePercentage?: unknown;
  readonly linesCovered?: number;
  readonly linesMissed?: number;
  readonly branchCoveragePercentage?: unknown;
  readonly branchesCovered?: number;
  readonly branchesMissed?: number;
}

export interface CreateProjectInput {
  readonly name: string;
  readonly description?: string;
  readonly source: ProjectSource;
  readonly secondarySources?: [];
  readonly sourceVersion?: string;
  readonly secondarySourceVersions?: [];
  readonly artifacts: ProjectArtifacts;
  readonly secondaryArtifacts?: [];
  readonly cache?: ProjectCache;
  readonly environment: ProjectEnvironment;
  readonly serviceRole: string;
  readonly timeoutInMinutes?: number;
  readonly queuedTimeoutInMinutes?: number;
  readonly encryptionKey?: string;
  readonly tags?: [];
  readonly vpcConfig?: VpcConfig;
  readonly badgeEnabled?: boolean;
  readonly logsConfig?: LogsConfig;
  readonly fileSystemLocations?: [];
  readonly buildBatchConfig?: ProjectBuildBatchConfig;
  readonly concurrentBuildLimit?: number;
}

export interface CreateProjectOutput {
  readonly project?: Project;
}

export interface CreateReportGroupInput {
  readonly name: string;
  readonly type: string;
  readonly exportConfig: ReportExportConfig;
  readonly tags?: [];
}

export interface CreateReportGroupOutput {
  readonly reportGroup?: ReportGroup;
}

export interface CreateWebhookInput {
  readonly projectName: string;
  readonly branchFilter?: string;
  readonly filterGroups?: [];
  readonly buildType?: string;
}

export interface CreateWebhookOutput {
  readonly webhook?: Webhook;
}

export interface DebugSession {
  readonly sessionEnabled?: boolean;
  readonly sessionTarget?: string;
}

export interface DeleteBuildBatchInput {
  readonly id: string;
}

export interface DeleteBuildBatchOutput {
  readonly statusCode?: string;
  readonly buildsDeleted?: [];
  readonly buildsNotDeleted?: [];
}

export interface DeleteProjectInput {
  readonly name: string;
}

export interface DeleteProjectOutput {
}

export interface DeleteReportGroupInput {
  readonly arn: string;
  readonly deleteReports?: boolean;
}

export interface DeleteReportGroupOutput {
}

export interface DeleteReportInput {
  readonly arn: string;
}

export interface DeleteReportOutput {
}

export interface DeleteResourcePolicyInput {
  readonly resourceArn: string;
}

export interface DeleteResourcePolicyOutput {
}

export interface DeleteSourceCredentialsInput {
  readonly arn: string;
}

export interface DeleteSourceCredentialsOutput {
  readonly arn?: string;
}

export interface DeleteWebhookInput {
  readonly projectName: string;
}

export interface DeleteWebhookOutput {
}

export interface DescribeCodeCoveragesInput {
  readonly reportArn: string;
  readonly nextToken?: string;
  readonly maxResults?: number;
  readonly sortOrder?: string;
  readonly sortBy?: string;
  readonly minLineCoveragePercentage?: unknown;
  readonly maxLineCoveragePercentage?: unknown;
}

export interface DescribeCodeCoveragesOutput {
  readonly nextToken?: string;
  readonly codeCoverages?: [];
}

export interface DescribeTestCasesInput {
  readonly reportArn: string;
  readonly nextToken?: string;
  readonly maxResults?: number;
  readonly filter?: TestCaseFilter;
}

export interface DescribeTestCasesOutput {
  readonly nextToken?: string;
  readonly testCases?: [];
}

export interface EnvironmentImage {
  readonly name?: string;
  readonly description?: string;
  readonly versions?: [];
}

export interface EnvironmentLanguage {
  readonly language?: string;
  readonly images?: [];
}

export interface EnvironmentPlatform {
  readonly platform?: string;
  readonly languages?: [];
}

export interface EnvironmentVariable {
  readonly name: string;
  readonly value: string;
  readonly type?: string;
}

export interface ExportedEnvironmentVariable {
  readonly name?: string;
  readonly value?: string;
}

export interface GetReportGroupTrendInput {
  readonly reportGroupArn: string;
  readonly numOfReports?: number;
  readonly trendField: string;
}

export interface GetReportGroupTrendOutput {
  readonly stats?: ReportGroupTrendStats;
  readonly rawData?: [];
}

export interface GetResourcePolicyInput {
  readonly resourceArn: string;
}

export interface GetResourcePolicyOutput {
  readonly policy?: string;
}

export interface GitSubmodulesConfig {
  readonly fetchSubmodules: boolean;
}

export interface ImportSourceCredentialsInput {
  readonly username?: string;
  readonly token: string;
  readonly serverType: string;
  readonly authType: string;
  readonly shouldOverwrite?: boolean;
}

export interface ImportSourceCredentialsOutput {
  readonly arn?: string;
}

export interface InvalidInputException {
}

export interface InvalidateProjectCacheInput {
  readonly projectName: string;
}

export interface InvalidateProjectCacheOutput {
}

export interface ListBuildBatchesForProjectInput {
  readonly projectName?: string;
  readonly filter?: BuildBatchFilter;
  readonly maxResults?: number;
  readonly sortOrder?: string;
  readonly nextToken?: string;
}

export interface ListBuildBatchesForProjectOutput {
  readonly ids?: [];
  readonly nextToken?: string;
}

export interface ListBuildBatchesInput {
  readonly filter?: BuildBatchFilter;
  readonly maxResults?: number;
  readonly sortOrder?: string;
  readonly nextToken?: string;
}

export interface ListBuildBatchesOutput {
  readonly ids?: [];
  readonly nextToken?: string;
}

export interface ListBuildsForProjectInput {
  readonly projectName: string;
  readonly sortOrder?: string;
  readonly nextToken?: string;
}

export interface ListBuildsForProjectOutput {
  readonly ids?: [];
  readonly nextToken?: string;
}

export interface ListBuildsInput {
  readonly sortOrder?: string;
  readonly nextToken?: string;
}

export interface ListBuildsOutput {
  readonly ids?: [];
  readonly nextToken?: string;
}

export interface ListCuratedEnvironmentImagesInput {
}

export interface ListCuratedEnvironmentImagesOutput {
  readonly platforms?: [];
}

export interface ListProjectsInput {
  readonly sortBy?: string;
  readonly sortOrder?: string;
  readonly nextToken?: string;
}

export interface ListProjectsOutput {
  readonly nextToken?: string;
  readonly projects?: [];
}

export interface ListReportGroupsInput {
  readonly sortOrder?: string;
  readonly sortBy?: string;
  readonly nextToken?: string;
  readonly maxResults?: number;
}

export interface ListReportGroupsOutput {
  readonly nextToken?: string;
  readonly reportGroups?: [];
}

export interface ListReportsForReportGroupInput {
  readonly reportGroupArn: string;
  readonly nextToken?: string;
  readonly sortOrder?: string;
  readonly maxResults?: number;
  readonly filter?: ReportFilter;
}

export interface ListReportsForReportGroupOutput {
  readonly nextToken?: string;
  readonly reports?: [];
}

export interface ListReportsInput {
  readonly sortOrder?: string;
  readonly nextToken?: string;
  readonly maxResults?: number;
  readonly filter?: ReportFilter;
}

export interface ListReportsOutput {
  readonly nextToken?: string;
  readonly reports?: [];
}

export interface ListSharedProjectsInput {
  readonly sortBy?: string;
  readonly sortOrder?: string;
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface ListSharedProjectsOutput {
  readonly nextToken?: string;
  readonly projects?: [];
}

export interface ListSharedReportGroupsInput {
  readonly sortOrder?: string;
  readonly sortBy?: string;
  readonly nextToken?: string;
  readonly maxResults?: number;
}

export interface ListSharedReportGroupsOutput {
  readonly nextToken?: string;
  readonly reportGroups?: [];
}

export interface ListSourceCredentialsInput {
}

export interface ListSourceCredentialsOutput {
  readonly sourceCredentialsInfos?: [];
}

export interface LogsConfig {
  readonly cloudWatchLogs?: CloudWatchLogsConfig;
  readonly s3Logs?: S3LogsConfig;
}

export interface LogsLocation {
  readonly groupName?: string;
  readonly streamName?: string;
  readonly deepLink?: string;
  readonly s3DeepLink?: string;
  readonly cloudWatchLogsArn?: string;
  readonly s3LogsArn?: string;
  readonly cloudWatchLogs?: CloudWatchLogsConfig;
  readonly s3Logs?: S3LogsConfig;
}

export interface NetworkInterface {
  readonly subnetId?: string;
  readonly networkInterfaceId?: string;
}

export interface OAuthProviderException {
}

export interface PhaseContext {
  readonly statusCode?: string;
  readonly message?: string;
}

export interface Project {
  readonly name?: string;
  readonly arn?: string;
  readonly description?: string;
  readonly source?: ProjectSource;
  readonly secondarySources?: [];
  readonly sourceVersion?: string;
  readonly secondarySourceVersions?: [];
  readonly artifacts?: ProjectArtifacts;
  readonly secondaryArtifacts?: [];
  readonly cache?: ProjectCache;
  readonly environment?: ProjectEnvironment;
  readonly serviceRole?: string;
  readonly timeoutInMinutes?: number;
  readonly queuedTimeoutInMinutes?: number;
  readonly encryptionKey?: string;
  readonly tags?: [];
  readonly created?: Date;
  readonly lastModified?: Date;
  readonly webhook?: Webhook;
  readonly vpcConfig?: VpcConfig;
  readonly badge?: ProjectBadge;
  readonly logsConfig?: LogsConfig;
  readonly fileSystemLocations?: [];
  readonly buildBatchConfig?: ProjectBuildBatchConfig;
  readonly concurrentBuildLimit?: number;
  readonly projectVisibility?: string;
  readonly publicProjectAlias?: string;
  readonly resourceAccessRole?: string;
}

export interface ProjectArtifacts {
  readonly type: string;
  readonly location?: string;
  readonly path?: string;
  readonly namespaceType?: string;
  readonly name?: string;
  readonly packaging?: string;
  readonly overrideArtifactName?: boolean;
  readonly encryptionDisabled?: boolean;
  readonly artifactIdentifier?: string;
  readonly bucketOwnerAccess?: string;
}

export interface ProjectBadge {
  readonly badgeEnabled?: boolean;
  readonly badgeRequestUrl?: string;
}

export interface ProjectBuildBatchConfig {
  readonly serviceRole?: string;
  readonly combineArtifacts?: boolean;
  readonly restrictions?: BatchRestrictions;
  readonly timeoutInMins?: number;
  readonly batchReportMode?: string;
}

export interface ProjectCache {
  readonly type: string;
  readonly location?: string;
  readonly modes?: [];
}

export interface ProjectEnvironment {
  readonly type: string;
  readonly image: string;
  readonly computeType: string;
  readonly environmentVariables?: [];
  readonly privilegedMode?: boolean;
  readonly certificate?: string;
  readonly registryCredential?: RegistryCredential;
  readonly imagePullCredentialsType?: string;
}

export interface ProjectFileSystemLocation {
  readonly type?: string;
  readonly location?: string;
  readonly mountPoint?: string;
  readonly identifier?: string;
  readonly mountOptions?: string;
}

export interface ProjectSource {
  readonly type: string;
  readonly location?: string;
  readonly gitCloneDepth?: number;
  readonly gitSubmodulesConfig?: GitSubmodulesConfig;
  readonly buildspec?: string;
  readonly auth?: SourceAuth;
  readonly reportBuildStatus?: boolean;
  readonly buildStatusConfig?: BuildStatusConfig;
  readonly insecureSsl?: boolean;
  readonly sourceIdentifier?: string;
}

export interface ProjectSourceVersion {
  readonly sourceIdentifier: string;
  readonly sourceVersion: string;
}

export interface PutResourcePolicyInput {
  readonly policy: string;
  readonly resourceArn: string;
}

export interface PutResourcePolicyOutput {
  readonly resourceArn?: string;
}

export interface RegistryCredential {
  readonly credential: string;
  readonly credentialProvider: string;
}

export interface Report {
  readonly arn?: string;
  readonly type?: string;
  readonly name?: string;
  readonly reportGroupArn?: string;
  readonly executionId?: string;
  readonly status?: string;
  readonly created?: Date;
  readonly expired?: Date;
  readonly exportConfig?: ReportExportConfig;
  readonly truncated?: boolean;
  readonly testSummary?: TestReportSummary;
  readonly codeCoverageSummary?: CodeCoverageReportSummary;
}

export interface ReportExportConfig {
  readonly exportConfigType?: string;
  readonly s3Destination?: S3ReportExportConfig;
}

export interface ReportFilter {
  readonly status?: string;
}

export interface ReportGroup {
  readonly arn?: string;
  readonly name?: string;
  readonly type?: string;
  readonly exportConfig?: ReportExportConfig;
  readonly created?: Date;
  readonly lastModified?: Date;
  readonly tags?: [];
  readonly status?: string;
}

export interface ReportGroupTrendStats {
  readonly average?: string;
  readonly max?: string;
  readonly min?: string;
}

export interface ReportWithRawData {
  readonly reportArn?: string;
  readonly data?: string;
}

export interface ResolvedArtifact {
  readonly type?: string;
  readonly location?: string;
  readonly identifier?: string;
}

export interface ResourceAlreadyExistsException {
}

export interface ResourceNotFoundException {
}

export interface RetryBuildBatchInput {
  readonly id?: string;
  readonly idempotencyToken?: string;
  readonly retryType?: string;
}

export interface RetryBuildBatchOutput {
  readonly buildBatch?: BuildBatch;
}

export interface RetryBuildInput {
  readonly id?: string;
  readonly idempotencyToken?: string;
}

export interface RetryBuildOutput {
  readonly build?: Build;
}

export interface S3LogsConfig {
  readonly status: string;
  readonly location?: string;
  readonly encryptionDisabled?: boolean;
  readonly bucketOwnerAccess?: string;
}

export interface S3ReportExportConfig {
  readonly bucket?: string;
  readonly bucketOwner?: string;
  readonly path?: string;
  readonly packaging?: string;
  readonly encryptionKey?: string;
  readonly encryptionDisabled?: boolean;
}

export interface SourceAuth {
  readonly type: string;
  readonly resource?: string;
}

export interface SourceCredentialsInfo {
  readonly arn?: string;
  readonly serverType?: string;
  readonly authType?: string;
}

export interface StartBuildBatchInput {
  readonly projectName: string;
  readonly secondarySourcesOverride?: [];
  readonly secondarySourcesVersionOverride?: [];
  readonly sourceVersion?: string;
  readonly artifactsOverride?: ProjectArtifacts;
  readonly secondaryArtifactsOverride?: [];
  readonly environmentVariablesOverride?: [];
  readonly sourceTypeOverride?: string;
  readonly sourceLocationOverride?: string;
  readonly sourceAuthOverride?: SourceAuth;
  readonly gitCloneDepthOverride?: number;
  readonly gitSubmodulesConfigOverride?: GitSubmodulesConfig;
  readonly buildspecOverride?: string;
  readonly insecureSslOverride?: boolean;
  readonly reportBuildBatchStatusOverride?: boolean;
  readonly environmentTypeOverride?: string;
  readonly imageOverride?: string;
  readonly computeTypeOverride?: string;
  readonly certificateOverride?: string;
  readonly cacheOverride?: ProjectCache;
  readonly serviceRoleOverride?: string;
  readonly privilegedModeOverride?: boolean;
  readonly buildTimeoutInMinutesOverride?: number;
  readonly queuedTimeoutInMinutesOverride?: number;
  readonly encryptionKeyOverride?: string;
  readonly idempotencyToken?: string;
  readonly logsConfigOverride?: LogsConfig;
  readonly registryCredentialOverride?: RegistryCredential;
  readonly imagePullCredentialsTypeOverride?: string;
  readonly buildBatchConfigOverride?: ProjectBuildBatchConfig;
  readonly debugSessionEnabled?: boolean;
}

export interface StartBuildBatchOutput {
  readonly buildBatch?: BuildBatch;
}

export interface StartBuildInput {
  readonly projectName: string;
  readonly secondarySourcesOverride?: [];
  readonly secondarySourcesVersionOverride?: [];
  readonly sourceVersion?: string;
  readonly artifactsOverride?: ProjectArtifacts;
  readonly secondaryArtifactsOverride?: [];
  readonly environmentVariablesOverride?: [];
  readonly sourceTypeOverride?: string;
  readonly sourceLocationOverride?: string;
  readonly sourceAuthOverride?: SourceAuth;
  readonly gitCloneDepthOverride?: number;
  readonly gitSubmodulesConfigOverride?: GitSubmodulesConfig;
  readonly buildspecOverride?: string;
  readonly insecureSslOverride?: boolean;
  readonly reportBuildStatusOverride?: boolean;
  readonly buildStatusConfigOverride?: BuildStatusConfig;
  readonly environmentTypeOverride?: string;
  readonly imageOverride?: string;
  readonly computeTypeOverride?: string;
  readonly certificateOverride?: string;
  readonly cacheOverride?: ProjectCache;
  readonly serviceRoleOverride?: string;
  readonly privilegedModeOverride?: boolean;
  readonly timeoutInMinutesOverride?: number;
  readonly queuedTimeoutInMinutesOverride?: number;
  readonly encryptionKeyOverride?: string;
  readonly idempotencyToken?: string;
  readonly logsConfigOverride?: LogsConfig;
  readonly registryCredentialOverride?: RegistryCredential;
  readonly imagePullCredentialsTypeOverride?: string;
  readonly debugSessionEnabled?: boolean;
}

export interface StartBuildOutput {
  readonly build?: Build;
}

export interface StopBuildBatchInput {
  readonly id: string;
}

export interface StopBuildBatchOutput {
  readonly buildBatch?: BuildBatch;
}

export interface StopBuildInput {
  readonly id: string;
}

export interface StopBuildOutput {
  readonly build?: Build;
}

export interface Tag {
  readonly key?: string;
  readonly value?: string;
}

export interface TestCase {
  readonly reportArn?: string;
  readonly testRawDataPath?: string;
  readonly prefix?: string;
  readonly name?: string;
  readonly status?: string;
  readonly durationInNanoSeconds?: number;
  readonly message?: string;
  readonly expired?: Date;
}

export interface TestCaseFilter {
  readonly status?: string;
  readonly keyword?: string;
}

export interface TestReportSummary {
  readonly total: number;
  readonly statusCounts: {[key: string]: any};
  readonly durationInNanoSeconds: number;
}

export interface UpdateProjectInput {
  readonly name: string;
  readonly description?: string;
  readonly source?: ProjectSource;
  readonly secondarySources?: [];
  readonly sourceVersion?: string;
  readonly secondarySourceVersions?: [];
  readonly artifacts?: ProjectArtifacts;
  readonly secondaryArtifacts?: [];
  readonly cache?: ProjectCache;
  readonly environment?: ProjectEnvironment;
  readonly serviceRole?: string;
  readonly timeoutInMinutes?: number;
  readonly queuedTimeoutInMinutes?: number;
  readonly encryptionKey?: string;
  readonly tags?: [];
  readonly vpcConfig?: VpcConfig;
  readonly badgeEnabled?: boolean;
  readonly logsConfig?: LogsConfig;
  readonly fileSystemLocations?: [];
  readonly buildBatchConfig?: ProjectBuildBatchConfig;
  readonly concurrentBuildLimit?: number;
}

export interface UpdateProjectOutput {
  readonly project?: Project;
}

export interface UpdateProjectVisibilityInput {
  readonly projectArn: string;
  readonly projectVisibility: string;
  readonly resourceAccessRole?: string;
}

export interface UpdateProjectVisibilityOutput {
  readonly projectArn?: string;
  readonly publicProjectAlias?: string;
  readonly projectVisibility?: string;
}

export interface UpdateReportGroupInput {
  readonly arn: string;
  readonly exportConfig?: ReportExportConfig;
  readonly tags?: [];
}

export interface UpdateReportGroupOutput {
  readonly reportGroup?: ReportGroup;
}

export interface UpdateWebhookInput {
  readonly projectName: string;
  readonly branchFilter?: string;
  readonly rotateSecret?: boolean;
  readonly filterGroups?: [];
  readonly buildType?: string;
}

export interface UpdateWebhookOutput {
  readonly webhook?: Webhook;
}

export interface VpcConfig {
  readonly vpcId?: string;
  readonly subnets?: [];
  readonly securityGroupIds?: [];
}

export interface Webhook {
  readonly url?: string;
  readonly payloadUrl?: string;
  readonly secret?: string;
  readonly branchFilter?: string;
  readonly filterGroups?: [];
  readonly buildType?: string;
  readonly lastModifiedSecret?: Date;
}

export interface WebhookFilter {
  readonly type: string;
  readonly pattern: string;
  readonly excludeMatchedPattern?: boolean;
}


