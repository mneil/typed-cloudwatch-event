/**
 * STOP. This file is autogenerated. DO NOT EDIT by hand
 */
export interface ActivatePipeline {
  readonly pipelineId: string;
  readonly parameterValues?: [];
  readonly startTimestamp?: Date;
}

export interface AddTags {
  readonly pipelineId: string;
  readonly tags: [];
}

export interface CreatePipeline {
  readonly name: string;
  readonly uniqueId: string;
  readonly description?: string;
  readonly tags?: [];
}

export interface DeactivatePipeline {
  readonly pipelineId: string;
  readonly cancelActive?: boolean;
}

export interface DeletePipeline {
  readonly pipelineId: string;
}

export interface DescribeObjects {
  readonly pipelineId: string;
  readonly objectIds: [];
  readonly evaluateExpressions?: boolean;
  readonly marker?: string;
}

export interface DescribePipelines {
  readonly pipelineIds: [];
}

export interface EvaluateExpression {
  readonly pipelineId: string;
  readonly objectId: string;
  readonly expression: string;
}

export interface GetPipelineDefinition {
  readonly pipelineId: string;
  readonly version?: string;
}

export interface ListPipelines {
  readonly marker?: string;
}

export interface PollForTask {
  readonly workerGroup: string;
  readonly hostname?: string;
  readonly instanceIdentity?: InstanceIdentity;
}

export interface PutPipelineDefinition {
  readonly pipelineId: string;
  readonly pipelineObjects: [];
  readonly parameterObjects?: [];
  readonly parameterValues?: [];
}

export interface QueryObjects {
  readonly pipelineId: string;
  readonly query?: Query;
  readonly sphere: string;
  readonly marker?: string;
  readonly limit?: number;
}

export interface RemoveTags {
  readonly pipelineId: string;
  readonly tagKeys: [];
}

export interface ReportTaskProgress {
  readonly taskId: string;
  readonly fields?: [];
}

export interface ReportTaskRunnerHeartbeat {
  readonly taskrunnerId: string;
  readonly workerGroup?: string;
  readonly hostname?: string;
}

export interface SetStatus {
  readonly pipelineId: string;
  readonly objectIds: [];
  readonly status: string;
}

export interface SetTaskStatus {
  readonly taskId: string;
  readonly taskStatus: string;
  readonly errorId?: string;
  readonly errorMessage?: string;
  readonly errorStackTrace?: string;
}

export interface ValidatePipelineDefinition {
  readonly pipelineId: string;
  readonly pipelineObjects: [];
  readonly parameterObjects?: [];
  readonly parameterValues?: [];
}

export interface ActivatePipelineInput {
  readonly pipelineId: string;
  readonly parameterValues?: [];
  readonly startTimestamp?: Date;
}

export interface ActivatePipelineOutput {
}

export interface AddTagsInput {
  readonly pipelineId: string;
  readonly tags: [];
}

export interface AddTagsOutput {
}

export interface CreatePipelineInput {
  readonly name: string;
  readonly uniqueId: string;
  readonly description?: string;
  readonly tags?: [];
}

export interface CreatePipelineOutput {
  readonly pipelineId: string;
}

export interface DeactivatePipelineInput {
  readonly pipelineId: string;
  readonly cancelActive?: boolean;
}

export interface DeactivatePipelineOutput {
}

export interface DeletePipelineInput {
  readonly pipelineId: string;
}

export interface DescribeObjectsInput {
  readonly pipelineId: string;
  readonly objectIds: [];
  readonly evaluateExpressions?: boolean;
  readonly marker?: string;
}

export interface DescribeObjectsOutput {
  readonly pipelineObjects: [];
  readonly marker?: string;
  readonly hasMoreResults?: boolean;
}

export interface DescribePipelinesInput {
  readonly pipelineIds: [];
}

export interface DescribePipelinesOutput {
  readonly pipelineDescriptionList: [];
}

export interface EvaluateExpressionInput {
  readonly pipelineId: string;
  readonly objectId: string;
  readonly expression: string;
}

export interface EvaluateExpressionOutput {
  readonly evaluatedExpression: string;
}

export interface Field {
  readonly key: string;
  readonly stringValue?: string;
  readonly refValue?: string;
}

export interface GetPipelineDefinitionInput {
  readonly pipelineId: string;
  readonly version?: string;
}

export interface GetPipelineDefinitionOutput {
  readonly pipelineObjects?: [];
  readonly parameterObjects?: [];
  readonly parameterValues?: [];
}

export interface InstanceIdentity {
  readonly document?: string;
  readonly signature?: string;
}

export interface InternalServiceError {
  readonly message?: string;
}

export interface InvalidRequestException {
  readonly message?: string;
}

export interface ListPipelinesInput {
  readonly marker?: string;
}

export interface ListPipelinesOutput {
  readonly pipelineIdList: [];
  readonly marker?: string;
  readonly hasMoreResults?: boolean;
}

export interface Operator {
  readonly type?: string;
  readonly values?: [];
}

export interface ParameterAttribute {
  readonly key: string;
  readonly stringValue: string;
}

export interface ParameterObject {
  readonly id: string;
  readonly attributes: [];
}

export interface ParameterValue {
  readonly id: string;
  readonly stringValue: string;
}

export interface PipelineDeletedException {
  readonly message?: string;
}

export interface PipelineDescription {
  readonly pipelineId: string;
  readonly name: string;
  readonly fields: [];
  readonly description?: string;
  readonly tags?: [];
}

export interface PipelineIdName {
  readonly id?: string;
  readonly name?: string;
}

export interface PipelineNotFoundException {
  readonly message?: string;
}

export interface PipelineObject {
  readonly id: string;
  readonly name: string;
  readonly fields: [];
}

export interface PollForTaskInput {
  readonly workerGroup: string;
  readonly hostname?: string;
  readonly instanceIdentity?: InstanceIdentity;
}

export interface PollForTaskOutput {
  readonly taskObject?: TaskObject;
}

export interface PutPipelineDefinitionInput {
  readonly pipelineId: string;
  readonly pipelineObjects: [];
  readonly parameterObjects?: [];
  readonly parameterValues?: [];
}

export interface PutPipelineDefinitionOutput {
  readonly validationErrors?: [];
  readonly validationWarnings?: [];
  readonly errored: boolean;
}

export interface Query {
  readonly selectors?: [];
}

export interface QueryObjectsInput {
  readonly pipelineId: string;
  readonly query?: Query;
  readonly sphere: string;
  readonly marker?: string;
  readonly limit?: number;
}

export interface QueryObjectsOutput {
  readonly ids?: [];
  readonly marker?: string;
  readonly hasMoreResults?: boolean;
}

export interface RemoveTagsInput {
  readonly pipelineId: string;
  readonly tagKeys: [];
}

export interface RemoveTagsOutput {
}

export interface ReportTaskProgressInput {
  readonly taskId: string;
  readonly fields?: [];
}

export interface ReportTaskProgressOutput {
  readonly canceled: boolean;
}

export interface ReportTaskRunnerHeartbeatInput {
  readonly taskrunnerId: string;
  readonly workerGroup?: string;
  readonly hostname?: string;
}

export interface ReportTaskRunnerHeartbeatOutput {
  readonly terminate: boolean;
}

export interface Selector {
  readonly fieldName?: string;
  readonly operator?: Operator;
}

export interface SetStatusInput {
  readonly pipelineId: string;
  readonly objectIds: [];
  readonly status: string;
}

export interface SetTaskStatusInput {
  readonly taskId: string;
  readonly taskStatus: string;
  readonly errorId?: string;
  readonly errorMessage?: string;
  readonly errorStackTrace?: string;
}

export interface SetTaskStatusOutput {
}

export interface Tag {
  readonly key: string;
  readonly value: string;
}

export interface TaskNotFoundException {
  readonly message?: string;
}

export interface TaskObject {
  readonly taskId?: string;
  readonly pipelineId?: string;
  readonly attemptId?: string;
  readonly objects?: {[key: string]: any};
}

export interface ValidatePipelineDefinitionInput {
  readonly pipelineId: string;
  readonly pipelineObjects: [];
  readonly parameterObjects?: [];
  readonly parameterValues?: [];
}

export interface ValidatePipelineDefinitionOutput {
  readonly validationErrors?: [];
  readonly validationWarnings?: [];
  readonly errored: boolean;
}

export interface ValidationError {
  readonly id?: string;
  readonly errors?: [];
}

export interface ValidationWarning {
  readonly id?: string;
  readonly warnings?: [];
}


