/**
 * STOP. This file is autogenerated. DO NOT EDIT by hand
 */
export interface AssociateTeamMember {
  readonly projectId: string;
  readonly clientRequestToken?: string;
  readonly userArn: string;
  readonly projectRole: string;
  readonly remoteAccessAllowed?: boolean;
}
export interface CreateProject {
  readonly name: string;
  readonly id: string;
  readonly description?: string;
  readonly clientRequestToken?: string;
  readonly sourceCode?: [];
  readonly toolchain?: Toolchain;
  readonly tags?: {[key: string]: any};
}
export interface CreateUserProfile {
  readonly userArn: string;
  readonly displayName: string;
  readonly emailAddress: string;
  readonly sshPublicKey?: string;
}
export interface DeleteProject {
  readonly id: string;
  readonly clientRequestToken?: string;
  readonly deleteStack?: boolean;
}
export interface DeleteUserProfile {
  readonly userArn: string;
}
export interface DescribeProject {
  readonly id: string;
}
export interface DescribeUserProfile {
  readonly userArn: string;
}
export interface DisassociateTeamMember {
  readonly projectId: string;
  readonly userArn: string;
}
export interface ListProjects {
  readonly nextToken?: string;
  readonly maxResults?: number;
}
export interface ListResources {
  readonly projectId: string;
  readonly nextToken?: string;
  readonly maxResults?: number;
}
export interface ListTagsForProject {
  readonly id: string;
  readonly nextToken?: string;
  readonly maxResults?: number;
}
export interface ListTeamMembers {
  readonly projectId: string;
  readonly nextToken?: string;
  readonly maxResults?: number;
}
export interface ListUserProfiles {
  readonly nextToken?: string;
  readonly maxResults?: number;
}
export interface TagProject {
  readonly id: string;
  readonly tags: {[key: string]: any};
}
export interface UntagProject {
  readonly id: string;
  readonly tags: [];
}
export interface UpdateProject {
  readonly id: string;
  readonly name?: string;
  readonly description?: string;
}
export interface UpdateTeamMember {
  readonly projectId: string;
  readonly userArn: string;
  readonly projectRole?: string;
  readonly remoteAccessAllowed?: boolean;
}
export interface UpdateUserProfile {
  readonly userArn: string;
  readonly displayName?: string;
  readonly emailAddress?: string;
  readonly sshPublicKey?: string;
}



interface AssociateTeamMemberRequest {
  readonly projectId: string;
  readonly clientRequestToken: string;
  readonly userArn: string;
  readonly projectRole: string;
  readonly remoteAccessAllowed: boolean;
}

interface AssociateTeamMemberResult {
  readonly clientRequestToken: string;
}

interface Code {
  readonly source: CodeSource;
  readonly destination: CodeDestination;
}

interface CodeCommitCodeDestination {
  readonly name: string;
}

interface CodeDestination {
  readonly codeCommit: CodeCommitCodeDestination;
  readonly gitHub: GitHubCodeDestination;
}

interface CodeSource {
  readonly s3: S3Location;
}

interface ConcurrentModificationException {
}

interface CreateProjectRequest {
  readonly name: string;
  readonly id: string;
  readonly description: string;
  readonly clientRequestToken: string;
  readonly sourceCode: [];
  readonly toolchain: Toolchain;
  readonly tags: {[key: string]: any};
}

interface CreateProjectResult {
  readonly id: string;
  readonly arn: string;
  readonly clientRequestToken: string;
  readonly projectTemplateId: string;
}

interface CreateUserProfileRequest {
  readonly userArn: string;
  readonly displayName: string;
  readonly emailAddress: string;
  readonly sshPublicKey: string;
}

interface CreateUserProfileResult {
  readonly userArn: string;
  readonly displayName: string;
  readonly emailAddress: string;
  readonly sshPublicKey: string;
  readonly createdTimestamp: Date;
  readonly lastModifiedTimestamp: Date;
}

interface DeleteProjectRequest {
  readonly id: string;
  readonly clientRequestToken: string;
  readonly deleteStack: boolean;
}

interface DeleteProjectResult {
  readonly stackId: string;
  readonly projectArn: string;
}

interface DeleteUserProfileRequest {
  readonly userArn: string;
}

interface DeleteUserProfileResult {
  readonly userArn: string;
}

interface DescribeProjectRequest {
  readonly id: string;
}

interface DescribeProjectResult {
  readonly name: string;
  readonly id: string;
  readonly arn: string;
  readonly description: string;
  readonly clientRequestToken: string;
  readonly createdTimeStamp: Date;
  readonly stackId: string;
  readonly projectTemplateId: string;
  readonly status: ProjectStatus;
}

interface DescribeUserProfileRequest {
  readonly userArn: string;
}

interface DescribeUserProfileResult {
  readonly userArn: string;
  readonly displayName: string;
  readonly emailAddress: string;
  readonly sshPublicKey: string;
  readonly createdTimestamp: Date;
  readonly lastModifiedTimestamp: Date;
}

interface DisassociateTeamMemberRequest {
  readonly projectId: string;
  readonly userArn: string;
}

interface DisassociateTeamMemberResult {
}

interface GitHubCodeDestination {
  readonly name: string;
  readonly description: string;
  readonly type: string;
  readonly owner: string;
  readonly privateRepository: boolean;
  readonly issuesEnabled: boolean;
  readonly token: string;
}

interface InvalidNextTokenException {
}

interface InvalidServiceRoleException {
}

interface LimitExceededException {
}

interface ListProjectsRequest {
  readonly nextToken: string;
  readonly maxResults: number;
}

interface ListProjectsResult {
  readonly projects: [];
  readonly nextToken: string;
}

interface ListResourcesRequest {
  readonly projectId: string;
  readonly nextToken: string;
  readonly maxResults: number;
}

interface ListResourcesResult {
  readonly resources: [];
  readonly nextToken: string;
}

interface ListTagsForProjectRequest {
  readonly id: string;
  readonly nextToken: string;
  readonly maxResults: number;
}

interface ListTagsForProjectResult {
  readonly tags: {[key: string]: any};
  readonly nextToken: string;
}

interface ListTeamMembersRequest {
  readonly projectId: string;
  readonly nextToken: string;
  readonly maxResults: number;
}

interface ListTeamMembersResult {
  readonly teamMembers: [];
  readonly nextToken: string;
}

interface ListUserProfilesRequest {
  readonly nextToken: string;
  readonly maxResults: number;
}

interface ListUserProfilesResult {
  readonly userProfiles: [];
  readonly nextToken: string;
}

interface ProjectAlreadyExistsException {
}

interface ProjectConfigurationException {
}

interface ProjectCreationFailedException {
}

interface ProjectNotFoundException {
}

interface ProjectStatus {
  readonly state: string;
  readonly reason: string;
}

interface ProjectSummary {
  readonly projectId: string;
  readonly projectArn: string;
}

interface Resource {
  readonly id: string;
}

interface S3Location {
  readonly bucketName: string;
  readonly bucketKey: string;
}

interface TagProjectRequest {
  readonly id: string;
  readonly tags: {[key: string]: any};
}

interface TagProjectResult {
  readonly tags: {[key: string]: any};
}

interface TeamMember {
  readonly userArn: string;
  readonly projectRole: string;
  readonly remoteAccessAllowed: boolean;
}

interface TeamMemberAlreadyAssociatedException {
}

interface TeamMemberNotFoundException {
}

interface Toolchain {
  readonly source: ToolchainSource;
  readonly roleArn: string;
  readonly stackParameters: {[key: string]: any};
}

interface ToolchainSource {
  readonly s3: S3Location;
}

interface UntagProjectRequest {
  readonly id: string;
  readonly tags: [];
}

interface UntagProjectResult {
}

interface UpdateProjectRequest {
  readonly id: string;
  readonly name: string;
  readonly description: string;
}

interface UpdateProjectResult {
}

interface UpdateTeamMemberRequest {
  readonly projectId: string;
  readonly userArn: string;
  readonly projectRole: string;
  readonly remoteAccessAllowed: boolean;
}

interface UpdateTeamMemberResult {
  readonly userArn: string;
  readonly projectRole: string;
  readonly remoteAccessAllowed: boolean;
}

interface UpdateUserProfileRequest {
  readonly userArn: string;
  readonly displayName: string;
  readonly emailAddress: string;
  readonly sshPublicKey: string;
}

interface UpdateUserProfileResult {
  readonly userArn: string;
  readonly displayName: string;
  readonly emailAddress: string;
  readonly sshPublicKey: string;
  readonly createdTimestamp: Date;
  readonly lastModifiedTimestamp: Date;
}

interface UserProfileAlreadyExistsException {
}

interface UserProfileNotFoundException {
}

interface UserProfileSummary {
  readonly userArn: string;
  readonly displayName: string;
  readonly emailAddress: string;
  readonly sshPublicKey: string;
}

interface ValidationException {
}

