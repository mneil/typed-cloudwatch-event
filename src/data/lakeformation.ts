/**
 * STOP. This file is autogenerated. DO NOT EDIT by hand
 */
export interface AddLFTagsToResource {
  readonly CatalogId?: string;
  readonly Resource: Resource;
  readonly LFTags: [];
}

export interface BatchGrantPermissions {
  readonly CatalogId?: string;
  readonly Entries: [];
}

export interface BatchRevokePermissions {
  readonly CatalogId?: string;
  readonly Entries: [];
}

export interface CancelTransaction {
  readonly TransactionId: string;
}

export interface CommitTransaction {
  readonly TransactionId: string;
}

export interface CreateDataCellsFilter {
  readonly TableData: DataCellsFilter;
}

export interface CreateLFTag {
  readonly CatalogId?: string;
  readonly TagKey: string;
  readonly TagValues: [];
}

export interface DeleteDataCellsFilter {
  readonly TableCatalogId?: string;
  readonly DatabaseName?: string;
  readonly TableName?: string;
  readonly Name?: string;
}

export interface DeleteLFTag {
  readonly CatalogId?: string;
  readonly TagKey: string;
}

export interface DeleteObjectsOnCancel {
  readonly CatalogId?: string;
  readonly DatabaseName: string;
  readonly TableName: string;
  readonly TransactionId: string;
  readonly Objects: [];
}

export interface DeregisterResource {
  readonly ResourceArn: string;
}

export interface DescribeResource {
  readonly ResourceArn: string;
}

export interface DescribeTransaction {
  readonly TransactionId: string;
}

export interface ExtendTransaction {
  readonly TransactionId?: string;
}

export interface GetDataLakeSettings {
  readonly CatalogId?: string;
}

export interface GetEffectivePermissionsForPath {
  readonly CatalogId?: string;
  readonly ResourceArn: string;
  readonly NextToken?: string;
  readonly MaxResults?: number;
}

export interface GetLFTag {
  readonly CatalogId?: string;
  readonly TagKey: string;
}

export interface GetQueryState {
  readonly QueryId: string;
}

export interface GetQueryStatistics {
  readonly QueryId: string;
}

export interface GetResourceLFTags {
  readonly CatalogId?: string;
  readonly Resource: Resource;
  readonly ShowAssignedLFTags?: boolean;
}

export interface GetTableObjects {
  readonly CatalogId?: string;
  readonly DatabaseName: string;
  readonly TableName: string;
  readonly TransactionId?: string;
  readonly QueryAsOfTime?: Date;
  readonly PartitionPredicate?: string;
  readonly MaxResults?: number;
  readonly NextToken?: string;
}

export interface GetWorkUnitResults {
  readonly QueryId: string;
  readonly WorkUnitId: number;
  readonly WorkUnitToken: string;
}

export interface GetWorkUnits {
  readonly NextToken?: string;
  readonly PageSize?: number;
  readonly QueryId: string;
}

export interface GrantPermissions {
  readonly CatalogId?: string;
  readonly Principal: DataLakePrincipal;
  readonly Resource: Resource;
  readonly Permissions: [];
  readonly PermissionsWithGrantOption?: [];
}

export interface ListDataCellsFilter {
  readonly Table?: TableResource;
  readonly NextToken?: string;
  readonly MaxResults?: number;
}

export interface ListLFTags {
  readonly CatalogId?: string;
  readonly ResourceShareType?: string;
  readonly MaxResults?: number;
  readonly NextToken?: string;
}

export interface ListPermissions {
  readonly CatalogId?: string;
  readonly Principal?: DataLakePrincipal;
  readonly ResourceType?: string;
  readonly Resource?: Resource;
  readonly NextToken?: string;
  readonly MaxResults?: number;
  readonly IncludeRelated?: string;
}

export interface ListResources {
  readonly FilterConditionList?: [];
  readonly MaxResults?: number;
  readonly NextToken?: string;
}

export interface ListTableStorageOptimizers {
  readonly CatalogId?: string;
  readonly DatabaseName: string;
  readonly TableName: string;
  readonly StorageOptimizerType?: string;
  readonly MaxResults?: number;
  readonly NextToken?: string;
}

export interface ListTransactions {
  readonly CatalogId?: string;
  readonly StatusFilter?: string;
  readonly MaxResults?: number;
  readonly NextToken?: string;
}

export interface PutDataLakeSettings {
  readonly CatalogId?: string;
  readonly DataLakeSettings: DataLakeSettings;
}

export interface RegisterResource {
  readonly ResourceArn: string;
  readonly UseServiceLinkedRole?: boolean;
  readonly RoleArn?: string;
}

export interface RemoveLFTagsFromResource {
  readonly CatalogId?: string;
  readonly Resource: Resource;
  readonly LFTags: [];
}

export interface RevokePermissions {
  readonly CatalogId?: string;
  readonly Principal: DataLakePrincipal;
  readonly Resource: Resource;
  readonly Permissions: [];
  readonly PermissionsWithGrantOption?: [];
}

export interface SearchDatabasesByLFTags {
  readonly NextToken?: string;
  readonly MaxResults?: number;
  readonly CatalogId?: string;
  readonly Expression: [];
}

export interface SearchTablesByLFTags {
  readonly NextToken?: string;
  readonly MaxResults?: number;
  readonly CatalogId?: string;
  readonly Expression: [];
}

export interface StartQueryPlanning {
  readonly QueryPlanningContext: QueryPlanningContext;
  readonly QueryString: string;
}

export interface StartTransaction {
  readonly TransactionType?: string;
}

export interface UpdateLFTag {
  readonly CatalogId?: string;
  readonly TagKey: string;
  readonly TagValuesToDelete?: [];
  readonly TagValuesToAdd?: [];
}

export interface UpdateResource {
  readonly RoleArn: string;
  readonly ResourceArn: string;
}

export interface UpdateTableObjects {
  readonly CatalogId?: string;
  readonly DatabaseName: string;
  readonly TableName: string;
  readonly TransactionId: string;
  readonly WriteOperations: [];
}

export interface UpdateTableStorageOptimizer {
  readonly CatalogId?: string;
  readonly DatabaseName: string;
  readonly TableName: string;
  readonly StorageOptimizerConfig: {[key: string]: any};
}

export interface AccessDeniedException {
  readonly Message?: string;
}

export interface AddLFTagsToResourceRequest {
  readonly CatalogId?: string;
  readonly Resource: Resource;
  readonly LFTags: [];
}

export interface AddLFTagsToResourceResponse {
  readonly Failures?: [];
}

export interface AddObjectInput {
  readonly Uri: string;
  readonly ETag: string;
  readonly Size: number;
  readonly PartitionValues?: [];
}

export interface AllRowsWildcard {
}

export interface AlreadyExistsException {
  readonly Message?: string;
}

export interface BatchGrantPermissionsRequest {
  readonly CatalogId?: string;
  readonly Entries: [];
}

export interface BatchGrantPermissionsResponse {
  readonly Failures?: [];
}

export interface BatchPermissionsFailureEntry {
  readonly RequestEntry?: BatchPermissionsRequestEntry;
  readonly Error?: ErrorDetail;
}

export interface BatchPermissionsRequestEntry {
  readonly Id: string;
  readonly Principal?: DataLakePrincipal;
  readonly Resource?: Resource;
  readonly Permissions?: [];
  readonly PermissionsWithGrantOption?: [];
}

export interface BatchRevokePermissionsRequest {
  readonly CatalogId?: string;
  readonly Entries: [];
}

export interface BatchRevokePermissionsResponse {
  readonly Failures?: [];
}

export interface CancelTransactionRequest {
  readonly TransactionId: string;
}

export interface CancelTransactionResponse {
}

export interface CatalogResource {
}

export interface ColumnLFTag {
  readonly Name?: string;
  readonly LFTags?: [];
}

export interface ColumnWildcard {
  readonly ExcludedColumnNames?: [];
}

export interface CommitTransactionRequest {
  readonly TransactionId: string;
}

export interface CommitTransactionResponse {
  readonly TransactionStatus?: string;
}

export interface ConcurrentModificationException {
  readonly Message?: string;
}

export interface CreateDataCellsFilterRequest {
  readonly TableData: DataCellsFilter;
}

export interface CreateDataCellsFilterResponse {
}

export interface CreateLFTagRequest {
  readonly CatalogId?: string;
  readonly TagKey: string;
  readonly TagValues: [];
}

export interface CreateLFTagResponse {
}

export interface DataCellsFilter {
  readonly TableCatalogId: string;
  readonly DatabaseName: string;
  readonly TableName: string;
  readonly Name: string;
  readonly RowFilter?: RowFilter;
  readonly ColumnNames?: [];
  readonly ColumnWildcard?: ColumnWildcard;
}

export interface DataCellsFilterResource {
  readonly TableCatalogId?: string;
  readonly DatabaseName?: string;
  readonly TableName?: string;
  readonly Name?: string;
}

export interface DataLakePrincipal {
  readonly DataLakePrincipalIdentifier?: string;
}

export interface DataLakeSettings {
  readonly DataLakeAdmins?: [];
  readonly CreateDatabaseDefaultPermissions?: [];
  readonly CreateTableDefaultPermissions?: [];
  readonly TrustedResourceOwners?: [];
}

export interface DataLocationResource {
  readonly CatalogId?: string;
  readonly ResourceArn: string;
}

export interface DatabaseResource {
  readonly CatalogId?: string;
  readonly Name: string;
}

export interface DeleteDataCellsFilterRequest {
  readonly TableCatalogId?: string;
  readonly DatabaseName?: string;
  readonly TableName?: string;
  readonly Name?: string;
}

export interface DeleteDataCellsFilterResponse {
}

export interface DeleteLFTagRequest {
  readonly CatalogId?: string;
  readonly TagKey: string;
}

export interface DeleteLFTagResponse {
}

export interface DeleteObjectInput {
  readonly Uri: string;
  readonly ETag?: string;
  readonly PartitionValues?: [];
}

export interface DeleteObjectsOnCancelRequest {
  readonly CatalogId?: string;
  readonly DatabaseName: string;
  readonly TableName: string;
  readonly TransactionId: string;
  readonly Objects: [];
}

export interface DeleteObjectsOnCancelResponse {
}

export interface DeregisterResourceRequest {
  readonly ResourceArn: string;
}

export interface DeregisterResourceResponse {
}

export interface DescribeResourceRequest {
  readonly ResourceArn: string;
}

export interface DescribeResourceResponse {
  readonly ResourceInfo?: ResourceInfo;
}

export interface DescribeTransactionRequest {
  readonly TransactionId: string;
}

export interface DescribeTransactionResponse {
  readonly TransactionDescription?: TransactionDescription;
}

export interface DetailsMap {
  readonly ResourceShare?: [];
}

export interface EntityNotFoundException {
  readonly Message?: string;
}

export interface ErrorDetail {
  readonly ErrorCode?: string;
  readonly ErrorMessage?: string;
}

export interface ExecutionStatistics {
  readonly AverageExecutionTimeMillis?: number;
  readonly DataScannedBytes?: number;
  readonly WorkUnitsExecutedCount?: number;
}

export interface ExpiredException {
  readonly Message?: string;
}

export interface ExtendTransactionRequest {
  readonly TransactionId?: string;
}

export interface ExtendTransactionResponse {
}

export interface FilterCondition {
  readonly Field?: string;
  readonly ComparisonOperator?: string;
  readonly StringValueList?: [];
}

export interface GetDataLakeSettingsRequest {
  readonly CatalogId?: string;
}

export interface GetDataLakeSettingsResponse {
  readonly DataLakeSettings?: DataLakeSettings;
}

export interface GetEffectivePermissionsForPathRequest {
  readonly CatalogId?: string;
  readonly ResourceArn: string;
  readonly NextToken?: string;
  readonly MaxResults?: number;
}

export interface GetEffectivePermissionsForPathResponse {
  readonly Permissions?: [];
  readonly NextToken?: string;
}

export interface GetLFTagRequest {
  readonly CatalogId?: string;
  readonly TagKey: string;
}

export interface GetLFTagResponse {
  readonly CatalogId?: string;
  readonly TagKey?: string;
  readonly TagValues?: [];
}

export interface GetQueryStateRequest {
  readonly QueryId: string;
}

export interface GetQueryStateResponse {
  readonly Error?: string;
  readonly State: string;
}

export interface GetQueryStatisticsRequest {
  readonly QueryId: string;
}

export interface GetQueryStatisticsResponse {
  readonly ExecutionStatistics?: ExecutionStatistics;
  readonly PlanningStatistics?: PlanningStatistics;
  readonly QuerySubmissionTime?: Date;
}

export interface GetResourceLFTagsRequest {
  readonly CatalogId?: string;
  readonly Resource: Resource;
  readonly ShowAssignedLFTags?: boolean;
}

export interface GetResourceLFTagsResponse {
  readonly LFTagOnDatabase?: [];
  readonly LFTagsOnTable?: [];
  readonly LFTagsOnColumns?: [];
}

export interface GetTableObjectsRequest {
  readonly CatalogId?: string;
  readonly DatabaseName: string;
  readonly TableName: string;
  readonly TransactionId?: string;
  readonly QueryAsOfTime?: Date;
  readonly PartitionPredicate?: string;
  readonly MaxResults?: number;
  readonly NextToken?: string;
}

export interface GetTableObjectsResponse {
  readonly Objects?: [];
  readonly NextToken?: string;
}

export interface GetWorkUnitResultsRequest {
  readonly QueryId: string;
  readonly WorkUnitId: number;
  readonly WorkUnitToken: string;
}

export interface GetWorkUnitResultsResponse {
  readonly ResultStream?: unknown;
}

export interface GetWorkUnitsRequest {
  readonly NextToken?: string;
  readonly PageSize?: number;
  readonly QueryId: string;
}

export interface GetWorkUnitsResponse {
  readonly NextToken?: string;
  readonly QueryId: string;
  readonly WorkUnitRanges: [];
}

export interface GlueEncryptionException {
  readonly Message?: string;
}

export interface GrantPermissionsRequest {
  readonly CatalogId?: string;
  readonly Principal: DataLakePrincipal;
  readonly Resource: Resource;
  readonly Permissions: [];
  readonly PermissionsWithGrantOption?: [];
}

export interface GrantPermissionsResponse {
}

export interface InternalServiceException {
  readonly Message?: string;
}

export interface InvalidInputException {
  readonly Message?: string;
}

export interface LFTag {
  readonly TagKey: string;
  readonly TagValues: [];
}

export interface LFTagError {
  readonly LFTag?: LFTagPair;
  readonly Error?: ErrorDetail;
}

export interface LFTagKeyResource {
  readonly CatalogId?: string;
  readonly TagKey: string;
  readonly TagValues: [];
}

export interface LFTagPair {
  readonly CatalogId?: string;
  readonly TagKey: string;
  readonly TagValues: [];
}

export interface LFTagPolicyResource {
  readonly CatalogId?: string;
  readonly ResourceType: string;
  readonly Expression: [];
}

export interface ListDataCellsFilterRequest {
  readonly Table?: TableResource;
  readonly NextToken?: string;
  readonly MaxResults?: number;
}

export interface ListDataCellsFilterResponse {
  readonly DataCellsFilters?: [];
  readonly NextToken?: string;
}

export interface ListLFTagsRequest {
  readonly CatalogId?: string;
  readonly ResourceShareType?: string;
  readonly MaxResults?: number;
  readonly NextToken?: string;
}

export interface ListLFTagsResponse {
  readonly LFTags?: [];
  readonly NextToken?: string;
}

export interface ListPermissionsRequest {
  readonly CatalogId?: string;
  readonly Principal?: DataLakePrincipal;
  readonly ResourceType?: string;
  readonly Resource?: Resource;
  readonly NextToken?: string;
  readonly MaxResults?: number;
  readonly IncludeRelated?: string;
}

export interface ListPermissionsResponse {
  readonly PrincipalResourcePermissions?: [];
  readonly NextToken?: string;
}

export interface ListResourcesRequest {
  readonly FilterConditionList?: [];
  readonly MaxResults?: number;
  readonly NextToken?: string;
}

export interface ListResourcesResponse {
  readonly ResourceInfoList?: [];
  readonly NextToken?: string;
}

export interface ListTableStorageOptimizersRequest {
  readonly CatalogId?: string;
  readonly DatabaseName: string;
  readonly TableName: string;
  readonly StorageOptimizerType?: string;
  readonly MaxResults?: number;
  readonly NextToken?: string;
}

export interface ListTableStorageOptimizersResponse {
  readonly StorageOptimizerList?: [];
  readonly NextToken?: string;
}

export interface ListTransactionsRequest {
  readonly CatalogId?: string;
  readonly StatusFilter?: string;
  readonly MaxResults?: number;
  readonly NextToken?: string;
}

export interface ListTransactionsResponse {
  readonly Transactions?: [];
  readonly NextToken?: string;
}

export interface OperationTimeoutException {
  readonly Message?: string;
}

export interface PartitionObjects {
  readonly PartitionValues?: [];
  readonly Objects?: [];
}

export interface PlanningStatistics {
  readonly EstimatedDataToScanBytes?: number;
  readonly PlanningTimeMillis?: number;
  readonly QueueTimeMillis?: number;
  readonly WorkUnitsGeneratedCount?: number;
}

export interface PrincipalPermissions {
  readonly Principal?: DataLakePrincipal;
  readonly Permissions?: [];
}

export interface PrincipalResourcePermissions {
  readonly Principal?: DataLakePrincipal;
  readonly Resource?: Resource;
  readonly Permissions?: [];
  readonly PermissionsWithGrantOption?: [];
  readonly AdditionalDetails?: DetailsMap;
}

export interface PutDataLakeSettingsRequest {
  readonly CatalogId?: string;
  readonly DataLakeSettings: DataLakeSettings;
}

export interface PutDataLakeSettingsResponse {
}

export interface QueryPlanningContext {
  readonly CatalogId?: string;
  readonly DatabaseName: string;
  readonly QueryAsOfTime?: Date;
  readonly QueryParameters?: {[key: string]: any};
  readonly TransactionId?: string;
}

export interface RegisterResourceRequest {
  readonly ResourceArn: string;
  readonly UseServiceLinkedRole?: boolean;
  readonly RoleArn?: string;
}

export interface RegisterResourceResponse {
}

export interface RemoveLFTagsFromResourceRequest {
  readonly CatalogId?: string;
  readonly Resource: Resource;
  readonly LFTags: [];
}

export interface RemoveLFTagsFromResourceResponse {
  readonly Failures?: [];
}

export interface Resource {
  readonly Catalog?: CatalogResource;
  readonly Database?: DatabaseResource;
  readonly Table?: TableResource;
  readonly TableWithColumns?: TableWithColumnsResource;
  readonly DataLocation?: DataLocationResource;
  readonly DataCellsFilter?: DataCellsFilterResource;
  readonly LFTag?: LFTagKeyResource;
  readonly LFTagPolicy?: LFTagPolicyResource;
}

export interface ResourceInfo {
  readonly ResourceArn?: string;
  readonly RoleArn?: string;
  readonly LastModified?: Date;
}

export interface ResourceNotReadyException {
  readonly Message?: string;
}

export interface ResourceNumberLimitExceededException {
  readonly Message?: string;
}

export interface RevokePermissionsRequest {
  readonly CatalogId?: string;
  readonly Principal: DataLakePrincipal;
  readonly Resource: Resource;
  readonly Permissions: [];
  readonly PermissionsWithGrantOption?: [];
}

export interface RevokePermissionsResponse {
}

export interface RowFilter {
  readonly FilterExpression?: string;
  readonly AllRowsWildcard?: AllRowsWildcard;
}

export interface SearchDatabasesByLFTagsRequest {
  readonly NextToken?: string;
  readonly MaxResults?: number;
  readonly CatalogId?: string;
  readonly Expression: [];
}

export interface SearchDatabasesByLFTagsResponse {
  readonly NextToken?: string;
  readonly DatabaseList?: [];
}

export interface SearchTablesByLFTagsRequest {
  readonly NextToken?: string;
  readonly MaxResults?: number;
  readonly CatalogId?: string;
  readonly Expression: [];
}

export interface SearchTablesByLFTagsResponse {
  readonly NextToken?: string;
  readonly TableList?: [];
}

export interface StartQueryPlanningRequest {
  readonly QueryPlanningContext: QueryPlanningContext;
  readonly QueryString: string;
}

export interface StartQueryPlanningResponse {
  readonly QueryId: string;
}

export interface StartTransactionRequest {
  readonly TransactionType?: string;
}

export interface StartTransactionResponse {
  readonly TransactionId?: string;
}

export interface StatisticsNotReadyYetException {
  readonly Message?: string;
}

export interface StorageOptimizer {
  readonly StorageOptimizerType?: string;
  readonly Config?: {[key: string]: any};
  readonly ErrorMessage?: string;
  readonly Warnings?: string;
  readonly LastRunDetails?: string;
}

export interface TableObject {
  readonly Uri?: string;
  readonly ETag?: string;
  readonly Size?: number;
}

export interface TableResource {
  readonly CatalogId?: string;
  readonly DatabaseName: string;
  readonly Name?: string;
  readonly TableWildcard?: TableWildcard;
}

export interface TableWildcard {
}

export interface TableWithColumnsResource {
  readonly CatalogId?: string;
  readonly DatabaseName: string;
  readonly Name: string;
  readonly ColumnNames?: [];
  readonly ColumnWildcard?: ColumnWildcard;
}

export interface TaggedDatabase {
  readonly Database?: DatabaseResource;
  readonly LFTags?: [];
}

export interface TaggedTable {
  readonly Table?: TableResource;
  readonly LFTagOnDatabase?: [];
  readonly LFTagsOnTable?: [];
  readonly LFTagsOnColumns?: [];
}

export interface ThrottledException {
  readonly Message?: string;
}

export interface TransactionCanceledException {
  readonly Message?: string;
}

export interface TransactionCommitInProgressException {
  readonly Message?: string;
}

export interface TransactionCommittedException {
  readonly Message?: string;
}

export interface TransactionDescription {
  readonly TransactionId?: string;
  readonly TransactionStatus?: string;
  readonly TransactionStartTime?: Date;
  readonly TransactionEndTime?: Date;
}

export interface UpdateLFTagRequest {
  readonly CatalogId?: string;
  readonly TagKey: string;
  readonly TagValuesToDelete?: [];
  readonly TagValuesToAdd?: [];
}

export interface UpdateLFTagResponse {
}

export interface UpdateResourceRequest {
  readonly RoleArn: string;
  readonly ResourceArn: string;
}

export interface UpdateResourceResponse {
}

export interface UpdateTableObjectsRequest {
  readonly CatalogId?: string;
  readonly DatabaseName: string;
  readonly TableName: string;
  readonly TransactionId: string;
  readonly WriteOperations: [];
}

export interface UpdateTableObjectsResponse {
}

export interface UpdateTableStorageOptimizerRequest {
  readonly CatalogId?: string;
  readonly DatabaseName: string;
  readonly TableName: string;
  readonly StorageOptimizerConfig: {[key: string]: any};
}

export interface UpdateTableStorageOptimizerResponse {
  readonly Result?: string;
}

export interface VirtualObject {
  readonly Uri: string;
  readonly ETag?: string;
}

export interface WorkUnitRange {
  readonly WorkUnitIdMax: number;
  readonly WorkUnitIdMin: number;
  readonly WorkUnitToken: string;
}

export interface WorkUnitsNotReadyYetException {
  readonly Message?: string;
}

export interface WriteOperation {
  readonly AddObject?: AddObjectInput;
  readonly DeleteObject?: DeleteObjectInput;
}


