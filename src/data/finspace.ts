/**
 * STOP. This file is autogenerated. DO NOT EDIT by hand
 */
export interface CreateEnvironment {
  readonly name: string;
  readonly description: string;
  readonly kmsKeyId: string;
  readonly tags: {[key: string]: any};
  readonly federationMode: string;
  readonly federationParameters: FederationParameters;
  readonly superuserParameters: SuperuserParameters;
  readonly dataBundles: [];
}
export interface DeleteEnvironment {
  readonly environmentId: string;
}
export interface GetEnvironment {
  readonly environmentId: string;
}
export interface ListEnvironments {
  readonly nextToken: string;
  readonly maxResults: number;
}
export interface ListTagsForResource {
  readonly resourceArn: string;
}
export interface TagResource {
  readonly resourceArn: string;
  readonly tags: {[key: string]: any};
}
export interface UntagResource {
  readonly resourceArn: string;
  readonly tagKeys: [];
}
export interface UpdateEnvironment {
  readonly environmentId: string;
  readonly name: string;
  readonly description: string;
  readonly federationMode: string;
  readonly federationParameters: FederationParameters;
}



interface AccessDeniedException {
}

interface CreateEnvironmentRequest {
  readonly name: string;
  readonly description: string;
  readonly kmsKeyId: string;
  readonly tags: {[key: string]: any};
  readonly federationMode: string;
  readonly federationParameters: FederationParameters;
  readonly superuserParameters: SuperuserParameters;
  readonly dataBundles: [];
}

interface CreateEnvironmentResponse {
  readonly environmentId: string;
  readonly environmentArn: string;
  readonly environmentUrl: string;
}

interface DeleteEnvironmentRequest {
  readonly environmentId: string;
}

interface DeleteEnvironmentResponse {
}

interface Environment {
  readonly name: string;
  readonly environmentId: string;
  readonly awsAccountId: string;
  readonly status: string;
  readonly environmentUrl: string;
  readonly description: string;
  readonly environmentArn: string;
  readonly sageMakerStudioDomainUrl: string;
  readonly kmsKeyId: string;
  readonly dedicatedServiceAccountId: string;
  readonly federationMode: string;
  readonly federationParameters: FederationParameters;
}

interface FederationParameters {
  readonly samlMetadataDocument: string;
  readonly samlMetadataURL: string;
  readonly applicationCallBackURL: string;
  readonly federationURN: string;
  readonly federationProviderName: string;
  readonly attributeMap: {[key: string]: any};
}

interface GetEnvironmentRequest {
  readonly environmentId: string;
}

interface GetEnvironmentResponse {
  readonly environment: Environment;
}

interface InternalServerException {
  readonly message: string;
}

interface InvalidRequestException {
  readonly message: string;
}

interface LimitExceededException {
  readonly message: string;
}

interface ListEnvironmentsRequest {
  readonly nextToken: string;
  readonly maxResults: number;
}

interface ListEnvironmentsResponse {
  readonly environments: [];
  readonly nextToken: string;
}

interface ListTagsForResourceRequest {
  readonly resourceArn: string;
}

interface ListTagsForResourceResponse {
  readonly tags: {[key: string]: any};
}

interface ResourceNotFoundException {
  readonly message: string;
}

interface ServiceQuotaExceededException {
  readonly message: string;
}

interface SuperuserParameters {
  readonly emailAddress: string;
  readonly firstName: string;
  readonly lastName: string;
}

interface TagResourceRequest {
  readonly resourceArn: string;
  readonly tags: {[key: string]: any};
}

interface TagResourceResponse {
}

interface ThrottlingException {
}

interface UntagResourceRequest {
  readonly resourceArn: string;
  readonly tagKeys: [];
}

interface UntagResourceResponse {
}

interface UpdateEnvironmentRequest {
  readonly environmentId: string;
  readonly name: string;
  readonly description: string;
  readonly federationMode: string;
  readonly federationParameters: FederationParameters;
}

interface UpdateEnvironmentResponse {
  readonly environment: Environment;
}

interface ValidationException {
  readonly message: string;
}

