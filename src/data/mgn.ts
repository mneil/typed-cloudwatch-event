/**
 * STOP. This file is autogenerated. DO NOT EDIT by hand
 */
export interface ChangeServerLifeCycleState {
  readonly lifeCycle: ChangeServerLifeCycleStateSourceServerLifecycle;
  readonly sourceServerID: string;
}

export interface CreateReplicationConfigurationTemplate {
  readonly associateDefaultSecurityGroup: boolean;
  readonly bandwidthThrottling: number;
  readonly createPublicIP: boolean;
  readonly dataPlaneRouting: string;
  readonly defaultLargeStagingDiskType: string;
  readonly ebsEncryption: string;
  readonly ebsEncryptionKeyArn?: string;
  readonly replicationServerInstanceType: string;
  readonly replicationServersSecurityGroupsIDs: [];
  readonly stagingAreaSubnetId: string;
  readonly stagingAreaTags: {[key: string]: any};
  readonly tags?: {[key: string]: any};
  readonly useDedicatedReplicationServer: boolean;
}

export interface DeleteJob {
  readonly jobID: string;
}

export interface DeleteReplicationConfigurationTemplate {
  readonly replicationConfigurationTemplateID: string;
}

export interface DeleteSourceServer {
  readonly sourceServerID: string;
}

export interface DeleteVcenterClient {
  readonly vcenterClientID: string;
}

export interface DescribeJobLogItems {
  readonly jobID: string;
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface DescribeJobs {
  readonly filters: DescribeJobsRequestFilters;
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface DescribeReplicationConfigurationTemplates {
  readonly maxResults?: number;
  readonly nextToken?: string;
  readonly replicationConfigurationTemplateIDs: [];
}

export interface DescribeSourceServers {
  readonly filters: DescribeSourceServersRequestFilters;
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface DescribeVcenterClients {
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface DisconnectFromService {
  readonly sourceServerID: string;
}

export interface FinalizeCutover {
  readonly sourceServerID: string;
}

export interface GetLaunchConfiguration {
  readonly sourceServerID: string;
}

export interface GetReplicationConfiguration {
  readonly sourceServerID: string;
}

export interface InitializeService {
}

export interface ListTagsForResource {
  readonly resourceArn: string;
}

export interface MarkAsArchived {
  readonly sourceServerID: string;
}

export interface RetryDataReplication {
  readonly sourceServerID: string;
}

export interface StartCutover {
  readonly sourceServerIDs: [];
  readonly tags?: {[key: string]: any};
}

export interface StartReplication {
  readonly sourceServerID: string;
}

export interface StartTest {
  readonly sourceServerIDs: [];
  readonly tags?: {[key: string]: any};
}

export interface TagResource {
  readonly resourceArn: string;
  readonly tags: {[key: string]: any};
}

export interface TerminateTargetInstances {
  readonly sourceServerIDs: [];
  readonly tags?: {[key: string]: any};
}

export interface UntagResource {
  readonly resourceArn: string;
  readonly tagKeys: [];
}

export interface UpdateLaunchConfiguration {
  readonly copyPrivateIp?: boolean;
  readonly copyTags?: boolean;
  readonly launchDisposition?: string;
  readonly licensing?: Licensing;
  readonly name?: string;
  readonly sourceServerID: string;
  readonly targetInstanceTypeRightSizingMethod?: string;
}

export interface UpdateReplicationConfiguration {
  readonly associateDefaultSecurityGroup?: boolean;
  readonly bandwidthThrottling?: number;
  readonly createPublicIP?: boolean;
  readonly dataPlaneRouting?: string;
  readonly defaultLargeStagingDiskType?: string;
  readonly ebsEncryption?: string;
  readonly ebsEncryptionKeyArn?: string;
  readonly name?: string;
  readonly replicatedDisks?: [];
  readonly replicationServerInstanceType?: string;
  readonly replicationServersSecurityGroupsIDs?: [];
  readonly sourceServerID: string;
  readonly stagingAreaSubnetId?: string;
  readonly stagingAreaTags?: {[key: string]: any};
  readonly useDedicatedReplicationServer?: boolean;
}

export interface UpdateReplicationConfigurationTemplate {
  readonly arn?: string;
  readonly associateDefaultSecurityGroup?: boolean;
  readonly bandwidthThrottling?: number;
  readonly createPublicIP?: boolean;
  readonly dataPlaneRouting?: string;
  readonly defaultLargeStagingDiskType?: string;
  readonly ebsEncryption?: string;
  readonly ebsEncryptionKeyArn?: string;
  readonly replicationConfigurationTemplateID: string;
  readonly replicationServerInstanceType?: string;
  readonly replicationServersSecurityGroupsIDs?: [];
  readonly stagingAreaSubnetId?: string;
  readonly stagingAreaTags?: {[key: string]: any};
  readonly useDedicatedReplicationServer?: boolean;
}

export interface UpdateSourceServerReplicationType {
  readonly replicationType: string;
  readonly sourceServerID: string;
}

export interface AccessDeniedException {
  readonly code?: string;
  readonly message?: string;
}

export interface CPU {
  readonly cores?: number;
  readonly modelName?: string;
}

export interface ChangeServerLifeCycleStateRequest {
  readonly lifeCycle: ChangeServerLifeCycleStateSourceServerLifecycle;
  readonly sourceServerID: string;
}

export interface ChangeServerLifeCycleStateSourceServerLifecycle {
  readonly state: string;
}

export interface ConflictException {
  readonly code?: string;
  readonly message?: string;
  readonly resourceId?: string;
  readonly resourceType?: string;
}

export interface CreateReplicationConfigurationTemplateRequest {
  readonly associateDefaultSecurityGroup: boolean;
  readonly bandwidthThrottling: number;
  readonly createPublicIP: boolean;
  readonly dataPlaneRouting: string;
  readonly defaultLargeStagingDiskType: string;
  readonly ebsEncryption: string;
  readonly ebsEncryptionKeyArn?: string;
  readonly replicationServerInstanceType: string;
  readonly replicationServersSecurityGroupsIDs: [];
  readonly stagingAreaSubnetId: string;
  readonly stagingAreaTags: {[key: string]: any};
  readonly tags?: {[key: string]: any};
  readonly useDedicatedReplicationServer: boolean;
}

export interface DataReplicationError {
  readonly error?: string;
  readonly rawError?: string;
}

export interface DataReplicationInfo {
  readonly dataReplicationError?: DataReplicationError;
  readonly dataReplicationInitiation?: DataReplicationInitiation;
  readonly dataReplicationState?: string;
  readonly etaDateTime?: string;
  readonly lagDuration?: string;
  readonly lastSnapshotDateTime?: string;
  readonly replicatedDisks?: [];
}

export interface DataReplicationInfoReplicatedDisk {
  readonly backloggedStorageBytes?: number;
  readonly deviceName?: string;
  readonly replicatedStorageBytes?: number;
  readonly rescannedStorageBytes?: number;
  readonly totalStorageBytes?: number;
}

export interface DataReplicationInitiation {
  readonly nextAttemptDateTime?: string;
  readonly startDateTime?: string;
  readonly steps?: [];
}

export interface DataReplicationInitiationStep {
  readonly name?: string;
  readonly status?: string;
}

export interface DeleteJobRequest {
  readonly jobID: string;
}

export interface DeleteJobResponse {
}

export interface DeleteReplicationConfigurationTemplateRequest {
  readonly replicationConfigurationTemplateID: string;
}

export interface DeleteReplicationConfigurationTemplateResponse {
}

export interface DeleteSourceServerRequest {
  readonly sourceServerID: string;
}

export interface DeleteSourceServerResponse {
}

export interface DeleteVcenterClientRequest {
  readonly vcenterClientID: string;
}

export interface DescribeJobLogItemsRequest {
  readonly jobID: string;
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface DescribeJobLogItemsResponse {
  readonly items?: [];
  readonly nextToken?: string;
}

export interface DescribeJobsRequest {
  readonly filters: DescribeJobsRequestFilters;
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface DescribeJobsRequestFilters {
  readonly fromDate?: string;
  readonly jobIDs?: [];
  readonly toDate?: string;
}

export interface DescribeJobsResponse {
  readonly items?: [];
  readonly nextToken?: string;
}

export interface DescribeReplicationConfigurationTemplatesRequest {
  readonly maxResults?: number;
  readonly nextToken?: string;
  readonly replicationConfigurationTemplateIDs: [];
}

export interface DescribeReplicationConfigurationTemplatesResponse {
  readonly items?: [];
  readonly nextToken?: string;
}

export interface DescribeSourceServersRequest {
  readonly filters: DescribeSourceServersRequestFilters;
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface DescribeSourceServersRequestFilters {
  readonly isArchived?: boolean;
  readonly lifeCycleStates?: [];
  readonly replicationTypes?: [];
  readonly sourceServerIDs?: [];
}

export interface DescribeSourceServersResponse {
  readonly items?: [];
  readonly nextToken?: string;
}

export interface DescribeVcenterClientsRequest {
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface DescribeVcenterClientsResponse {
  readonly items?: [];
  readonly nextToken?: string;
}

export interface DisconnectFromServiceRequest {
  readonly sourceServerID: string;
}

export interface Disk {
  readonly bytes?: number;
  readonly deviceName?: string;
}

export interface FinalizeCutoverRequest {
  readonly sourceServerID: string;
}

export interface GetLaunchConfigurationRequest {
  readonly sourceServerID: string;
}

export interface GetReplicationConfigurationRequest {
  readonly sourceServerID: string;
}

export interface IdentificationHints {
  readonly awsInstanceID?: string;
  readonly fqdn?: string;
  readonly hostname?: string;
  readonly vmPath?: string;
  readonly vmWareUuid?: string;
}

export interface InitializeServiceRequest {
}

export interface InitializeServiceResponse {
}

export interface InternalServerException {
  readonly message: string;
  readonly retryAfterSeconds?: number;
}

export interface Job {
  readonly arn?: string;
  readonly creationDateTime?: string;
  readonly endDateTime?: string;
  readonly initiatedBy?: string;
  readonly jobID: string;
  readonly participatingServers?: [];
  readonly status?: string;
  readonly tags?: {[key: string]: any};
  readonly type?: string;
}

export interface JobLog {
  readonly event?: string;
  readonly eventData?: JobLogEventData;
  readonly logDateTime?: string;
}

export interface JobLogEventData {
  readonly conversionServerID?: string;
  readonly rawError?: string;
  readonly sourceServerID?: string;
  readonly targetInstanceID?: string;
}

export interface LaunchConfiguration {
  readonly copyPrivateIp?: boolean;
  readonly copyTags?: boolean;
  readonly ec2LaunchTemplateID?: string;
  readonly launchDisposition?: string;
  readonly licensing?: Licensing;
  readonly name?: string;
  readonly sourceServerID?: string;
  readonly targetInstanceTypeRightSizingMethod?: string;
}

export interface LaunchedInstance {
  readonly ec2InstanceID?: string;
  readonly firstBoot?: string;
  readonly jobID?: string;
}

export interface Licensing {
  readonly osByol?: boolean;
}

export interface LifeCycle {
  readonly addedToServiceDateTime?: string;
  readonly elapsedReplicationDuration?: string;
  readonly firstByteDateTime?: string;
  readonly lastCutover?: LifeCycleLastCutover;
  readonly lastSeenByServiceDateTime?: string;
  readonly lastTest?: LifeCycleLastTest;
  readonly state?: string;
}

export interface LifeCycleLastCutover {
  readonly finalized?: LifeCycleLastCutoverFinalized;
  readonly initiated?: LifeCycleLastCutoverInitiated;
  readonly reverted?: LifeCycleLastCutoverReverted;
}

export interface LifeCycleLastCutoverFinalized {
  readonly apiCallDateTime?: string;
}

export interface LifeCycleLastCutoverInitiated {
  readonly apiCallDateTime?: string;
  readonly jobID?: string;
}

export interface LifeCycleLastCutoverReverted {
  readonly apiCallDateTime?: string;
}

export interface LifeCycleLastTest {
  readonly finalized?: LifeCycleLastTestFinalized;
  readonly initiated?: LifeCycleLastTestInitiated;
  readonly reverted?: LifeCycleLastTestReverted;
}

export interface LifeCycleLastTestFinalized {
  readonly apiCallDateTime?: string;
}

export interface LifeCycleLastTestInitiated {
  readonly apiCallDateTime?: string;
  readonly jobID?: string;
}

export interface LifeCycleLastTestReverted {
  readonly apiCallDateTime?: string;
}

export interface ListTagsForResourceRequest {
  readonly resourceArn: string;
}

export interface ListTagsForResourceResponse {
  readonly tags?: {[key: string]: any};
}

export interface MarkAsArchivedRequest {
  readonly sourceServerID: string;
}

export interface NetworkInterface {
  readonly ips?: [];
  readonly isPrimary?: boolean;
  readonly macAddress?: string;
}

export interface OS {
  readonly fullString?: string;
}

export interface ParticipatingServer {
  readonly launchStatus?: string;
  readonly sourceServerID?: string;
}

export interface ReplicationConfiguration {
  readonly associateDefaultSecurityGroup?: boolean;
  readonly bandwidthThrottling?: number;
  readonly createPublicIP?: boolean;
  readonly dataPlaneRouting?: string;
  readonly defaultLargeStagingDiskType?: string;
  readonly ebsEncryption?: string;
  readonly ebsEncryptionKeyArn?: string;
  readonly name?: string;
  readonly replicatedDisks?: [];
  readonly replicationServerInstanceType?: string;
  readonly replicationServersSecurityGroupsIDs?: [];
  readonly sourceServerID?: string;
  readonly stagingAreaSubnetId?: string;
  readonly stagingAreaTags?: {[key: string]: any};
  readonly useDedicatedReplicationServer?: boolean;
}

export interface ReplicationConfigurationReplicatedDisk {
  readonly deviceName?: string;
  readonly iops?: number;
  readonly isBootDisk?: boolean;
  readonly stagingDiskType?: string;
}

export interface ReplicationConfigurationTemplate {
  readonly arn?: string;
  readonly associateDefaultSecurityGroup?: boolean;
  readonly bandwidthThrottling?: number;
  readonly createPublicIP?: boolean;
  readonly dataPlaneRouting?: string;
  readonly defaultLargeStagingDiskType?: string;
  readonly ebsEncryption?: string;
  readonly ebsEncryptionKeyArn?: string;
  readonly replicationConfigurationTemplateID: string;
  readonly replicationServerInstanceType?: string;
  readonly replicationServersSecurityGroupsIDs?: [];
  readonly stagingAreaSubnetId?: string;
  readonly stagingAreaTags?: {[key: string]: any};
  readonly tags?: {[key: string]: any};
  readonly useDedicatedReplicationServer?: boolean;
}

export interface ResourceNotFoundException {
  readonly code?: string;
  readonly message?: string;
  readonly resourceId?: string;
  readonly resourceType?: string;
}

export interface RetryDataReplicationRequest {
  readonly sourceServerID: string;
}

export interface ServiceQuotaExceededException {
  readonly code?: string;
  readonly message?: string;
  readonly quotaCode?: string;
  readonly resourceId?: string;
  readonly resourceType?: string;
  readonly serviceCode?: string;
}

export interface SourceProperties {
  readonly cpus?: [];
  readonly disks?: [];
  readonly identificationHints?: IdentificationHints;
  readonly lastUpdatedDateTime?: string;
  readonly networkInterfaces?: [];
  readonly os?: OS;
  readonly ramBytes?: number;
  readonly recommendedInstanceType?: string;
}

export interface SourceServer {
  readonly arn?: string;
  readonly dataReplicationInfo?: DataReplicationInfo;
  readonly isArchived?: boolean;
  readonly launchedInstance?: LaunchedInstance;
  readonly lifeCycle?: LifeCycle;
  readonly replicationType?: string;
  readonly sourceProperties?: SourceProperties;
  readonly sourceServerID?: string;
  readonly tags?: {[key: string]: any};
  readonly vcenterClientID?: string;
}

export interface StartCutoverRequest {
  readonly sourceServerIDs: [];
  readonly tags?: {[key: string]: any};
}

export interface StartCutoverResponse {
  readonly job?: Job;
}

export interface StartReplicationRequest {
  readonly sourceServerID: string;
}

export interface StartTestRequest {
  readonly sourceServerIDs: [];
  readonly tags?: {[key: string]: any};
}

export interface StartTestResponse {
  readonly job?: Job;
}

export interface TagResourceRequest {
  readonly resourceArn: string;
  readonly tags: {[key: string]: any};
}

export interface TerminateTargetInstancesRequest {
  readonly sourceServerIDs: [];
  readonly tags?: {[key: string]: any};
}

export interface TerminateTargetInstancesResponse {
  readonly job?: Job;
}

export interface ThrottlingException {
  readonly message: string;
  readonly quotaCode?: string;
  readonly retryAfterSeconds?: string;
  readonly serviceCode?: string;
}

export interface UninitializedAccountException {
  readonly code?: string;
  readonly message?: string;
}

export interface UntagResourceRequest {
  readonly resourceArn: string;
  readonly tagKeys: [];
}

export interface UpdateLaunchConfigurationRequest {
  readonly copyPrivateIp?: boolean;
  readonly copyTags?: boolean;
  readonly launchDisposition?: string;
  readonly licensing?: Licensing;
  readonly name?: string;
  readonly sourceServerID: string;
  readonly targetInstanceTypeRightSizingMethod?: string;
}

export interface UpdateReplicationConfigurationRequest {
  readonly associateDefaultSecurityGroup?: boolean;
  readonly bandwidthThrottling?: number;
  readonly createPublicIP?: boolean;
  readonly dataPlaneRouting?: string;
  readonly defaultLargeStagingDiskType?: string;
  readonly ebsEncryption?: string;
  readonly ebsEncryptionKeyArn?: string;
  readonly name?: string;
  readonly replicatedDisks?: [];
  readonly replicationServerInstanceType?: string;
  readonly replicationServersSecurityGroupsIDs?: [];
  readonly sourceServerID: string;
  readonly stagingAreaSubnetId?: string;
  readonly stagingAreaTags?: {[key: string]: any};
  readonly useDedicatedReplicationServer?: boolean;
}

export interface UpdateReplicationConfigurationTemplateRequest {
  readonly arn?: string;
  readonly associateDefaultSecurityGroup?: boolean;
  readonly bandwidthThrottling?: number;
  readonly createPublicIP?: boolean;
  readonly dataPlaneRouting?: string;
  readonly defaultLargeStagingDiskType?: string;
  readonly ebsEncryption?: string;
  readonly ebsEncryptionKeyArn?: string;
  readonly replicationConfigurationTemplateID: string;
  readonly replicationServerInstanceType?: string;
  readonly replicationServersSecurityGroupsIDs?: [];
  readonly stagingAreaSubnetId?: string;
  readonly stagingAreaTags?: {[key: string]: any};
  readonly useDedicatedReplicationServer?: boolean;
}

export interface UpdateSourceServerReplicationTypeRequest {
  readonly replicationType: string;
  readonly sourceServerID: string;
}

export interface ValidationException {
  readonly code?: string;
  readonly fieldList?: [];
  readonly message?: string;
  readonly reason?: string;
}

export interface ValidationExceptionField {
  readonly message?: string;
  readonly name?: string;
}

export interface VcenterClient {
  readonly arn?: string;
  readonly datacenterName?: string;
  readonly hostname?: string;
  readonly lastSeenDatetime?: string;
  readonly sourceServerTags?: {[key: string]: any};
  readonly tags?: {[key: string]: any};
  readonly vcenterClientID?: string;
  readonly vcenterUUID?: string;
}


