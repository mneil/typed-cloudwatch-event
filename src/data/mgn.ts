/**
 * STOP. This file is autogenerated. DO NOT EDIT by hand
 */
export interface ChangeServerLifeCycleState {
  readonly lifeCycle: ChangeServerLifeCycleStateSourceServerLifecycle;
  readonly sourceServerID: string;
}
export interface CreateReplicationConfigurationTemplate {
  readonly associateDefaultSecurityGroup: boolean;
  readonly bandwidthThrottling: number;
  readonly createPublicIP: boolean;
  readonly dataPlaneRouting: string;
  readonly defaultLargeStagingDiskType: string;
  readonly ebsEncryption: string;
  readonly ebsEncryptionKeyArn?: string;
  readonly replicationServerInstanceType: string;
  readonly replicationServersSecurityGroupsIDs: [];
  readonly stagingAreaSubnetId: string;
  readonly stagingAreaTags: {[key: string]: any};
  readonly tags?: {[key: string]: any};
  readonly useDedicatedReplicationServer: boolean;
}
export interface DeleteJob {
  readonly jobID: string;
}
export interface DeleteReplicationConfigurationTemplate {
  readonly replicationConfigurationTemplateID: string;
}
export interface DeleteSourceServer {
  readonly sourceServerID: string;
}
export interface DeleteVcenterClient {
  readonly vcenterClientID: string;
}
export interface DescribeJobLogItems {
  readonly jobID: string;
  readonly maxResults?: number;
  readonly nextToken?: string;
}
export interface DescribeJobs {
  readonly filters: DescribeJobsRequestFilters;
  readonly maxResults?: number;
  readonly nextToken?: string;
}
export interface DescribeReplicationConfigurationTemplates {
  readonly maxResults?: number;
  readonly nextToken?: string;
  readonly replicationConfigurationTemplateIDs: [];
}
export interface DescribeSourceServers {
  readonly filters: DescribeSourceServersRequestFilters;
  readonly maxResults?: number;
  readonly nextToken?: string;
}
export interface DescribeVcenterClients {
  readonly maxResults?: number;
  readonly nextToken?: string;
}
export interface DisconnectFromService {
  readonly sourceServerID: string;
}
export interface FinalizeCutover {
  readonly sourceServerID: string;
}
export interface GetLaunchConfiguration {
  readonly sourceServerID: string;
}
export interface GetReplicationConfiguration {
  readonly sourceServerID: string;
}
export interface InitializeService {
}
export interface ListTagsForResource {
  readonly resourceArn: string;
}
export interface MarkAsArchived {
  readonly sourceServerID: string;
}
export interface RetryDataReplication {
  readonly sourceServerID: string;
}
export interface StartCutover {
  readonly sourceServerIDs: [];
  readonly tags?: {[key: string]: any};
}
export interface StartReplication {
  readonly sourceServerID: string;
}
export interface StartTest {
  readonly sourceServerIDs: [];
  readonly tags?: {[key: string]: any};
}
export interface TagResource {
  readonly resourceArn: string;
  readonly tags: {[key: string]: any};
}
export interface TerminateTargetInstances {
  readonly sourceServerIDs: [];
  readonly tags?: {[key: string]: any};
}
export interface UntagResource {
  readonly resourceArn: string;
  readonly tagKeys: [];
}
export interface UpdateLaunchConfiguration {
  readonly copyPrivateIp?: boolean;
  readonly copyTags?: boolean;
  readonly launchDisposition?: string;
  readonly licensing?: Licensing;
  readonly name?: string;
  readonly sourceServerID: string;
  readonly targetInstanceTypeRightSizingMethod?: string;
}
export interface UpdateReplicationConfiguration {
  readonly associateDefaultSecurityGroup?: boolean;
  readonly bandwidthThrottling?: number;
  readonly createPublicIP?: boolean;
  readonly dataPlaneRouting?: string;
  readonly defaultLargeStagingDiskType?: string;
  readonly ebsEncryption?: string;
  readonly ebsEncryptionKeyArn?: string;
  readonly name?: string;
  readonly replicatedDisks?: [];
  readonly replicationServerInstanceType?: string;
  readonly replicationServersSecurityGroupsIDs?: [];
  readonly sourceServerID: string;
  readonly stagingAreaSubnetId?: string;
  readonly stagingAreaTags?: {[key: string]: any};
  readonly useDedicatedReplicationServer?: boolean;
}
export interface UpdateReplicationConfigurationTemplate {
  readonly arn?: string;
  readonly associateDefaultSecurityGroup?: boolean;
  readonly bandwidthThrottling?: number;
  readonly createPublicIP?: boolean;
  readonly dataPlaneRouting?: string;
  readonly defaultLargeStagingDiskType?: string;
  readonly ebsEncryption?: string;
  readonly ebsEncryptionKeyArn?: string;
  readonly replicationConfigurationTemplateID: string;
  readonly replicationServerInstanceType?: string;
  readonly replicationServersSecurityGroupsIDs?: [];
  readonly stagingAreaSubnetId?: string;
  readonly stagingAreaTags?: {[key: string]: any};
  readonly useDedicatedReplicationServer?: boolean;
}
export interface UpdateSourceServerReplicationType {
  readonly replicationType: string;
  readonly sourceServerID: string;
}



interface AccessDeniedException {
  readonly code: string;
  readonly message: string;
}

interface CPU {
  readonly cores: number;
  readonly modelName: string;
}

interface ChangeServerLifeCycleStateRequest {
  readonly lifeCycle: ChangeServerLifeCycleStateSourceServerLifecycle;
  readonly sourceServerID: string;
}

interface ChangeServerLifeCycleStateSourceServerLifecycle {
  readonly state: string;
}

interface ConflictException {
  readonly code: string;
  readonly message: string;
  readonly resourceId: string;
  readonly resourceType: string;
}

interface CreateReplicationConfigurationTemplateRequest {
  readonly associateDefaultSecurityGroup: boolean;
  readonly bandwidthThrottling: number;
  readonly createPublicIP: boolean;
  readonly dataPlaneRouting: string;
  readonly defaultLargeStagingDiskType: string;
  readonly ebsEncryption: string;
  readonly ebsEncryptionKeyArn: string;
  readonly replicationServerInstanceType: string;
  readonly replicationServersSecurityGroupsIDs: [];
  readonly stagingAreaSubnetId: string;
  readonly stagingAreaTags: {[key: string]: any};
  readonly tags: {[key: string]: any};
  readonly useDedicatedReplicationServer: boolean;
}

interface DataReplicationError {
  readonly error: string;
  readonly rawError: string;
}

interface DataReplicationInfo {
  readonly dataReplicationError: DataReplicationError;
  readonly dataReplicationInitiation: DataReplicationInitiation;
  readonly dataReplicationState: string;
  readonly etaDateTime: string;
  readonly lagDuration: string;
  readonly lastSnapshotDateTime: string;
  readonly replicatedDisks: [];
}

interface DataReplicationInfoReplicatedDisk {
  readonly backloggedStorageBytes: number;
  readonly deviceName: string;
  readonly replicatedStorageBytes: number;
  readonly rescannedStorageBytes: number;
  readonly totalStorageBytes: number;
}

interface DataReplicationInitiation {
  readonly nextAttemptDateTime: string;
  readonly startDateTime: string;
  readonly steps: [];
}

interface DataReplicationInitiationStep {
  readonly name: string;
  readonly status: string;
}

interface DeleteJobRequest {
  readonly jobID: string;
}

interface DeleteJobResponse {
}

interface DeleteReplicationConfigurationTemplateRequest {
  readonly replicationConfigurationTemplateID: string;
}

interface DeleteReplicationConfigurationTemplateResponse {
}

interface DeleteSourceServerRequest {
  readonly sourceServerID: string;
}

interface DeleteSourceServerResponse {
}

interface DeleteVcenterClientRequest {
  readonly vcenterClientID: string;
}

interface DescribeJobLogItemsRequest {
  readonly jobID: string;
  readonly maxResults: number;
  readonly nextToken: string;
}

interface DescribeJobLogItemsResponse {
  readonly items: [];
  readonly nextToken: string;
}

interface DescribeJobsRequest {
  readonly filters: DescribeJobsRequestFilters;
  readonly maxResults: number;
  readonly nextToken: string;
}

interface DescribeJobsRequestFilters {
  readonly fromDate: string;
  readonly jobIDs: [];
  readonly toDate: string;
}

interface DescribeJobsResponse {
  readonly items: [];
  readonly nextToken: string;
}

interface DescribeReplicationConfigurationTemplatesRequest {
  readonly maxResults: number;
  readonly nextToken: string;
  readonly replicationConfigurationTemplateIDs: [];
}

interface DescribeReplicationConfigurationTemplatesResponse {
  readonly items: [];
  readonly nextToken: string;
}

interface DescribeSourceServersRequest {
  readonly filters: DescribeSourceServersRequestFilters;
  readonly maxResults: number;
  readonly nextToken: string;
}

interface DescribeSourceServersRequestFilters {
  readonly isArchived: boolean;
  readonly lifeCycleStates: [];
  readonly replicationTypes: [];
  readonly sourceServerIDs: [];
}

interface DescribeSourceServersResponse {
  readonly items: [];
  readonly nextToken: string;
}

interface DescribeVcenterClientsRequest {
  readonly maxResults: number;
  readonly nextToken: string;
}

interface DescribeVcenterClientsResponse {
  readonly items: [];
  readonly nextToken: string;
}

interface DisconnectFromServiceRequest {
  readonly sourceServerID: string;
}

interface Disk {
  readonly bytes: number;
  readonly deviceName: string;
}

interface FinalizeCutoverRequest {
  readonly sourceServerID: string;
}

interface GetLaunchConfigurationRequest {
  readonly sourceServerID: string;
}

interface GetReplicationConfigurationRequest {
  readonly sourceServerID: string;
}

interface IdentificationHints {
  readonly awsInstanceID: string;
  readonly fqdn: string;
  readonly hostname: string;
  readonly vmPath: string;
  readonly vmWareUuid: string;
}

interface InitializeServiceRequest {
}

interface InitializeServiceResponse {
}

interface InternalServerException {
  readonly message: string;
  readonly retryAfterSeconds: number;
}

interface Job {
  readonly arn: string;
  readonly creationDateTime: string;
  readonly endDateTime: string;
  readonly initiatedBy: string;
  readonly jobID: string;
  readonly participatingServers: [];
  readonly status: string;
  readonly tags: {[key: string]: any};
  readonly type: string;
}

interface JobLog {
  readonly event: string;
  readonly eventData: JobLogEventData;
  readonly logDateTime: string;
}

interface JobLogEventData {
  readonly conversionServerID: string;
  readonly rawError: string;
  readonly sourceServerID: string;
  readonly targetInstanceID: string;
}

interface LaunchConfiguration {
  readonly copyPrivateIp: boolean;
  readonly copyTags: boolean;
  readonly ec2LaunchTemplateID: string;
  readonly launchDisposition: string;
  readonly licensing: Licensing;
  readonly name: string;
  readonly sourceServerID: string;
  readonly targetInstanceTypeRightSizingMethod: string;
}

interface LaunchedInstance {
  readonly ec2InstanceID: string;
  readonly firstBoot: string;
  readonly jobID: string;
}

interface Licensing {
  readonly osByol: boolean;
}

interface LifeCycle {
  readonly addedToServiceDateTime: string;
  readonly elapsedReplicationDuration: string;
  readonly firstByteDateTime: string;
  readonly lastCutover: LifeCycleLastCutover;
  readonly lastSeenByServiceDateTime: string;
  readonly lastTest: LifeCycleLastTest;
  readonly state: string;
}

interface LifeCycleLastCutover {
  readonly finalized: LifeCycleLastCutoverFinalized;
  readonly initiated: LifeCycleLastCutoverInitiated;
  readonly reverted: LifeCycleLastCutoverReverted;
}

interface LifeCycleLastCutoverFinalized {
  readonly apiCallDateTime: string;
}

interface LifeCycleLastCutoverInitiated {
  readonly apiCallDateTime: string;
  readonly jobID: string;
}

interface LifeCycleLastCutoverReverted {
  readonly apiCallDateTime: string;
}

interface LifeCycleLastTest {
  readonly finalized: LifeCycleLastTestFinalized;
  readonly initiated: LifeCycleLastTestInitiated;
  readonly reverted: LifeCycleLastTestReverted;
}

interface LifeCycleLastTestFinalized {
  readonly apiCallDateTime: string;
}

interface LifeCycleLastTestInitiated {
  readonly apiCallDateTime: string;
  readonly jobID: string;
}

interface LifeCycleLastTestReverted {
  readonly apiCallDateTime: string;
}

interface ListTagsForResourceRequest {
  readonly resourceArn: string;
}

interface ListTagsForResourceResponse {
  readonly tags: {[key: string]: any};
}

interface MarkAsArchivedRequest {
  readonly sourceServerID: string;
}

interface NetworkInterface {
  readonly ips: [];
  readonly isPrimary: boolean;
  readonly macAddress: string;
}

interface OS {
  readonly fullString: string;
}

interface ParticipatingServer {
  readonly launchStatus: string;
  readonly sourceServerID: string;
}

interface ReplicationConfiguration {
  readonly associateDefaultSecurityGroup: boolean;
  readonly bandwidthThrottling: number;
  readonly createPublicIP: boolean;
  readonly dataPlaneRouting: string;
  readonly defaultLargeStagingDiskType: string;
  readonly ebsEncryption: string;
  readonly ebsEncryptionKeyArn: string;
  readonly name: string;
  readonly replicatedDisks: [];
  readonly replicationServerInstanceType: string;
  readonly replicationServersSecurityGroupsIDs: [];
  readonly sourceServerID: string;
  readonly stagingAreaSubnetId: string;
  readonly stagingAreaTags: {[key: string]: any};
  readonly useDedicatedReplicationServer: boolean;
}

interface ReplicationConfigurationReplicatedDisk {
  readonly deviceName: string;
  readonly iops: number;
  readonly isBootDisk: boolean;
  readonly stagingDiskType: string;
}

interface ReplicationConfigurationTemplate {
  readonly arn: string;
  readonly associateDefaultSecurityGroup: boolean;
  readonly bandwidthThrottling: number;
  readonly createPublicIP: boolean;
  readonly dataPlaneRouting: string;
  readonly defaultLargeStagingDiskType: string;
  readonly ebsEncryption: string;
  readonly ebsEncryptionKeyArn: string;
  readonly replicationConfigurationTemplateID: string;
  readonly replicationServerInstanceType: string;
  readonly replicationServersSecurityGroupsIDs: [];
  readonly stagingAreaSubnetId: string;
  readonly stagingAreaTags: {[key: string]: any};
  readonly tags: {[key: string]: any};
  readonly useDedicatedReplicationServer: boolean;
}

interface ResourceNotFoundException {
  readonly code: string;
  readonly message: string;
  readonly resourceId: string;
  readonly resourceType: string;
}

interface RetryDataReplicationRequest {
  readonly sourceServerID: string;
}

interface ServiceQuotaExceededException {
  readonly code: string;
  readonly message: string;
  readonly quotaCode: string;
  readonly resourceId: string;
  readonly resourceType: string;
  readonly serviceCode: string;
}

interface SourceProperties {
  readonly cpus: [];
  readonly disks: [];
  readonly identificationHints: IdentificationHints;
  readonly lastUpdatedDateTime: string;
  readonly networkInterfaces: [];
  readonly os: OS;
  readonly ramBytes: number;
  readonly recommendedInstanceType: string;
}

interface SourceServer {
  readonly arn: string;
  readonly dataReplicationInfo: DataReplicationInfo;
  readonly isArchived: boolean;
  readonly launchedInstance: LaunchedInstance;
  readonly lifeCycle: LifeCycle;
  readonly replicationType: string;
  readonly sourceProperties: SourceProperties;
  readonly sourceServerID: string;
  readonly tags: {[key: string]: any};
  readonly vcenterClientID: string;
}

interface StartCutoverRequest {
  readonly sourceServerIDs: [];
  readonly tags: {[key: string]: any};
}

interface StartCutoverResponse {
  readonly job: Job;
}

interface StartReplicationRequest {
  readonly sourceServerID: string;
}

interface StartTestRequest {
  readonly sourceServerIDs: [];
  readonly tags: {[key: string]: any};
}

interface StartTestResponse {
  readonly job: Job;
}

interface TagResourceRequest {
  readonly resourceArn: string;
  readonly tags: {[key: string]: any};
}

interface TerminateTargetInstancesRequest {
  readonly sourceServerIDs: [];
  readonly tags: {[key: string]: any};
}

interface TerminateTargetInstancesResponse {
  readonly job: Job;
}

interface ThrottlingException {
  readonly message: string;
  readonly quotaCode: string;
  readonly retryAfterSeconds: string;
  readonly serviceCode: string;
}

interface UninitializedAccountException {
  readonly code: string;
  readonly message: string;
}

interface UntagResourceRequest {
  readonly resourceArn: string;
  readonly tagKeys: [];
}

interface UpdateLaunchConfigurationRequest {
  readonly copyPrivateIp: boolean;
  readonly copyTags: boolean;
  readonly launchDisposition: string;
  readonly licensing: Licensing;
  readonly name: string;
  readonly sourceServerID: string;
  readonly targetInstanceTypeRightSizingMethod: string;
}

interface UpdateReplicationConfigurationRequest {
  readonly associateDefaultSecurityGroup: boolean;
  readonly bandwidthThrottling: number;
  readonly createPublicIP: boolean;
  readonly dataPlaneRouting: string;
  readonly defaultLargeStagingDiskType: string;
  readonly ebsEncryption: string;
  readonly ebsEncryptionKeyArn: string;
  readonly name: string;
  readonly replicatedDisks: [];
  readonly replicationServerInstanceType: string;
  readonly replicationServersSecurityGroupsIDs: [];
  readonly sourceServerID: string;
  readonly stagingAreaSubnetId: string;
  readonly stagingAreaTags: {[key: string]: any};
  readonly useDedicatedReplicationServer: boolean;
}

interface UpdateReplicationConfigurationTemplateRequest {
  readonly arn: string;
  readonly associateDefaultSecurityGroup: boolean;
  readonly bandwidthThrottling: number;
  readonly createPublicIP: boolean;
  readonly dataPlaneRouting: string;
  readonly defaultLargeStagingDiskType: string;
  readonly ebsEncryption: string;
  readonly ebsEncryptionKeyArn: string;
  readonly replicationConfigurationTemplateID: string;
  readonly replicationServerInstanceType: string;
  readonly replicationServersSecurityGroupsIDs: [];
  readonly stagingAreaSubnetId: string;
  readonly stagingAreaTags: {[key: string]: any};
  readonly useDedicatedReplicationServer: boolean;
}

interface UpdateSourceServerReplicationTypeRequest {
  readonly replicationType: string;
  readonly sourceServerID: string;
}

interface ValidationException {
  readonly code: string;
  readonly fieldList: [];
  readonly message: string;
  readonly reason: string;
}

interface ValidationExceptionField {
  readonly message: string;
  readonly name: string;
}

interface VcenterClient {
  readonly arn: string;
  readonly datacenterName: string;
  readonly hostname: string;
  readonly lastSeenDatetime: string;
  readonly sourceServerTags: {[key: string]: any};
  readonly tags: {[key: string]: any};
  readonly vcenterClientID: string;
  readonly vcenterUUID: string;
}

