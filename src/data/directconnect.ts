/**
 * STOP. This file is autogenerated. DO NOT EDIT by hand
 */
export interface AcceptDirectConnectGatewayAssociationProposal {
  readonly directConnectGatewayId: string;
  readonly proposalId: string;
  readonly associatedGatewayOwnerAccount: string;
  readonly overrideAllowedPrefixesToDirectConnectGateway?: [];
}
export interface AllocateConnectionOnInterconnect {
  readonly bandwidth: string;
  readonly connectionName: string;
  readonly ownerAccount: string;
  readonly interconnectId: string;
  readonly vlan: number;
}
export interface AllocateHostedConnection {
  readonly connectionId: string;
  readonly ownerAccount: string;
  readonly bandwidth: string;
  readonly connectionName: string;
  readonly vlan: number;
  readonly tags?: [];
}
export interface AllocatePrivateVirtualInterface {
  readonly connectionId: string;
  readonly ownerAccount: string;
  readonly newPrivateVirtualInterfaceAllocation: NewPrivateVirtualInterfaceAllocation;
}
export interface AllocatePublicVirtualInterface {
  readonly connectionId: string;
  readonly ownerAccount: string;
  readonly newPublicVirtualInterfaceAllocation: NewPublicVirtualInterfaceAllocation;
}
export interface AllocateTransitVirtualInterface {
  readonly connectionId: string;
  readonly ownerAccount: string;
  readonly newTransitVirtualInterfaceAllocation: NewTransitVirtualInterfaceAllocation;
}
export interface AssociateConnectionWithLag {
  readonly connectionId: string;
  readonly lagId: string;
}
export interface AssociateHostedConnection {
  readonly connectionId: string;
  readonly parentConnectionId: string;
}
export interface AssociateMacSecKey {
  readonly connectionId: string;
  readonly secretARN?: string;
  readonly ckn?: string;
  readonly cak?: string;
}
export interface AssociateVirtualInterface {
  readonly virtualInterfaceId: string;
  readonly connectionId: string;
}
export interface ConfirmConnection {
  readonly connectionId: string;
}
export interface ConfirmCustomerAgreement {
  readonly agreementName?: string;
}
export interface ConfirmPrivateVirtualInterface {
  readonly virtualInterfaceId: string;
  readonly virtualGatewayId?: string;
  readonly directConnectGatewayId?: string;
}
export interface ConfirmPublicVirtualInterface {
  readonly virtualInterfaceId: string;
}
export interface ConfirmTransitVirtualInterface {
  readonly virtualInterfaceId: string;
  readonly directConnectGatewayId: string;
}
export interface CreateBGPPeer {
  readonly virtualInterfaceId?: string;
  readonly newBGPPeer?: NewBGPPeer;
}
export interface CreateConnection {
  readonly location: string;
  readonly bandwidth: string;
  readonly connectionName: string;
  readonly lagId?: string;
  readonly tags?: [];
  readonly providerName?: string;
  readonly requestMACSec?: boolean;
}
export interface CreateDirectConnectGateway {
  readonly directConnectGatewayName: string;
  readonly amazonSideAsn?: number;
}
export interface CreateDirectConnectGatewayAssociation {
  readonly directConnectGatewayId: string;
  readonly gatewayId?: string;
  readonly addAllowedPrefixesToDirectConnectGateway?: [];
  readonly virtualGatewayId?: string;
}
export interface CreateDirectConnectGatewayAssociationProposal {
  readonly directConnectGatewayId: string;
  readonly directConnectGatewayOwnerAccount: string;
  readonly gatewayId: string;
  readonly addAllowedPrefixesToDirectConnectGateway?: [];
  readonly removeAllowedPrefixesToDirectConnectGateway?: [];
}
export interface CreateInterconnect {
  readonly interconnectName: string;
  readonly bandwidth: string;
  readonly location: string;
  readonly lagId?: string;
  readonly tags?: [];
  readonly providerName?: string;
}
export interface CreateLag {
  readonly numberOfConnections: number;
  readonly location: string;
  readonly connectionsBandwidth: string;
  readonly lagName: string;
  readonly connectionId?: string;
  readonly tags?: [];
  readonly childConnectionTags?: [];
  readonly providerName?: string;
  readonly requestMACSec?: boolean;
}
export interface CreatePrivateVirtualInterface {
  readonly connectionId: string;
  readonly newPrivateVirtualInterface: NewPrivateVirtualInterface;
}
export interface CreatePublicVirtualInterface {
  readonly connectionId: string;
  readonly newPublicVirtualInterface: NewPublicVirtualInterface;
}
export interface CreateTransitVirtualInterface {
  readonly connectionId: string;
  readonly newTransitVirtualInterface: NewTransitVirtualInterface;
}
export interface DeleteBGPPeer {
  readonly virtualInterfaceId?: string;
  readonly asn?: number;
  readonly customerAddress?: string;
  readonly bgpPeerId?: string;
}
export interface DeleteConnection {
  readonly connectionId: string;
}
export interface DeleteDirectConnectGateway {
  readonly directConnectGatewayId: string;
}
export interface DeleteDirectConnectGatewayAssociation {
  readonly associationId?: string;
  readonly directConnectGatewayId?: string;
  readonly virtualGatewayId?: string;
}
export interface DeleteDirectConnectGatewayAssociationProposal {
  readonly proposalId: string;
}
export interface DeleteInterconnect {
  readonly interconnectId: string;
}
export interface DeleteLag {
  readonly lagId: string;
}
export interface DeleteVirtualInterface {
  readonly virtualInterfaceId: string;
}
export interface DescribeConnectionLoa {
  readonly connectionId: string;
  readonly providerName?: string;
  readonly loaContentType?: string;
}
export interface DescribeConnections {
  readonly connectionId?: string;
}
export interface DescribeConnectionsOnInterconnect {
  readonly interconnectId: string;
}
export interface DescribeDirectConnectGatewayAssociationProposals {
  readonly directConnectGatewayId?: string;
  readonly proposalId?: string;
  readonly associatedGatewayId?: string;
  readonly maxResults?: number;
  readonly nextToken?: string;
}
export interface DescribeDirectConnectGatewayAssociations {
  readonly associationId?: string;
  readonly associatedGatewayId?: string;
  readonly directConnectGatewayId?: string;
  readonly maxResults?: number;
  readonly nextToken?: string;
  readonly virtualGatewayId?: string;
}
export interface DescribeDirectConnectGatewayAttachments {
  readonly directConnectGatewayId?: string;
  readonly virtualInterfaceId?: string;
  readonly maxResults?: number;
  readonly nextToken?: string;
}
export interface DescribeDirectConnectGateways {
  readonly directConnectGatewayId?: string;
  readonly maxResults?: number;
  readonly nextToken?: string;
}
export interface DescribeHostedConnections {
  readonly connectionId: string;
}
export interface DescribeInterconnectLoa {
  readonly interconnectId: string;
  readonly providerName?: string;
  readonly loaContentType?: string;
}
export interface DescribeInterconnects {
  readonly interconnectId?: string;
}
export interface DescribeLags {
  readonly lagId?: string;
}
export interface DescribeLoa {
  readonly connectionId: string;
  readonly providerName?: string;
  readonly loaContentType?: string;
}
export interface DescribeRouterConfiguration {
  readonly virtualInterfaceId: string;
  readonly routerTypeIdentifier?: string;
}
export interface DescribeTags {
  readonly resourceArns: [];
}
export interface DescribeVirtualInterfaces {
  readonly connectionId?: string;
  readonly virtualInterfaceId?: string;
}
export interface DisassociateConnectionFromLag {
  readonly connectionId: string;
  readonly lagId: string;
}
export interface DisassociateMacSecKey {
  readonly connectionId: string;
  readonly secretARN: string;
}
export interface ListVirtualInterfaceTestHistory {
  readonly testId?: string;
  readonly virtualInterfaceId?: string;
  readonly bgpPeers?: [];
  readonly status?: string;
  readonly maxResults?: number;
  readonly nextToken?: string;
}
export interface StartBgpFailoverTest {
  readonly virtualInterfaceId: string;
  readonly bgpPeers?: [];
  readonly testDurationInMinutes?: number;
}
export interface StopBgpFailoverTest {
  readonly virtualInterfaceId: string;
}
export interface TagResource {
  readonly resourceArn: string;
  readonly tags: [];
}
export interface UntagResource {
  readonly resourceArn: string;
  readonly tagKeys: [];
}
export interface UpdateConnection {
  readonly connectionId: string;
  readonly connectionName?: string;
  readonly encryptionMode?: string;
}
export interface UpdateDirectConnectGateway {
  readonly directConnectGatewayId: string;
  readonly newDirectConnectGatewayName: string;
}
export interface UpdateDirectConnectGatewayAssociation {
  readonly associationId?: string;
  readonly addAllowedPrefixesToDirectConnectGateway?: [];
  readonly removeAllowedPrefixesToDirectConnectGateway?: [];
}
export interface UpdateLag {
  readonly lagId: string;
  readonly lagName?: string;
  readonly minimumLinks?: number;
  readonly encryptionMode?: string;
}
export interface UpdateVirtualInterfaceAttributes {
  readonly virtualInterfaceId: string;
  readonly mtu?: number;
  readonly enableSiteLink?: boolean;
  readonly virtualInterfaceName?: string;
}



interface AcceptDirectConnectGatewayAssociationProposalRequest {
  readonly directConnectGatewayId: string;
  readonly proposalId: string;
  readonly associatedGatewayOwnerAccount: string;
  readonly overrideAllowedPrefixesToDirectConnectGateway: [];
}

interface AcceptDirectConnectGatewayAssociationProposalResult {
  readonly directConnectGatewayAssociation: DirectConnectGatewayAssociation;
}

interface AllocateConnectionOnInterconnectRequest {
  readonly bandwidth: string;
  readonly connectionName: string;
  readonly ownerAccount: string;
  readonly interconnectId: string;
  readonly vlan: number;
}

interface AllocateHostedConnectionRequest {
  readonly connectionId: string;
  readonly ownerAccount: string;
  readonly bandwidth: string;
  readonly connectionName: string;
  readonly vlan: number;
  readonly tags: [];
}

interface AllocatePrivateVirtualInterfaceRequest {
  readonly connectionId: string;
  readonly ownerAccount: string;
  readonly newPrivateVirtualInterfaceAllocation: NewPrivateVirtualInterfaceAllocation;
}

interface AllocatePublicVirtualInterfaceRequest {
  readonly connectionId: string;
  readonly ownerAccount: string;
  readonly newPublicVirtualInterfaceAllocation: NewPublicVirtualInterfaceAllocation;
}

interface AllocateTransitVirtualInterfaceRequest {
  readonly connectionId: string;
  readonly ownerAccount: string;
  readonly newTransitVirtualInterfaceAllocation: NewTransitVirtualInterfaceAllocation;
}

interface AllocateTransitVirtualInterfaceResult {
  readonly virtualInterface: VirtualInterface;
}

interface AssociateConnectionWithLagRequest {
  readonly connectionId: string;
  readonly lagId: string;
}

interface AssociateHostedConnectionRequest {
  readonly connectionId: string;
  readonly parentConnectionId: string;
}

interface AssociateMacSecKeyRequest {
  readonly connectionId: string;
  readonly secretARN: string;
  readonly ckn: string;
  readonly cak: string;
}

interface AssociateMacSecKeyResponse {
  readonly connectionId: string;
  readonly macSecKeys: [];
}

interface AssociateVirtualInterfaceRequest {
  readonly virtualInterfaceId: string;
  readonly connectionId: string;
}

interface AssociatedGateway {
  readonly id: string;
  readonly type: string;
  readonly ownerAccount: string;
  readonly region: string;
}

interface BGPPeer {
  readonly bgpPeerId: string;
  readonly asn: number;
  readonly authKey: string;
  readonly addressFamily: string;
  readonly amazonAddress: string;
  readonly customerAddress: string;
  readonly bgpPeerState: string;
  readonly bgpStatus: string;
  readonly awsDeviceV2: string;
  readonly awsLogicalDeviceId: string;
}

interface ConfirmConnectionRequest {
  readonly connectionId: string;
}

interface ConfirmConnectionResponse {
  readonly connectionState: string;
}

interface ConfirmCustomerAgreementRequest {
  readonly agreementName: string;
}

interface ConfirmCustomerAgreementResponse {
  readonly status: string;
}

interface ConfirmPrivateVirtualInterfaceRequest {
  readonly virtualInterfaceId: string;
  readonly virtualGatewayId: string;
  readonly directConnectGatewayId: string;
}

interface ConfirmPrivateVirtualInterfaceResponse {
  readonly virtualInterfaceState: string;
}

interface ConfirmPublicVirtualInterfaceRequest {
  readonly virtualInterfaceId: string;
}

interface ConfirmPublicVirtualInterfaceResponse {
  readonly virtualInterfaceState: string;
}

interface ConfirmTransitVirtualInterfaceRequest {
  readonly virtualInterfaceId: string;
  readonly directConnectGatewayId: string;
}

interface ConfirmTransitVirtualInterfaceResponse {
  readonly virtualInterfaceState: string;
}

interface Connection {
  readonly ownerAccount: string;
  readonly connectionId: string;
  readonly connectionName: string;
  readonly connectionState: string;
  readonly region: string;
  readonly location: string;
  readonly bandwidth: string;
  readonly vlan: number;
  readonly partnerName: string;
  readonly loaIssueTime: Date;
  readonly lagId: string;
  readonly awsDevice: string;
  readonly jumboFrameCapable: boolean;
  readonly awsDeviceV2: string;
  readonly awsLogicalDeviceId: string;
  readonly hasLogicalRedundancy: string;
  readonly tags: [];
  readonly providerName: string;
  readonly macSecCapable: boolean;
  readonly portEncryptionStatus: string;
  readonly encryptionMode: string;
  readonly macSecKeys: [];
}

interface Connections {
  readonly connections: [];
}

interface CreateBGPPeerRequest {
  readonly virtualInterfaceId: string;
  readonly newBGPPeer: NewBGPPeer;
}

interface CreateBGPPeerResponse {
  readonly virtualInterface: VirtualInterface;
}

interface CreateConnectionRequest {
  readonly location: string;
  readonly bandwidth: string;
  readonly connectionName: string;
  readonly lagId: string;
  readonly tags: [];
  readonly providerName: string;
  readonly requestMACSec: boolean;
}

interface CreateDirectConnectGatewayAssociationProposalRequest {
  readonly directConnectGatewayId: string;
  readonly directConnectGatewayOwnerAccount: string;
  readonly gatewayId: string;
  readonly addAllowedPrefixesToDirectConnectGateway: [];
  readonly removeAllowedPrefixesToDirectConnectGateway: [];
}

interface CreateDirectConnectGatewayAssociationProposalResult {
  readonly directConnectGatewayAssociationProposal: DirectConnectGatewayAssociationProposal;
}

interface CreateDirectConnectGatewayAssociationRequest {
  readonly directConnectGatewayId: string;
  readonly gatewayId: string;
  readonly addAllowedPrefixesToDirectConnectGateway: [];
  readonly virtualGatewayId: string;
}

interface CreateDirectConnectGatewayAssociationResult {
  readonly directConnectGatewayAssociation: DirectConnectGatewayAssociation;
}

interface CreateDirectConnectGatewayRequest {
  readonly directConnectGatewayName: string;
  readonly amazonSideAsn: number;
}

interface CreateDirectConnectGatewayResult {
  readonly directConnectGateway: DirectConnectGateway;
}

interface CreateInterconnectRequest {
  readonly interconnectName: string;
  readonly bandwidth: string;
  readonly location: string;
  readonly lagId: string;
  readonly tags: [];
  readonly providerName: string;
}

interface CreateLagRequest {
  readonly numberOfConnections: number;
  readonly location: string;
  readonly connectionsBandwidth: string;
  readonly lagName: string;
  readonly connectionId: string;
  readonly tags: [];
  readonly childConnectionTags: [];
  readonly providerName: string;
  readonly requestMACSec: boolean;
}

interface CreatePrivateVirtualInterfaceRequest {
  readonly connectionId: string;
  readonly newPrivateVirtualInterface: NewPrivateVirtualInterface;
}

interface CreatePublicVirtualInterfaceRequest {
  readonly connectionId: string;
  readonly newPublicVirtualInterface: NewPublicVirtualInterface;
}

interface CreateTransitVirtualInterfaceRequest {
  readonly connectionId: string;
  readonly newTransitVirtualInterface: NewTransitVirtualInterface;
}

interface CreateTransitVirtualInterfaceResult {
  readonly virtualInterface: VirtualInterface;
}

interface CustomerAgreement {
  readonly agreementName: string;
  readonly status: string;
}

interface DeleteBGPPeerRequest {
  readonly virtualInterfaceId: string;
  readonly asn: number;
  readonly customerAddress: string;
  readonly bgpPeerId: string;
}

interface DeleteBGPPeerResponse {
  readonly virtualInterface: VirtualInterface;
}

interface DeleteConnectionRequest {
  readonly connectionId: string;
}

interface DeleteDirectConnectGatewayAssociationProposalRequest {
  readonly proposalId: string;
}

interface DeleteDirectConnectGatewayAssociationProposalResult {
  readonly directConnectGatewayAssociationProposal: DirectConnectGatewayAssociationProposal;
}

interface DeleteDirectConnectGatewayAssociationRequest {
  readonly associationId: string;
  readonly directConnectGatewayId: string;
  readonly virtualGatewayId: string;
}

interface DeleteDirectConnectGatewayAssociationResult {
  readonly directConnectGatewayAssociation: DirectConnectGatewayAssociation;
}

interface DeleteDirectConnectGatewayRequest {
  readonly directConnectGatewayId: string;
}

interface DeleteDirectConnectGatewayResult {
  readonly directConnectGateway: DirectConnectGateway;
}

interface DeleteInterconnectRequest {
  readonly interconnectId: string;
}

interface DeleteInterconnectResponse {
  readonly interconnectState: string;
}

interface DeleteLagRequest {
  readonly lagId: string;
}

interface DeleteVirtualInterfaceRequest {
  readonly virtualInterfaceId: string;
}

interface DeleteVirtualInterfaceResponse {
  readonly virtualInterfaceState: string;
}

interface DescribeConnectionLoaRequest {
  readonly connectionId: string;
  readonly providerName: string;
  readonly loaContentType: string;
}

interface DescribeConnectionLoaResponse {
  readonly loa: Loa;
}

interface DescribeConnectionsOnInterconnectRequest {
  readonly interconnectId: string;
}

interface DescribeConnectionsRequest {
  readonly connectionId: string;
}

interface DescribeCustomerMetadataResponse {
  readonly agreements: [];
  readonly nniPartnerType: string;
}

interface DescribeDirectConnectGatewayAssociationProposalsRequest {
  readonly directConnectGatewayId: string;
  readonly proposalId: string;
  readonly associatedGatewayId: string;
  readonly maxResults: number;
  readonly nextToken: string;
}

interface DescribeDirectConnectGatewayAssociationProposalsResult {
  readonly directConnectGatewayAssociationProposals: [];
  readonly nextToken: string;
}

interface DescribeDirectConnectGatewayAssociationsRequest {
  readonly associationId: string;
  readonly associatedGatewayId: string;
  readonly directConnectGatewayId: string;
  readonly maxResults: number;
  readonly nextToken: string;
  readonly virtualGatewayId: string;
}

interface DescribeDirectConnectGatewayAssociationsResult {
  readonly directConnectGatewayAssociations: [];
  readonly nextToken: string;
}

interface DescribeDirectConnectGatewayAttachmentsRequest {
  readonly directConnectGatewayId: string;
  readonly virtualInterfaceId: string;
  readonly maxResults: number;
  readonly nextToken: string;
}

interface DescribeDirectConnectGatewayAttachmentsResult {
  readonly directConnectGatewayAttachments: [];
  readonly nextToken: string;
}

interface DescribeDirectConnectGatewaysRequest {
  readonly directConnectGatewayId: string;
  readonly maxResults: number;
  readonly nextToken: string;
}

interface DescribeDirectConnectGatewaysResult {
  readonly directConnectGateways: [];
  readonly nextToken: string;
}

interface DescribeHostedConnectionsRequest {
  readonly connectionId: string;
}

interface DescribeInterconnectLoaRequest {
  readonly interconnectId: string;
  readonly providerName: string;
  readonly loaContentType: string;
}

interface DescribeInterconnectLoaResponse {
  readonly loa: Loa;
}

interface DescribeInterconnectsRequest {
  readonly interconnectId: string;
}

interface DescribeLagsRequest {
  readonly lagId: string;
}

interface DescribeLoaRequest {
  readonly connectionId: string;
  readonly providerName: string;
  readonly loaContentType: string;
}

interface DescribeRouterConfigurationRequest {
  readonly virtualInterfaceId: string;
  readonly routerTypeIdentifier: string;
}

interface DescribeRouterConfigurationResponse {
  readonly customerRouterConfig: string;
  readonly router: RouterType;
  readonly virtualInterfaceId: string;
  readonly virtualInterfaceName: string;
}

interface DescribeTagsRequest {
  readonly resourceArns: [];
}

interface DescribeTagsResponse {
  readonly resourceTags: [];
}

interface DescribeVirtualInterfacesRequest {
  readonly connectionId: string;
  readonly virtualInterfaceId: string;
}

interface DirectConnectClientException {
  readonly message: string;
}

interface DirectConnectGateway {
  readonly directConnectGatewayId: string;
  readonly directConnectGatewayName: string;
  readonly amazonSideAsn: number;
  readonly ownerAccount: string;
  readonly directConnectGatewayState: string;
  readonly stateChangeError: string;
}

interface DirectConnectGatewayAssociation {
  readonly directConnectGatewayId: string;
  readonly directConnectGatewayOwnerAccount: string;
  readonly associationState: string;
  readonly stateChangeError: string;
  readonly associatedGateway: AssociatedGateway;
  readonly associationId: string;
  readonly allowedPrefixesToDirectConnectGateway: [];
  readonly virtualGatewayId: string;
  readonly virtualGatewayRegion: string;
  readonly virtualGatewayOwnerAccount: string;
}

interface DirectConnectGatewayAssociationProposal {
  readonly proposalId: string;
  readonly directConnectGatewayId: string;
  readonly directConnectGatewayOwnerAccount: string;
  readonly proposalState: string;
  readonly associatedGateway: AssociatedGateway;
  readonly existingAllowedPrefixesToDirectConnectGateway: [];
  readonly requestedAllowedPrefixesToDirectConnectGateway: [];
}

interface DirectConnectGatewayAttachment {
  readonly directConnectGatewayId: string;
  readonly virtualInterfaceId: string;
  readonly virtualInterfaceRegion: string;
  readonly virtualInterfaceOwnerAccount: string;
  readonly attachmentState: string;
  readonly attachmentType: string;
  readonly stateChangeError: string;
}

interface DirectConnectServerException {
  readonly message: string;
}

interface DisassociateConnectionFromLagRequest {
  readonly connectionId: string;
  readonly lagId: string;
}

interface DisassociateMacSecKeyRequest {
  readonly connectionId: string;
  readonly secretARN: string;
}

interface DisassociateMacSecKeyResponse {
  readonly connectionId: string;
  readonly macSecKeys: [];
}

interface DuplicateTagKeysException {
}

interface Interconnect {
  readonly interconnectId: string;
  readonly interconnectName: string;
  readonly interconnectState: string;
  readonly region: string;
  readonly location: string;
  readonly bandwidth: string;
  readonly loaIssueTime: Date;
  readonly lagId: string;
  readonly awsDevice: string;
  readonly jumboFrameCapable: boolean;
  readonly awsDeviceV2: string;
  readonly awsLogicalDeviceId: string;
  readonly hasLogicalRedundancy: string;
  readonly tags: [];
  readonly providerName: string;
}

interface Interconnects {
  readonly interconnects: [];
}

interface Lag {
  readonly connectionsBandwidth: string;
  readonly numberOfConnections: number;
  readonly lagId: string;
  readonly ownerAccount: string;
  readonly lagName: string;
  readonly lagState: string;
  readonly location: string;
  readonly region: string;
  readonly minimumLinks: number;
  readonly awsDevice: string;
  readonly awsDeviceV2: string;
  readonly awsLogicalDeviceId: string;
  readonly connections: [];
  readonly allowsHostedConnections: boolean;
  readonly jumboFrameCapable: boolean;
  readonly hasLogicalRedundancy: string;
  readonly tags: [];
  readonly providerName: string;
  readonly macSecCapable: boolean;
  readonly encryptionMode: string;
  readonly macSecKeys: [];
}

interface Lags {
  readonly lags: [];
}

interface ListVirtualInterfaceTestHistoryRequest {
  readonly testId: string;
  readonly virtualInterfaceId: string;
  readonly bgpPeers: [];
  readonly status: string;
  readonly maxResults: number;
  readonly nextToken: string;
}

interface ListVirtualInterfaceTestHistoryResponse {
  readonly virtualInterfaceTestHistory: [];
  readonly nextToken: string;
}

interface Loa {
  readonly loaContent: unknown;
  readonly loaContentType: string;
}

interface Location {
  readonly locationCode: string;
  readonly locationName: string;
  readonly region: string;
  readonly availablePortSpeeds: [];
  readonly availableProviders: [];
  readonly availableMacSecPortSpeeds: [];
}

interface Locations {
  readonly locations: [];
}

interface MacSecKey {
  readonly secretARN: string;
  readonly ckn: string;
  readonly state: string;
  readonly startOn: string;
}

interface NewBGPPeer {
  readonly asn: number;
  readonly authKey: string;
  readonly addressFamily: string;
  readonly amazonAddress: string;
  readonly customerAddress: string;
}

interface NewPrivateVirtualInterface {
  readonly virtualInterfaceName: string;
  readonly vlan: number;
  readonly asn: number;
  readonly mtu: number;
  readonly authKey: string;
  readonly amazonAddress: string;
  readonly customerAddress: string;
  readonly addressFamily: string;
  readonly virtualGatewayId: string;
  readonly directConnectGatewayId: string;
  readonly tags: [];
  readonly enableSiteLink: boolean;
}

interface NewPrivateVirtualInterfaceAllocation {
  readonly virtualInterfaceName: string;
  readonly vlan: number;
  readonly asn: number;
  readonly mtu: number;
  readonly authKey: string;
  readonly amazonAddress: string;
  readonly addressFamily: string;
  readonly customerAddress: string;
  readonly tags: [];
}

interface NewPublicVirtualInterface {
  readonly virtualInterfaceName: string;
  readonly vlan: number;
  readonly asn: number;
  readonly authKey: string;
  readonly amazonAddress: string;
  readonly customerAddress: string;
  readonly addressFamily: string;
  readonly routeFilterPrefixes: [];
  readonly tags: [];
}

interface NewPublicVirtualInterfaceAllocation {
  readonly virtualInterfaceName: string;
  readonly vlan: number;
  readonly asn: number;
  readonly authKey: string;
  readonly amazonAddress: string;
  readonly customerAddress: string;
  readonly addressFamily: string;
  readonly routeFilterPrefixes: [];
  readonly tags: [];
}

interface NewTransitVirtualInterface {
  readonly virtualInterfaceName: string;
  readonly vlan: number;
  readonly asn: number;
  readonly mtu: number;
  readonly authKey: string;
  readonly amazonAddress: string;
  readonly customerAddress: string;
  readonly addressFamily: string;
  readonly directConnectGatewayId: string;
  readonly tags: [];
  readonly enableSiteLink: boolean;
}

interface NewTransitVirtualInterfaceAllocation {
  readonly virtualInterfaceName: string;
  readonly vlan: number;
  readonly asn: number;
  readonly mtu: number;
  readonly authKey: string;
  readonly amazonAddress: string;
  readonly customerAddress: string;
  readonly addressFamily: string;
  readonly tags: [];
}

interface ResourceTag {
  readonly resourceArn: string;
  readonly tags: [];
}

interface RouteFilterPrefix {
  readonly cidr: string;
}

interface RouterType {
  readonly vendor: string;
  readonly platform: string;
  readonly software: string;
  readonly xsltTemplateName: string;
  readonly xsltTemplateNameForMacSec: string;
  readonly routerTypeIdentifier: string;
}

interface StartBgpFailoverTestRequest {
  readonly virtualInterfaceId: string;
  readonly bgpPeers: [];
  readonly testDurationInMinutes: number;
}

interface StartBgpFailoverTestResponse {
  readonly virtualInterfaceTest: VirtualInterfaceTestHistory;
}

interface StopBgpFailoverTestRequest {
  readonly virtualInterfaceId: string;
}

interface StopBgpFailoverTestResponse {
  readonly virtualInterfaceTest: VirtualInterfaceTestHistory;
}

interface Tag {
  readonly key: string;
  readonly value: string;
}

interface TagResourceRequest {
  readonly resourceArn: string;
  readonly tags: [];
}

interface TagResourceResponse {
}

interface TooManyTagsException {
}

interface UntagResourceRequest {
  readonly resourceArn: string;
  readonly tagKeys: [];
}

interface UntagResourceResponse {
}

interface UpdateConnectionRequest {
  readonly connectionId: string;
  readonly connectionName: string;
  readonly encryptionMode: string;
}

interface UpdateDirectConnectGatewayAssociationRequest {
  readonly associationId: string;
  readonly addAllowedPrefixesToDirectConnectGateway: [];
  readonly removeAllowedPrefixesToDirectConnectGateway: [];
}

interface UpdateDirectConnectGatewayAssociationResult {
  readonly directConnectGatewayAssociation: DirectConnectGatewayAssociation;
}

interface UpdateDirectConnectGatewayRequest {
  readonly directConnectGatewayId: string;
  readonly newDirectConnectGatewayName: string;
}

interface UpdateDirectConnectGatewayResponse {
  readonly directConnectGateway: DirectConnectGateway;
}

interface UpdateLagRequest {
  readonly lagId: string;
  readonly lagName: string;
  readonly minimumLinks: number;
  readonly encryptionMode: string;
}

interface UpdateVirtualInterfaceAttributesRequest {
  readonly virtualInterfaceId: string;
  readonly mtu: number;
  readonly enableSiteLink: boolean;
  readonly virtualInterfaceName: string;
}

interface VirtualGateway {
  readonly virtualGatewayId: string;
  readonly virtualGatewayState: string;
}

interface VirtualGateways {
  readonly virtualGateways: [];
}

interface VirtualInterface {
  readonly ownerAccount: string;
  readonly virtualInterfaceId: string;
  readonly location: string;
  readonly connectionId: string;
  readonly virtualInterfaceType: string;
  readonly virtualInterfaceName: string;
  readonly vlan: number;
  readonly asn: number;
  readonly amazonSideAsn: number;
  readonly authKey: string;
  readonly amazonAddress: string;
  readonly customerAddress: string;
  readonly addressFamily: string;
  readonly virtualInterfaceState: string;
  readonly customerRouterConfig: string;
  readonly mtu: number;
  readonly jumboFrameCapable: boolean;
  readonly virtualGatewayId: string;
  readonly directConnectGatewayId: string;
  readonly routeFilterPrefixes: [];
  readonly bgpPeers: [];
  readonly region: string;
  readonly awsDeviceV2: string;
  readonly awsLogicalDeviceId: string;
  readonly tags: [];
  readonly siteLinkEnabled: boolean;
}

interface VirtualInterfaceTestHistory {
  readonly testId: string;
  readonly virtualInterfaceId: string;
  readonly bgpPeers: [];
  readonly status: string;
  readonly ownerAccount: string;
  readonly testDurationInMinutes: number;
  readonly startTime: Date;
  readonly endTime: Date;
}

interface VirtualInterfaces {
  readonly virtualInterfaces: [];
}

