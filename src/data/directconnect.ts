/**
 * STOP. This file is autogenerated. DO NOT EDIT by hand
 */
export interface AcceptDirectConnectGatewayAssociationProposal {
  readonly directConnectGatewayId: string;
  readonly proposalId: string;
  readonly associatedGatewayOwnerAccount: string;
  readonly overrideAllowedPrefixesToDirectConnectGateway?: [];
}

export interface AllocateConnectionOnInterconnect {
  readonly bandwidth: string;
  readonly connectionName: string;
  readonly ownerAccount: string;
  readonly interconnectId: string;
  readonly vlan: number;
}

export interface AllocateHostedConnection {
  readonly connectionId: string;
  readonly ownerAccount: string;
  readonly bandwidth: string;
  readonly connectionName: string;
  readonly vlan: number;
  readonly tags?: [];
}

export interface AllocatePrivateVirtualInterface {
  readonly connectionId: string;
  readonly ownerAccount: string;
  readonly newPrivateVirtualInterfaceAllocation: NewPrivateVirtualInterfaceAllocation;
}

export interface AllocatePublicVirtualInterface {
  readonly connectionId: string;
  readonly ownerAccount: string;
  readonly newPublicVirtualInterfaceAllocation: NewPublicVirtualInterfaceAllocation;
}

export interface AllocateTransitVirtualInterface {
  readonly connectionId: string;
  readonly ownerAccount: string;
  readonly newTransitVirtualInterfaceAllocation: NewTransitVirtualInterfaceAllocation;
}

export interface AssociateConnectionWithLag {
  readonly connectionId: string;
  readonly lagId: string;
}

export interface AssociateHostedConnection {
  readonly connectionId: string;
  readonly parentConnectionId: string;
}

export interface AssociateMacSecKey {
  readonly connectionId: string;
  readonly secretARN?: string;
  readonly ckn?: string;
  readonly cak?: string;
}

export interface AssociateVirtualInterface {
  readonly virtualInterfaceId: string;
  readonly connectionId: string;
}

export interface ConfirmConnection {
  readonly connectionId: string;
}

export interface ConfirmCustomerAgreement {
  readonly agreementName?: string;
}

export interface ConfirmPrivateVirtualInterface {
  readonly virtualInterfaceId: string;
  readonly virtualGatewayId?: string;
  readonly directConnectGatewayId?: string;
}

export interface ConfirmPublicVirtualInterface {
  readonly virtualInterfaceId: string;
}

export interface ConfirmTransitVirtualInterface {
  readonly virtualInterfaceId: string;
  readonly directConnectGatewayId: string;
}

export interface CreateBGPPeer {
  readonly virtualInterfaceId?: string;
  readonly newBGPPeer?: NewBGPPeer;
}

export interface CreateConnection {
  readonly location: string;
  readonly bandwidth: string;
  readonly connectionName: string;
  readonly lagId?: string;
  readonly tags?: [];
  readonly providerName?: string;
  readonly requestMACSec?: boolean;
}

export interface CreateDirectConnectGateway {
  readonly directConnectGatewayName: string;
  readonly amazonSideAsn?: number;
}

export interface CreateDirectConnectGatewayAssociation {
  readonly directConnectGatewayId: string;
  readonly gatewayId?: string;
  readonly addAllowedPrefixesToDirectConnectGateway?: [];
  readonly virtualGatewayId?: string;
}

export interface CreateDirectConnectGatewayAssociationProposal {
  readonly directConnectGatewayId: string;
  readonly directConnectGatewayOwnerAccount: string;
  readonly gatewayId: string;
  readonly addAllowedPrefixesToDirectConnectGateway?: [];
  readonly removeAllowedPrefixesToDirectConnectGateway?: [];
}

export interface CreateInterconnect {
  readonly interconnectName: string;
  readonly bandwidth: string;
  readonly location: string;
  readonly lagId?: string;
  readonly tags?: [];
  readonly providerName?: string;
}

export interface CreateLag {
  readonly numberOfConnections: number;
  readonly location: string;
  readonly connectionsBandwidth: string;
  readonly lagName: string;
  readonly connectionId?: string;
  readonly tags?: [];
  readonly childConnectionTags?: [];
  readonly providerName?: string;
  readonly requestMACSec?: boolean;
}

export interface CreatePrivateVirtualInterface {
  readonly connectionId: string;
  readonly newPrivateVirtualInterface: NewPrivateVirtualInterface;
}

export interface CreatePublicVirtualInterface {
  readonly connectionId: string;
  readonly newPublicVirtualInterface: NewPublicVirtualInterface;
}

export interface CreateTransitVirtualInterface {
  readonly connectionId: string;
  readonly newTransitVirtualInterface: NewTransitVirtualInterface;
}

export interface DeleteBGPPeer {
  readonly virtualInterfaceId?: string;
  readonly asn?: number;
  readonly customerAddress?: string;
  readonly bgpPeerId?: string;
}

export interface DeleteConnection {
  readonly connectionId: string;
}

export interface DeleteDirectConnectGateway {
  readonly directConnectGatewayId: string;
}

export interface DeleteDirectConnectGatewayAssociation {
  readonly associationId?: string;
  readonly directConnectGatewayId?: string;
  readonly virtualGatewayId?: string;
}

export interface DeleteDirectConnectGatewayAssociationProposal {
  readonly proposalId: string;
}

export interface DeleteInterconnect {
  readonly interconnectId: string;
}

export interface DeleteLag {
  readonly lagId: string;
}

export interface DeleteVirtualInterface {
  readonly virtualInterfaceId: string;
}

export interface DescribeConnectionLoa {
  readonly connectionId: string;
  readonly providerName?: string;
  readonly loaContentType?: string;
}

export interface DescribeConnections {
  readonly connectionId?: string;
}

export interface DescribeConnectionsOnInterconnect {
  readonly interconnectId: string;
}

export interface DescribeDirectConnectGatewayAssociationProposals {
  readonly directConnectGatewayId?: string;
  readonly proposalId?: string;
  readonly associatedGatewayId?: string;
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface DescribeDirectConnectGatewayAssociations {
  readonly associationId?: string;
  readonly associatedGatewayId?: string;
  readonly directConnectGatewayId?: string;
  readonly maxResults?: number;
  readonly nextToken?: string;
  readonly virtualGatewayId?: string;
}

export interface DescribeDirectConnectGatewayAttachments {
  readonly directConnectGatewayId?: string;
  readonly virtualInterfaceId?: string;
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface DescribeDirectConnectGateways {
  readonly directConnectGatewayId?: string;
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface DescribeHostedConnections {
  readonly connectionId: string;
}

export interface DescribeInterconnectLoa {
  readonly interconnectId: string;
  readonly providerName?: string;
  readonly loaContentType?: string;
}

export interface DescribeInterconnects {
  readonly interconnectId?: string;
}

export interface DescribeLags {
  readonly lagId?: string;
}

export interface DescribeLoa {
  readonly connectionId: string;
  readonly providerName?: string;
  readonly loaContentType?: string;
}

export interface DescribeRouterConfiguration {
  readonly virtualInterfaceId: string;
  readonly routerTypeIdentifier?: string;
}

export interface DescribeTags {
  readonly resourceArns: [];
}

export interface DescribeVirtualInterfaces {
  readonly connectionId?: string;
  readonly virtualInterfaceId?: string;
}

export interface DisassociateConnectionFromLag {
  readonly connectionId: string;
  readonly lagId: string;
}

export interface DisassociateMacSecKey {
  readonly connectionId: string;
  readonly secretARN: string;
}

export interface ListVirtualInterfaceTestHistory {
  readonly testId?: string;
  readonly virtualInterfaceId?: string;
  readonly bgpPeers?: [];
  readonly status?: string;
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface StartBgpFailoverTest {
  readonly virtualInterfaceId: string;
  readonly bgpPeers?: [];
  readonly testDurationInMinutes?: number;
}

export interface StopBgpFailoverTest {
  readonly virtualInterfaceId: string;
}

export interface TagResource {
  readonly resourceArn: string;
  readonly tags: [];
}

export interface UntagResource {
  readonly resourceArn: string;
  readonly tagKeys: [];
}

export interface UpdateConnection {
  readonly connectionId: string;
  readonly connectionName?: string;
  readonly encryptionMode?: string;
}

export interface UpdateDirectConnectGateway {
  readonly directConnectGatewayId: string;
  readonly newDirectConnectGatewayName: string;
}

export interface UpdateDirectConnectGatewayAssociation {
  readonly associationId?: string;
  readonly addAllowedPrefixesToDirectConnectGateway?: [];
  readonly removeAllowedPrefixesToDirectConnectGateway?: [];
}

export interface UpdateLag {
  readonly lagId: string;
  readonly lagName?: string;
  readonly minimumLinks?: number;
  readonly encryptionMode?: string;
}

export interface UpdateVirtualInterfaceAttributes {
  readonly virtualInterfaceId: string;
  readonly mtu?: number;
  readonly enableSiteLink?: boolean;
  readonly virtualInterfaceName?: string;
}

export interface AcceptDirectConnectGatewayAssociationProposalRequest {
  readonly directConnectGatewayId: string;
  readonly proposalId: string;
  readonly associatedGatewayOwnerAccount: string;
  readonly overrideAllowedPrefixesToDirectConnectGateway?: [];
}

export interface AcceptDirectConnectGatewayAssociationProposalResult {
  readonly directConnectGatewayAssociation?: DirectConnectGatewayAssociation;
}

export interface AllocateConnectionOnInterconnectRequest {
  readonly bandwidth: string;
  readonly connectionName: string;
  readonly ownerAccount: string;
  readonly interconnectId: string;
  readonly vlan: number;
}

export interface AllocateHostedConnectionRequest {
  readonly connectionId: string;
  readonly ownerAccount: string;
  readonly bandwidth: string;
  readonly connectionName: string;
  readonly vlan: number;
  readonly tags?: [];
}

export interface AllocatePrivateVirtualInterfaceRequest {
  readonly connectionId: string;
  readonly ownerAccount: string;
  readonly newPrivateVirtualInterfaceAllocation: NewPrivateVirtualInterfaceAllocation;
}

export interface AllocatePublicVirtualInterfaceRequest {
  readonly connectionId: string;
  readonly ownerAccount: string;
  readonly newPublicVirtualInterfaceAllocation: NewPublicVirtualInterfaceAllocation;
}

export interface AllocateTransitVirtualInterfaceRequest {
  readonly connectionId: string;
  readonly ownerAccount: string;
  readonly newTransitVirtualInterfaceAllocation: NewTransitVirtualInterfaceAllocation;
}

export interface AllocateTransitVirtualInterfaceResult {
  readonly virtualInterface?: VirtualInterface;
}

export interface AssociateConnectionWithLagRequest {
  readonly connectionId: string;
  readonly lagId: string;
}

export interface AssociateHostedConnectionRequest {
  readonly connectionId: string;
  readonly parentConnectionId: string;
}

export interface AssociateMacSecKeyRequest {
  readonly connectionId: string;
  readonly secretARN?: string;
  readonly ckn?: string;
  readonly cak?: string;
}

export interface AssociateMacSecKeyResponse {
  readonly connectionId?: string;
  readonly macSecKeys?: [];
}

export interface AssociateVirtualInterfaceRequest {
  readonly virtualInterfaceId: string;
  readonly connectionId: string;
}

export interface AssociatedGateway {
  readonly id?: string;
  readonly type?: string;
  readonly ownerAccount?: string;
  readonly region?: string;
}

export interface BGPPeer {
  readonly bgpPeerId?: string;
  readonly asn?: number;
  readonly authKey?: string;
  readonly addressFamily?: string;
  readonly amazonAddress?: string;
  readonly customerAddress?: string;
  readonly bgpPeerState?: string;
  readonly bgpStatus?: string;
  readonly awsDeviceV2?: string;
  readonly awsLogicalDeviceId?: string;
}

export interface ConfirmConnectionRequest {
  readonly connectionId: string;
}

export interface ConfirmConnectionResponse {
  readonly connectionState?: string;
}

export interface ConfirmCustomerAgreementRequest {
  readonly agreementName?: string;
}

export interface ConfirmCustomerAgreementResponse {
  readonly status?: string;
}

export interface ConfirmPrivateVirtualInterfaceRequest {
  readonly virtualInterfaceId: string;
  readonly virtualGatewayId?: string;
  readonly directConnectGatewayId?: string;
}

export interface ConfirmPrivateVirtualInterfaceResponse {
  readonly virtualInterfaceState?: string;
}

export interface ConfirmPublicVirtualInterfaceRequest {
  readonly virtualInterfaceId: string;
}

export interface ConfirmPublicVirtualInterfaceResponse {
  readonly virtualInterfaceState?: string;
}

export interface ConfirmTransitVirtualInterfaceRequest {
  readonly virtualInterfaceId: string;
  readonly directConnectGatewayId: string;
}

export interface ConfirmTransitVirtualInterfaceResponse {
  readonly virtualInterfaceState?: string;
}

export interface Connection {
  readonly ownerAccount?: string;
  readonly connectionId?: string;
  readonly connectionName?: string;
  readonly connectionState?: string;
  readonly region?: string;
  readonly location?: string;
  readonly bandwidth?: string;
  readonly vlan?: number;
  readonly partnerName?: string;
  readonly loaIssueTime?: Date;
  readonly lagId?: string;
  readonly awsDevice?: string;
  readonly jumboFrameCapable?: boolean;
  readonly awsDeviceV2?: string;
  readonly awsLogicalDeviceId?: string;
  readonly hasLogicalRedundancy?: string;
  readonly tags?: [];
  readonly providerName?: string;
  readonly macSecCapable?: boolean;
  readonly portEncryptionStatus?: string;
  readonly encryptionMode?: string;
  readonly macSecKeys?: [];
}

export interface Connections {
  readonly connections?: [];
}

export interface CreateBGPPeerRequest {
  readonly virtualInterfaceId?: string;
  readonly newBGPPeer?: NewBGPPeer;
}

export interface CreateBGPPeerResponse {
  readonly virtualInterface?: VirtualInterface;
}

export interface CreateConnectionRequest {
  readonly location: string;
  readonly bandwidth: string;
  readonly connectionName: string;
  readonly lagId?: string;
  readonly tags?: [];
  readonly providerName?: string;
  readonly requestMACSec?: boolean;
}

export interface CreateDirectConnectGatewayAssociationProposalRequest {
  readonly directConnectGatewayId: string;
  readonly directConnectGatewayOwnerAccount: string;
  readonly gatewayId: string;
  readonly addAllowedPrefixesToDirectConnectGateway?: [];
  readonly removeAllowedPrefixesToDirectConnectGateway?: [];
}

export interface CreateDirectConnectGatewayAssociationProposalResult {
  readonly directConnectGatewayAssociationProposal?: DirectConnectGatewayAssociationProposal;
}

export interface CreateDirectConnectGatewayAssociationRequest {
  readonly directConnectGatewayId: string;
  readonly gatewayId?: string;
  readonly addAllowedPrefixesToDirectConnectGateway?: [];
  readonly virtualGatewayId?: string;
}

export interface CreateDirectConnectGatewayAssociationResult {
  readonly directConnectGatewayAssociation?: DirectConnectGatewayAssociation;
}

export interface CreateDirectConnectGatewayRequest {
  readonly directConnectGatewayName: string;
  readonly amazonSideAsn?: number;
}

export interface CreateDirectConnectGatewayResult {
  readonly directConnectGateway?: DirectConnectGateway;
}

export interface CreateInterconnectRequest {
  readonly interconnectName: string;
  readonly bandwidth: string;
  readonly location: string;
  readonly lagId?: string;
  readonly tags?: [];
  readonly providerName?: string;
}

export interface CreateLagRequest {
  readonly numberOfConnections: number;
  readonly location: string;
  readonly connectionsBandwidth: string;
  readonly lagName: string;
  readonly connectionId?: string;
  readonly tags?: [];
  readonly childConnectionTags?: [];
  readonly providerName?: string;
  readonly requestMACSec?: boolean;
}

export interface CreatePrivateVirtualInterfaceRequest {
  readonly connectionId: string;
  readonly newPrivateVirtualInterface: NewPrivateVirtualInterface;
}

export interface CreatePublicVirtualInterfaceRequest {
  readonly connectionId: string;
  readonly newPublicVirtualInterface: NewPublicVirtualInterface;
}

export interface CreateTransitVirtualInterfaceRequest {
  readonly connectionId: string;
  readonly newTransitVirtualInterface: NewTransitVirtualInterface;
}

export interface CreateTransitVirtualInterfaceResult {
  readonly virtualInterface?: VirtualInterface;
}

export interface CustomerAgreement {
  readonly agreementName?: string;
  readonly status?: string;
}

export interface DeleteBGPPeerRequest {
  readonly virtualInterfaceId?: string;
  readonly asn?: number;
  readonly customerAddress?: string;
  readonly bgpPeerId?: string;
}

export interface DeleteBGPPeerResponse {
  readonly virtualInterface?: VirtualInterface;
}

export interface DeleteConnectionRequest {
  readonly connectionId: string;
}

export interface DeleteDirectConnectGatewayAssociationProposalRequest {
  readonly proposalId: string;
}

export interface DeleteDirectConnectGatewayAssociationProposalResult {
  readonly directConnectGatewayAssociationProposal?: DirectConnectGatewayAssociationProposal;
}

export interface DeleteDirectConnectGatewayAssociationRequest {
  readonly associationId?: string;
  readonly directConnectGatewayId?: string;
  readonly virtualGatewayId?: string;
}

export interface DeleteDirectConnectGatewayAssociationResult {
  readonly directConnectGatewayAssociation?: DirectConnectGatewayAssociation;
}

export interface DeleteDirectConnectGatewayRequest {
  readonly directConnectGatewayId: string;
}

export interface DeleteDirectConnectGatewayResult {
  readonly directConnectGateway?: DirectConnectGateway;
}

export interface DeleteInterconnectRequest {
  readonly interconnectId: string;
}

export interface DeleteInterconnectResponse {
  readonly interconnectState?: string;
}

export interface DeleteLagRequest {
  readonly lagId: string;
}

export interface DeleteVirtualInterfaceRequest {
  readonly virtualInterfaceId: string;
}

export interface DeleteVirtualInterfaceResponse {
  readonly virtualInterfaceState?: string;
}

export interface DescribeConnectionLoaRequest {
  readonly connectionId: string;
  readonly providerName?: string;
  readonly loaContentType?: string;
}

export interface DescribeConnectionLoaResponse {
  readonly loa?: Loa;
}

export interface DescribeConnectionsOnInterconnectRequest {
  readonly interconnectId: string;
}

export interface DescribeConnectionsRequest {
  readonly connectionId?: string;
}

export interface DescribeCustomerMetadataResponse {
  readonly agreements?: [];
  readonly nniPartnerType?: string;
}

export interface DescribeDirectConnectGatewayAssociationProposalsRequest {
  readonly directConnectGatewayId?: string;
  readonly proposalId?: string;
  readonly associatedGatewayId?: string;
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface DescribeDirectConnectGatewayAssociationProposalsResult {
  readonly directConnectGatewayAssociationProposals?: [];
  readonly nextToken?: string;
}

export interface DescribeDirectConnectGatewayAssociationsRequest {
  readonly associationId?: string;
  readonly associatedGatewayId?: string;
  readonly directConnectGatewayId?: string;
  readonly maxResults?: number;
  readonly nextToken?: string;
  readonly virtualGatewayId?: string;
}

export interface DescribeDirectConnectGatewayAssociationsResult {
  readonly directConnectGatewayAssociations?: [];
  readonly nextToken?: string;
}

export interface DescribeDirectConnectGatewayAttachmentsRequest {
  readonly directConnectGatewayId?: string;
  readonly virtualInterfaceId?: string;
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface DescribeDirectConnectGatewayAttachmentsResult {
  readonly directConnectGatewayAttachments?: [];
  readonly nextToken?: string;
}

export interface DescribeDirectConnectGatewaysRequest {
  readonly directConnectGatewayId?: string;
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface DescribeDirectConnectGatewaysResult {
  readonly directConnectGateways?: [];
  readonly nextToken?: string;
}

export interface DescribeHostedConnectionsRequest {
  readonly connectionId: string;
}

export interface DescribeInterconnectLoaRequest {
  readonly interconnectId: string;
  readonly providerName?: string;
  readonly loaContentType?: string;
}

export interface DescribeInterconnectLoaResponse {
  readonly loa?: Loa;
}

export interface DescribeInterconnectsRequest {
  readonly interconnectId?: string;
}

export interface DescribeLagsRequest {
  readonly lagId?: string;
}

export interface DescribeLoaRequest {
  readonly connectionId: string;
  readonly providerName?: string;
  readonly loaContentType?: string;
}

export interface DescribeRouterConfigurationRequest {
  readonly virtualInterfaceId: string;
  readonly routerTypeIdentifier?: string;
}

export interface DescribeRouterConfigurationResponse {
  readonly customerRouterConfig?: string;
  readonly router?: RouterType;
  readonly virtualInterfaceId?: string;
  readonly virtualInterfaceName?: string;
}

export interface DescribeTagsRequest {
  readonly resourceArns: [];
}

export interface DescribeTagsResponse {
  readonly resourceTags?: [];
}

export interface DescribeVirtualInterfacesRequest {
  readonly connectionId?: string;
  readonly virtualInterfaceId?: string;
}

export interface DirectConnectClientException {
  readonly message?: string;
}

export interface DirectConnectGateway {
  readonly directConnectGatewayId?: string;
  readonly directConnectGatewayName?: string;
  readonly amazonSideAsn?: number;
  readonly ownerAccount?: string;
  readonly directConnectGatewayState?: string;
  readonly stateChangeError?: string;
}

export interface DirectConnectGatewayAssociation {
  readonly directConnectGatewayId?: string;
  readonly directConnectGatewayOwnerAccount?: string;
  readonly associationState?: string;
  readonly stateChangeError?: string;
  readonly associatedGateway?: AssociatedGateway;
  readonly associationId?: string;
  readonly allowedPrefixesToDirectConnectGateway?: [];
  readonly virtualGatewayId?: string;
  readonly virtualGatewayRegion?: string;
  readonly virtualGatewayOwnerAccount?: string;
}

export interface DirectConnectGatewayAssociationProposal {
  readonly proposalId?: string;
  readonly directConnectGatewayId?: string;
  readonly directConnectGatewayOwnerAccount?: string;
  readonly proposalState?: string;
  readonly associatedGateway?: AssociatedGateway;
  readonly existingAllowedPrefixesToDirectConnectGateway?: [];
  readonly requestedAllowedPrefixesToDirectConnectGateway?: [];
}

export interface DirectConnectGatewayAttachment {
  readonly directConnectGatewayId?: string;
  readonly virtualInterfaceId?: string;
  readonly virtualInterfaceRegion?: string;
  readonly virtualInterfaceOwnerAccount?: string;
  readonly attachmentState?: string;
  readonly attachmentType?: string;
  readonly stateChangeError?: string;
}

export interface DirectConnectServerException {
  readonly message?: string;
}

export interface DisassociateConnectionFromLagRequest {
  readonly connectionId: string;
  readonly lagId: string;
}

export interface DisassociateMacSecKeyRequest {
  readonly connectionId: string;
  readonly secretARN: string;
}

export interface DisassociateMacSecKeyResponse {
  readonly connectionId?: string;
  readonly macSecKeys?: [];
}

export interface DuplicateTagKeysException {
}

export interface Interconnect {
  readonly interconnectId?: string;
  readonly interconnectName?: string;
  readonly interconnectState?: string;
  readonly region?: string;
  readonly location?: string;
  readonly bandwidth?: string;
  readonly loaIssueTime?: Date;
  readonly lagId?: string;
  readonly awsDevice?: string;
  readonly jumboFrameCapable?: boolean;
  readonly awsDeviceV2?: string;
  readonly awsLogicalDeviceId?: string;
  readonly hasLogicalRedundancy?: string;
  readonly tags?: [];
  readonly providerName?: string;
}

export interface Interconnects {
  readonly interconnects?: [];
}

export interface Lag {
  readonly connectionsBandwidth?: string;
  readonly numberOfConnections?: number;
  readonly lagId?: string;
  readonly ownerAccount?: string;
  readonly lagName?: string;
  readonly lagState?: string;
  readonly location?: string;
  readonly region?: string;
  readonly minimumLinks?: number;
  readonly awsDevice?: string;
  readonly awsDeviceV2?: string;
  readonly awsLogicalDeviceId?: string;
  readonly connections?: [];
  readonly allowsHostedConnections?: boolean;
  readonly jumboFrameCapable?: boolean;
  readonly hasLogicalRedundancy?: string;
  readonly tags?: [];
  readonly providerName?: string;
  readonly macSecCapable?: boolean;
  readonly encryptionMode?: string;
  readonly macSecKeys?: [];
}

export interface Lags {
  readonly lags?: [];
}

export interface ListVirtualInterfaceTestHistoryRequest {
  readonly testId?: string;
  readonly virtualInterfaceId?: string;
  readonly bgpPeers?: [];
  readonly status?: string;
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface ListVirtualInterfaceTestHistoryResponse {
  readonly virtualInterfaceTestHistory?: [];
  readonly nextToken?: string;
}

export interface Loa {
  readonly loaContent?: unknown;
  readonly loaContentType?: string;
}

export interface Location {
  readonly locationCode?: string;
  readonly locationName?: string;
  readonly region?: string;
  readonly availablePortSpeeds?: [];
  readonly availableProviders?: [];
  readonly availableMacSecPortSpeeds?: [];
}

export interface Locations {
  readonly locations?: [];
}

export interface MacSecKey {
  readonly secretARN?: string;
  readonly ckn?: string;
  readonly state?: string;
  readonly startOn?: string;
}

export interface NewBGPPeer {
  readonly asn?: number;
  readonly authKey?: string;
  readonly addressFamily?: string;
  readonly amazonAddress?: string;
  readonly customerAddress?: string;
}

export interface NewPrivateVirtualInterface {
  readonly virtualInterfaceName: string;
  readonly vlan: number;
  readonly asn: number;
  readonly mtu?: number;
  readonly authKey?: string;
  readonly amazonAddress?: string;
  readonly customerAddress?: string;
  readonly addressFamily?: string;
  readonly virtualGatewayId?: string;
  readonly directConnectGatewayId?: string;
  readonly tags?: [];
  readonly enableSiteLink?: boolean;
}

export interface NewPrivateVirtualInterfaceAllocation {
  readonly virtualInterfaceName: string;
  readonly vlan: number;
  readonly asn: number;
  readonly mtu?: number;
  readonly authKey?: string;
  readonly amazonAddress?: string;
  readonly addressFamily?: string;
  readonly customerAddress?: string;
  readonly tags?: [];
}

export interface NewPublicVirtualInterface {
  readonly virtualInterfaceName: string;
  readonly vlan: number;
  readonly asn: number;
  readonly authKey?: string;
  readonly amazonAddress?: string;
  readonly customerAddress?: string;
  readonly addressFamily?: string;
  readonly routeFilterPrefixes?: [];
  readonly tags?: [];
}

export interface NewPublicVirtualInterfaceAllocation {
  readonly virtualInterfaceName: string;
  readonly vlan: number;
  readonly asn: number;
  readonly authKey?: string;
  readonly amazonAddress?: string;
  readonly customerAddress?: string;
  readonly addressFamily?: string;
  readonly routeFilterPrefixes?: [];
  readonly tags?: [];
}

export interface NewTransitVirtualInterface {
  readonly virtualInterfaceName?: string;
  readonly vlan?: number;
  readonly asn?: number;
  readonly mtu?: number;
  readonly authKey?: string;
  readonly amazonAddress?: string;
  readonly customerAddress?: string;
  readonly addressFamily?: string;
  readonly directConnectGatewayId?: string;
  readonly tags?: [];
  readonly enableSiteLink?: boolean;
}

export interface NewTransitVirtualInterfaceAllocation {
  readonly virtualInterfaceName?: string;
  readonly vlan?: number;
  readonly asn?: number;
  readonly mtu?: number;
  readonly authKey?: string;
  readonly amazonAddress?: string;
  readonly customerAddress?: string;
  readonly addressFamily?: string;
  readonly tags?: [];
}

export interface ResourceTag {
  readonly resourceArn?: string;
  readonly tags?: [];
}

export interface RouteFilterPrefix {
  readonly cidr?: string;
}

export interface RouterType {
  readonly vendor?: string;
  readonly platform?: string;
  readonly software?: string;
  readonly xsltTemplateName?: string;
  readonly xsltTemplateNameForMacSec?: string;
  readonly routerTypeIdentifier?: string;
}

export interface StartBgpFailoverTestRequest {
  readonly virtualInterfaceId: string;
  readonly bgpPeers?: [];
  readonly testDurationInMinutes?: number;
}

export interface StartBgpFailoverTestResponse {
  readonly virtualInterfaceTest?: VirtualInterfaceTestHistory;
}

export interface StopBgpFailoverTestRequest {
  readonly virtualInterfaceId: string;
}

export interface StopBgpFailoverTestResponse {
  readonly virtualInterfaceTest?: VirtualInterfaceTestHistory;
}

export interface Tag {
  readonly key: string;
  readonly value?: string;
}

export interface TagResourceRequest {
  readonly resourceArn: string;
  readonly tags: [];
}

export interface TagResourceResponse {
}

export interface TooManyTagsException {
}

export interface UntagResourceRequest {
  readonly resourceArn: string;
  readonly tagKeys: [];
}

export interface UntagResourceResponse {
}

export interface UpdateConnectionRequest {
  readonly connectionId: string;
  readonly connectionName?: string;
  readonly encryptionMode?: string;
}

export interface UpdateDirectConnectGatewayAssociationRequest {
  readonly associationId?: string;
  readonly addAllowedPrefixesToDirectConnectGateway?: [];
  readonly removeAllowedPrefixesToDirectConnectGateway?: [];
}

export interface UpdateDirectConnectGatewayAssociationResult {
  readonly directConnectGatewayAssociation?: DirectConnectGatewayAssociation;
}

export interface UpdateDirectConnectGatewayRequest {
  readonly directConnectGatewayId: string;
  readonly newDirectConnectGatewayName: string;
}

export interface UpdateDirectConnectGatewayResponse {
  readonly directConnectGateway?: DirectConnectGateway;
}

export interface UpdateLagRequest {
  readonly lagId: string;
  readonly lagName?: string;
  readonly minimumLinks?: number;
  readonly encryptionMode?: string;
}

export interface UpdateVirtualInterfaceAttributesRequest {
  readonly virtualInterfaceId: string;
  readonly mtu?: number;
  readonly enableSiteLink?: boolean;
  readonly virtualInterfaceName?: string;
}

export interface VirtualGateway {
  readonly virtualGatewayId?: string;
  readonly virtualGatewayState?: string;
}

export interface VirtualGateways {
  readonly virtualGateways?: [];
}

export interface VirtualInterface {
  readonly ownerAccount?: string;
  readonly virtualInterfaceId?: string;
  readonly location?: string;
  readonly connectionId?: string;
  readonly virtualInterfaceType?: string;
  readonly virtualInterfaceName?: string;
  readonly vlan?: number;
  readonly asn?: number;
  readonly amazonSideAsn?: number;
  readonly authKey?: string;
  readonly amazonAddress?: string;
  readonly customerAddress?: string;
  readonly addressFamily?: string;
  readonly virtualInterfaceState?: string;
  readonly customerRouterConfig?: string;
  readonly mtu?: number;
  readonly jumboFrameCapable?: boolean;
  readonly virtualGatewayId?: string;
  readonly directConnectGatewayId?: string;
  readonly routeFilterPrefixes?: [];
  readonly bgpPeers?: [];
  readonly region?: string;
  readonly awsDeviceV2?: string;
  readonly awsLogicalDeviceId?: string;
  readonly tags?: [];
  readonly siteLinkEnabled?: boolean;
}

export interface VirtualInterfaceTestHistory {
  readonly testId?: string;
  readonly virtualInterfaceId?: string;
  readonly bgpPeers?: [];
  readonly status?: string;
  readonly ownerAccount?: string;
  readonly testDurationInMinutes?: number;
  readonly startTime?: Date;
  readonly endTime?: Date;
}

export interface VirtualInterfaces {
  readonly virtualInterfaces?: [];
}


