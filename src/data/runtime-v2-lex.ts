/**
 * STOP. This file is autogenerated. DO NOT EDIT by hand
 */
export interface DeleteSession {
  readonly botId: string;
  readonly botAliasId: string;
  readonly localeId: string;
  readonly sessionId: string;
}
export interface GetSession {
  readonly botId: string;
  readonly botAliasId: string;
  readonly localeId: string;
  readonly sessionId: string;
}
export interface PutSession {
  readonly botId: string;
  readonly botAliasId: string;
  readonly localeId: string;
  readonly sessionId: string;
  readonly messages?: [];
  readonly sessionState: SessionState;
  readonly requestAttributes?: {[key: string]: any};
  readonly responseContentType?: string;
}
export interface RecognizeText {
  readonly botId: string;
  readonly botAliasId: string;
  readonly localeId: string;
  readonly sessionId: string;
  readonly text: string;
  readonly sessionState?: SessionState;
  readonly requestAttributes?: {[key: string]: any};
}
export interface RecognizeUtterance {
  readonly botId: string;
  readonly botAliasId: string;
  readonly localeId: string;
  readonly sessionId: string;
  readonly sessionState?: string;
  readonly requestAttributes?: string;
  readonly requestContentType: string;
  readonly responseContentType?: string;
  readonly inputStream?: unknown;
}
export interface StartConversation {
  readonly botId: string;
  readonly botAliasId: string;
  readonly localeId: string;
  readonly sessionId: string;
  readonly conversationMode?: string;
  readonly requestEventStream: StartConversationRequestEventStream;
}



interface AccessDeniedException {
  readonly message: string;
}

interface ActiveContext {
  readonly name: string;
  readonly timeToLive: ActiveContextTimeToLive;
  readonly contextAttributes: {[key: string]: any};
}

interface ActiveContextTimeToLive {
  readonly timeToLiveInSeconds: number;
  readonly turnsToLive: number;
}

interface AudioInputEvent {
  readonly audioChunk: unknown;
  readonly contentType: string;
  readonly eventId: string;
  readonly clientTimestampMillis: number;
}

interface AudioResponseEvent {
  readonly audioChunk: unknown;
  readonly contentType: string;
  readonly eventId: string;
}

interface BadGatewayException {
  readonly message: string;
}

interface Button {
  readonly text: string;
  readonly value: string;
}

interface ConfidenceScore {
  readonly score: unknown;
}

interface ConfigurationEvent {
  readonly requestAttributes: {[key: string]: any};
  readonly responseContentType: string;
  readonly sessionState: SessionState;
  readonly welcomeMessages: [];
  readonly disablePlayback: boolean;
  readonly eventId: string;
  readonly clientTimestampMillis: number;
}

interface ConflictException {
  readonly message: string;
}

interface DTMFInputEvent {
  readonly inputCharacter: string;
  readonly eventId: string;
  readonly clientTimestampMillis: number;
}

interface DeleteSessionRequest {
  readonly botId: string;
  readonly botAliasId: string;
  readonly localeId: string;
  readonly sessionId: string;
}

interface DeleteSessionResponse {
  readonly botId: string;
  readonly botAliasId: string;
  readonly localeId: string;
  readonly sessionId: string;
}

interface DependencyFailedException {
  readonly message: string;
}

interface DialogAction {
  readonly type: string;
  readonly slotToElicit: string;
  readonly slotElicitationStyle: string;
}

interface DisconnectionEvent {
  readonly eventId: string;
  readonly clientTimestampMillis: number;
}

interface GetSessionRequest {
  readonly botId: string;
  readonly botAliasId: string;
  readonly localeId: string;
  readonly sessionId: string;
}

interface GetSessionResponse {
  readonly sessionId: string;
  readonly messages: [];
  readonly interpretations: [];
  readonly sessionState: SessionState;
}

interface HeartbeatEvent {
  readonly eventId: string;
}

interface ImageResponseCard {
  readonly title: string;
  readonly subtitle: string;
  readonly imageUrl: string;
  readonly buttons: [];
}

interface Intent {
  readonly name: string;
  readonly slots: {[key: string]: any};
  readonly state: string;
  readonly confirmationState: string;
}

interface IntentResultEvent {
  readonly inputMode: string;
  readonly interpretations: [];
  readonly sessionState: SessionState;
  readonly requestAttributes: {[key: string]: any};
  readonly sessionId: string;
  readonly eventId: string;
}

interface InternalServerException {
  readonly message: string;
}

interface Interpretation {
  readonly nluConfidence: ConfidenceScore;
  readonly sentimentResponse: SentimentResponse;
  readonly intent: Intent;
}

interface Message {
  readonly content: string;
  readonly contentType: string;
  readonly imageResponseCard: ImageResponseCard;
}

interface PlaybackCompletionEvent {
  readonly eventId: string;
  readonly clientTimestampMillis: number;
}

interface PlaybackInterruptionEvent {
  readonly eventReason: string;
  readonly causedByEventId: string;
  readonly eventId: string;
}

interface PutSessionRequest {
  readonly botId: string;
  readonly botAliasId: string;
  readonly localeId: string;
  readonly sessionId: string;
  readonly messages: [];
  readonly sessionState: SessionState;
  readonly requestAttributes: {[key: string]: any};
  readonly responseContentType: string;
}

interface PutSessionResponse {
  readonly contentType: string;
  readonly messages: string;
  readonly sessionState: string;
  readonly requestAttributes: string;
  readonly sessionId: string;
  readonly audioStream: unknown;
}

interface RecognizeTextRequest {
  readonly botId: string;
  readonly botAliasId: string;
  readonly localeId: string;
  readonly sessionId: string;
  readonly text: string;
  readonly sessionState: SessionState;
  readonly requestAttributes: {[key: string]: any};
}

interface RecognizeTextResponse {
  readonly messages: [];
  readonly sessionState: SessionState;
  readonly interpretations: [];
  readonly requestAttributes: {[key: string]: any};
  readonly sessionId: string;
}

interface RecognizeUtteranceRequest {
  readonly botId: string;
  readonly botAliasId: string;
  readonly localeId: string;
  readonly sessionId: string;
  readonly sessionState: string;
  readonly requestAttributes: string;
  readonly requestContentType: string;
  readonly responseContentType: string;
  readonly inputStream: unknown;
}

interface RecognizeUtteranceResponse {
  readonly inputMode: string;
  readonly contentType: string;
  readonly messages: string;
  readonly interpretations: string;
  readonly sessionState: string;
  readonly requestAttributes: string;
  readonly sessionId: string;
  readonly inputTranscript: string;
  readonly audioStream: unknown;
}

interface ResourceNotFoundException {
  readonly message: string;
}

interface SentimentResponse {
  readonly sentiment: string;
  readonly sentimentScore: SentimentScore;
}

interface SentimentScore {
  readonly positive: unknown;
  readonly negative: unknown;
  readonly neutral: unknown;
  readonly mixed: unknown;
}

interface SessionState {
  readonly dialogAction: DialogAction;
  readonly intent: Intent;
  readonly activeContexts: [];
  readonly sessionAttributes: {[key: string]: any};
  readonly originatingRequestId: string;
}

interface Slot {
  readonly value: Value;
  readonly shape: string;
  readonly values: [];
}

interface StartConversationRequest {
  readonly botId: string;
  readonly botAliasId: string;
  readonly localeId: string;
  readonly sessionId: string;
  readonly conversationMode: string;
  readonly requestEventStream: StartConversationRequestEventStream;
}

interface StartConversationRequestEventStream {
  readonly ConfigurationEvent: ConfigurationEvent;
  readonly AudioInputEvent: AudioInputEvent;
  readonly DTMFInputEvent: DTMFInputEvent;
  readonly TextInputEvent: TextInputEvent;
  readonly PlaybackCompletionEvent: PlaybackCompletionEvent;
  readonly DisconnectionEvent: DisconnectionEvent;
}

interface StartConversationResponse {
  readonly responseEventStream: StartConversationResponseEventStream;
}

interface StartConversationResponseEventStream {
  readonly PlaybackInterruptionEvent: PlaybackInterruptionEvent;
  readonly TranscriptEvent: TranscriptEvent;
  readonly IntentResultEvent: IntentResultEvent;
  readonly TextResponseEvent: TextResponseEvent;
  readonly AudioResponseEvent: AudioResponseEvent;
  readonly HeartbeatEvent: HeartbeatEvent;
  readonly AccessDeniedException: AccessDeniedException;
  readonly ResourceNotFoundException: ResourceNotFoundException;
  readonly ValidationException: ValidationException;
  readonly ThrottlingException: ThrottlingException;
  readonly InternalServerException: InternalServerException;
  readonly ConflictException: ConflictException;
  readonly DependencyFailedException: DependencyFailedException;
  readonly BadGatewayException: BadGatewayException;
}

interface TextInputEvent {
  readonly text: string;
  readonly eventId: string;
  readonly clientTimestampMillis: number;
}

interface TextResponseEvent {
  readonly messages: [];
  readonly eventId: string;
}

interface ThrottlingException {
  readonly message: string;
}

interface TranscriptEvent {
  readonly transcript: string;
  readonly eventId: string;
}

interface ValidationException {
  readonly message: string;
}

interface Value {
  readonly originalValue: string;
  readonly interpretedValue: string;
  readonly resolvedValues: [];
}

