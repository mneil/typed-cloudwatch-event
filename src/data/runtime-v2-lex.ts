/**
 * STOP. This file is autogenerated. DO NOT EDIT by hand
 */
export interface DeleteSession {
  readonly botId: string;
  readonly botAliasId: string;
  readonly localeId: string;
  readonly sessionId: string;
}

export interface GetSession {
  readonly botId: string;
  readonly botAliasId: string;
  readonly localeId: string;
  readonly sessionId: string;
}

export interface PutSession {
  readonly botId: string;
  readonly botAliasId: string;
  readonly localeId: string;
  readonly sessionId: string;
  readonly messages?: [];
  readonly sessionState: SessionState;
  readonly requestAttributes?: {[key: string]: any};
  readonly responseContentType?: string;
}

export interface RecognizeText {
  readonly botId: string;
  readonly botAliasId: string;
  readonly localeId: string;
  readonly sessionId: string;
  readonly text: string;
  readonly sessionState?: SessionState;
  readonly requestAttributes?: {[key: string]: any};
}

export interface RecognizeUtterance {
  readonly botId: string;
  readonly botAliasId: string;
  readonly localeId: string;
  readonly sessionId: string;
  readonly sessionState?: string;
  readonly requestAttributes?: string;
  readonly requestContentType: string;
  readonly responseContentType?: string;
  readonly inputStream?: unknown;
}

export interface StartConversation {
  readonly botId: string;
  readonly botAliasId: string;
  readonly localeId: string;
  readonly sessionId: string;
  readonly conversationMode?: string;
  readonly requestEventStream: StartConversationRequestEventStream;
}

export interface AccessDeniedException {
  readonly message: string;
}

export interface ActiveContext {
  readonly name: string;
  readonly timeToLive: ActiveContextTimeToLive;
  readonly contextAttributes: {[key: string]: any};
}

export interface ActiveContextTimeToLive {
  readonly timeToLiveInSeconds: number;
  readonly turnsToLive: number;
}

export interface AudioInputEvent {
  readonly audioChunk?: unknown;
  readonly contentType: string;
  readonly eventId?: string;
  readonly clientTimestampMillis?: number;
}

export interface AudioResponseEvent {
  readonly audioChunk?: unknown;
  readonly contentType?: string;
  readonly eventId?: string;
}

export interface BadGatewayException {
  readonly message: string;
}

export interface Button {
  readonly text: string;
  readonly value: string;
}

export interface ConfidenceScore {
  readonly score?: unknown;
}

export interface ConfigurationEvent {
  readonly requestAttributes?: {[key: string]: any};
  readonly responseContentType: string;
  readonly sessionState?: SessionState;
  readonly welcomeMessages?: [];
  readonly disablePlayback?: boolean;
  readonly eventId?: string;
  readonly clientTimestampMillis?: number;
}

export interface ConflictException {
  readonly message: string;
}

export interface DTMFInputEvent {
  readonly inputCharacter: string;
  readonly eventId?: string;
  readonly clientTimestampMillis?: number;
}

export interface DeleteSessionRequest {
  readonly botId: string;
  readonly botAliasId: string;
  readonly localeId: string;
  readonly sessionId: string;
}

export interface DeleteSessionResponse {
  readonly botId?: string;
  readonly botAliasId?: string;
  readonly localeId?: string;
  readonly sessionId?: string;
}

export interface DependencyFailedException {
  readonly message: string;
}

export interface DialogAction {
  readonly type: string;
  readonly slotToElicit?: string;
  readonly slotElicitationStyle?: string;
}

export interface DisconnectionEvent {
  readonly eventId?: string;
  readonly clientTimestampMillis?: number;
}

export interface GetSessionRequest {
  readonly botId: string;
  readonly botAliasId: string;
  readonly localeId: string;
  readonly sessionId: string;
}

export interface GetSessionResponse {
  readonly sessionId?: string;
  readonly messages?: [];
  readonly interpretations?: [];
  readonly sessionState?: SessionState;
}

export interface HeartbeatEvent {
  readonly eventId?: string;
}

export interface ImageResponseCard {
  readonly title: string;
  readonly subtitle?: string;
  readonly imageUrl?: string;
  readonly buttons?: [];
}

export interface Intent {
  readonly name: string;
  readonly slots?: {[key: string]: any};
  readonly state?: string;
  readonly confirmationState?: string;
}

export interface IntentResultEvent {
  readonly inputMode?: string;
  readonly interpretations?: [];
  readonly sessionState?: SessionState;
  readonly requestAttributes?: {[key: string]: any};
  readonly sessionId?: string;
  readonly eventId?: string;
}

export interface InternalServerException {
  readonly message: string;
}

export interface Interpretation {
  readonly nluConfidence?: ConfidenceScore;
  readonly sentimentResponse?: SentimentResponse;
  readonly intent?: Intent;
}

export interface Message {
  readonly content?: string;
  readonly contentType: string;
  readonly imageResponseCard?: ImageResponseCard;
}

export interface PlaybackCompletionEvent {
  readonly eventId?: string;
  readonly clientTimestampMillis?: number;
}

export interface PlaybackInterruptionEvent {
  readonly eventReason?: string;
  readonly causedByEventId?: string;
  readonly eventId?: string;
}

export interface PutSessionRequest {
  readonly botId: string;
  readonly botAliasId: string;
  readonly localeId: string;
  readonly sessionId: string;
  readonly messages?: [];
  readonly sessionState: SessionState;
  readonly requestAttributes?: {[key: string]: any};
  readonly responseContentType?: string;
}

export interface PutSessionResponse {
  readonly contentType?: string;
  readonly messages?: string;
  readonly sessionState?: string;
  readonly requestAttributes?: string;
  readonly sessionId?: string;
  readonly audioStream?: unknown;
}

export interface RecognizeTextRequest {
  readonly botId: string;
  readonly botAliasId: string;
  readonly localeId: string;
  readonly sessionId: string;
  readonly text: string;
  readonly sessionState?: SessionState;
  readonly requestAttributes?: {[key: string]: any};
}

export interface RecognizeTextResponse {
  readonly messages?: [];
  readonly sessionState?: SessionState;
  readonly interpretations?: [];
  readonly requestAttributes?: {[key: string]: any};
  readonly sessionId?: string;
}

export interface RecognizeUtteranceRequest {
  readonly botId: string;
  readonly botAliasId: string;
  readonly localeId: string;
  readonly sessionId: string;
  readonly sessionState?: string;
  readonly requestAttributes?: string;
  readonly requestContentType: string;
  readonly responseContentType?: string;
  readonly inputStream?: unknown;
}

export interface RecognizeUtteranceResponse {
  readonly inputMode?: string;
  readonly contentType?: string;
  readonly messages?: string;
  readonly interpretations?: string;
  readonly sessionState?: string;
  readonly requestAttributes?: string;
  readonly sessionId?: string;
  readonly inputTranscript?: string;
  readonly audioStream?: unknown;
}

export interface ResourceNotFoundException {
  readonly message: string;
}

export interface SentimentResponse {
  readonly sentiment?: string;
  readonly sentimentScore?: SentimentScore;
}

export interface SentimentScore {
  readonly positive?: unknown;
  readonly negative?: unknown;
  readonly neutral?: unknown;
  readonly mixed?: unknown;
}

export interface SessionState {
  readonly dialogAction?: DialogAction;
  readonly intent?: Intent;
  readonly activeContexts?: [];
  readonly sessionAttributes?: {[key: string]: any};
  readonly originatingRequestId?: string;
}

export interface Slot {
  readonly value?: Value;
  readonly shape?: string;
  readonly values?: [];
}

export interface StartConversationRequest {
  readonly botId: string;
  readonly botAliasId: string;
  readonly localeId: string;
  readonly sessionId: string;
  readonly conversationMode?: string;
  readonly requestEventStream: StartConversationRequestEventStream;
}

export interface StartConversationRequestEventStream {
  readonly ConfigurationEvent?: ConfigurationEvent;
  readonly AudioInputEvent?: AudioInputEvent;
  readonly DTMFInputEvent?: DTMFInputEvent;
  readonly TextInputEvent?: TextInputEvent;
  readonly PlaybackCompletionEvent?: PlaybackCompletionEvent;
  readonly DisconnectionEvent?: DisconnectionEvent;
}

export interface StartConversationResponse {
  readonly responseEventStream?: StartConversationResponseEventStream;
}

export interface StartConversationResponseEventStream {
  readonly PlaybackInterruptionEvent?: PlaybackInterruptionEvent;
  readonly TranscriptEvent?: TranscriptEvent;
  readonly IntentResultEvent?: IntentResultEvent;
  readonly TextResponseEvent?: TextResponseEvent;
  readonly AudioResponseEvent?: AudioResponseEvent;
  readonly HeartbeatEvent?: HeartbeatEvent;
  readonly AccessDeniedException?: AccessDeniedException;
  readonly ResourceNotFoundException?: ResourceNotFoundException;
  readonly ValidationException?: ValidationException;
  readonly ThrottlingException?: ThrottlingException;
  readonly InternalServerException?: InternalServerException;
  readonly ConflictException?: ConflictException;
  readonly DependencyFailedException?: DependencyFailedException;
  readonly BadGatewayException?: BadGatewayException;
}

export interface TextInputEvent {
  readonly text: string;
  readonly eventId?: string;
  readonly clientTimestampMillis?: number;
}

export interface TextResponseEvent {
  readonly messages?: [];
  readonly eventId?: string;
}

export interface ThrottlingException {
  readonly message: string;
}

export interface TranscriptEvent {
  readonly transcript?: string;
  readonly eventId?: string;
}

export interface ValidationException {
  readonly message: string;
}

export interface Value {
  readonly originalValue?: string;
  readonly interpretedValue: string;
  readonly resolvedValues?: [];
}


