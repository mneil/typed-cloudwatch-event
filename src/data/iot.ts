/**
 * STOP. This file is autogenerated. DO NOT EDIT by hand
 */
export interface AcceptCertificateTransfer {
  readonly certificateId: string;
  readonly setAsActive?: boolean;
}
export interface AddThingToBillingGroup {
  readonly billingGroupName?: string;
  readonly billingGroupArn?: string;
  readonly thingName?: string;
  readonly thingArn?: string;
}
export interface AddThingToThingGroup {
  readonly thingGroupName?: string;
  readonly thingGroupArn?: string;
  readonly thingName?: string;
  readonly thingArn?: string;
  readonly overrideDynamicGroups?: boolean;
}
export interface AssociateTargetsWithJob {
  readonly targets: [];
  readonly jobId: string;
  readonly comment?: string;
  readonly namespaceId?: string;
}
export interface AttachPolicy {
  readonly policyName: string;
  readonly target: string;
}
export interface AttachPrincipalPolicy {
  readonly policyName: string;
  readonly principal: string;
}
export interface AttachSecurityProfile {
  readonly securityProfileName: string;
  readonly securityProfileTargetArn: string;
}
export interface AttachThingPrincipal {
  readonly thingName: string;
  readonly principal: string;
}
export interface CancelAuditMitigationActionsTask {
  readonly taskId: string;
}
export interface CancelAuditTask {
  readonly taskId: string;
}
export interface CancelCertificateTransfer {
  readonly certificateId: string;
}
export interface CancelDetectMitigationActionsTask {
  readonly taskId: string;
}
export interface CancelJob {
  readonly jobId: string;
  readonly reasonCode?: string;
  readonly comment?: string;
  readonly force?: boolean;
}
export interface CancelJobExecution {
  readonly jobId: string;
  readonly thingName: string;
  readonly force?: boolean;
  readonly expectedVersion?: number;
  readonly statusDetails?: {[key: string]: any};
}
export interface ClearDefaultAuthorizer {
}
export interface ConfirmTopicRuleDestination {
  readonly confirmationToken: string;
}
export interface CreateAuditSuppression {
  readonly checkName: string;
  readonly resourceIdentifier: ResourceIdentifier;
  readonly expirationDate?: Date;
  readonly suppressIndefinitely?: boolean;
  readonly description?: string;
  readonly clientRequestToken: string;
}
export interface CreateAuthorizer {
  readonly authorizerName: string;
  readonly authorizerFunctionArn: string;
  readonly tokenKeyName?: string;
  readonly tokenSigningPublicKeys?: {[key: string]: any};
  readonly status?: string;
  readonly tags?: [];
  readonly signingDisabled?: boolean;
  readonly enableCachingForHttp?: boolean;
}
export interface CreateBillingGroup {
  readonly billingGroupName: string;
  readonly billingGroupProperties?: BillingGroupProperties;
  readonly tags?: [];
}
export interface CreateCertificateFromCsr {
  readonly certificateSigningRequest: string;
  readonly setAsActive?: boolean;
}
export interface CreateCustomMetric {
  readonly metricName: string;
  readonly displayName?: string;
  readonly metricType: string;
  readonly tags?: [];
  readonly clientRequestToken: string;
}
export interface CreateDimension {
  readonly name: string;
  readonly type: string;
  readonly stringValues: [];
  readonly tags?: [];
  readonly clientRequestToken: string;
}
export interface CreateDomainConfiguration {
  readonly domainConfigurationName: string;
  readonly domainName?: string;
  readonly serverCertificateArns?: [];
  readonly validationCertificateArn?: string;
  readonly authorizerConfig?: AuthorizerConfig;
  readonly serviceType?: string;
  readonly tags?: [];
}
export interface CreateDynamicThingGroup {
  readonly thingGroupName: string;
  readonly thingGroupProperties?: ThingGroupProperties;
  readonly indexName?: string;
  readonly queryString: string;
  readonly queryVersion?: string;
  readonly tags?: [];
}
export interface CreateFleetMetric {
  readonly metricName: string;
  readonly queryString: string;
  readonly aggregationType: AggregationType;
  readonly period: number;
  readonly aggregationField: string;
  readonly description?: string;
  readonly queryVersion?: string;
  readonly indexName?: string;
  readonly unit?: string;
  readonly tags?: [];
}
export interface CreateJob {
  readonly jobId: string;
  readonly targets: [];
  readonly documentSource?: string;
  readonly document?: string;
  readonly description?: string;
  readonly presignedUrlConfig?: PresignedUrlConfig;
  readonly targetSelection?: string;
  readonly jobExecutionsRolloutConfig?: JobExecutionsRolloutConfig;
  readonly abortConfig?: AbortConfig;
  readonly timeoutConfig?: TimeoutConfig;
  readonly tags?: [];
  readonly namespaceId?: string;
  readonly jobTemplateArn?: string;
  readonly documentParameters?: {[key: string]: any};
}
export interface CreateJobTemplate {
  readonly jobTemplateId: string;
  readonly jobArn?: string;
  readonly documentSource?: string;
  readonly document?: string;
  readonly description: string;
  readonly presignedUrlConfig?: PresignedUrlConfig;
  readonly jobExecutionsRolloutConfig?: JobExecutionsRolloutConfig;
  readonly abortConfig?: AbortConfig;
  readonly timeoutConfig?: TimeoutConfig;
  readonly tags?: [];
}
export interface CreateKeysAndCertificate {
  readonly setAsActive?: boolean;
}
export interface CreateMitigationAction {
  readonly actionName: string;
  readonly roleArn: string;
  readonly actionParams: MitigationActionParams;
  readonly tags?: [];
}
export interface CreateOTAUpdate {
  readonly otaUpdateId: string;
  readonly description?: string;
  readonly targets: [];
  readonly protocols?: [];
  readonly targetSelection?: string;
  readonly awsJobExecutionsRolloutConfig?: AwsJobExecutionsRolloutConfig;
  readonly awsJobPresignedUrlConfig?: AwsJobPresignedUrlConfig;
  readonly awsJobAbortConfig?: AwsJobAbortConfig;
  readonly awsJobTimeoutConfig?: AwsJobTimeoutConfig;
  readonly files: [];
  readonly roleArn: string;
  readonly additionalParameters?: {[key: string]: any};
  readonly tags?: [];
}
export interface CreatePolicy {
  readonly policyName: string;
  readonly policyDocument: string;
  readonly tags?: [];
}
export interface CreatePolicyVersion {
  readonly policyName: string;
  readonly policyDocument: string;
  readonly setAsDefault?: boolean;
}
export interface CreateProvisioningClaim {
  readonly templateName: string;
}
export interface CreateProvisioningTemplate {
  readonly templateName: string;
  readonly description?: string;
  readonly templateBody: string;
  readonly enabled?: boolean;
  readonly provisioningRoleArn: string;
  readonly preProvisioningHook?: ProvisioningHook;
  readonly tags?: [];
}
export interface CreateProvisioningTemplateVersion {
  readonly templateName: string;
  readonly templateBody: string;
  readonly setAsDefault?: boolean;
}
export interface CreateRoleAlias {
  readonly roleAlias: string;
  readonly roleArn: string;
  readonly credentialDurationSeconds?: number;
  readonly tags?: [];
}
export interface CreateScheduledAudit {
  readonly frequency: string;
  readonly dayOfMonth?: string;
  readonly dayOfWeek?: string;
  readonly targetCheckNames: [];
  readonly scheduledAuditName: string;
  readonly tags?: [];
}
export interface CreateSecurityProfile {
  readonly securityProfileName: string;
  readonly securityProfileDescription?: string;
  readonly behaviors?: [];
  readonly alertTargets?: {[key: string]: any};
  readonly additionalMetricsToRetain?: [];
  readonly additionalMetricsToRetainV2?: [];
  readonly tags?: [];
}
export interface CreateStream {
  readonly streamId: string;
  readonly description?: string;
  readonly files: [];
  readonly roleArn: string;
  readonly tags?: [];
}
export interface CreateThing {
  readonly thingName: string;
  readonly thingTypeName?: string;
  readonly attributePayload?: AttributePayload;
  readonly billingGroupName?: string;
}
export interface CreateThingGroup {
  readonly thingGroupName: string;
  readonly parentGroupName?: string;
  readonly thingGroupProperties?: ThingGroupProperties;
  readonly tags?: [];
}
export interface CreateThingType {
  readonly thingTypeName: string;
  readonly thingTypeProperties?: ThingTypeProperties;
  readonly tags?: [];
}
export interface CreateTopicRule {
  readonly ruleName: string;
  readonly topicRulePayload: TopicRulePayload;
  readonly tags?: string;
}
export interface CreateTopicRuleDestination {
  readonly destinationConfiguration: TopicRuleDestinationConfiguration;
}
export interface DeleteAccountAuditConfiguration {
  readonly deleteScheduledAudits?: boolean;
}
export interface DeleteAuditSuppression {
  readonly checkName: string;
  readonly resourceIdentifier: ResourceIdentifier;
}
export interface DeleteAuthorizer {
  readonly authorizerName: string;
}
export interface DeleteBillingGroup {
  readonly billingGroupName: string;
  readonly expectedVersion?: number;
}
export interface DeleteCACertificate {
  readonly certificateId: string;
}
export interface DeleteCertificate {
  readonly certificateId: string;
  readonly forceDelete?: boolean;
}
export interface DeleteCustomMetric {
  readonly metricName: string;
}
export interface DeleteDimension {
  readonly name: string;
}
export interface DeleteDomainConfiguration {
  readonly domainConfigurationName: string;
}
export interface DeleteDynamicThingGroup {
  readonly thingGroupName: string;
  readonly expectedVersion?: number;
}
export interface DeleteFleetMetric {
  readonly metricName: string;
  readonly expectedVersion?: number;
}
export interface DeleteJob {
  readonly jobId: string;
  readonly force?: boolean;
  readonly namespaceId?: string;
}
export interface DeleteJobExecution {
  readonly jobId: string;
  readonly thingName: string;
  readonly executionNumber: number;
  readonly force?: boolean;
  readonly namespaceId?: string;
}
export interface DeleteJobTemplate {
  readonly jobTemplateId: string;
}
export interface DeleteMitigationAction {
  readonly actionName: string;
}
export interface DeleteOTAUpdate {
  readonly otaUpdateId: string;
  readonly deleteStream?: boolean;
  readonly forceDeleteAWSJob?: boolean;
}
export interface DeletePolicy {
  readonly policyName: string;
}
export interface DeletePolicyVersion {
  readonly policyName: string;
  readonly policyVersionId: string;
}
export interface DeleteProvisioningTemplate {
  readonly templateName: string;
}
export interface DeleteProvisioningTemplateVersion {
  readonly templateName: string;
  readonly versionId: number;
}
export interface DeleteRegistrationCode {
}
export interface DeleteRoleAlias {
  readonly roleAlias: string;
}
export interface DeleteScheduledAudit {
  readonly scheduledAuditName: string;
}
export interface DeleteSecurityProfile {
  readonly securityProfileName: string;
  readonly expectedVersion?: number;
}
export interface DeleteStream {
  readonly streamId: string;
}
export interface DeleteThing {
  readonly thingName: string;
  readonly expectedVersion?: number;
}
export interface DeleteThingGroup {
  readonly thingGroupName: string;
  readonly expectedVersion?: number;
}
export interface DeleteThingType {
  readonly thingTypeName: string;
}
export interface DeleteTopicRule {
  readonly ruleName: string;
}
export interface DeleteTopicRuleDestination {
  readonly arn: string;
}
export interface DeleteV2LoggingLevel {
  readonly targetType: string;
  readonly targetName: string;
}
export interface DeprecateThingType {
  readonly thingTypeName: string;
  readonly undoDeprecate?: boolean;
}
export interface DescribeAccountAuditConfiguration {
}
export interface DescribeAuditFinding {
  readonly findingId: string;
}
export interface DescribeAuditMitigationActionsTask {
  readonly taskId: string;
}
export interface DescribeAuditSuppression {
  readonly checkName: string;
  readonly resourceIdentifier: ResourceIdentifier;
}
export interface DescribeAuditTask {
  readonly taskId: string;
}
export interface DescribeAuthorizer {
  readonly authorizerName: string;
}
export interface DescribeBillingGroup {
  readonly billingGroupName: string;
}
export interface DescribeCACertificate {
  readonly certificateId: string;
}
export interface DescribeCertificate {
  readonly certificateId: string;
}
export interface DescribeCustomMetric {
  readonly metricName: string;
}
export interface DescribeDefaultAuthorizer {
}
export interface DescribeDetectMitigationActionsTask {
  readonly taskId: string;
}
export interface DescribeDimension {
  readonly name: string;
}
export interface DescribeDomainConfiguration {
  readonly domainConfigurationName: string;
}
export interface DescribeEndpoint {
  readonly endpointType?: string;
}
export interface DescribeEventConfigurations {
}
export interface DescribeFleetMetric {
  readonly metricName: string;
}
export interface DescribeIndex {
  readonly indexName: string;
}
export interface DescribeJob {
  readonly jobId: string;
}
export interface DescribeJobExecution {
  readonly jobId: string;
  readonly thingName: string;
  readonly executionNumber?: number;
}
export interface DescribeJobTemplate {
  readonly jobTemplateId: string;
}
export interface DescribeManagedJobTemplate {
  readonly templateName: string;
  readonly templateVersion?: string;
}
export interface DescribeMitigationAction {
  readonly actionName: string;
}
export interface DescribeProvisioningTemplate {
  readonly templateName: string;
}
export interface DescribeProvisioningTemplateVersion {
  readonly templateName: string;
  readonly versionId: number;
}
export interface DescribeRoleAlias {
  readonly roleAlias: string;
}
export interface DescribeScheduledAudit {
  readonly scheduledAuditName: string;
}
export interface DescribeSecurityProfile {
  readonly securityProfileName: string;
}
export interface DescribeStream {
  readonly streamId: string;
}
export interface DescribeThing {
  readonly thingName: string;
}
export interface DescribeThingGroup {
  readonly thingGroupName: string;
}
export interface DescribeThingRegistrationTask {
  readonly taskId: string;
}
export interface DescribeThingType {
  readonly thingTypeName: string;
}
export interface DetachPolicy {
  readonly policyName: string;
  readonly target: string;
}
export interface DetachPrincipalPolicy {
  readonly policyName: string;
  readonly principal: string;
}
export interface DetachSecurityProfile {
  readonly securityProfileName: string;
  readonly securityProfileTargetArn: string;
}
export interface DetachThingPrincipal {
  readonly thingName: string;
  readonly principal: string;
}
export interface DisableTopicRule {
  readonly ruleName: string;
}
export interface EnableTopicRule {
  readonly ruleName: string;
}
export interface GetBehaviorModelTrainingSummaries {
  readonly securityProfileName?: string;
  readonly maxResults?: number;
  readonly nextToken?: string;
}
export interface GetBucketsAggregation {
  readonly indexName?: string;
  readonly queryString: string;
  readonly aggregationField: string;
  readonly queryVersion?: string;
  readonly bucketsAggregationType: BucketsAggregationType;
}
export interface GetCardinality {
  readonly indexName?: string;
  readonly queryString: string;
  readonly aggregationField?: string;
  readonly queryVersion?: string;
}
export interface GetEffectivePolicies {
  readonly principal?: string;
  readonly cognitoIdentityPoolId?: string;
  readonly thingName?: string;
}
export interface GetIndexingConfiguration {
}
export interface GetJobDocument {
  readonly jobId: string;
}
export interface GetLoggingOptions {
}
export interface GetOTAUpdate {
  readonly otaUpdateId: string;
}
export interface GetPercentiles {
  readonly indexName?: string;
  readonly queryString: string;
  readonly aggregationField?: string;
  readonly queryVersion?: string;
  readonly percents?: [];
}
export interface GetPolicy {
  readonly policyName: string;
}
export interface GetPolicyVersion {
  readonly policyName: string;
  readonly policyVersionId: string;
}
export interface GetRegistrationCode {
}
export interface GetStatistics {
  readonly indexName?: string;
  readonly queryString: string;
  readonly aggregationField?: string;
  readonly queryVersion?: string;
}
export interface GetTopicRule {
  readonly ruleName: string;
}
export interface GetTopicRuleDestination {
  readonly arn: string;
}
export interface GetV2LoggingOptions {
}
export interface ListActiveViolations {
  readonly thingName?: string;
  readonly securityProfileName?: string;
  readonly behaviorCriteriaType?: string;
  readonly listSuppressedAlerts?: boolean;
  readonly verificationState?: string;
  readonly nextToken?: string;
  readonly maxResults?: number;
}
export interface ListAttachedPolicies {
  readonly target: string;
  readonly recursive?: boolean;
  readonly marker?: string;
  readonly pageSize?: number;
}
export interface ListAuditFindings {
  readonly taskId?: string;
  readonly checkName?: string;
  readonly resourceIdentifier?: ResourceIdentifier;
  readonly maxResults?: number;
  readonly nextToken?: string;
  readonly startTime?: Date;
  readonly endTime?: Date;
  readonly listSuppressedFindings?: boolean;
}
export interface ListAuditMitigationActionsExecutions {
  readonly taskId: string;
  readonly actionStatus?: string;
  readonly findingId: string;
  readonly maxResults?: number;
  readonly nextToken?: string;
}
export interface ListAuditMitigationActionsTasks {
  readonly auditTaskId?: string;
  readonly findingId?: string;
  readonly taskStatus?: string;
  readonly maxResults?: number;
  readonly nextToken?: string;
  readonly startTime: Date;
  readonly endTime: Date;
}
export interface ListAuditSuppressions {
  readonly checkName?: string;
  readonly resourceIdentifier?: ResourceIdentifier;
  readonly ascendingOrder?: boolean;
  readonly nextToken?: string;
  readonly maxResults?: number;
}
export interface ListAuditTasks {
  readonly startTime: Date;
  readonly endTime: Date;
  readonly taskType?: string;
  readonly taskStatus?: string;
  readonly nextToken?: string;
  readonly maxResults?: number;
}
export interface ListAuthorizers {
  readonly pageSize?: number;
  readonly marker?: string;
  readonly ascendingOrder?: boolean;
  readonly status?: string;
}
export interface ListBillingGroups {
  readonly nextToken?: string;
  readonly maxResults?: number;
  readonly namePrefixFilter?: string;
}
export interface ListCACertificates {
  readonly pageSize?: number;
  readonly marker?: string;
  readonly ascendingOrder?: boolean;
}
export interface ListCertificates {
  readonly pageSize?: number;
  readonly marker?: string;
  readonly ascendingOrder?: boolean;
}
export interface ListCertificatesByCA {
  readonly caCertificateId: string;
  readonly pageSize?: number;
  readonly marker?: string;
  readonly ascendingOrder?: boolean;
}
export interface ListCustomMetrics {
  readonly nextToken?: string;
  readonly maxResults?: number;
}
export interface ListDetectMitigationActionsExecutions {
  readonly taskId?: string;
  readonly violationId?: string;
  readonly thingName?: string;
  readonly startTime?: Date;
  readonly endTime?: Date;
  readonly maxResults?: number;
  readonly nextToken?: string;
}
export interface ListDetectMitigationActionsTasks {
  readonly maxResults?: number;
  readonly nextToken?: string;
  readonly startTime: Date;
  readonly endTime: Date;
}
export interface ListDimensions {
  readonly nextToken?: string;
  readonly maxResults?: number;
}
export interface ListDomainConfigurations {
  readonly marker?: string;
  readonly pageSize?: number;
  readonly serviceType?: string;
}
export interface ListFleetMetrics {
  readonly nextToken?: string;
  readonly maxResults?: number;
}
export interface ListIndices {
  readonly nextToken?: string;
  readonly maxResults?: number;
}
export interface ListJobExecutionsForJob {
  readonly jobId: string;
  readonly status?: string;
  readonly maxResults?: number;
  readonly nextToken?: string;
}
export interface ListJobExecutionsForThing {
  readonly thingName: string;
  readonly status?: string;
  readonly namespaceId?: string;
  readonly maxResults?: number;
  readonly nextToken?: string;
}
export interface ListJobTemplates {
  readonly maxResults?: number;
  readonly nextToken?: string;
}
export interface ListJobs {
  readonly status?: string;
  readonly targetSelection?: string;
  readonly maxResults?: number;
  readonly nextToken?: string;
  readonly thingGroupName?: string;
  readonly thingGroupId?: string;
  readonly namespaceId?: string;
}
export interface ListManagedJobTemplates {
  readonly templateName?: string;
  readonly maxResults?: number;
  readonly nextToken?: string;
}
export interface ListMitigationActions {
  readonly actionType?: string;
  readonly maxResults?: number;
  readonly nextToken?: string;
}
export interface ListOTAUpdates {
  readonly maxResults?: number;
  readonly nextToken?: string;
  readonly otaUpdateStatus?: string;
}
export interface ListOutgoingCertificates {
  readonly pageSize?: number;
  readonly marker?: string;
  readonly ascendingOrder?: boolean;
}
export interface ListPolicies {
  readonly marker?: string;
  readonly pageSize?: number;
  readonly ascendingOrder?: boolean;
}
export interface ListPolicyPrincipals {
  readonly policyName: string;
  readonly marker?: string;
  readonly pageSize?: number;
  readonly ascendingOrder?: boolean;
}
export interface ListPolicyVersions {
  readonly policyName: string;
}
export interface ListPrincipalPolicies {
  readonly principal: string;
  readonly marker?: string;
  readonly pageSize?: number;
  readonly ascendingOrder?: boolean;
}
export interface ListPrincipalThings {
  readonly nextToken?: string;
  readonly maxResults?: number;
  readonly principal: string;
}
export interface ListProvisioningTemplateVersions {
  readonly templateName: string;
  readonly maxResults?: number;
  readonly nextToken?: string;
}
export interface ListProvisioningTemplates {
  readonly maxResults?: number;
  readonly nextToken?: string;
}
export interface ListRoleAliases {
  readonly pageSize?: number;
  readonly marker?: string;
  readonly ascendingOrder?: boolean;
}
export interface ListScheduledAudits {
  readonly nextToken?: string;
  readonly maxResults?: number;
}
export interface ListSecurityProfiles {
  readonly nextToken?: string;
  readonly maxResults?: number;
  readonly dimensionName?: string;
  readonly metricName?: string;
}
export interface ListSecurityProfilesForTarget {
  readonly nextToken?: string;
  readonly maxResults?: number;
  readonly recursive?: boolean;
  readonly securityProfileTargetArn: string;
}
export interface ListStreams {
  readonly maxResults?: number;
  readonly nextToken?: string;
  readonly ascendingOrder?: boolean;
}
export interface ListTagsForResource {
  readonly resourceArn: string;
  readonly nextToken?: string;
}
export interface ListTargetsForPolicy {
  readonly policyName: string;
  readonly marker?: string;
  readonly pageSize?: number;
}
export interface ListTargetsForSecurityProfile {
  readonly securityProfileName: string;
  readonly nextToken?: string;
  readonly maxResults?: number;
}
export interface ListThingGroups {
  readonly nextToken?: string;
  readonly maxResults?: number;
  readonly parentGroup?: string;
  readonly namePrefixFilter?: string;
  readonly recursive?: boolean;
}
export interface ListThingGroupsForThing {
  readonly thingName: string;
  readonly nextToken?: string;
  readonly maxResults?: number;
}
export interface ListThingPrincipals {
  readonly nextToken?: string;
  readonly maxResults?: number;
  readonly thingName: string;
}
export interface ListThingRegistrationTaskReports {
  readonly taskId: string;
  readonly reportType: string;
  readonly nextToken?: string;
  readonly maxResults?: number;
}
export interface ListThingRegistrationTasks {
  readonly nextToken?: string;
  readonly maxResults?: number;
  readonly status?: string;
}
export interface ListThingTypes {
  readonly nextToken?: string;
  readonly maxResults?: number;
  readonly thingTypeName?: string;
}
export interface ListThings {
  readonly nextToken?: string;
  readonly maxResults?: number;
  readonly attributeName?: string;
  readonly attributeValue?: string;
  readonly thingTypeName?: string;
  readonly usePrefixAttributeValue?: boolean;
}
export interface ListThingsInBillingGroup {
  readonly billingGroupName: string;
  readonly nextToken?: string;
  readonly maxResults?: number;
}
export interface ListThingsInThingGroup {
  readonly thingGroupName: string;
  readonly recursive?: boolean;
  readonly nextToken?: string;
  readonly maxResults?: number;
}
export interface ListTopicRuleDestinations {
  readonly maxResults?: number;
  readonly nextToken?: string;
}
export interface ListTopicRules {
  readonly topic?: string;
  readonly maxResults?: number;
  readonly nextToken?: string;
  readonly ruleDisabled?: boolean;
}
export interface ListV2LoggingLevels {
  readonly targetType?: string;
  readonly nextToken?: string;
  readonly maxResults?: number;
}
export interface ListViolationEvents {
  readonly startTime: Date;
  readonly endTime: Date;
  readonly thingName?: string;
  readonly securityProfileName?: string;
  readonly behaviorCriteriaType?: string;
  readonly listSuppressedAlerts?: boolean;
  readonly verificationState?: string;
  readonly nextToken?: string;
  readonly maxResults?: number;
}
export interface PutVerificationStateOnViolation {
  readonly violationId: string;
  readonly verificationState: string;
  readonly verificationStateDescription?: string;
}
export interface RegisterCACertificate {
  readonly caCertificate: string;
  readonly verificationCertificate: string;
  readonly setAsActive?: boolean;
  readonly allowAutoRegistration?: boolean;
  readonly registrationConfig?: RegistrationConfig;
  readonly tags?: [];
}
export interface RegisterCertificate {
  readonly certificatePem: string;
  readonly caCertificatePem?: string;
  readonly setAsActive?: boolean;
  readonly status?: string;
}
export interface RegisterCertificateWithoutCA {
  readonly certificatePem: string;
  readonly status?: string;
}
export interface RegisterThing {
  readonly templateBody: string;
  readonly parameters?: {[key: string]: any};
}
export interface RejectCertificateTransfer {
  readonly certificateId: string;
  readonly rejectReason?: string;
}
export interface RemoveThingFromBillingGroup {
  readonly billingGroupName?: string;
  readonly billingGroupArn?: string;
  readonly thingName?: string;
  readonly thingArn?: string;
}
export interface RemoveThingFromThingGroup {
  readonly thingGroupName?: string;
  readonly thingGroupArn?: string;
  readonly thingName?: string;
  readonly thingArn?: string;
}
export interface ReplaceTopicRule {
  readonly ruleName: string;
  readonly topicRulePayload: TopicRulePayload;
}
export interface SearchIndex {
  readonly indexName?: string;
  readonly queryString: string;
  readonly nextToken?: string;
  readonly maxResults?: number;
  readonly queryVersion?: string;
}
export interface SetDefaultAuthorizer {
  readonly authorizerName: string;
}
export interface SetDefaultPolicyVersion {
  readonly policyName: string;
  readonly policyVersionId: string;
}
export interface SetLoggingOptions {
  readonly loggingOptionsPayload: LoggingOptionsPayload;
}
export interface SetV2LoggingLevel {
  readonly logTarget: LogTarget;
  readonly logLevel: string;
}
export interface SetV2LoggingOptions {
  readonly roleArn?: string;
  readonly defaultLogLevel?: string;
  readonly disableAllLogs?: boolean;
}
export interface StartAuditMitigationActionsTask {
  readonly taskId: string;
  readonly target: AuditMitigationActionsTaskTarget;
  readonly auditCheckToActionsMapping: {[key: string]: any};
  readonly clientRequestToken: string;
}
export interface StartDetectMitigationActionsTask {
  readonly taskId: string;
  readonly target: DetectMitigationActionsTaskTarget;
  readonly actions: [];
  readonly violationEventOccurrenceRange?: ViolationEventOccurrenceRange;
  readonly includeOnlyActiveViolations?: boolean;
  readonly includeSuppressedAlerts?: boolean;
  readonly clientRequestToken: string;
}
export interface StartOnDemandAuditTask {
  readonly targetCheckNames: [];
}
export interface StartThingRegistrationTask {
  readonly templateBody: string;
  readonly inputFileBucket: string;
  readonly inputFileKey: string;
  readonly roleArn: string;
}
export interface StopThingRegistrationTask {
  readonly taskId: string;
}
export interface TagResource {
  readonly resourceArn: string;
  readonly tags: [];
}
export interface TestAuthorization {
  readonly principal?: string;
  readonly cognitoIdentityPoolId?: string;
  readonly authInfos: [];
  readonly clientId?: string;
  readonly policyNamesToAdd?: [];
  readonly policyNamesToSkip?: [];
}
export interface TestInvokeAuthorizer {
  readonly authorizerName: string;
  readonly token?: string;
  readonly tokenSignature?: string;
  readonly httpContext?: HttpContext;
  readonly mqttContext?: MqttContext;
  readonly tlsContext?: TlsContext;
}
export interface TransferCertificate {
  readonly certificateId: string;
  readonly targetAwsAccount: string;
  readonly transferMessage?: string;
}
export interface UntagResource {
  readonly resourceArn: string;
  readonly tagKeys: [];
}
export interface UpdateAccountAuditConfiguration {
  readonly roleArn?: string;
  readonly auditNotificationTargetConfigurations?: {[key: string]: any};
  readonly auditCheckConfigurations?: {[key: string]: any};
}
export interface UpdateAuditSuppression {
  readonly checkName: string;
  readonly resourceIdentifier: ResourceIdentifier;
  readonly expirationDate?: Date;
  readonly suppressIndefinitely?: boolean;
  readonly description?: string;
}
export interface UpdateAuthorizer {
  readonly authorizerName: string;
  readonly authorizerFunctionArn?: string;
  readonly tokenKeyName?: string;
  readonly tokenSigningPublicKeys?: {[key: string]: any};
  readonly status?: string;
  readonly enableCachingForHttp?: boolean;
}
export interface UpdateBillingGroup {
  readonly billingGroupName: string;
  readonly billingGroupProperties: BillingGroupProperties;
  readonly expectedVersion?: number;
}
export interface UpdateCACertificate {
  readonly certificateId: string;
  readonly newStatus?: string;
  readonly newAutoRegistrationStatus?: string;
  readonly registrationConfig?: RegistrationConfig;
  readonly removeAutoRegistration?: boolean;
}
export interface UpdateCertificate {
  readonly certificateId: string;
  readonly newStatus: string;
}
export interface UpdateCustomMetric {
  readonly metricName: string;
  readonly displayName: string;
}
export interface UpdateDimension {
  readonly name: string;
  readonly stringValues: [];
}
export interface UpdateDomainConfiguration {
  readonly domainConfigurationName: string;
  readonly authorizerConfig?: AuthorizerConfig;
  readonly domainConfigurationStatus?: string;
  readonly removeAuthorizerConfig?: boolean;
}
export interface UpdateDynamicThingGroup {
  readonly thingGroupName: string;
  readonly thingGroupProperties: ThingGroupProperties;
  readonly expectedVersion?: number;
  readonly indexName?: string;
  readonly queryString?: string;
  readonly queryVersion?: string;
}
export interface UpdateEventConfigurations {
  readonly eventConfigurations?: {[key: string]: any};
}
export interface UpdateFleetMetric {
  readonly metricName: string;
  readonly queryString?: string;
  readonly aggregationType?: AggregationType;
  readonly period?: number;
  readonly aggregationField?: string;
  readonly description?: string;
  readonly queryVersion?: string;
  readonly indexName: string;
  readonly unit?: string;
  readonly expectedVersion?: number;
}
export interface UpdateIndexingConfiguration {
  readonly thingIndexingConfiguration?: ThingIndexingConfiguration;
  readonly thingGroupIndexingConfiguration?: ThingGroupIndexingConfiguration;
}
export interface UpdateJob {
  readonly jobId: string;
  readonly description?: string;
  readonly presignedUrlConfig?: PresignedUrlConfig;
  readonly jobExecutionsRolloutConfig?: JobExecutionsRolloutConfig;
  readonly abortConfig?: AbortConfig;
  readonly timeoutConfig?: TimeoutConfig;
  readonly namespaceId?: string;
}
export interface UpdateMitigationAction {
  readonly actionName: string;
  readonly roleArn?: string;
  readonly actionParams?: MitigationActionParams;
}
export interface UpdateProvisioningTemplate {
  readonly templateName: string;
  readonly description?: string;
  readonly enabled?: boolean;
  readonly defaultVersionId?: number;
  readonly provisioningRoleArn?: string;
  readonly preProvisioningHook?: ProvisioningHook;
  readonly removePreProvisioningHook?: boolean;
}
export interface UpdateRoleAlias {
  readonly roleAlias: string;
  readonly roleArn?: string;
  readonly credentialDurationSeconds?: number;
}
export interface UpdateScheduledAudit {
  readonly frequency?: string;
  readonly dayOfMonth?: string;
  readonly dayOfWeek?: string;
  readonly targetCheckNames?: [];
  readonly scheduledAuditName: string;
}
export interface UpdateSecurityProfile {
  readonly securityProfileName: string;
  readonly securityProfileDescription?: string;
  readonly behaviors?: [];
  readonly alertTargets?: {[key: string]: any};
  readonly additionalMetricsToRetain?: [];
  readonly additionalMetricsToRetainV2?: [];
  readonly deleteBehaviors?: boolean;
  readonly deleteAlertTargets?: boolean;
  readonly deleteAdditionalMetricsToRetain?: boolean;
  readonly expectedVersion?: number;
}
export interface UpdateStream {
  readonly streamId: string;
  readonly description?: string;
  readonly files?: [];
  readonly roleArn?: string;
}
export interface UpdateThing {
  readonly thingName: string;
  readonly thingTypeName?: string;
  readonly attributePayload?: AttributePayload;
  readonly expectedVersion?: number;
  readonly removeThingType?: boolean;
}
export interface UpdateThingGroup {
  readonly thingGroupName: string;
  readonly thingGroupProperties: ThingGroupProperties;
  readonly expectedVersion?: number;
}
export interface UpdateThingGroupsForThing {
  readonly thingName?: string;
  readonly thingGroupsToAdd?: [];
  readonly thingGroupsToRemove?: [];
  readonly overrideDynamicGroups?: boolean;
}
export interface UpdateTopicRuleDestination {
  readonly arn: string;
  readonly status: string;
}
export interface ValidateSecurityProfileBehaviors {
  readonly behaviors: [];
}



interface AbortConfig {
  readonly criteriaList: [];
}

interface AbortCriteria {
  readonly failureType: string;
  readonly action: string;
  readonly thresholdPercentage: unknown;
  readonly minNumberOfExecutedThings: number;
}

interface AcceptCertificateTransferRequest {
  readonly certificateId: string;
  readonly setAsActive: boolean;
}

interface Action {
  readonly dynamoDB: DynamoDBAction;
  readonly dynamoDBv2: DynamoDBv2Action;
  readonly lambda: LambdaAction;
  readonly sns: SnsAction;
  readonly sqs: SqsAction;
  readonly kinesis: KinesisAction;
  readonly republish: RepublishAction;
  readonly s3: S3Action;
  readonly firehose: FirehoseAction;
  readonly cloudwatchMetric: CloudwatchMetricAction;
  readonly cloudwatchAlarm: CloudwatchAlarmAction;
  readonly cloudwatchLogs: CloudwatchLogsAction;
  readonly elasticsearch: ElasticsearchAction;
  readonly salesforce: SalesforceAction;
  readonly iotAnalytics: IotAnalyticsAction;
  readonly iotEvents: IotEventsAction;
  readonly iotSiteWise: IotSiteWiseAction;
  readonly stepFunctions: StepFunctionsAction;
  readonly timestream: TimestreamAction;
  readonly http: HttpAction;
  readonly kafka: KafkaAction;
  readonly openSearch: OpenSearchAction;
}

interface ActiveViolation {
  readonly violationId: string;
  readonly thingName: string;
  readonly securityProfileName: string;
  readonly behavior: Behavior;
  readonly lastViolationValue: MetricValue;
  readonly violationEventAdditionalInfo: ViolationEventAdditionalInfo;
  readonly verificationState: string;
  readonly verificationStateDescription: string;
  readonly lastViolationTime: Date;
  readonly violationStartTime: Date;
}

interface AddThingToBillingGroupRequest {
  readonly billingGroupName: string;
  readonly billingGroupArn: string;
  readonly thingName: string;
  readonly thingArn: string;
}

interface AddThingToBillingGroupResponse {
}

interface AddThingToThingGroupRequest {
  readonly thingGroupName: string;
  readonly thingGroupArn: string;
  readonly thingName: string;
  readonly thingArn: string;
  readonly overrideDynamicGroups: boolean;
}

interface AddThingToThingGroupResponse {
}

interface AddThingsToThingGroupParams {
  readonly thingGroupNames: [];
  readonly overrideDynamicGroups: boolean;
}

interface AggregationType {
  readonly name: string;
  readonly values: [];
}

interface AlertTarget {
  readonly alertTargetArn: string;
  readonly roleArn: string;
}

interface Allowed {
  readonly policies: [];
}

interface AssetPropertyTimestamp {
  readonly timeInSeconds: string;
  readonly offsetInNanos: string;
}

interface AssetPropertyValue {
  readonly value: AssetPropertyVariant;
  readonly timestamp: AssetPropertyTimestamp;
  readonly quality: string;
}

interface AssetPropertyVariant {
  readonly stringValue: string;
  readonly integerValue: string;
  readonly doubleValue: string;
  readonly booleanValue: string;
}

interface AssociateTargetsWithJobRequest {
  readonly targets: [];
  readonly jobId: string;
  readonly comment: string;
  readonly namespaceId: string;
}

interface AssociateTargetsWithJobResponse {
  readonly jobArn: string;
  readonly jobId: string;
  readonly description: string;
}

interface AttachPolicyRequest {
  readonly policyName: string;
  readonly target: string;
}

interface AttachPrincipalPolicyRequest {
  readonly policyName: string;
  readonly principal: string;
}

interface AttachSecurityProfileRequest {
  readonly securityProfileName: string;
  readonly securityProfileTargetArn: string;
}

interface AttachSecurityProfileResponse {
}

interface AttachThingPrincipalRequest {
  readonly thingName: string;
  readonly principal: string;
}

interface AttachThingPrincipalResponse {
}

interface AttributePayload {
  readonly attributes: {[key: string]: any};
  readonly merge: boolean;
}

interface AuditCheckConfiguration {
  readonly enabled: boolean;
}

interface AuditCheckDetails {
  readonly checkRunStatus: string;
  readonly checkCompliant: boolean;
  readonly totalResourcesCount: number;
  readonly nonCompliantResourcesCount: number;
  readonly suppressedNonCompliantResourcesCount: number;
  readonly errorCode: string;
  readonly message: string;
}

interface AuditFinding {
  readonly findingId: string;
  readonly taskId: string;
  readonly checkName: string;
  readonly taskStartTime: Date;
  readonly findingTime: Date;
  readonly severity: string;
  readonly nonCompliantResource: NonCompliantResource;
  readonly relatedResources: [];
  readonly reasonForNonCompliance: string;
  readonly reasonForNonComplianceCode: string;
  readonly isSuppressed: boolean;
}

interface AuditMitigationActionExecutionMetadata {
  readonly taskId: string;
  readonly findingId: string;
  readonly actionName: string;
  readonly actionId: string;
  readonly status: string;
  readonly startTime: Date;
  readonly endTime: Date;
  readonly errorCode: string;
  readonly message: string;
}

interface AuditMitigationActionsTaskMetadata {
  readonly taskId: string;
  readonly startTime: Date;
  readonly taskStatus: string;
}

interface AuditMitigationActionsTaskTarget {
  readonly auditTaskId: string;
  readonly findingIds: [];
  readonly auditCheckToReasonCodeFilter: {[key: string]: any};
}

interface AuditNotificationTarget {
  readonly targetArn: string;
  readonly roleArn: string;
  readonly enabled: boolean;
}

interface AuditSuppression {
  readonly checkName: string;
  readonly resourceIdentifier: ResourceIdentifier;
  readonly expirationDate: Date;
  readonly suppressIndefinitely: boolean;
  readonly description: string;
}

interface AuditTaskMetadata {
  readonly taskId: string;
  readonly taskStatus: string;
  readonly taskType: string;
}

interface AuthInfo {
  readonly actionType: string;
  readonly resources: [];
}

interface AuthResult {
  readonly authInfo: AuthInfo;
  readonly allowed: Allowed;
  readonly denied: Denied;
  readonly authDecision: string;
  readonly missingContextValues: [];
}

interface AuthorizerConfig {
  readonly defaultAuthorizerName: string;
  readonly allowAuthorizerOverride: boolean;
}

interface AuthorizerDescription {
  readonly authorizerName: string;
  readonly authorizerArn: string;
  readonly authorizerFunctionArn: string;
  readonly tokenKeyName: string;
  readonly tokenSigningPublicKeys: {[key: string]: any};
  readonly status: string;
  readonly creationDate: Date;
  readonly lastModifiedDate: Date;
  readonly signingDisabled: boolean;
  readonly enableCachingForHttp: boolean;
}

interface AuthorizerSummary {
  readonly authorizerName: string;
  readonly authorizerArn: string;
}

interface AwsJobAbortConfig {
  readonly abortCriteriaList: [];
}

interface AwsJobAbortCriteria {
  readonly failureType: string;
  readonly action: string;
  readonly thresholdPercentage: unknown;
  readonly minNumberOfExecutedThings: number;
}

interface AwsJobExecutionsRolloutConfig {
  readonly maximumPerMinute: number;
  readonly exponentialRate: AwsJobExponentialRolloutRate;
}

interface AwsJobExponentialRolloutRate {
  readonly baseRatePerMinute: number;
  readonly incrementFactor: unknown;
  readonly rateIncreaseCriteria: AwsJobRateIncreaseCriteria;
}

interface AwsJobPresignedUrlConfig {
  readonly expiresInSec: number;
}

interface AwsJobRateIncreaseCriteria {
  readonly numberOfNotifiedThings: number;
  readonly numberOfSucceededThings: number;
}

interface AwsJobTimeoutConfig {
  readonly inProgressTimeoutInMinutes: number;
}

interface Behavior {
  readonly name: string;
  readonly metric: string;
  readonly metricDimension: MetricDimension;
  readonly criteria: BehaviorCriteria;
  readonly suppressAlerts: boolean;
}

interface BehaviorCriteria {
  readonly comparisonOperator: string;
  readonly value: MetricValue;
  readonly durationSeconds: number;
  readonly consecutiveDatapointsToAlarm: number;
  readonly consecutiveDatapointsToClear: number;
  readonly statisticalThreshold: StatisticalThreshold;
  readonly mlDetectionConfig: MachineLearningDetectionConfig;
}

interface BehaviorModelTrainingSummary {
  readonly securityProfileName: string;
  readonly behaviorName: string;
  readonly trainingDataCollectionStartDate: Date;
  readonly modelStatus: string;
  readonly datapointsCollectionPercentage: unknown;
  readonly lastModelRefreshDate: Date;
}

interface BillingGroupMetadata {
  readonly creationDate: Date;
}

interface BillingGroupProperties {
  readonly billingGroupDescription: string;
}

interface Bucket {
  readonly keyValue: string;
  readonly count: number;
}

interface BucketsAggregationType {
  readonly termsAggregation: TermsAggregation;
}

interface CACertificate {
  readonly certificateArn: string;
  readonly certificateId: string;
  readonly status: string;
  readonly creationDate: Date;
}

interface CACertificateDescription {
  readonly certificateArn: string;
  readonly certificateId: string;
  readonly status: string;
  readonly certificatePem: string;
  readonly ownedBy: string;
  readonly creationDate: Date;
  readonly autoRegistrationStatus: string;
  readonly lastModifiedDate: Date;
  readonly customerVersion: number;
  readonly generationId: string;
  readonly validity: CertificateValidity;
}

interface CancelAuditMitigationActionsTaskRequest {
  readonly taskId: string;
}

interface CancelAuditMitigationActionsTaskResponse {
}

interface CancelAuditTaskRequest {
  readonly taskId: string;
}

interface CancelAuditTaskResponse {
}

interface CancelCertificateTransferRequest {
  readonly certificateId: string;
}

interface CancelDetectMitigationActionsTaskRequest {
  readonly taskId: string;
}

interface CancelDetectMitigationActionsTaskResponse {
}

interface CancelJobExecutionRequest {
  readonly jobId: string;
  readonly thingName: string;
  readonly force: boolean;
  readonly expectedVersion: number;
  readonly statusDetails: {[key: string]: any};
}

interface CancelJobRequest {
  readonly jobId: string;
  readonly reasonCode: string;
  readonly comment: string;
  readonly force: boolean;
}

interface CancelJobResponse {
  readonly jobArn: string;
  readonly jobId: string;
  readonly description: string;
}

interface Certificate {
  readonly certificateArn: string;
  readonly certificateId: string;
  readonly status: string;
  readonly certificateMode: string;
  readonly creationDate: Date;
}

interface CertificateConflictException {
  readonly message: string;
}

interface CertificateDescription {
  readonly certificateArn: string;
  readonly certificateId: string;
  readonly caCertificateId: string;
  readonly status: string;
  readonly certificatePem: string;
  readonly ownedBy: string;
  readonly previousOwnedBy: string;
  readonly creationDate: Date;
  readonly lastModifiedDate: Date;
  readonly customerVersion: number;
  readonly transferData: TransferData;
  readonly generationId: string;
  readonly validity: CertificateValidity;
  readonly certificateMode: string;
}

interface CertificateStateException {
  readonly message: string;
}

interface CertificateValidationException {
  readonly message: string;
}

interface CertificateValidity {
  readonly notBefore: Date;
  readonly notAfter: Date;
}

interface ClearDefaultAuthorizerRequest {
}

interface ClearDefaultAuthorizerResponse {
}

interface CloudwatchAlarmAction {
  readonly roleArn: string;
  readonly alarmName: string;
  readonly stateReason: string;
  readonly stateValue: string;
}

interface CloudwatchLogsAction {
  readonly roleArn: string;
  readonly logGroupName: string;
}

interface CloudwatchMetricAction {
  readonly roleArn: string;
  readonly metricNamespace: string;
  readonly metricName: string;
  readonly metricValue: string;
  readonly metricUnit: string;
  readonly metricTimestamp: string;
}

interface CodeSigning {
  readonly awsSignerJobId: string;
  readonly startSigningJobParameter: StartSigningJobParameter;
  readonly customCodeSigning: CustomCodeSigning;
}

interface CodeSigningCertificateChain {
  readonly certificateName: string;
  readonly inlineDocument: string;
}

interface CodeSigningSignature {
  readonly inlineDocument: unknown;
}

interface Configuration {
  readonly Enabled: boolean;
}

interface ConfirmTopicRuleDestinationRequest {
  readonly confirmationToken: string;
}

interface ConfirmTopicRuleDestinationResponse {
}

interface ConflictException {
  readonly message: string;
}

interface ConflictingResourceUpdateException {
  readonly message: string;
}

interface CreateAuditSuppressionRequest {
  readonly checkName: string;
  readonly resourceIdentifier: ResourceIdentifier;
  readonly expirationDate: Date;
  readonly suppressIndefinitely: boolean;
  readonly description: string;
  readonly clientRequestToken: string;
}

interface CreateAuditSuppressionResponse {
}

interface CreateAuthorizerRequest {
  readonly authorizerName: string;
  readonly authorizerFunctionArn: string;
  readonly tokenKeyName: string;
  readonly tokenSigningPublicKeys: {[key: string]: any};
  readonly status: string;
  readonly tags: [];
  readonly signingDisabled: boolean;
  readonly enableCachingForHttp: boolean;
}

interface CreateAuthorizerResponse {
  readonly authorizerName: string;
  readonly authorizerArn: string;
}

interface CreateBillingGroupRequest {
  readonly billingGroupName: string;
  readonly billingGroupProperties: BillingGroupProperties;
  readonly tags: [];
}

interface CreateBillingGroupResponse {
  readonly billingGroupName: string;
  readonly billingGroupArn: string;
  readonly billingGroupId: string;
}

interface CreateCertificateFromCsrRequest {
  readonly certificateSigningRequest: string;
  readonly setAsActive: boolean;
}

interface CreateCertificateFromCsrResponse {
  readonly certificateArn: string;
  readonly certificateId: string;
  readonly certificatePem: string;
}

interface CreateCustomMetricRequest {
  readonly metricName: string;
  readonly displayName: string;
  readonly metricType: string;
  readonly tags: [];
  readonly clientRequestToken: string;
}

interface CreateCustomMetricResponse {
  readonly metricName: string;
  readonly metricArn: string;
}

interface CreateDimensionRequest {
  readonly name: string;
  readonly type: string;
  readonly stringValues: [];
  readonly tags: [];
  readonly clientRequestToken: string;
}

interface CreateDimensionResponse {
  readonly name: string;
  readonly arn: string;
}

interface CreateDomainConfigurationRequest {
  readonly domainConfigurationName: string;
  readonly domainName: string;
  readonly serverCertificateArns: [];
  readonly validationCertificateArn: string;
  readonly authorizerConfig: AuthorizerConfig;
  readonly serviceType: string;
  readonly tags: [];
}

interface CreateDomainConfigurationResponse {
  readonly domainConfigurationName: string;
  readonly domainConfigurationArn: string;
}

interface CreateDynamicThingGroupRequest {
  readonly thingGroupName: string;
  readonly thingGroupProperties: ThingGroupProperties;
  readonly indexName: string;
  readonly queryString: string;
  readonly queryVersion: string;
  readonly tags: [];
}

interface CreateDynamicThingGroupResponse {
  readonly thingGroupName: string;
  readonly thingGroupArn: string;
  readonly thingGroupId: string;
  readonly indexName: string;
  readonly queryString: string;
  readonly queryVersion: string;
}

interface CreateFleetMetricRequest {
  readonly metricName: string;
  readonly queryString: string;
  readonly aggregationType: AggregationType;
  readonly period: number;
  readonly aggregationField: string;
  readonly description: string;
  readonly queryVersion: string;
  readonly indexName: string;
  readonly unit: string;
  readonly tags: [];
}

interface CreateFleetMetricResponse {
  readonly metricName: string;
  readonly metricArn: string;
}

interface CreateJobRequest {
  readonly jobId: string;
  readonly targets: [];
  readonly documentSource: string;
  readonly document: string;
  readonly description: string;
  readonly presignedUrlConfig: PresignedUrlConfig;
  readonly targetSelection: string;
  readonly jobExecutionsRolloutConfig: JobExecutionsRolloutConfig;
  readonly abortConfig: AbortConfig;
  readonly timeoutConfig: TimeoutConfig;
  readonly tags: [];
  readonly namespaceId: string;
  readonly jobTemplateArn: string;
  readonly documentParameters: {[key: string]: any};
}

interface CreateJobResponse {
  readonly jobArn: string;
  readonly jobId: string;
  readonly description: string;
}

interface CreateJobTemplateRequest {
  readonly jobTemplateId: string;
  readonly jobArn: string;
  readonly documentSource: string;
  readonly document: string;
  readonly description: string;
  readonly presignedUrlConfig: PresignedUrlConfig;
  readonly jobExecutionsRolloutConfig: JobExecutionsRolloutConfig;
  readonly abortConfig: AbortConfig;
  readonly timeoutConfig: TimeoutConfig;
  readonly tags: [];
}

interface CreateJobTemplateResponse {
  readonly jobTemplateArn: string;
  readonly jobTemplateId: string;
}

interface CreateKeysAndCertificateRequest {
  readonly setAsActive: boolean;
}

interface CreateKeysAndCertificateResponse {
  readonly certificateArn: string;
  readonly certificateId: string;
  readonly certificatePem: string;
  readonly keyPair: KeyPair;
}

interface CreateMitigationActionRequest {
  readonly actionName: string;
  readonly roleArn: string;
  readonly actionParams: MitigationActionParams;
  readonly tags: [];
}

interface CreateMitigationActionResponse {
  readonly actionArn: string;
  readonly actionId: string;
}

interface CreateOTAUpdateRequest {
  readonly otaUpdateId: string;
  readonly description: string;
  readonly targets: [];
  readonly protocols: [];
  readonly targetSelection: string;
  readonly awsJobExecutionsRolloutConfig: AwsJobExecutionsRolloutConfig;
  readonly awsJobPresignedUrlConfig: AwsJobPresignedUrlConfig;
  readonly awsJobAbortConfig: AwsJobAbortConfig;
  readonly awsJobTimeoutConfig: AwsJobTimeoutConfig;
  readonly files: [];
  readonly roleArn: string;
  readonly additionalParameters: {[key: string]: any};
  readonly tags: [];
}

interface CreateOTAUpdateResponse {
  readonly otaUpdateId: string;
  readonly awsIotJobId: string;
  readonly otaUpdateArn: string;
  readonly awsIotJobArn: string;
  readonly otaUpdateStatus: string;
}

interface CreatePolicyRequest {
  readonly policyName: string;
  readonly policyDocument: string;
  readonly tags: [];
}

interface CreatePolicyResponse {
  readonly policyName: string;
  readonly policyArn: string;
  readonly policyDocument: string;
  readonly policyVersionId: string;
}

interface CreatePolicyVersionRequest {
  readonly policyName: string;
  readonly policyDocument: string;
  readonly setAsDefault: boolean;
}

interface CreatePolicyVersionResponse {
  readonly policyArn: string;
  readonly policyDocument: string;
  readonly policyVersionId: string;
  readonly isDefaultVersion: boolean;
}

interface CreateProvisioningClaimRequest {
  readonly templateName: string;
}

interface CreateProvisioningClaimResponse {
  readonly certificateId: string;
  readonly certificatePem: string;
  readonly keyPair: KeyPair;
  readonly expiration: Date;
}

interface CreateProvisioningTemplateRequest {
  readonly templateName: string;
  readonly description: string;
  readonly templateBody: string;
  readonly enabled: boolean;
  readonly provisioningRoleArn: string;
  readonly preProvisioningHook: ProvisioningHook;
  readonly tags: [];
}

interface CreateProvisioningTemplateResponse {
  readonly templateArn: string;
  readonly templateName: string;
  readonly defaultVersionId: number;
}

interface CreateProvisioningTemplateVersionRequest {
  readonly templateName: string;
  readonly templateBody: string;
  readonly setAsDefault: boolean;
}

interface CreateProvisioningTemplateVersionResponse {
  readonly templateArn: string;
  readonly templateName: string;
  readonly versionId: number;
  readonly isDefaultVersion: boolean;
}

interface CreateRoleAliasRequest {
  readonly roleAlias: string;
  readonly roleArn: string;
  readonly credentialDurationSeconds: number;
  readonly tags: [];
}

interface CreateRoleAliasResponse {
  readonly roleAlias: string;
  readonly roleAliasArn: string;
}

interface CreateScheduledAuditRequest {
  readonly frequency: string;
  readonly dayOfMonth: string;
  readonly dayOfWeek: string;
  readonly targetCheckNames: [];
  readonly scheduledAuditName: string;
  readonly tags: [];
}

interface CreateScheduledAuditResponse {
  readonly scheduledAuditArn: string;
}

interface CreateSecurityProfileRequest {
  readonly securityProfileName: string;
  readonly securityProfileDescription: string;
  readonly behaviors: [];
  readonly alertTargets: {[key: string]: any};
  readonly additionalMetricsToRetain: [];
  readonly additionalMetricsToRetainV2: [];
  readonly tags: [];
}

interface CreateSecurityProfileResponse {
  readonly securityProfileName: string;
  readonly securityProfileArn: string;
}

interface CreateStreamRequest {
  readonly streamId: string;
  readonly description: string;
  readonly files: [];
  readonly roleArn: string;
  readonly tags: [];
}

interface CreateStreamResponse {
  readonly streamId: string;
  readonly streamArn: string;
  readonly description: string;
  readonly streamVersion: number;
}

interface CreateThingGroupRequest {
  readonly thingGroupName: string;
  readonly parentGroupName: string;
  readonly thingGroupProperties: ThingGroupProperties;
  readonly tags: [];
}

interface CreateThingGroupResponse {
  readonly thingGroupName: string;
  readonly thingGroupArn: string;
  readonly thingGroupId: string;
}

interface CreateThingRequest {
  readonly thingName: string;
  readonly thingTypeName: string;
  readonly attributePayload: AttributePayload;
  readonly billingGroupName: string;
}

interface CreateThingResponse {
  readonly thingName: string;
  readonly thingArn: string;
  readonly thingId: string;
}

interface CreateThingTypeRequest {
  readonly thingTypeName: string;
  readonly thingTypeProperties: ThingTypeProperties;
  readonly tags: [];
}

interface CreateThingTypeResponse {
  readonly thingTypeName: string;
  readonly thingTypeArn: string;
  readonly thingTypeId: string;
}

interface CreateTopicRuleDestinationRequest {
  readonly destinationConfiguration: TopicRuleDestinationConfiguration;
}

interface CreateTopicRuleDestinationResponse {
  readonly topicRuleDestination: TopicRuleDestination;
}

interface CreateTopicRuleRequest {
  readonly ruleName: string;
  readonly topicRulePayload: TopicRulePayload;
  readonly tags: string;
}

interface CustomCodeSigning {
  readonly signature: CodeSigningSignature;
  readonly certificateChain: CodeSigningCertificateChain;
  readonly hashAlgorithm: string;
  readonly signatureAlgorithm: string;
}

interface DeleteAccountAuditConfigurationRequest {
  readonly deleteScheduledAudits: boolean;
}

interface DeleteAccountAuditConfigurationResponse {
}

interface DeleteAuditSuppressionRequest {
  readonly checkName: string;
  readonly resourceIdentifier: ResourceIdentifier;
}

interface DeleteAuditSuppressionResponse {
}

interface DeleteAuthorizerRequest {
  readonly authorizerName: string;
}

interface DeleteAuthorizerResponse {
}

interface DeleteBillingGroupRequest {
  readonly billingGroupName: string;
  readonly expectedVersion: number;
}

interface DeleteBillingGroupResponse {
}

interface DeleteCACertificateRequest {
  readonly certificateId: string;
}

interface DeleteCACertificateResponse {
}

interface DeleteCertificateRequest {
  readonly certificateId: string;
  readonly forceDelete: boolean;
}

interface DeleteConflictException {
  readonly message: string;
}

interface DeleteCustomMetricRequest {
  readonly metricName: string;
}

interface DeleteCustomMetricResponse {
}

interface DeleteDimensionRequest {
  readonly name: string;
}

interface DeleteDimensionResponse {
}

interface DeleteDomainConfigurationRequest {
  readonly domainConfigurationName: string;
}

interface DeleteDomainConfigurationResponse {
}

interface DeleteDynamicThingGroupRequest {
  readonly thingGroupName: string;
  readonly expectedVersion: number;
}

interface DeleteDynamicThingGroupResponse {
}

interface DeleteFleetMetricRequest {
  readonly metricName: string;
  readonly expectedVersion: number;
}

interface DeleteJobExecutionRequest {
  readonly jobId: string;
  readonly thingName: string;
  readonly executionNumber: number;
  readonly force: boolean;
  readonly namespaceId: string;
}

interface DeleteJobRequest {
  readonly jobId: string;
  readonly force: boolean;
  readonly namespaceId: string;
}

interface DeleteJobTemplateRequest {
  readonly jobTemplateId: string;
}

interface DeleteMitigationActionRequest {
  readonly actionName: string;
}

interface DeleteMitigationActionResponse {
}

interface DeleteOTAUpdateRequest {
  readonly otaUpdateId: string;
  readonly deleteStream: boolean;
  readonly forceDeleteAWSJob: boolean;
}

interface DeleteOTAUpdateResponse {
}

interface DeletePolicyRequest {
  readonly policyName: string;
}

interface DeletePolicyVersionRequest {
  readonly policyName: string;
  readonly policyVersionId: string;
}

interface DeleteProvisioningTemplateRequest {
  readonly templateName: string;
}

interface DeleteProvisioningTemplateResponse {
}

interface DeleteProvisioningTemplateVersionRequest {
  readonly templateName: string;
  readonly versionId: number;
}

interface DeleteProvisioningTemplateVersionResponse {
}

interface DeleteRegistrationCodeRequest {
}

interface DeleteRegistrationCodeResponse {
}

interface DeleteRoleAliasRequest {
  readonly roleAlias: string;
}

interface DeleteRoleAliasResponse {
}

interface DeleteScheduledAuditRequest {
  readonly scheduledAuditName: string;
}

interface DeleteScheduledAuditResponse {
}

interface DeleteSecurityProfileRequest {
  readonly securityProfileName: string;
  readonly expectedVersion: number;
}

interface DeleteSecurityProfileResponse {
}

interface DeleteStreamRequest {
  readonly streamId: string;
}

interface DeleteStreamResponse {
}

interface DeleteThingGroupRequest {
  readonly thingGroupName: string;
  readonly expectedVersion: number;
}

interface DeleteThingGroupResponse {
}

interface DeleteThingRequest {
  readonly thingName: string;
  readonly expectedVersion: number;
}

interface DeleteThingResponse {
}

interface DeleteThingTypeRequest {
  readonly thingTypeName: string;
}

interface DeleteThingTypeResponse {
}

interface DeleteTopicRuleDestinationRequest {
  readonly arn: string;
}

interface DeleteTopicRuleDestinationResponse {
}

interface DeleteTopicRuleRequest {
  readonly ruleName: string;
}

interface DeleteV2LoggingLevelRequest {
  readonly targetType: string;
  readonly targetName: string;
}

interface Denied {
  readonly implicitDeny: ImplicitDeny;
  readonly explicitDeny: ExplicitDeny;
}

interface DeprecateThingTypeRequest {
  readonly thingTypeName: string;
  readonly undoDeprecate: boolean;
}

interface DeprecateThingTypeResponse {
}

interface DescribeAccountAuditConfigurationRequest {
}

interface DescribeAccountAuditConfigurationResponse {
  readonly roleArn: string;
  readonly auditNotificationTargetConfigurations: {[key: string]: any};
  readonly auditCheckConfigurations: {[key: string]: any};
}

interface DescribeAuditFindingRequest {
  readonly findingId: string;
}

interface DescribeAuditFindingResponse {
  readonly finding: AuditFinding;
}

interface DescribeAuditMitigationActionsTaskRequest {
  readonly taskId: string;
}

interface DescribeAuditMitigationActionsTaskResponse {
  readonly taskStatus: string;
  readonly startTime: Date;
  readonly endTime: Date;
  readonly taskStatistics: {[key: string]: any};
  readonly target: AuditMitigationActionsTaskTarget;
  readonly auditCheckToActionsMapping: {[key: string]: any};
  readonly actionsDefinition: [];
}

interface DescribeAuditSuppressionRequest {
  readonly checkName: string;
  readonly resourceIdentifier: ResourceIdentifier;
}

interface DescribeAuditSuppressionResponse {
  readonly checkName: string;
  readonly resourceIdentifier: ResourceIdentifier;
  readonly expirationDate: Date;
  readonly suppressIndefinitely: boolean;
  readonly description: string;
}

interface DescribeAuditTaskRequest {
  readonly taskId: string;
}

interface DescribeAuditTaskResponse {
  readonly taskStatus: string;
  readonly taskType: string;
  readonly taskStartTime: Date;
  readonly taskStatistics: TaskStatistics;
  readonly scheduledAuditName: string;
  readonly auditDetails: {[key: string]: any};
}

interface DescribeAuthorizerRequest {
  readonly authorizerName: string;
}

interface DescribeAuthorizerResponse {
  readonly authorizerDescription: AuthorizerDescription;
}

interface DescribeBillingGroupRequest {
  readonly billingGroupName: string;
}

interface DescribeBillingGroupResponse {
  readonly billingGroupName: string;
  readonly billingGroupId: string;
  readonly billingGroupArn: string;
  readonly version: number;
  readonly billingGroupProperties: BillingGroupProperties;
  readonly billingGroupMetadata: BillingGroupMetadata;
}

interface DescribeCACertificateRequest {
  readonly certificateId: string;
}

interface DescribeCACertificateResponse {
  readonly certificateDescription: CACertificateDescription;
  readonly registrationConfig: RegistrationConfig;
}

interface DescribeCertificateRequest {
  readonly certificateId: string;
}

interface DescribeCertificateResponse {
  readonly certificateDescription: CertificateDescription;
}

interface DescribeCustomMetricRequest {
  readonly metricName: string;
}

interface DescribeCustomMetricResponse {
  readonly metricName: string;
  readonly metricArn: string;
  readonly metricType: string;
  readonly displayName: string;
  readonly creationDate: Date;
  readonly lastModifiedDate: Date;
}

interface DescribeDefaultAuthorizerRequest {
}

interface DescribeDefaultAuthorizerResponse {
  readonly authorizerDescription: AuthorizerDescription;
}

interface DescribeDetectMitigationActionsTaskRequest {
  readonly taskId: string;
}

interface DescribeDetectMitigationActionsTaskResponse {
  readonly taskSummary: DetectMitigationActionsTaskSummary;
}

interface DescribeDimensionRequest {
  readonly name: string;
}

interface DescribeDimensionResponse {
  readonly name: string;
  readonly arn: string;
  readonly type: string;
  readonly stringValues: [];
  readonly creationDate: Date;
  readonly lastModifiedDate: Date;
}

interface DescribeDomainConfigurationRequest {
  readonly domainConfigurationName: string;
}

interface DescribeDomainConfigurationResponse {
  readonly domainConfigurationName: string;
  readonly domainConfigurationArn: string;
  readonly domainName: string;
  readonly serverCertificates: [];
  readonly authorizerConfig: AuthorizerConfig;
  readonly domainConfigurationStatus: string;
  readonly serviceType: string;
  readonly domainType: string;
  readonly lastStatusChangeDate: Date;
}

interface DescribeEndpointRequest {
  readonly endpointType: string;
}

interface DescribeEndpointResponse {
  readonly endpointAddress: string;
}

interface DescribeEventConfigurationsRequest {
}

interface DescribeEventConfigurationsResponse {
  readonly eventConfigurations: {[key: string]: any};
  readonly creationDate: Date;
  readonly lastModifiedDate: Date;
}

interface DescribeFleetMetricRequest {
  readonly metricName: string;
}

interface DescribeFleetMetricResponse {
  readonly metricName: string;
  readonly queryString: string;
  readonly aggregationType: AggregationType;
  readonly period: number;
  readonly aggregationField: string;
  readonly description: string;
  readonly queryVersion: string;
  readonly indexName: string;
  readonly creationDate: Date;
  readonly lastModifiedDate: Date;
  readonly unit: string;
  readonly version: number;
  readonly metricArn: string;
}

interface DescribeIndexRequest {
  readonly indexName: string;
}

interface DescribeIndexResponse {
  readonly indexName: string;
  readonly indexStatus: string;
  readonly schema: string;
}

interface DescribeJobExecutionRequest {
  readonly jobId: string;
  readonly thingName: string;
  readonly executionNumber: number;
}

interface DescribeJobExecutionResponse {
  readonly execution: JobExecution;
}

interface DescribeJobRequest {
  readonly jobId: string;
}

interface DescribeJobResponse {
  readonly documentSource: string;
  readonly job: Job;
}

interface DescribeJobTemplateRequest {
  readonly jobTemplateId: string;
}

interface DescribeJobTemplateResponse {
  readonly jobTemplateArn: string;
  readonly jobTemplateId: string;
  readonly description: string;
  readonly documentSource: string;
  readonly document: string;
  readonly createdAt: Date;
  readonly presignedUrlConfig: PresignedUrlConfig;
  readonly jobExecutionsRolloutConfig: JobExecutionsRolloutConfig;
  readonly abortConfig: AbortConfig;
  readonly timeoutConfig: TimeoutConfig;
}

interface DescribeManagedJobTemplateRequest {
  readonly templateName: string;
  readonly templateVersion: string;
}

interface DescribeManagedJobTemplateResponse {
  readonly templateName: string;
  readonly templateArn: string;
  readonly description: string;
  readonly templateVersion: string;
  readonly environments: [];
  readonly documentParameters: [];
  readonly document: string;
}

interface DescribeMitigationActionRequest {
  readonly actionName: string;
}

interface DescribeMitigationActionResponse {
  readonly actionName: string;
  readonly actionType: string;
  readonly actionArn: string;
  readonly actionId: string;
  readonly roleArn: string;
  readonly actionParams: MitigationActionParams;
  readonly creationDate: Date;
  readonly lastModifiedDate: Date;
}

interface DescribeProvisioningTemplateRequest {
  readonly templateName: string;
}

interface DescribeProvisioningTemplateResponse {
  readonly templateArn: string;
  readonly templateName: string;
  readonly description: string;
  readonly creationDate: Date;
  readonly lastModifiedDate: Date;
  readonly defaultVersionId: number;
  readonly templateBody: string;
  readonly enabled: boolean;
  readonly provisioningRoleArn: string;
  readonly preProvisioningHook: ProvisioningHook;
}

interface DescribeProvisioningTemplateVersionRequest {
  readonly templateName: string;
  readonly versionId: number;
}

interface DescribeProvisioningTemplateVersionResponse {
  readonly versionId: number;
  readonly creationDate: Date;
  readonly templateBody: string;
  readonly isDefaultVersion: boolean;
}

interface DescribeRoleAliasRequest {
  readonly roleAlias: string;
}

interface DescribeRoleAliasResponse {
  readonly roleAliasDescription: RoleAliasDescription;
}

interface DescribeScheduledAuditRequest {
  readonly scheduledAuditName: string;
}

interface DescribeScheduledAuditResponse {
  readonly frequency: string;
  readonly dayOfMonth: string;
  readonly dayOfWeek: string;
  readonly targetCheckNames: [];
  readonly scheduledAuditName: string;
  readonly scheduledAuditArn: string;
}

interface DescribeSecurityProfileRequest {
  readonly securityProfileName: string;
}

interface DescribeSecurityProfileResponse {
  readonly securityProfileName: string;
  readonly securityProfileArn: string;
  readonly securityProfileDescription: string;
  readonly behaviors: [];
  readonly alertTargets: {[key: string]: any};
  readonly additionalMetricsToRetain: [];
  readonly additionalMetricsToRetainV2: [];
  readonly version: number;
  readonly creationDate: Date;
  readonly lastModifiedDate: Date;
}

interface DescribeStreamRequest {
  readonly streamId: string;
}

interface DescribeStreamResponse {
  readonly streamInfo: StreamInfo;
}

interface DescribeThingGroupRequest {
  readonly thingGroupName: string;
}

interface DescribeThingGroupResponse {
  readonly thingGroupName: string;
  readonly thingGroupId: string;
  readonly thingGroupArn: string;
  readonly version: number;
  readonly thingGroupProperties: ThingGroupProperties;
  readonly thingGroupMetadata: ThingGroupMetadata;
  readonly indexName: string;
  readonly queryString: string;
  readonly queryVersion: string;
  readonly status: string;
}

interface DescribeThingRegistrationTaskRequest {
  readonly taskId: string;
}

interface DescribeThingRegistrationTaskResponse {
  readonly taskId: string;
  readonly creationDate: Date;
  readonly lastModifiedDate: Date;
  readonly templateBody: string;
  readonly inputFileBucket: string;
  readonly inputFileKey: string;
  readonly roleArn: string;
  readonly status: string;
  readonly message: string;
  readonly successCount: number;
  readonly failureCount: number;
  readonly percentageProgress: number;
}

interface DescribeThingRequest {
  readonly thingName: string;
}

interface DescribeThingResponse {
  readonly defaultClientId: string;
  readonly thingName: string;
  readonly thingId: string;
  readonly thingArn: string;
  readonly thingTypeName: string;
  readonly attributes: {[key: string]: any};
  readonly version: number;
  readonly billingGroupName: string;
}

interface DescribeThingTypeRequest {
  readonly thingTypeName: string;
}

interface DescribeThingTypeResponse {
  readonly thingTypeName: string;
  readonly thingTypeId: string;
  readonly thingTypeArn: string;
  readonly thingTypeProperties: ThingTypeProperties;
  readonly thingTypeMetadata: ThingTypeMetadata;
}

interface Destination {
  readonly s3Destination: S3Destination;
}

interface DetachPolicyRequest {
  readonly policyName: string;
  readonly target: string;
}

interface DetachPrincipalPolicyRequest {
  readonly policyName: string;
  readonly principal: string;
}

interface DetachSecurityProfileRequest {
  readonly securityProfileName: string;
  readonly securityProfileTargetArn: string;
}

interface DetachSecurityProfileResponse {
}

interface DetachThingPrincipalRequest {
  readonly thingName: string;
  readonly principal: string;
}

interface DetachThingPrincipalResponse {
}

interface DetectMitigationActionExecution {
  readonly taskId: string;
  readonly violationId: string;
  readonly actionName: string;
  readonly thingName: string;
  readonly executionStartDate: Date;
  readonly executionEndDate: Date;
  readonly status: string;
  readonly errorCode: string;
  readonly message: string;
}

interface DetectMitigationActionsTaskStatistics {
  readonly actionsExecuted: number;
  readonly actionsSkipped: number;
  readonly actionsFailed: number;
}

interface DetectMitigationActionsTaskSummary {
  readonly taskId: string;
  readonly taskStatus: string;
  readonly taskStartTime: Date;
  readonly taskEndTime: Date;
  readonly target: DetectMitigationActionsTaskTarget;
  readonly violationEventOccurrenceRange: ViolationEventOccurrenceRange;
  readonly onlyActiveViolationsIncluded: boolean;
  readonly suppressedAlertsIncluded: boolean;
  readonly actionsDefinition: [];
  readonly taskStatistics: DetectMitigationActionsTaskStatistics;
}

interface DetectMitigationActionsTaskTarget {
  readonly violationIds: [];
  readonly securityProfileName: string;
  readonly behaviorName: string;
}

interface DisableTopicRuleRequest {
  readonly ruleName: string;
}

interface DocumentParameter {
  readonly key: string;
  readonly description: string;
  readonly regex: string;
  readonly example: string;
  readonly optional: boolean;
}

interface DomainConfigurationSummary {
  readonly domainConfigurationName: string;
  readonly domainConfigurationArn: string;
  readonly serviceType: string;
}

interface DynamoDBAction {
  readonly tableName: string;
  readonly roleArn: string;
  readonly operation: string;
  readonly hashKeyField: string;
  readonly hashKeyValue: string;
  readonly hashKeyType: string;
  readonly rangeKeyField: string;
  readonly rangeKeyValue: string;
  readonly rangeKeyType: string;
  readonly payloadField: string;
}

interface DynamoDBv2Action {
  readonly roleArn: string;
  readonly putItem: PutItemInput;
}

interface EffectivePolicy {
  readonly policyName: string;
  readonly policyArn: string;
  readonly policyDocument: string;
}

interface ElasticsearchAction {
  readonly roleArn: string;
  readonly endpoint: string;
  readonly index: string;
  readonly type: string;
  readonly id: string;
}

interface EnableIoTLoggingParams {
  readonly roleArnForLogging: string;
  readonly logLevel: string;
}

interface EnableTopicRuleRequest {
  readonly ruleName: string;
}

interface ErrorInfo {
  readonly code: string;
  readonly message: string;
}

interface ExplicitDeny {
  readonly policies: [];
}

interface ExponentialRolloutRate {
  readonly baseRatePerMinute: number;
  readonly incrementFactor: unknown;
  readonly rateIncreaseCriteria: RateIncreaseCriteria;
}

interface Field {
  readonly name: string;
  readonly type: string;
}

interface FileLocation {
  readonly stream: Stream;
  readonly s3Location: S3Location;
}

interface FirehoseAction {
  readonly roleArn: string;
  readonly deliveryStreamName: string;
  readonly separator: string;
  readonly batchMode: boolean;
}

interface FleetMetricNameAndArn {
  readonly metricName: string;
  readonly metricArn: string;
}

interface GetBehaviorModelTrainingSummariesRequest {
  readonly securityProfileName: string;
  readonly maxResults: number;
  readonly nextToken: string;
}

interface GetBehaviorModelTrainingSummariesResponse {
  readonly summaries: [];
  readonly nextToken: string;
}

interface GetBucketsAggregationRequest {
  readonly indexName: string;
  readonly queryString: string;
  readonly aggregationField: string;
  readonly queryVersion: string;
  readonly bucketsAggregationType: BucketsAggregationType;
}

interface GetBucketsAggregationResponse {
  readonly totalCount: number;
  readonly buckets: [];
}

interface GetCardinalityRequest {
  readonly indexName: string;
  readonly queryString: string;
  readonly aggregationField: string;
  readonly queryVersion: string;
}

interface GetCardinalityResponse {
  readonly cardinality: number;
}

interface GetEffectivePoliciesRequest {
  readonly principal: string;
  readonly cognitoIdentityPoolId: string;
  readonly thingName: string;
}

interface GetEffectivePoliciesResponse {
  readonly effectivePolicies: [];
}

interface GetIndexingConfigurationRequest {
}

interface GetIndexingConfigurationResponse {
  readonly thingIndexingConfiguration: ThingIndexingConfiguration;
  readonly thingGroupIndexingConfiguration: ThingGroupIndexingConfiguration;
}

interface GetJobDocumentRequest {
  readonly jobId: string;
}

interface GetJobDocumentResponse {
  readonly document: string;
}

interface GetLoggingOptionsRequest {
}

interface GetLoggingOptionsResponse {
  readonly roleArn: string;
  readonly logLevel: string;
}

interface GetOTAUpdateRequest {
  readonly otaUpdateId: string;
}

interface GetOTAUpdateResponse {
  readonly otaUpdateInfo: OTAUpdateInfo;
}

interface GetPercentilesRequest {
  readonly indexName: string;
  readonly queryString: string;
  readonly aggregationField: string;
  readonly queryVersion: string;
  readonly percents: [];
}

interface GetPercentilesResponse {
  readonly percentiles: [];
}

interface GetPolicyRequest {
  readonly policyName: string;
}

interface GetPolicyResponse {
  readonly policyName: string;
  readonly policyArn: string;
  readonly policyDocument: string;
  readonly defaultVersionId: string;
  readonly creationDate: Date;
  readonly lastModifiedDate: Date;
  readonly generationId: string;
}

interface GetPolicyVersionRequest {
  readonly policyName: string;
  readonly policyVersionId: string;
}

interface GetPolicyVersionResponse {
  readonly policyArn: string;
  readonly policyName: string;
  readonly policyDocument: string;
  readonly policyVersionId: string;
  readonly isDefaultVersion: boolean;
  readonly creationDate: Date;
  readonly lastModifiedDate: Date;
  readonly generationId: string;
}

interface GetRegistrationCodeRequest {
}

interface GetRegistrationCodeResponse {
  readonly registrationCode: string;
}

interface GetStatisticsRequest {
  readonly indexName: string;
  readonly queryString: string;
  readonly aggregationField: string;
  readonly queryVersion: string;
}

interface GetStatisticsResponse {
  readonly statistics: Statistics;
}

interface GetTopicRuleDestinationRequest {
  readonly arn: string;
}

interface GetTopicRuleDestinationResponse {
  readonly topicRuleDestination: TopicRuleDestination;
}

interface GetTopicRuleRequest {
  readonly ruleName: string;
}

interface GetTopicRuleResponse {
  readonly ruleArn: string;
  readonly rule: TopicRule;
}

interface GetV2LoggingOptionsRequest {
}

interface GetV2LoggingOptionsResponse {
  readonly roleArn: string;
  readonly defaultLogLevel: string;
  readonly disableAllLogs: boolean;
}

interface GroupNameAndArn {
  readonly groupName: string;
  readonly groupArn: string;
}

interface HttpAction {
  readonly url: string;
  readonly confirmationUrl: string;
  readonly headers: [];
  readonly auth: HttpAuthorization;
}

interface HttpActionHeader {
  readonly key: string;
  readonly value: string;
}

interface HttpAuthorization {
  readonly sigv4: SigV4Authorization;
}

interface HttpContext {
  readonly headers: {[key: string]: any};
  readonly queryString: string;
}

interface HttpUrlDestinationConfiguration {
  readonly confirmationUrl: string;
}

interface HttpUrlDestinationProperties {
  readonly confirmationUrl: string;
}

interface HttpUrlDestinationSummary {
  readonly confirmationUrl: string;
}

interface ImplicitDeny {
  readonly policies: [];
}

interface IndexNotReadyException {
  readonly message: string;
}

interface InternalException {
  readonly message: string;
}

interface InternalFailureException {
  readonly message: string;
}

interface InternalServerException {
  readonly message: string;
}

interface InvalidAggregationException {
  readonly message: string;
}

interface InvalidQueryException {
  readonly message: string;
}

interface InvalidRequestException {
  readonly message: string;
}

interface InvalidResponseException {
  readonly message: string;
}

interface InvalidStateTransitionException {
  readonly message: string;
}

interface IotAnalyticsAction {
  readonly channelArn: string;
  readonly channelName: string;
  readonly batchMode: boolean;
  readonly roleArn: string;
}

interface IotEventsAction {
  readonly inputName: string;
  readonly messageId: string;
  readonly batchMode: boolean;
  readonly roleArn: string;
}

interface IotSiteWiseAction {
  readonly putAssetPropertyValueEntries: [];
  readonly roleArn: string;
}

interface Job {
  readonly jobArn: string;
  readonly jobId: string;
  readonly targetSelection: string;
  readonly status: string;
  readonly forceCanceled: boolean;
  readonly reasonCode: string;
  readonly comment: string;
  readonly targets: [];
  readonly description: string;
  readonly presignedUrlConfig: PresignedUrlConfig;
  readonly jobExecutionsRolloutConfig: JobExecutionsRolloutConfig;
  readonly abortConfig: AbortConfig;
  readonly createdAt: Date;
  readonly lastUpdatedAt: Date;
  readonly completedAt: Date;
  readonly jobProcessDetails: JobProcessDetails;
  readonly timeoutConfig: TimeoutConfig;
  readonly namespaceId: string;
  readonly jobTemplateArn: string;
  readonly documentParameters: {[key: string]: any};
}

interface JobExecution {
  readonly jobId: string;
  readonly status: string;
  readonly forceCanceled: boolean;
  readonly statusDetails: JobExecutionStatusDetails;
  readonly thingArn: string;
  readonly queuedAt: Date;
  readonly startedAt: Date;
  readonly lastUpdatedAt: Date;
  readonly executionNumber: number;
  readonly versionNumber: number;
  readonly approximateSecondsBeforeTimedOut: number;
}

interface JobExecutionStatusDetails {
  readonly detailsMap: {[key: string]: any};
}

interface JobExecutionSummary {
  readonly status: string;
  readonly queuedAt: Date;
  readonly startedAt: Date;
  readonly lastUpdatedAt: Date;
  readonly executionNumber: number;
}

interface JobExecutionSummaryForJob {
  readonly thingArn: string;
  readonly jobExecutionSummary: JobExecutionSummary;
}

interface JobExecutionSummaryForThing {
  readonly jobId: string;
  readonly jobExecutionSummary: JobExecutionSummary;
}

interface JobExecutionsRolloutConfig {
  readonly maximumPerMinute: number;
  readonly exponentialRate: ExponentialRolloutRate;
}

interface JobProcessDetails {
  readonly processingTargets: [];
  readonly numberOfCanceledThings: number;
  readonly numberOfSucceededThings: number;
  readonly numberOfFailedThings: number;
  readonly numberOfRejectedThings: number;
  readonly numberOfQueuedThings: number;
  readonly numberOfInProgressThings: number;
  readonly numberOfRemovedThings: number;
  readonly numberOfTimedOutThings: number;
}

interface JobSummary {
  readonly jobArn: string;
  readonly jobId: string;
  readonly thingGroupId: string;
  readonly targetSelection: string;
  readonly status: string;
  readonly createdAt: Date;
  readonly lastUpdatedAt: Date;
  readonly completedAt: Date;
}

interface JobTemplateSummary {
  readonly jobTemplateArn: string;
  readonly jobTemplateId: string;
  readonly description: string;
  readonly createdAt: Date;
}

interface KafkaAction {
  readonly destinationArn: string;
  readonly topic: string;
  readonly key: string;
  readonly partition: string;
  readonly clientProperties: {[key: string]: any};
}

interface KeyPair {
  readonly PublicKey: string;
  readonly PrivateKey: string;
}

interface KinesisAction {
  readonly roleArn: string;
  readonly streamName: string;
  readonly partitionKey: string;
}

interface LambdaAction {
  readonly functionArn: string;
}

interface LimitExceededException {
  readonly message: string;
}

interface ListActiveViolationsRequest {
  readonly thingName: string;
  readonly securityProfileName: string;
  readonly behaviorCriteriaType: string;
  readonly listSuppressedAlerts: boolean;
  readonly verificationState: string;
  readonly nextToken: string;
  readonly maxResults: number;
}

interface ListActiveViolationsResponse {
  readonly activeViolations: [];
  readonly nextToken: string;
}

interface ListAttachedPoliciesRequest {
  readonly target: string;
  readonly recursive: boolean;
  readonly marker: string;
  readonly pageSize: number;
}

interface ListAttachedPoliciesResponse {
  readonly policies: [];
  readonly nextMarker: string;
}

interface ListAuditFindingsRequest {
  readonly taskId: string;
  readonly checkName: string;
  readonly resourceIdentifier: ResourceIdentifier;
  readonly maxResults: number;
  readonly nextToken: string;
  readonly startTime: Date;
  readonly endTime: Date;
  readonly listSuppressedFindings: boolean;
}

interface ListAuditFindingsResponse {
  readonly findings: [];
  readonly nextToken: string;
}

interface ListAuditMitigationActionsExecutionsRequest {
  readonly taskId: string;
  readonly actionStatus: string;
  readonly findingId: string;
  readonly maxResults: number;
  readonly nextToken: string;
}

interface ListAuditMitigationActionsExecutionsResponse {
  readonly actionsExecutions: [];
  readonly nextToken: string;
}

interface ListAuditMitigationActionsTasksRequest {
  readonly auditTaskId: string;
  readonly findingId: string;
  readonly taskStatus: string;
  readonly maxResults: number;
  readonly nextToken: string;
  readonly startTime: Date;
  readonly endTime: Date;
}

interface ListAuditMitigationActionsTasksResponse {
  readonly tasks: [];
  readonly nextToken: string;
}

interface ListAuditSuppressionsRequest {
  readonly checkName: string;
  readonly resourceIdentifier: ResourceIdentifier;
  readonly ascendingOrder: boolean;
  readonly nextToken: string;
  readonly maxResults: number;
}

interface ListAuditSuppressionsResponse {
  readonly suppressions: [];
  readonly nextToken: string;
}

interface ListAuditTasksRequest {
  readonly startTime: Date;
  readonly endTime: Date;
  readonly taskType: string;
  readonly taskStatus: string;
  readonly nextToken: string;
  readonly maxResults: number;
}

interface ListAuditTasksResponse {
  readonly tasks: [];
  readonly nextToken: string;
}

interface ListAuthorizersRequest {
  readonly pageSize: number;
  readonly marker: string;
  readonly ascendingOrder: boolean;
  readonly status: string;
}

interface ListAuthorizersResponse {
  readonly authorizers: [];
  readonly nextMarker: string;
}

interface ListBillingGroupsRequest {
  readonly nextToken: string;
  readonly maxResults: number;
  readonly namePrefixFilter: string;
}

interface ListBillingGroupsResponse {
  readonly billingGroups: [];
  readonly nextToken: string;
}

interface ListCACertificatesRequest {
  readonly pageSize: number;
  readonly marker: string;
  readonly ascendingOrder: boolean;
}

interface ListCACertificatesResponse {
  readonly certificates: [];
  readonly nextMarker: string;
}

interface ListCertificatesByCARequest {
  readonly caCertificateId: string;
  readonly pageSize: number;
  readonly marker: string;
  readonly ascendingOrder: boolean;
}

interface ListCertificatesByCAResponse {
  readonly certificates: [];
  readonly nextMarker: string;
}

interface ListCertificatesRequest {
  readonly pageSize: number;
  readonly marker: string;
  readonly ascendingOrder: boolean;
}

interface ListCertificatesResponse {
  readonly certificates: [];
  readonly nextMarker: string;
}

interface ListCustomMetricsRequest {
  readonly nextToken: string;
  readonly maxResults: number;
}

interface ListCustomMetricsResponse {
  readonly metricNames: [];
  readonly nextToken: string;
}

interface ListDetectMitigationActionsExecutionsRequest {
  readonly taskId: string;
  readonly violationId: string;
  readonly thingName: string;
  readonly startTime: Date;
  readonly endTime: Date;
  readonly maxResults: number;
  readonly nextToken: string;
}

interface ListDetectMitigationActionsExecutionsResponse {
  readonly actionsExecutions: [];
  readonly nextToken: string;
}

interface ListDetectMitigationActionsTasksRequest {
  readonly maxResults: number;
  readonly nextToken: string;
  readonly startTime: Date;
  readonly endTime: Date;
}

interface ListDetectMitigationActionsTasksResponse {
  readonly tasks: [];
  readonly nextToken: string;
}

interface ListDimensionsRequest {
  readonly nextToken: string;
  readonly maxResults: number;
}

interface ListDimensionsResponse {
  readonly dimensionNames: [];
  readonly nextToken: string;
}

interface ListDomainConfigurationsRequest {
  readonly marker: string;
  readonly pageSize: number;
  readonly serviceType: string;
}

interface ListDomainConfigurationsResponse {
  readonly domainConfigurations: [];
  readonly nextMarker: string;
}

interface ListFleetMetricsRequest {
  readonly nextToken: string;
  readonly maxResults: number;
}

interface ListFleetMetricsResponse {
  readonly fleetMetrics: [];
  readonly nextToken: string;
}

interface ListIndicesRequest {
  readonly nextToken: string;
  readonly maxResults: number;
}

interface ListIndicesResponse {
  readonly indexNames: [];
  readonly nextToken: string;
}

interface ListJobExecutionsForJobRequest {
  readonly jobId: string;
  readonly status: string;
  readonly maxResults: number;
  readonly nextToken: string;
}

interface ListJobExecutionsForJobResponse {
  readonly executionSummaries: [];
  readonly nextToken: string;
}

interface ListJobExecutionsForThingRequest {
  readonly thingName: string;
  readonly status: string;
  readonly namespaceId: string;
  readonly maxResults: number;
  readonly nextToken: string;
}

interface ListJobExecutionsForThingResponse {
  readonly executionSummaries: [];
  readonly nextToken: string;
}

interface ListJobTemplatesRequest {
  readonly maxResults: number;
  readonly nextToken: string;
}

interface ListJobTemplatesResponse {
  readonly jobTemplates: [];
  readonly nextToken: string;
}

interface ListJobsRequest {
  readonly status: string;
  readonly targetSelection: string;
  readonly maxResults: number;
  readonly nextToken: string;
  readonly thingGroupName: string;
  readonly thingGroupId: string;
  readonly namespaceId: string;
}

interface ListJobsResponse {
  readonly jobs: [];
  readonly nextToken: string;
}

interface ListManagedJobTemplatesRequest {
  readonly templateName: string;
  readonly maxResults: number;
  readonly nextToken: string;
}

interface ListManagedJobTemplatesResponse {
  readonly managedJobTemplates: [];
  readonly nextToken: string;
}

interface ListMitigationActionsRequest {
  readonly actionType: string;
  readonly maxResults: number;
  readonly nextToken: string;
}

interface ListMitigationActionsResponse {
  readonly actionIdentifiers: [];
  readonly nextToken: string;
}

interface ListOTAUpdatesRequest {
  readonly maxResults: number;
  readonly nextToken: string;
  readonly otaUpdateStatus: string;
}

interface ListOTAUpdatesResponse {
  readonly otaUpdates: [];
  readonly nextToken: string;
}

interface ListOutgoingCertificatesRequest {
  readonly pageSize: number;
  readonly marker: string;
  readonly ascendingOrder: boolean;
}

interface ListOutgoingCertificatesResponse {
  readonly outgoingCertificates: [];
  readonly nextMarker: string;
}

interface ListPoliciesRequest {
  readonly marker: string;
  readonly pageSize: number;
  readonly ascendingOrder: boolean;
}

interface ListPoliciesResponse {
  readonly policies: [];
  readonly nextMarker: string;
}

interface ListPolicyPrincipalsRequest {
  readonly policyName: string;
  readonly marker: string;
  readonly pageSize: number;
  readonly ascendingOrder: boolean;
}

interface ListPolicyPrincipalsResponse {
  readonly principals: [];
  readonly nextMarker: string;
}

interface ListPolicyVersionsRequest {
  readonly policyName: string;
}

interface ListPolicyVersionsResponse {
  readonly policyVersions: [];
}

interface ListPrincipalPoliciesRequest {
  readonly principal: string;
  readonly marker: string;
  readonly pageSize: number;
  readonly ascendingOrder: boolean;
}

interface ListPrincipalPoliciesResponse {
  readonly policies: [];
  readonly nextMarker: string;
}

interface ListPrincipalThingsRequest {
  readonly nextToken: string;
  readonly maxResults: number;
  readonly principal: string;
}

interface ListPrincipalThingsResponse {
  readonly things: [];
  readonly nextToken: string;
}

interface ListProvisioningTemplateVersionsRequest {
  readonly templateName: string;
  readonly maxResults: number;
  readonly nextToken: string;
}

interface ListProvisioningTemplateVersionsResponse {
  readonly versions: [];
  readonly nextToken: string;
}

interface ListProvisioningTemplatesRequest {
  readonly maxResults: number;
  readonly nextToken: string;
}

interface ListProvisioningTemplatesResponse {
  readonly templates: [];
  readonly nextToken: string;
}

interface ListRoleAliasesRequest {
  readonly pageSize: number;
  readonly marker: string;
  readonly ascendingOrder: boolean;
}

interface ListRoleAliasesResponse {
  readonly roleAliases: [];
  readonly nextMarker: string;
}

interface ListScheduledAuditsRequest {
  readonly nextToken: string;
  readonly maxResults: number;
}

interface ListScheduledAuditsResponse {
  readonly scheduledAudits: [];
  readonly nextToken: string;
}

interface ListSecurityProfilesForTargetRequest {
  readonly nextToken: string;
  readonly maxResults: number;
  readonly recursive: boolean;
  readonly securityProfileTargetArn: string;
}

interface ListSecurityProfilesForTargetResponse {
  readonly securityProfileTargetMappings: [];
  readonly nextToken: string;
}

interface ListSecurityProfilesRequest {
  readonly nextToken: string;
  readonly maxResults: number;
  readonly dimensionName: string;
  readonly metricName: string;
}

interface ListSecurityProfilesResponse {
  readonly securityProfileIdentifiers: [];
  readonly nextToken: string;
}

interface ListStreamsRequest {
  readonly maxResults: number;
  readonly nextToken: string;
  readonly ascendingOrder: boolean;
}

interface ListStreamsResponse {
  readonly streams: [];
  readonly nextToken: string;
}

interface ListTagsForResourceRequest {
  readonly resourceArn: string;
  readonly nextToken: string;
}

interface ListTagsForResourceResponse {
  readonly tags: [];
  readonly nextToken: string;
}

interface ListTargetsForPolicyRequest {
  readonly policyName: string;
  readonly marker: string;
  readonly pageSize: number;
}

interface ListTargetsForPolicyResponse {
  readonly targets: [];
  readonly nextMarker: string;
}

interface ListTargetsForSecurityProfileRequest {
  readonly securityProfileName: string;
  readonly nextToken: string;
  readonly maxResults: number;
}

interface ListTargetsForSecurityProfileResponse {
  readonly securityProfileTargets: [];
  readonly nextToken: string;
}

interface ListThingGroupsForThingRequest {
  readonly thingName: string;
  readonly nextToken: string;
  readonly maxResults: number;
}

interface ListThingGroupsForThingResponse {
  readonly thingGroups: [];
  readonly nextToken: string;
}

interface ListThingGroupsRequest {
  readonly nextToken: string;
  readonly maxResults: number;
  readonly parentGroup: string;
  readonly namePrefixFilter: string;
  readonly recursive: boolean;
}

interface ListThingGroupsResponse {
  readonly thingGroups: [];
  readonly nextToken: string;
}

interface ListThingPrincipalsRequest {
  readonly nextToken: string;
  readonly maxResults: number;
  readonly thingName: string;
}

interface ListThingPrincipalsResponse {
  readonly principals: [];
  readonly nextToken: string;
}

interface ListThingRegistrationTaskReportsRequest {
  readonly taskId: string;
  readonly reportType: string;
  readonly nextToken: string;
  readonly maxResults: number;
}

interface ListThingRegistrationTaskReportsResponse {
  readonly resourceLinks: [];
  readonly reportType: string;
  readonly nextToken: string;
}

interface ListThingRegistrationTasksRequest {
  readonly nextToken: string;
  readonly maxResults: number;
  readonly status: string;
}

interface ListThingRegistrationTasksResponse {
  readonly taskIds: [];
  readonly nextToken: string;
}

interface ListThingTypesRequest {
  readonly nextToken: string;
  readonly maxResults: number;
  readonly thingTypeName: string;
}

interface ListThingTypesResponse {
  readonly thingTypes: [];
  readonly nextToken: string;
}

interface ListThingsInBillingGroupRequest {
  readonly billingGroupName: string;
  readonly nextToken: string;
  readonly maxResults: number;
}

interface ListThingsInBillingGroupResponse {
  readonly things: [];
  readonly nextToken: string;
}

interface ListThingsInThingGroupRequest {
  readonly thingGroupName: string;
  readonly recursive: boolean;
  readonly nextToken: string;
  readonly maxResults: number;
}

interface ListThingsInThingGroupResponse {
  readonly things: [];
  readonly nextToken: string;
}

interface ListThingsRequest {
  readonly nextToken: string;
  readonly maxResults: number;
  readonly attributeName: string;
  readonly attributeValue: string;
  readonly thingTypeName: string;
  readonly usePrefixAttributeValue: boolean;
}

interface ListThingsResponse {
  readonly things: [];
  readonly nextToken: string;
}

interface ListTopicRuleDestinationsRequest {
  readonly maxResults: number;
  readonly nextToken: string;
}

interface ListTopicRuleDestinationsResponse {
  readonly destinationSummaries: [];
  readonly nextToken: string;
}

interface ListTopicRulesRequest {
  readonly topic: string;
  readonly maxResults: number;
  readonly nextToken: string;
  readonly ruleDisabled: boolean;
}

interface ListTopicRulesResponse {
  readonly rules: [];
  readonly nextToken: string;
}

interface ListV2LoggingLevelsRequest {
  readonly targetType: string;
  readonly nextToken: string;
  readonly maxResults: number;
}

interface ListV2LoggingLevelsResponse {
  readonly logTargetConfigurations: [];
  readonly nextToken: string;
}

interface ListViolationEventsRequest {
  readonly startTime: Date;
  readonly endTime: Date;
  readonly thingName: string;
  readonly securityProfileName: string;
  readonly behaviorCriteriaType: string;
  readonly listSuppressedAlerts: boolean;
  readonly verificationState: string;
  readonly nextToken: string;
  readonly maxResults: number;
}

interface ListViolationEventsResponse {
  readonly violationEvents: [];
  readonly nextToken: string;
}

interface LogTarget {
  readonly targetType: string;
  readonly targetName: string;
}

interface LogTargetConfiguration {
  readonly logTarget: LogTarget;
  readonly logLevel: string;
}

interface LoggingOptionsPayload {
  readonly roleArn: string;
  readonly logLevel: string;
}

interface MachineLearningDetectionConfig {
  readonly confidenceLevel: string;
}

interface MalformedPolicyException {
  readonly message: string;
}

interface ManagedJobTemplateSummary {
  readonly templateArn: string;
  readonly templateName: string;
  readonly description: string;
  readonly environments: [];
  readonly templateVersion: string;
}

interface MetricDimension {
  readonly dimensionName: string;
  readonly operator: string;
}

interface MetricToRetain {
  readonly metric: string;
  readonly metricDimension: MetricDimension;
}

interface MetricValue {
  readonly count: number;
  readonly cidrs: [];
  readonly ports: [];
  readonly number: unknown;
  readonly numbers: [];
  readonly strings: [];
}

interface MitigationAction {
  readonly name: string;
  readonly id: string;
  readonly roleArn: string;
  readonly actionParams: MitigationActionParams;
}

interface MitigationActionIdentifier {
  readonly actionName: string;
  readonly actionArn: string;
  readonly creationDate: Date;
}

interface MitigationActionParams {
  readonly updateDeviceCertificateParams: UpdateDeviceCertificateParams;
  readonly updateCACertificateParams: UpdateCACertificateParams;
  readonly addThingsToThingGroupParams: AddThingsToThingGroupParams;
  readonly replaceDefaultPolicyVersionParams: ReplaceDefaultPolicyVersionParams;
  readonly enableIoTLoggingParams: EnableIoTLoggingParams;
  readonly publishFindingToSnsParams: PublishFindingToSnsParams;
}

interface MqttContext {
  readonly username: string;
  readonly password: unknown;
  readonly clientId: string;
}

interface NonCompliantResource {
  readonly resourceType: string;
  readonly resourceIdentifier: ResourceIdentifier;
  readonly additionalInfo: {[key: string]: any};
}

interface NotConfiguredException {
  readonly message: string;
}

interface OTAUpdateFile {
  readonly fileName: string;
  readonly fileType: number;
  readonly fileVersion: string;
  readonly fileLocation: FileLocation;
  readonly codeSigning: CodeSigning;
  readonly attributes: {[key: string]: any};
}

interface OTAUpdateInfo {
  readonly otaUpdateId: string;
  readonly otaUpdateArn: string;
  readonly creationDate: Date;
  readonly lastModifiedDate: Date;
  readonly description: string;
  readonly targets: [];
  readonly protocols: [];
  readonly awsJobExecutionsRolloutConfig: AwsJobExecutionsRolloutConfig;
  readonly awsJobPresignedUrlConfig: AwsJobPresignedUrlConfig;
  readonly targetSelection: string;
  readonly otaUpdateFiles: [];
  readonly otaUpdateStatus: string;
  readonly awsIotJobId: string;
  readonly awsIotJobArn: string;
  readonly errorInfo: ErrorInfo;
  readonly additionalParameters: {[key: string]: any};
}

interface OTAUpdateSummary {
  readonly otaUpdateId: string;
  readonly otaUpdateArn: string;
  readonly creationDate: Date;
}

interface OpenSearchAction {
  readonly roleArn: string;
  readonly endpoint: string;
  readonly index: string;
  readonly type: string;
  readonly id: string;
}

interface OutgoingCertificate {
  readonly certificateArn: string;
  readonly certificateId: string;
  readonly transferredTo: string;
  readonly transferDate: Date;
  readonly transferMessage: string;
  readonly creationDate: Date;
}

interface PercentPair {
  readonly percent: unknown;
  readonly value: unknown;
}

interface Policy {
  readonly policyName: string;
  readonly policyArn: string;
}

interface PolicyVersion {
  readonly versionId: string;
  readonly isDefaultVersion: boolean;
  readonly createDate: Date;
}

interface PolicyVersionIdentifier {
  readonly policyName: string;
  readonly policyVersionId: string;
}

interface PresignedUrlConfig {
  readonly roleArn: string;
  readonly expiresInSec: number;
}

interface ProvisioningHook {
  readonly payloadVersion: string;
  readonly targetArn: string;
}

interface ProvisioningTemplateSummary {
  readonly templateArn: string;
  readonly templateName: string;
  readonly description: string;
  readonly creationDate: Date;
  readonly lastModifiedDate: Date;
  readonly enabled: boolean;
}

interface ProvisioningTemplateVersionSummary {
  readonly versionId: number;
  readonly creationDate: Date;
  readonly isDefaultVersion: boolean;
}

interface PublishFindingToSnsParams {
  readonly topicArn: string;
}

interface PutAssetPropertyValueEntry {
  readonly entryId: string;
  readonly assetId: string;
  readonly propertyId: string;
  readonly propertyAlias: string;
  readonly propertyValues: [];
}

interface PutItemInput {
  readonly tableName: string;
}

interface PutVerificationStateOnViolationRequest {
  readonly violationId: string;
  readonly verificationState: string;
  readonly verificationStateDescription: string;
}

interface PutVerificationStateOnViolationResponse {
}

interface RateIncreaseCriteria {
  readonly numberOfNotifiedThings: number;
  readonly numberOfSucceededThings: number;
}

interface RegisterCACertificateRequest {
  readonly caCertificate: string;
  readonly verificationCertificate: string;
  readonly setAsActive: boolean;
  readonly allowAutoRegistration: boolean;
  readonly registrationConfig: RegistrationConfig;
  readonly tags: [];
}

interface RegisterCACertificateResponse {
  readonly certificateArn: string;
  readonly certificateId: string;
}

interface RegisterCertificateRequest {
  readonly certificatePem: string;
  readonly caCertificatePem: string;
  readonly setAsActive: boolean;
  readonly status: string;
}

interface RegisterCertificateResponse {
  readonly certificateArn: string;
  readonly certificateId: string;
}

interface RegisterCertificateWithoutCARequest {
  readonly certificatePem: string;
  readonly status: string;
}

interface RegisterCertificateWithoutCAResponse {
  readonly certificateArn: string;
  readonly certificateId: string;
}

interface RegisterThingRequest {
  readonly templateBody: string;
  readonly parameters: {[key: string]: any};
}

interface RegisterThingResponse {
  readonly certificatePem: string;
  readonly resourceArns: {[key: string]: any};
}

interface RegistrationCodeValidationException {
  readonly message: string;
}

interface RegistrationConfig {
  readonly templateBody: string;
  readonly roleArn: string;
}

interface RejectCertificateTransferRequest {
  readonly certificateId: string;
  readonly rejectReason: string;
}

interface RelatedResource {
  readonly resourceType: string;
  readonly resourceIdentifier: ResourceIdentifier;
  readonly additionalInfo: {[key: string]: any};
}

interface RemoveThingFromBillingGroupRequest {
  readonly billingGroupName: string;
  readonly billingGroupArn: string;
  readonly thingName: string;
  readonly thingArn: string;
}

interface RemoveThingFromBillingGroupResponse {
}

interface RemoveThingFromThingGroupRequest {
  readonly thingGroupName: string;
  readonly thingGroupArn: string;
  readonly thingName: string;
  readonly thingArn: string;
}

interface RemoveThingFromThingGroupResponse {
}

interface ReplaceDefaultPolicyVersionParams {
  readonly templateName: string;
}

interface ReplaceTopicRuleRequest {
  readonly ruleName: string;
  readonly topicRulePayload: TopicRulePayload;
}

interface RepublishAction {
  readonly roleArn: string;
  readonly topic: string;
  readonly qos: number;
}

interface ResourceAlreadyExistsException {
  readonly message: string;
  readonly resourceId: string;
  readonly resourceArn: string;
}

interface ResourceIdentifier {
  readonly deviceCertificateId: string;
  readonly caCertificateId: string;
  readonly cognitoIdentityPoolId: string;
  readonly clientId: string;
  readonly policyVersionIdentifier: PolicyVersionIdentifier;
  readonly account: string;
  readonly iamRoleArn: string;
  readonly roleAliasArn: string;
}

interface ResourceNotFoundException {
  readonly message: string;
}

interface ResourceRegistrationFailureException {
  readonly message: string;
}

interface RoleAliasDescription {
  readonly roleAlias: string;
  readonly roleAliasArn: string;
  readonly roleArn: string;
  readonly owner: string;
  readonly credentialDurationSeconds: number;
  readonly creationDate: Date;
  readonly lastModifiedDate: Date;
}

interface S3Action {
  readonly roleArn: string;
  readonly bucketName: string;
  readonly key: string;
  readonly cannedAcl: string;
}

interface S3Destination {
  readonly bucket: string;
  readonly prefix: string;
}

interface S3Location {
  readonly bucket: string;
  readonly key: string;
  readonly version: string;
}

interface SalesforceAction {
  readonly token: string;
  readonly url: string;
}

interface ScheduledAuditMetadata {
  readonly scheduledAuditName: string;
  readonly scheduledAuditArn: string;
  readonly frequency: string;
  readonly dayOfMonth: string;
  readonly dayOfWeek: string;
}

interface SearchIndexRequest {
  readonly indexName: string;
  readonly queryString: string;
  readonly nextToken: string;
  readonly maxResults: number;
  readonly queryVersion: string;
}

interface SearchIndexResponse {
  readonly nextToken: string;
  readonly things: [];
  readonly thingGroups: [];
}

interface SecurityProfileIdentifier {
  readonly name: string;
  readonly arn: string;
}

interface SecurityProfileTarget {
  readonly arn: string;
}

interface SecurityProfileTargetMapping {
  readonly securityProfileIdentifier: SecurityProfileIdentifier;
  readonly target: SecurityProfileTarget;
}

interface ServerCertificateSummary {
  readonly serverCertificateArn: string;
  readonly serverCertificateStatus: string;
  readonly serverCertificateStatusDetail: string;
}

interface ServiceUnavailableException {
  readonly message: string;
}

interface SetDefaultAuthorizerRequest {
  readonly authorizerName: string;
}

interface SetDefaultAuthorizerResponse {
  readonly authorizerName: string;
  readonly authorizerArn: string;
}

interface SetDefaultPolicyVersionRequest {
  readonly policyName: string;
  readonly policyVersionId: string;
}

interface SetLoggingOptionsRequest {
  readonly loggingOptionsPayload: LoggingOptionsPayload;
}

interface SetV2LoggingLevelRequest {
  readonly logTarget: LogTarget;
  readonly logLevel: string;
}

interface SetV2LoggingOptionsRequest {
  readonly roleArn: string;
  readonly defaultLogLevel: string;
  readonly disableAllLogs: boolean;
}

interface SigV4Authorization {
  readonly signingRegion: string;
  readonly serviceName: string;
  readonly roleArn: string;
}

interface SigningProfileParameter {
  readonly certificateArn: string;
  readonly platform: string;
  readonly certificatePathOnDevice: string;
}

interface SnsAction {
  readonly targetArn: string;
  readonly roleArn: string;
  readonly messageFormat: string;
}

interface SqlParseException {
  readonly message: string;
}

interface SqsAction {
  readonly roleArn: string;
  readonly queueUrl: string;
  readonly useBase64: boolean;
}

interface StartAuditMitigationActionsTaskRequest {
  readonly taskId: string;
  readonly target: AuditMitigationActionsTaskTarget;
  readonly auditCheckToActionsMapping: {[key: string]: any};
  readonly clientRequestToken: string;
}

interface StartAuditMitigationActionsTaskResponse {
  readonly taskId: string;
}

interface StartDetectMitigationActionsTaskRequest {
  readonly taskId: string;
  readonly target: DetectMitigationActionsTaskTarget;
  readonly actions: [];
  readonly violationEventOccurrenceRange: ViolationEventOccurrenceRange;
  readonly includeOnlyActiveViolations: boolean;
  readonly includeSuppressedAlerts: boolean;
  readonly clientRequestToken: string;
}

interface StartDetectMitigationActionsTaskResponse {
  readonly taskId: string;
}

interface StartOnDemandAuditTaskRequest {
  readonly targetCheckNames: [];
}

interface StartOnDemandAuditTaskResponse {
  readonly taskId: string;
}

interface StartSigningJobParameter {
  readonly signingProfileParameter: SigningProfileParameter;
  readonly signingProfileName: string;
  readonly destination: Destination;
}

interface StartThingRegistrationTaskRequest {
  readonly templateBody: string;
  readonly inputFileBucket: string;
  readonly inputFileKey: string;
  readonly roleArn: string;
}

interface StartThingRegistrationTaskResponse {
  readonly taskId: string;
}

interface StatisticalThreshold {
  readonly statistic: string;
}

interface Statistics {
  readonly count: number;
  readonly average: unknown;
  readonly sum: unknown;
  readonly minimum: unknown;
  readonly maximum: unknown;
  readonly sumOfSquares: unknown;
  readonly variance: unknown;
  readonly stdDeviation: unknown;
}

interface StepFunctionsAction {
  readonly executionNamePrefix: string;
  readonly stateMachineName: string;
  readonly roleArn: string;
}

interface StopThingRegistrationTaskRequest {
  readonly taskId: string;
}

interface StopThingRegistrationTaskResponse {
}

interface Stream {
  readonly streamId: string;
  readonly fileId: number;
}

interface StreamFile {
  readonly fileId: number;
  readonly s3Location: S3Location;
}

interface StreamInfo {
  readonly streamId: string;
  readonly streamArn: string;
  readonly streamVersion: number;
  readonly description: string;
  readonly files: [];
  readonly createdAt: Date;
  readonly lastUpdatedAt: Date;
  readonly roleArn: string;
}

interface StreamSummary {
  readonly streamId: string;
  readonly streamArn: string;
  readonly streamVersion: number;
  readonly description: string;
}

interface Tag {
  readonly Key: string;
  readonly Value: string;
}

interface TagResourceRequest {
  readonly resourceArn: string;
  readonly tags: [];
}

interface TagResourceResponse {
}

interface TaskAlreadyExistsException {
  readonly message: string;
}

interface TaskStatistics {
  readonly totalChecks: number;
  readonly inProgressChecks: number;
  readonly waitingForDataCollectionChecks: number;
  readonly compliantChecks: number;
  readonly nonCompliantChecks: number;
  readonly failedChecks: number;
  readonly canceledChecks: number;
}

interface TaskStatisticsForAuditCheck {
  readonly totalFindingsCount: number;
  readonly failedFindingsCount: number;
  readonly succeededFindingsCount: number;
  readonly skippedFindingsCount: number;
  readonly canceledFindingsCount: number;
}

interface TermsAggregation {
  readonly maxBuckets: number;
}

interface TestAuthorizationRequest {
  readonly principal: string;
  readonly cognitoIdentityPoolId: string;
  readonly authInfos: [];
  readonly clientId: string;
  readonly policyNamesToAdd: [];
  readonly policyNamesToSkip: [];
}

interface TestAuthorizationResponse {
  readonly authResults: [];
}

interface TestInvokeAuthorizerRequest {
  readonly authorizerName: string;
  readonly token: string;
  readonly tokenSignature: string;
  readonly httpContext: HttpContext;
  readonly mqttContext: MqttContext;
  readonly tlsContext: TlsContext;
}

interface TestInvokeAuthorizerResponse {
  readonly isAuthenticated: boolean;
  readonly principalId: string;
  readonly policyDocuments: [];
  readonly refreshAfterInSeconds: number;
  readonly disconnectAfterInSeconds: number;
}

interface ThingAttribute {
  readonly thingName: string;
  readonly thingTypeName: string;
  readonly thingArn: string;
  readonly attributes: {[key: string]: any};
  readonly version: number;
}

interface ThingConnectivity {
  readonly connected: boolean;
  readonly timestamp: number;
  readonly disconnectReason: string;
}

interface ThingDocument {
  readonly thingName: string;
  readonly thingId: string;
  readonly thingTypeName: string;
  readonly thingGroupNames: [];
  readonly attributes: {[key: string]: any};
  readonly shadow: string;
  readonly deviceDefender: string;
  readonly connectivity: ThingConnectivity;
}

interface ThingGroupDocument {
  readonly thingGroupName: string;
  readonly thingGroupId: string;
  readonly thingGroupDescription: string;
  readonly attributes: {[key: string]: any};
  readonly parentGroupNames: [];
}

interface ThingGroupIndexingConfiguration {
  readonly thingGroupIndexingMode: string;
  readonly managedFields: [];
  readonly customFields: [];
}

interface ThingGroupMetadata {
  readonly parentGroupName: string;
  readonly rootToParentThingGroups: [];
  readonly creationDate: Date;
}

interface ThingGroupProperties {
  readonly thingGroupDescription: string;
  readonly attributePayload: AttributePayload;
}

interface ThingIndexingConfiguration {
  readonly thingIndexingMode: string;
  readonly thingConnectivityIndexingMode: string;
  readonly deviceDefenderIndexingMode: string;
  readonly namedShadowIndexingMode: string;
  readonly managedFields: [];
  readonly customFields: [];
}

interface ThingTypeDefinition {
  readonly thingTypeName: string;
  readonly thingTypeArn: string;
  readonly thingTypeProperties: ThingTypeProperties;
  readonly thingTypeMetadata: ThingTypeMetadata;
}

interface ThingTypeMetadata {
  readonly deprecated: boolean;
  readonly deprecationDate: Date;
  readonly creationDate: Date;
}

interface ThingTypeProperties {
  readonly thingTypeDescription: string;
  readonly searchableAttributes: [];
}

interface ThrottlingException {
  readonly message: string;
}

interface TimeoutConfig {
  readonly inProgressTimeoutInMinutes: number;
}

interface TimestreamAction {
  readonly roleArn: string;
  readonly databaseName: string;
  readonly tableName: string;
  readonly dimensions: [];
  readonly timestamp: TimestreamTimestamp;
}

interface TimestreamDimension {
  readonly name: string;
  readonly value: string;
}

interface TimestreamTimestamp {
  readonly value: string;
  readonly unit: string;
}

interface TlsContext {
  readonly serverName: string;
}

interface TopicRule {
  readonly ruleName: string;
  readonly sql: string;
  readonly description: string;
  readonly createdAt: Date;
  readonly actions: [];
  readonly ruleDisabled: boolean;
  readonly awsIotSqlVersion: string;
  readonly errorAction: Action;
}

interface TopicRuleDestination {
  readonly arn: string;
  readonly status: string;
  readonly createdAt: Date;
  readonly lastUpdatedAt: Date;
  readonly statusReason: string;
  readonly httpUrlProperties: HttpUrlDestinationProperties;
  readonly vpcProperties: VpcDestinationProperties;
}

interface TopicRuleDestinationConfiguration {
  readonly httpUrlConfiguration: HttpUrlDestinationConfiguration;
  readonly vpcConfiguration: VpcDestinationConfiguration;
}

interface TopicRuleDestinationSummary {
  readonly arn: string;
  readonly status: string;
  readonly createdAt: Date;
  readonly lastUpdatedAt: Date;
  readonly statusReason: string;
  readonly httpUrlSummary: HttpUrlDestinationSummary;
  readonly vpcDestinationSummary: VpcDestinationSummary;
}

interface TopicRuleListItem {
  readonly ruleArn: string;
  readonly ruleName: string;
  readonly topicPattern: string;
  readonly createdAt: Date;
  readonly ruleDisabled: boolean;
}

interface TopicRulePayload {
  readonly sql: string;
  readonly description: string;
  readonly actions: [];
  readonly ruleDisabled: boolean;
  readonly awsIotSqlVersion: string;
  readonly errorAction: Action;
}

interface TransferAlreadyCompletedException {
  readonly message: string;
}

interface TransferCertificateRequest {
  readonly certificateId: string;
  readonly targetAwsAccount: string;
  readonly transferMessage: string;
}

interface TransferCertificateResponse {
  readonly transferredCertificateArn: string;
}

interface TransferConflictException {
  readonly message: string;
}

interface TransferData {
  readonly transferMessage: string;
  readonly rejectReason: string;
  readonly transferDate: Date;
  readonly acceptDate: Date;
  readonly rejectDate: Date;
}

interface UnauthorizedException {
  readonly message: string;
}

interface UntagResourceRequest {
  readonly resourceArn: string;
  readonly tagKeys: [];
}

interface UntagResourceResponse {
}

interface UpdateAccountAuditConfigurationRequest {
  readonly roleArn: string;
  readonly auditNotificationTargetConfigurations: {[key: string]: any};
  readonly auditCheckConfigurations: {[key: string]: any};
}

interface UpdateAccountAuditConfigurationResponse {
}

interface UpdateAuditSuppressionRequest {
  readonly checkName: string;
  readonly resourceIdentifier: ResourceIdentifier;
  readonly expirationDate: Date;
  readonly suppressIndefinitely: boolean;
  readonly description: string;
}

interface UpdateAuditSuppressionResponse {
}

interface UpdateAuthorizerRequest {
  readonly authorizerName: string;
  readonly authorizerFunctionArn: string;
  readonly tokenKeyName: string;
  readonly tokenSigningPublicKeys: {[key: string]: any};
  readonly status: string;
  readonly enableCachingForHttp: boolean;
}

interface UpdateAuthorizerResponse {
  readonly authorizerName: string;
  readonly authorizerArn: string;
}

interface UpdateBillingGroupRequest {
  readonly billingGroupName: string;
  readonly billingGroupProperties: BillingGroupProperties;
  readonly expectedVersion: number;
}

interface UpdateBillingGroupResponse {
  readonly version: number;
}

interface UpdateCACertificateParams {
  readonly action: string;
}

interface UpdateCACertificateRequest {
  readonly certificateId: string;
  readonly newStatus: string;
  readonly newAutoRegistrationStatus: string;
  readonly registrationConfig: RegistrationConfig;
  readonly removeAutoRegistration: boolean;
}

interface UpdateCertificateRequest {
  readonly certificateId: string;
  readonly newStatus: string;
}

interface UpdateCustomMetricRequest {
  readonly metricName: string;
  readonly displayName: string;
}

interface UpdateCustomMetricResponse {
  readonly metricName: string;
  readonly metricArn: string;
  readonly metricType: string;
  readonly displayName: string;
  readonly creationDate: Date;
  readonly lastModifiedDate: Date;
}

interface UpdateDeviceCertificateParams {
  readonly action: string;
}

interface UpdateDimensionRequest {
  readonly name: string;
  readonly stringValues: [];
}

interface UpdateDimensionResponse {
  readonly name: string;
  readonly arn: string;
  readonly type: string;
  readonly stringValues: [];
  readonly creationDate: Date;
  readonly lastModifiedDate: Date;
}

interface UpdateDomainConfigurationRequest {
  readonly domainConfigurationName: string;
  readonly authorizerConfig: AuthorizerConfig;
  readonly domainConfigurationStatus: string;
  readonly removeAuthorizerConfig: boolean;
}

interface UpdateDomainConfigurationResponse {
  readonly domainConfigurationName: string;
  readonly domainConfigurationArn: string;
}

interface UpdateDynamicThingGroupRequest {
  readonly thingGroupName: string;
  readonly thingGroupProperties: ThingGroupProperties;
  readonly expectedVersion: number;
  readonly indexName: string;
  readonly queryString: string;
  readonly queryVersion: string;
}

interface UpdateDynamicThingGroupResponse {
  readonly version: number;
}

interface UpdateEventConfigurationsRequest {
  readonly eventConfigurations: {[key: string]: any};
}

interface UpdateEventConfigurationsResponse {
}

interface UpdateFleetMetricRequest {
  readonly metricName: string;
  readonly queryString: string;
  readonly aggregationType: AggregationType;
  readonly period: number;
  readonly aggregationField: string;
  readonly description: string;
  readonly queryVersion: string;
  readonly indexName: string;
  readonly unit: string;
  readonly expectedVersion: number;
}

interface UpdateIndexingConfigurationRequest {
  readonly thingIndexingConfiguration: ThingIndexingConfiguration;
  readonly thingGroupIndexingConfiguration: ThingGroupIndexingConfiguration;
}

interface UpdateIndexingConfigurationResponse {
}

interface UpdateJobRequest {
  readonly jobId: string;
  readonly description: string;
  readonly presignedUrlConfig: PresignedUrlConfig;
  readonly jobExecutionsRolloutConfig: JobExecutionsRolloutConfig;
  readonly abortConfig: AbortConfig;
  readonly timeoutConfig: TimeoutConfig;
  readonly namespaceId: string;
}

interface UpdateMitigationActionRequest {
  readonly actionName: string;
  readonly roleArn: string;
  readonly actionParams: MitigationActionParams;
}

interface UpdateMitigationActionResponse {
  readonly actionArn: string;
  readonly actionId: string;
}

interface UpdateProvisioningTemplateRequest {
  readonly templateName: string;
  readonly description: string;
  readonly enabled: boolean;
  readonly defaultVersionId: number;
  readonly provisioningRoleArn: string;
  readonly preProvisioningHook: ProvisioningHook;
  readonly removePreProvisioningHook: boolean;
}

interface UpdateProvisioningTemplateResponse {
}

interface UpdateRoleAliasRequest {
  readonly roleAlias: string;
  readonly roleArn: string;
  readonly credentialDurationSeconds: number;
}

interface UpdateRoleAliasResponse {
  readonly roleAlias: string;
  readonly roleAliasArn: string;
}

interface UpdateScheduledAuditRequest {
  readonly frequency: string;
  readonly dayOfMonth: string;
  readonly dayOfWeek: string;
  readonly targetCheckNames: [];
  readonly scheduledAuditName: string;
}

interface UpdateScheduledAuditResponse {
  readonly scheduledAuditArn: string;
}

interface UpdateSecurityProfileRequest {
  readonly securityProfileName: string;
  readonly securityProfileDescription: string;
  readonly behaviors: [];
  readonly alertTargets: {[key: string]: any};
  readonly additionalMetricsToRetain: [];
  readonly additionalMetricsToRetainV2: [];
  readonly deleteBehaviors: boolean;
  readonly deleteAlertTargets: boolean;
  readonly deleteAdditionalMetricsToRetain: boolean;
  readonly expectedVersion: number;
}

interface UpdateSecurityProfileResponse {
  readonly securityProfileName: string;
  readonly securityProfileArn: string;
  readonly securityProfileDescription: string;
  readonly behaviors: [];
  readonly alertTargets: {[key: string]: any};
  readonly additionalMetricsToRetain: [];
  readonly additionalMetricsToRetainV2: [];
  readonly version: number;
  readonly creationDate: Date;
  readonly lastModifiedDate: Date;
}

interface UpdateStreamRequest {
  readonly streamId: string;
  readonly description: string;
  readonly files: [];
  readonly roleArn: string;
}

interface UpdateStreamResponse {
  readonly streamId: string;
  readonly streamArn: string;
  readonly description: string;
  readonly streamVersion: number;
}

interface UpdateThingGroupRequest {
  readonly thingGroupName: string;
  readonly thingGroupProperties: ThingGroupProperties;
  readonly expectedVersion: number;
}

interface UpdateThingGroupResponse {
  readonly version: number;
}

interface UpdateThingGroupsForThingRequest {
  readonly thingName: string;
  readonly thingGroupsToAdd: [];
  readonly thingGroupsToRemove: [];
  readonly overrideDynamicGroups: boolean;
}

interface UpdateThingGroupsForThingResponse {
}

interface UpdateThingRequest {
  readonly thingName: string;
  readonly thingTypeName: string;
  readonly attributePayload: AttributePayload;
  readonly expectedVersion: number;
  readonly removeThingType: boolean;
}

interface UpdateThingResponse {
}

interface UpdateTopicRuleDestinationRequest {
  readonly arn: string;
  readonly status: string;
}

interface UpdateTopicRuleDestinationResponse {
}

interface ValidateSecurityProfileBehaviorsRequest {
  readonly behaviors: [];
}

interface ValidateSecurityProfileBehaviorsResponse {
  readonly valid: boolean;
  readonly validationErrors: [];
}

interface ValidationError {
  readonly errorMessage: string;
}

interface VersionConflictException {
  readonly message: string;
}

interface VersionsLimitExceededException {
  readonly message: string;
}

interface ViolationEvent {
  readonly violationId: string;
  readonly thingName: string;
  readonly securityProfileName: string;
  readonly behavior: Behavior;
  readonly metricValue: MetricValue;
  readonly violationEventAdditionalInfo: ViolationEventAdditionalInfo;
  readonly violationEventType: string;
  readonly verificationState: string;
  readonly verificationStateDescription: string;
  readonly violationEventTime: Date;
}

interface ViolationEventAdditionalInfo {
  readonly confidenceLevel: string;
}

interface ViolationEventOccurrenceRange {
  readonly startTime: Date;
  readonly endTime: Date;
}

interface VpcDestinationConfiguration {
  readonly subnetIds: [];
  readonly securityGroups: [];
  readonly vpcId: string;
  readonly roleArn: string;
}

interface VpcDestinationProperties {
  readonly subnetIds: [];
  readonly securityGroups: [];
  readonly vpcId: string;
  readonly roleArn: string;
}

interface VpcDestinationSummary {
  readonly subnetIds: [];
  readonly securityGroups: [];
  readonly vpcId: string;
  readonly roleArn: string;
}

