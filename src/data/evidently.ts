/**
 * STOP. This file is autogenerated. DO NOT EDIT by hand
 */
export interface BatchEvaluateFeature {
  readonly project: string;
  readonly requests: [];
}
export interface CreateExperiment {
  readonly description?: string;
  readonly metricGoals: [];
  readonly name: string;
  readonly onlineAbConfig?: OnlineAbConfig;
  readonly project: string;
  readonly randomizationSalt?: string;
  readonly samplingRate?: number;
  readonly tags?: {[key: string]: any};
  readonly treatments: [];
}
export interface CreateFeature {
  readonly defaultVariation?: string;
  readonly description?: string;
  readonly entityOverrides?: {[key: string]: any};
  readonly evaluationStrategy?: string;
  readonly name: string;
  readonly project: string;
  readonly tags?: {[key: string]: any};
  readonly variations: [];
}
export interface CreateLaunch {
  readonly description?: string;
  readonly groups: [];
  readonly metricMonitors?: [];
  readonly name: string;
  readonly project: string;
  readonly randomizationSalt?: string;
  readonly scheduledSplitsConfig?: ScheduledSplitsLaunchConfig;
  readonly tags?: {[key: string]: any};
}
export interface CreateProject {
  readonly dataDelivery?: ProjectDataDeliveryConfig;
  readonly description?: string;
  readonly name: string;
  readonly tags?: {[key: string]: any};
}
export interface DeleteExperiment {
  readonly experiment: string;
  readonly project: string;
}
export interface DeleteFeature {
  readonly feature: string;
  readonly project: string;
}
export interface DeleteLaunch {
  readonly launch: string;
  readonly project: string;
}
export interface DeleteProject {
  readonly project: string;
}
export interface EvaluateFeature {
  readonly entityId: string;
  readonly evaluationContext?: string;
  readonly feature: string;
  readonly project: string;
}
export interface GetExperiment {
  readonly experiment: string;
  readonly project: string;
}
export interface GetExperimentResults {
  readonly baseStat?: string;
  readonly endTime?: Date;
  readonly experiment: string;
  readonly metricNames: [];
  readonly period?: number;
  readonly project: string;
  readonly reportNames?: [];
  readonly resultStats?: [];
  readonly startTime?: Date;
  readonly treatmentNames: [];
}
export interface GetFeature {
  readonly feature: string;
  readonly project: string;
}
export interface GetLaunch {
  readonly launch: string;
  readonly project: string;
}
export interface GetProject {
  readonly project: string;
}
export interface ListExperiments {
  readonly maxResults?: number;
  readonly nextToken?: string;
  readonly project: string;
}
export interface ListFeatures {
  readonly maxResults?: number;
  readonly nextToken?: string;
  readonly project: string;
}
export interface ListLaunches {
  readonly maxResults?: number;
  readonly nextToken?: string;
  readonly project: string;
}
export interface ListProjects {
  readonly maxResults?: number;
  readonly nextToken?: string;
}
export interface ListTagsForResource {
  readonly resourceArn: string;
}
export interface PutProjectEvents {
  readonly events: [];
  readonly project: string;
}
export interface StartExperiment {
  readonly analysisCompleteTime: Date;
  readonly experiment: string;
  readonly project: string;
}
export interface StartLaunch {
  readonly launch: string;
  readonly project: string;
}
export interface StopExperiment {
  readonly desiredState?: string;
  readonly experiment: string;
  readonly project: string;
  readonly reason?: string;
}
export interface StopLaunch {
  readonly desiredState?: string;
  readonly launch: string;
  readonly project: string;
  readonly reason?: string;
}
export interface TagResource {
  readonly resourceArn: string;
  readonly tags: {[key: string]: any};
}
export interface UntagResource {
  readonly resourceArn: string;
  readonly tagKeys: [];
}
export interface UpdateExperiment {
  readonly description?: string;
  readonly experiment: string;
  readonly metricGoals?: [];
  readonly onlineAbConfig?: OnlineAbConfig;
  readonly project: string;
  readonly randomizationSalt?: string;
  readonly samplingRate?: number;
  readonly treatments?: [];
}
export interface UpdateFeature {
  readonly addOrUpdateVariations?: [];
  readonly defaultVariation?: string;
  readonly description?: string;
  readonly entityOverrides?: {[key: string]: any};
  readonly evaluationStrategy?: string;
  readonly feature: string;
  readonly project: string;
  readonly removeVariations?: [];
}
export interface UpdateLaunch {
  readonly description?: string;
  readonly groups?: [];
  readonly launch: string;
  readonly metricMonitors?: [];
  readonly project: string;
  readonly randomizationSalt?: string;
  readonly scheduledSplitsConfig?: ScheduledSplitsLaunchConfig;
}
export interface UpdateProject {
  readonly description?: string;
  readonly project: string;
}
export interface UpdateProjectDataDelivery {
  readonly cloudWatchLogs?: CloudWatchLogsDestinationConfig;
  readonly project: string;
  readonly s3Destination?: S3DestinationConfig;
}



interface AccessDeniedException {
  readonly message: string;
}

interface BatchEvaluateFeatureRequest {
  readonly project: string;
  readonly requests: [];
}

interface BatchEvaluateFeatureResponse {
  readonly results: [];
}

interface CloudWatchLogsDestination {
  readonly logGroup: string;
}

interface CloudWatchLogsDestinationConfig {
  readonly logGroup: string;
}

interface ConflictException {
  readonly message: string;
  readonly resourceId: string;
  readonly resourceType: string;
}

interface CreateExperimentRequest {
  readonly description: string;
  readonly metricGoals: [];
  readonly name: string;
  readonly onlineAbConfig: OnlineAbConfig;
  readonly project: string;
  readonly randomizationSalt: string;
  readonly samplingRate: number;
  readonly tags: {[key: string]: any};
  readonly treatments: [];
}

interface CreateExperimentResponse {
  readonly experiment: Experiment;
}

interface CreateFeatureRequest {
  readonly defaultVariation: string;
  readonly description: string;
  readonly entityOverrides: {[key: string]: any};
  readonly evaluationStrategy: string;
  readonly name: string;
  readonly project: string;
  readonly tags: {[key: string]: any};
  readonly variations: [];
}

interface CreateFeatureResponse {
  readonly feature: Feature;
}

interface CreateLaunchRequest {
  readonly description: string;
  readonly groups: [];
  readonly metricMonitors: [];
  readonly name: string;
  readonly project: string;
  readonly randomizationSalt: string;
  readonly scheduledSplitsConfig: ScheduledSplitsLaunchConfig;
  readonly tags: {[key: string]: any};
}

interface CreateLaunchResponse {
  readonly launch: Launch;
}

interface CreateProjectRequest {
  readonly dataDelivery: ProjectDataDeliveryConfig;
  readonly description: string;
  readonly name: string;
  readonly tags: {[key: string]: any};
}

interface CreateProjectResponse {
  readonly project: Project;
}

interface DeleteExperimentRequest {
  readonly experiment: string;
  readonly project: string;
}

interface DeleteExperimentResponse {
}

interface DeleteFeatureRequest {
  readonly feature: string;
  readonly project: string;
}

interface DeleteFeatureResponse {
}

interface DeleteLaunchRequest {
  readonly launch: string;
  readonly project: string;
}

interface DeleteLaunchResponse {
}

interface DeleteProjectRequest {
  readonly project: string;
}

interface DeleteProjectResponse {
}

interface EvaluateFeatureRequest {
  readonly entityId: string;
  readonly evaluationContext: string;
  readonly feature: string;
  readonly project: string;
}

interface EvaluateFeatureResponse {
  readonly details: string;
  readonly reason: string;
  readonly value: VariableValue;
  readonly variation: string;
}

interface EvaluationRequest {
  readonly entityId: string;
  readonly evaluationContext: string;
  readonly feature: string;
}

interface EvaluationResult {
  readonly details: string;
  readonly entityId: string;
  readonly feature: string;
  readonly project: string;
  readonly reason: string;
  readonly value: VariableValue;
  readonly variation: string;
}

interface EvaluationRule {
  readonly name: string;
  readonly type: string;
}

interface Event {
  readonly data: string;
  readonly timestamp: Date;
  readonly type: string;
}

interface Experiment {
  readonly arn: string;
  readonly createdTime: Date;
  readonly description: string;
  readonly execution: ExperimentExecution;
  readonly lastUpdatedTime: Date;
  readonly metricGoals: [];
  readonly name: string;
  readonly onlineAbDefinition: OnlineAbDefinition;
  readonly project: string;
  readonly randomizationSalt: string;
  readonly samplingRate: number;
  readonly schedule: ExperimentSchedule;
  readonly status: string;
  readonly statusReason: string;
  readonly tags: {[key: string]: any};
  readonly treatments: [];
  readonly type: string;
}

interface ExperimentExecution {
  readonly endedTime: Date;
  readonly startedTime: Date;
}

interface ExperimentReport {
  readonly content: string;
  readonly metricName: string;
  readonly reportName: string;
  readonly treatmentName: string;
}

interface ExperimentResultsData {
  readonly metricName: string;
  readonly resultStat: string;
  readonly treatmentName: string;
  readonly values: [];
}

interface ExperimentSchedule {
  readonly analysisCompleteTime: Date;
}

interface Feature {
  readonly arn: string;
  readonly createdTime: Date;
  readonly defaultVariation: string;
  readonly description: string;
  readonly entityOverrides: {[key: string]: any};
  readonly evaluationRules: [];
  readonly evaluationStrategy: string;
  readonly lastUpdatedTime: Date;
  readonly name: string;
  readonly project: string;
  readonly status: string;
  readonly tags: {[key: string]: any};
  readonly valueType: string;
  readonly variations: [];
}

interface FeatureSummary {
  readonly arn: string;
  readonly createdTime: Date;
  readonly defaultVariation: string;
  readonly evaluationRules: [];
  readonly evaluationStrategy: string;
  readonly lastUpdatedTime: Date;
  readonly name: string;
  readonly project: string;
  readonly status: string;
  readonly tags: {[key: string]: any};
}

interface GetExperimentRequest {
  readonly experiment: string;
  readonly project: string;
}

interface GetExperimentResponse {
  readonly experiment: Experiment;
}

interface GetExperimentResultsRequest {
  readonly baseStat: string;
  readonly endTime: Date;
  readonly experiment: string;
  readonly metricNames: [];
  readonly period: number;
  readonly project: string;
  readonly reportNames: [];
  readonly resultStats: [];
  readonly startTime: Date;
  readonly treatmentNames: [];
}

interface GetExperimentResultsResponse {
  readonly reports: [];
  readonly resultsData: [];
  readonly timestamps: [];
}

interface GetFeatureRequest {
  readonly feature: string;
  readonly project: string;
}

interface GetFeatureResponse {
  readonly feature: Feature;
}

interface GetLaunchRequest {
  readonly launch: string;
  readonly project: string;
}

interface GetLaunchResponse {
  readonly launch: Launch;
}

interface GetProjectRequest {
  readonly project: string;
}

interface GetProjectResponse {
  readonly project: Project;
}

interface InternalServerException {
  readonly message: string;
}

interface Launch {
  readonly arn: string;
  readonly createdTime: Date;
  readonly description: string;
  readonly execution: LaunchExecution;
  readonly groups: [];
  readonly lastUpdatedTime: Date;
  readonly metricMonitors: [];
  readonly name: string;
  readonly project: string;
  readonly randomizationSalt: string;
  readonly scheduledSplitsDefinition: ScheduledSplitsLaunchDefinition;
  readonly status: string;
  readonly statusReason: string;
  readonly tags: {[key: string]: any};
  readonly type: string;
}

interface LaunchExecution {
  readonly endedTime: Date;
  readonly startedTime: Date;
}

interface LaunchGroup {
  readonly description: string;
  readonly featureVariations: {[key: string]: any};
  readonly name: string;
}

interface LaunchGroupConfig {
  readonly description: string;
  readonly feature: string;
  readonly name: string;
  readonly variation: string;
}

interface ListExperimentsRequest {
  readonly maxResults: number;
  readonly nextToken: string;
  readonly project: string;
}

interface ListExperimentsResponse {
  readonly experiments: [];
  readonly nextToken: string;
}

interface ListFeaturesRequest {
  readonly maxResults: number;
  readonly nextToken: string;
  readonly project: string;
}

interface ListFeaturesResponse {
  readonly features: [];
  readonly nextToken: string;
}

interface ListLaunchesRequest {
  readonly maxResults: number;
  readonly nextToken: string;
  readonly project: string;
}

interface ListLaunchesResponse {
  readonly launches: [];
  readonly nextToken: string;
}

interface ListProjectsRequest {
  readonly maxResults: number;
  readonly nextToken: string;
}

interface ListProjectsResponse {
  readonly nextToken: string;
  readonly projects: [];
}

interface ListTagsForResourceRequest {
  readonly resourceArn: string;
}

interface ListTagsForResourceResponse {
  readonly tags: {[key: string]: any};
}

interface MetricDefinition {
  readonly entityIdKey: string;
  readonly eventPattern: string;
  readonly name: string;
  readonly unitLabel: string;
  readonly valueKey: string;
}

interface MetricDefinitionConfig {
  readonly entityIdKey: string;
  readonly eventPattern: string;
  readonly name: string;
  readonly unitLabel: string;
  readonly valueKey: string;
}

interface MetricGoal {
  readonly desiredChange: string;
  readonly metricDefinition: MetricDefinition;
}

interface MetricGoalConfig {
  readonly desiredChange: string;
  readonly metricDefinition: MetricDefinitionConfig;
}

interface MetricMonitor {
  readonly metricDefinition: MetricDefinition;
}

interface MetricMonitorConfig {
  readonly metricDefinition: MetricDefinitionConfig;
}

interface OnlineAbConfig {
  readonly controlTreatmentName: string;
  readonly treatmentWeights: {[key: string]: any};
}

interface OnlineAbDefinition {
  readonly controlTreatmentName: string;
  readonly treatmentWeights: {[key: string]: any};
}

interface Project {
  readonly activeExperimentCount: number;
  readonly activeLaunchCount: number;
  readonly arn: string;
  readonly createdTime: Date;
  readonly dataDelivery: ProjectDataDelivery;
  readonly description: string;
  readonly experimentCount: number;
  readonly featureCount: number;
  readonly lastUpdatedTime: Date;
  readonly launchCount: number;
  readonly name: string;
  readonly status: string;
  readonly tags: {[key: string]: any};
}

interface ProjectDataDelivery {
  readonly cloudWatchLogs: CloudWatchLogsDestination;
  readonly s3Destination: S3Destination;
}

interface ProjectDataDeliveryConfig {
  readonly cloudWatchLogs: CloudWatchLogsDestinationConfig;
  readonly s3Destination: S3DestinationConfig;
}

interface ProjectSummary {
  readonly activeExperimentCount: number;
  readonly activeLaunchCount: number;
  readonly arn: string;
  readonly createdTime: Date;
  readonly description: string;
  readonly experimentCount: number;
  readonly featureCount: number;
  readonly lastUpdatedTime: Date;
  readonly launchCount: number;
  readonly name: string;
  readonly status: string;
  readonly tags: {[key: string]: any};
}

interface PutProjectEventsRequest {
  readonly events: [];
  readonly project: string;
}

interface PutProjectEventsResponse {
  readonly eventResults: [];
  readonly failedEventCount: number;
}

interface PutProjectEventsResultEntry {
  readonly errorCode: string;
  readonly errorMessage: string;
  readonly eventId: string;
}

interface ResourceNotFoundException {
  readonly message: string;
  readonly resourceId: string;
  readonly resourceType: string;
}

interface S3Destination {
  readonly bucket: string;
  readonly prefix: string;
}

interface S3DestinationConfig {
  readonly bucket: string;
  readonly prefix: string;
}

interface ScheduledSplit {
  readonly groupWeights: {[key: string]: any};
  readonly startTime: Date;
}

interface ScheduledSplitConfig {
  readonly groupWeights: {[key: string]: any};
  readonly startTime: Date;
}

interface ScheduledSplitsLaunchConfig {
  readonly steps: [];
}

interface ScheduledSplitsLaunchDefinition {
  readonly steps: [];
}

interface ServiceQuotaExceededException {
  readonly message: string;
  readonly quotaCode: string;
  readonly resourceId: string;
  readonly resourceType: string;
  readonly serviceCode: string;
}

interface ServiceUnavailableException {
  readonly message: string;
}

interface StartExperimentRequest {
  readonly analysisCompleteTime: Date;
  readonly experiment: string;
  readonly project: string;
}

interface StartExperimentResponse {
  readonly startedTime: Date;
}

interface StartLaunchRequest {
  readonly launch: string;
  readonly project: string;
}

interface StartLaunchResponse {
  readonly launch: Launch;
}

interface StopExperimentRequest {
  readonly desiredState: string;
  readonly experiment: string;
  readonly project: string;
  readonly reason: string;
}

interface StopExperimentResponse {
  readonly endedTime: Date;
}

interface StopLaunchRequest {
  readonly desiredState: string;
  readonly launch: string;
  readonly project: string;
  readonly reason: string;
}

interface StopLaunchResponse {
  readonly endedTime: Date;
}

interface TagResourceRequest {
  readonly resourceArn: string;
  readonly tags: {[key: string]: any};
}

interface TagResourceResponse {
}

interface ThrottlingException {
  readonly message: string;
  readonly quotaCode: string;
  readonly serviceCode: string;
}

interface Treatment {
  readonly description: string;
  readonly featureVariations: {[key: string]: any};
  readonly name: string;
}

interface TreatmentConfig {
  readonly description: string;
  readonly feature: string;
  readonly name: string;
  readonly variation: string;
}

interface UntagResourceRequest {
  readonly resourceArn: string;
  readonly tagKeys: [];
}

interface UntagResourceResponse {
}

interface UpdateExperimentRequest {
  readonly description: string;
  readonly experiment: string;
  readonly metricGoals: [];
  readonly onlineAbConfig: OnlineAbConfig;
  readonly project: string;
  readonly randomizationSalt: string;
  readonly samplingRate: number;
  readonly treatments: [];
}

interface UpdateExperimentResponse {
  readonly experiment: Experiment;
}

interface UpdateFeatureRequest {
  readonly addOrUpdateVariations: [];
  readonly defaultVariation: string;
  readonly description: string;
  readonly entityOverrides: {[key: string]: any};
  readonly evaluationStrategy: string;
  readonly feature: string;
  readonly project: string;
  readonly removeVariations: [];
}

interface UpdateFeatureResponse {
  readonly feature: Feature;
}

interface UpdateLaunchRequest {
  readonly description: string;
  readonly groups: [];
  readonly launch: string;
  readonly metricMonitors: [];
  readonly project: string;
  readonly randomizationSalt: string;
  readonly scheduledSplitsConfig: ScheduledSplitsLaunchConfig;
}

interface UpdateLaunchResponse {
  readonly launch: Launch;
}

interface UpdateProjectDataDeliveryRequest {
  readonly cloudWatchLogs: CloudWatchLogsDestinationConfig;
  readonly project: string;
  readonly s3Destination: S3DestinationConfig;
}

interface UpdateProjectDataDeliveryResponse {
  readonly project: Project;
}

interface UpdateProjectRequest {
  readonly description: string;
  readonly project: string;
}

interface UpdateProjectResponse {
  readonly project: Project;
}

interface ValidationException {
  readonly fieldList: [];
  readonly message: string;
  readonly reason: string;
}

interface ValidationExceptionField {
  readonly message: string;
  readonly name: string;
}

interface VariableValue {
  readonly boolValue: boolean;
  readonly doubleValue: unknown;
  readonly longValue: number;
  readonly stringValue: string;
}

interface Variation {
  readonly name: string;
  readonly value: VariableValue;
}

interface VariationConfig {
  readonly name: string;
  readonly value: VariableValue;
}

