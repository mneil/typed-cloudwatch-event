/**
 * STOP. This file is autogenerated. DO NOT EDIT by hand
 */
export interface AcceptEnvironmentAccountConnection {
  readonly id: string;
}
export interface CancelEnvironmentDeployment {
  readonly environmentName: string;
}
export interface CancelServiceInstanceDeployment {
  readonly serviceInstanceName: string;
  readonly serviceName: string;
}
export interface CancelServicePipelineDeployment {
  readonly serviceName: string;
}
export interface CreateEnvironment {
  readonly description?: string;
  readonly environmentAccountConnectionId?: string;
  readonly name: string;
  readonly protonServiceRoleArn?: string;
  readonly provisioningRepository?: RepositoryBranchInput;
  readonly spec: string;
  readonly tags?: [];
  readonly templateMajorVersion: string;
  readonly templateMinorVersion?: string;
  readonly templateName: string;
}
export interface CreateEnvironmentAccountConnection {
  readonly clientToken?: string;
  readonly environmentName: string;
  readonly managementAccountId: string;
  readonly roleArn: string;
  readonly tags?: [];
}
export interface CreateEnvironmentTemplate {
  readonly description?: string;
  readonly displayName?: string;
  readonly encryptionKey?: string;
  readonly name: string;
  readonly provisioning?: string;
  readonly tags?: [];
}
export interface CreateEnvironmentTemplateVersion {
  readonly clientToken?: string;
  readonly description?: string;
  readonly majorVersion?: string;
  readonly source: TemplateVersionSourceInput;
  readonly tags?: [];
  readonly templateName: string;
}
export interface CreateRepository {
  readonly connectionArn: string;
  readonly encryptionKey?: string;
  readonly name: string;
  readonly provider: string;
}
export interface CreateService {
  readonly branchName?: string;
  readonly description?: string;
  readonly name: string;
  readonly repositoryConnectionArn?: string;
  readonly repositoryId?: string;
  readonly spec: string;
  readonly tags?: [];
  readonly templateMajorVersion: string;
  readonly templateMinorVersion?: string;
  readonly templateName: string;
}
export interface CreateServiceTemplate {
  readonly description?: string;
  readonly displayName?: string;
  readonly encryptionKey?: string;
  readonly name: string;
  readonly pipelineProvisioning?: string;
  readonly tags?: [];
}
export interface CreateServiceTemplateVersion {
  readonly clientToken?: string;
  readonly compatibleEnvironmentTemplates: [];
  readonly description?: string;
  readonly majorVersion?: string;
  readonly source: TemplateVersionSourceInput;
  readonly tags?: [];
  readonly templateName: string;
}
export interface CreateTemplateSyncConfig {
  readonly branch: string;
  readonly repositoryName: string;
  readonly repositoryProvider: string;
  readonly subdirectory?: string;
  readonly templateName: string;
  readonly templateType: string;
}
export interface DeleteEnvironment {
  readonly name: string;
}
export interface DeleteEnvironmentAccountConnection {
  readonly id: string;
}
export interface DeleteEnvironmentTemplate {
  readonly name: string;
}
export interface DeleteEnvironmentTemplateVersion {
  readonly majorVersion: string;
  readonly minorVersion: string;
  readonly templateName: string;
}
export interface DeleteRepository {
  readonly name: string;
  readonly provider: string;
}
export interface DeleteService {
  readonly name: string;
}
export interface DeleteServiceTemplate {
  readonly name: string;
}
export interface DeleteServiceTemplateVersion {
  readonly majorVersion: string;
  readonly minorVersion: string;
  readonly templateName: string;
}
export interface DeleteTemplateSyncConfig {
  readonly templateName: string;
  readonly templateType: string;
}
export interface GetAccountSettings {
}
export interface GetEnvironment {
  readonly name: string;
}
export interface GetEnvironmentAccountConnection {
  readonly id: string;
}
export interface GetEnvironmentTemplate {
  readonly name: string;
}
export interface GetEnvironmentTemplateVersion {
  readonly majorVersion: string;
  readonly minorVersion: string;
  readonly templateName: string;
}
export interface GetRepository {
  readonly name: string;
  readonly provider: string;
}
export interface GetRepositorySyncStatus {
  readonly branch: string;
  readonly repositoryName: string;
  readonly repositoryProvider: string;
  readonly syncType: string;
}
export interface GetService {
  readonly name: string;
}
export interface GetServiceInstance {
  readonly name: string;
  readonly serviceName: string;
}
export interface GetServiceTemplate {
  readonly name: string;
}
export interface GetServiceTemplateVersion {
  readonly majorVersion: string;
  readonly minorVersion: string;
  readonly templateName: string;
}
export interface GetTemplateSyncConfig {
  readonly templateName: string;
  readonly templateType: string;
}
export interface GetTemplateSyncStatus {
  readonly templateName: string;
  readonly templateType: string;
  readonly templateVersion: string;
}
export interface ListEnvironmentAccountConnections {
  readonly environmentName?: string;
  readonly maxResults?: number;
  readonly nextToken?: string;
  readonly requestedBy: string;
  readonly statuses?: [];
}
export interface ListEnvironmentOutputs {
  readonly environmentName: string;
  readonly nextToken?: string;
}
export interface ListEnvironmentProvisionedResources {
  readonly environmentName: string;
  readonly nextToken?: string;
}
export interface ListEnvironmentTemplateVersions {
  readonly majorVersion?: string;
  readonly maxResults?: number;
  readonly nextToken?: string;
  readonly templateName: string;
}
export interface ListEnvironmentTemplates {
  readonly maxResults?: number;
  readonly nextToken?: string;
}
export interface ListEnvironments {
  readonly environmentTemplates?: [];
  readonly maxResults?: number;
  readonly nextToken?: string;
}
export interface ListRepositories {
  readonly maxResults?: number;
  readonly nextToken?: string;
}
export interface ListRepositorySyncDefinitions {
  readonly nextToken?: string;
  readonly repositoryName: string;
  readonly repositoryProvider: string;
  readonly syncType: string;
}
export interface ListServiceInstanceOutputs {
  readonly nextToken?: string;
  readonly serviceInstanceName: string;
  readonly serviceName: string;
}
export interface ListServiceInstanceProvisionedResources {
  readonly nextToken?: string;
  readonly serviceInstanceName: string;
  readonly serviceName: string;
}
export interface ListServiceInstances {
  readonly maxResults?: number;
  readonly nextToken?: string;
  readonly serviceName?: string;
}
export interface ListServicePipelineOutputs {
  readonly nextToken?: string;
  readonly serviceName: string;
}
export interface ListServicePipelineProvisionedResources {
  readonly nextToken?: string;
  readonly serviceName: string;
}
export interface ListServiceTemplateVersions {
  readonly majorVersion?: string;
  readonly maxResults?: number;
  readonly nextToken?: string;
  readonly templateName: string;
}
export interface ListServiceTemplates {
  readonly maxResults?: number;
  readonly nextToken?: string;
}
export interface ListServices {
  readonly maxResults?: number;
  readonly nextToken?: string;
}
export interface ListTagsForResource {
  readonly maxResults?: number;
  readonly nextToken?: string;
  readonly resourceArn: string;
}
export interface NotifyResourceDeploymentStatusChange {
  readonly deploymentId?: string;
  readonly outputs?: [];
  readonly resourceArn: string;
  readonly status: string;
  readonly statusMessage?: string;
}
export interface RejectEnvironmentAccountConnection {
  readonly id: string;
}
export interface TagResource {
  readonly resourceArn: string;
  readonly tags: [];
}
export interface UntagResource {
  readonly resourceArn: string;
  readonly tagKeys: [];
}
export interface UpdateAccountSettings {
  readonly pipelineProvisioningRepository?: RepositoryBranchInput;
  readonly pipelineServiceRoleArn?: string;
}
export interface UpdateEnvironment {
  readonly deploymentType: string;
  readonly description?: string;
  readonly environmentAccountConnectionId?: string;
  readonly name: string;
  readonly protonServiceRoleArn?: string;
  readonly provisioningRepository?: RepositoryBranchInput;
  readonly spec?: string;
  readonly templateMajorVersion?: string;
  readonly templateMinorVersion?: string;
}
export interface UpdateEnvironmentAccountConnection {
  readonly id: string;
  readonly roleArn: string;
}
export interface UpdateEnvironmentTemplate {
  readonly description?: string;
  readonly displayName?: string;
  readonly name: string;
}
export interface UpdateEnvironmentTemplateVersion {
  readonly description?: string;
  readonly majorVersion: string;
  readonly minorVersion: string;
  readonly status?: string;
  readonly templateName: string;
}
export interface UpdateService {
  readonly description?: string;
  readonly name: string;
  readonly spec?: string;
}
export interface UpdateServiceInstance {
  readonly deploymentType: string;
  readonly name: string;
  readonly serviceName: string;
  readonly spec?: string;
  readonly templateMajorVersion?: string;
  readonly templateMinorVersion?: string;
}
export interface UpdateServicePipeline {
  readonly deploymentType: string;
  readonly serviceName: string;
  readonly spec: string;
  readonly templateMajorVersion?: string;
  readonly templateMinorVersion?: string;
}
export interface UpdateServiceTemplate {
  readonly description?: string;
  readonly displayName?: string;
  readonly name: string;
}
export interface UpdateServiceTemplateVersion {
  readonly compatibleEnvironmentTemplates?: [];
  readonly description?: string;
  readonly majorVersion: string;
  readonly minorVersion: string;
  readonly status?: string;
  readonly templateName: string;
}
export interface UpdateTemplateSyncConfig {
  readonly branch: string;
  readonly repositoryName: string;
  readonly repositoryProvider: string;
  readonly subdirectory?: string;
  readonly templateName: string;
  readonly templateType: string;
}



interface AcceptEnvironmentAccountConnectionInput {
  readonly id: string;
}

interface AcceptEnvironmentAccountConnectionOutput {
  readonly environmentAccountConnection: EnvironmentAccountConnection;
}

interface AccessDeniedException {
  readonly message: string;
}

interface AccountSettings {
  readonly pipelineProvisioningRepository: RepositoryBranch;
  readonly pipelineServiceRoleArn: string;
}

interface CancelEnvironmentDeploymentInput {
  readonly environmentName: string;
}

interface CancelEnvironmentDeploymentOutput {
  readonly environment: Environment;
}

interface CancelServiceInstanceDeploymentInput {
  readonly serviceInstanceName: string;
  readonly serviceName: string;
}

interface CancelServiceInstanceDeploymentOutput {
  readonly serviceInstance: ServiceInstance;
}

interface CancelServicePipelineDeploymentInput {
  readonly serviceName: string;
}

interface CancelServicePipelineDeploymentOutput {
  readonly pipeline: ServicePipeline;
}

interface CompatibleEnvironmentTemplate {
  readonly majorVersion: string;
  readonly templateName: string;
}

interface CompatibleEnvironmentTemplateInput {
  readonly majorVersion: string;
  readonly templateName: string;
}

interface ConflictException {
  readonly message: string;
}

interface CreateEnvironmentAccountConnectionInput {
  readonly clientToken: string;
  readonly environmentName: string;
  readonly managementAccountId: string;
  readonly roleArn: string;
  readonly tags: [];
}

interface CreateEnvironmentAccountConnectionOutput {
  readonly environmentAccountConnection: EnvironmentAccountConnection;
}

interface CreateEnvironmentInput {
  readonly description: string;
  readonly environmentAccountConnectionId: string;
  readonly name: string;
  readonly protonServiceRoleArn: string;
  readonly provisioningRepository: RepositoryBranchInput;
  readonly spec: string;
  readonly tags: [];
  readonly templateMajorVersion: string;
  readonly templateMinorVersion: string;
  readonly templateName: string;
}

interface CreateEnvironmentOutput {
  readonly environment: Environment;
}

interface CreateEnvironmentTemplateInput {
  readonly description: string;
  readonly displayName: string;
  readonly encryptionKey: string;
  readonly name: string;
  readonly provisioning: string;
  readonly tags: [];
}

interface CreateEnvironmentTemplateOutput {
  readonly environmentTemplate: EnvironmentTemplate;
}

interface CreateEnvironmentTemplateVersionInput {
  readonly clientToken: string;
  readonly description: string;
  readonly majorVersion: string;
  readonly source: TemplateVersionSourceInput;
  readonly tags: [];
  readonly templateName: string;
}

interface CreateEnvironmentTemplateVersionOutput {
  readonly environmentTemplateVersion: EnvironmentTemplateVersion;
}

interface CreateRepositoryInput {
  readonly connectionArn: string;
  readonly encryptionKey: string;
  readonly name: string;
  readonly provider: string;
}

interface CreateRepositoryOutput {
  readonly repository: Repository;
}

interface CreateServiceInput {
  readonly branchName: string;
  readonly description: string;
  readonly name: string;
  readonly repositoryConnectionArn: string;
  readonly repositoryId: string;
  readonly spec: string;
  readonly tags: [];
  readonly templateMajorVersion: string;
  readonly templateMinorVersion: string;
  readonly templateName: string;
}

interface CreateServiceOutput {
  readonly service: Service;
}

interface CreateServiceTemplateInput {
  readonly description: string;
  readonly displayName: string;
  readonly encryptionKey: string;
  readonly name: string;
  readonly pipelineProvisioning: string;
  readonly tags: [];
}

interface CreateServiceTemplateOutput {
  readonly serviceTemplate: ServiceTemplate;
}

interface CreateServiceTemplateVersionInput {
  readonly clientToken: string;
  readonly compatibleEnvironmentTemplates: [];
  readonly description: string;
  readonly majorVersion: string;
  readonly source: TemplateVersionSourceInput;
  readonly tags: [];
  readonly templateName: string;
}

interface CreateServiceTemplateVersionOutput {
  readonly serviceTemplateVersion: ServiceTemplateVersion;
}

interface CreateTemplateSyncConfigInput {
  readonly branch: string;
  readonly repositoryName: string;
  readonly repositoryProvider: string;
  readonly subdirectory: string;
  readonly templateName: string;
  readonly templateType: string;
}

interface CreateTemplateSyncConfigOutput {
  readonly templateSyncConfig: TemplateSyncConfig;
}

interface DeleteEnvironmentAccountConnectionInput {
  readonly id: string;
}

interface DeleteEnvironmentAccountConnectionOutput {
  readonly environmentAccountConnection: EnvironmentAccountConnection;
}

interface DeleteEnvironmentInput {
  readonly name: string;
}

interface DeleteEnvironmentOutput {
  readonly environment: Environment;
}

interface DeleteEnvironmentTemplateInput {
  readonly name: string;
}

interface DeleteEnvironmentTemplateOutput {
  readonly environmentTemplate: EnvironmentTemplate;
}

interface DeleteEnvironmentTemplateVersionInput {
  readonly majorVersion: string;
  readonly minorVersion: string;
  readonly templateName: string;
}

interface DeleteEnvironmentTemplateVersionOutput {
  readonly environmentTemplateVersion: EnvironmentTemplateVersion;
}

interface DeleteRepositoryInput {
  readonly name: string;
  readonly provider: string;
}

interface DeleteRepositoryOutput {
  readonly repository: Repository;
}

interface DeleteServiceInput {
  readonly name: string;
}

interface DeleteServiceOutput {
  readonly service: Service;
}

interface DeleteServiceTemplateInput {
  readonly name: string;
}

interface DeleteServiceTemplateOutput {
  readonly serviceTemplate: ServiceTemplate;
}

interface DeleteServiceTemplateVersionInput {
  readonly majorVersion: string;
  readonly minorVersion: string;
  readonly templateName: string;
}

interface DeleteServiceTemplateVersionOutput {
  readonly serviceTemplateVersion: ServiceTemplateVersion;
}

interface DeleteTemplateSyncConfigInput {
  readonly templateName: string;
  readonly templateType: string;
}

interface DeleteTemplateSyncConfigOutput {
  readonly templateSyncConfig: TemplateSyncConfig;
}

interface Environment {
  readonly arn: string;
  readonly createdAt: Date;
  readonly deploymentStatus: string;
  readonly deploymentStatusMessage: string;
  readonly description: string;
  readonly environmentAccountConnectionId: string;
  readonly environmentAccountId: string;
  readonly lastDeploymentAttemptedAt: Date;
  readonly lastDeploymentSucceededAt: Date;
  readonly name: string;
  readonly protonServiceRoleArn: string;
  readonly provisioning: string;
  readonly provisioningRepository: RepositoryBranch;
  readonly spec: string;
  readonly templateMajorVersion: string;
  readonly templateMinorVersion: string;
  readonly templateName: string;
}

interface EnvironmentAccountConnection {
  readonly arn: string;
  readonly environmentAccountId: string;
  readonly environmentName: string;
  readonly id: string;
  readonly lastModifiedAt: Date;
  readonly managementAccountId: string;
  readonly requestedAt: Date;
  readonly roleArn: string;
  readonly status: string;
}

interface EnvironmentAccountConnectionSummary {
  readonly arn: string;
  readonly environmentAccountId: string;
  readonly environmentName: string;
  readonly id: string;
  readonly lastModifiedAt: Date;
  readonly managementAccountId: string;
  readonly requestedAt: Date;
  readonly roleArn: string;
  readonly status: string;
}

interface EnvironmentSummary {
  readonly arn: string;
  readonly createdAt: Date;
  readonly deploymentStatus: string;
  readonly deploymentStatusMessage: string;
  readonly description: string;
  readonly environmentAccountConnectionId: string;
  readonly environmentAccountId: string;
  readonly lastDeploymentAttemptedAt: Date;
  readonly lastDeploymentSucceededAt: Date;
  readonly name: string;
  readonly protonServiceRoleArn: string;
  readonly provisioning: string;
  readonly templateMajorVersion: string;
  readonly templateMinorVersion: string;
  readonly templateName: string;
}

interface EnvironmentTemplate {
  readonly arn: string;
  readonly createdAt: Date;
  readonly description: string;
  readonly displayName: string;
  readonly encryptionKey: string;
  readonly lastModifiedAt: Date;
  readonly name: string;
  readonly provisioning: string;
  readonly recommendedVersion: string;
}

interface EnvironmentTemplateFilter {
  readonly majorVersion: string;
  readonly templateName: string;
}

interface EnvironmentTemplateSummary {
  readonly arn: string;
  readonly createdAt: Date;
  readonly description: string;
  readonly displayName: string;
  readonly lastModifiedAt: Date;
  readonly name: string;
  readonly provisioning: string;
  readonly recommendedVersion: string;
}

interface EnvironmentTemplateVersion {
  readonly arn: string;
  readonly createdAt: Date;
  readonly description: string;
  readonly lastModifiedAt: Date;
  readonly majorVersion: string;
  readonly minorVersion: string;
  readonly recommendedMinorVersion: string;
  readonly schema: string;
  readonly status: string;
  readonly statusMessage: string;
  readonly templateName: string;
}

interface EnvironmentTemplateVersionSummary {
  readonly arn: string;
  readonly createdAt: Date;
  readonly description: string;
  readonly lastModifiedAt: Date;
  readonly majorVersion: string;
  readonly minorVersion: string;
  readonly recommendedMinorVersion: string;
  readonly status: string;
  readonly statusMessage: string;
  readonly templateName: string;
}

interface GetAccountSettingsInput {
}

interface GetAccountSettingsOutput {
  readonly accountSettings: AccountSettings;
}

interface GetEnvironmentAccountConnectionInput {
  readonly id: string;
}

interface GetEnvironmentAccountConnectionOutput {
  readonly environmentAccountConnection: EnvironmentAccountConnection;
}

interface GetEnvironmentInput {
  readonly name: string;
}

interface GetEnvironmentOutput {
  readonly environment: Environment;
}

interface GetEnvironmentTemplateInput {
  readonly name: string;
}

interface GetEnvironmentTemplateOutput {
  readonly environmentTemplate: EnvironmentTemplate;
}

interface GetEnvironmentTemplateVersionInput {
  readonly majorVersion: string;
  readonly minorVersion: string;
  readonly templateName: string;
}

interface GetEnvironmentTemplateVersionOutput {
  readonly environmentTemplateVersion: EnvironmentTemplateVersion;
}

interface GetRepositoryInput {
  readonly name: string;
  readonly provider: string;
}

interface GetRepositoryOutput {
  readonly repository: Repository;
}

interface GetRepositorySyncStatusInput {
  readonly branch: string;
  readonly repositoryName: string;
  readonly repositoryProvider: string;
  readonly syncType: string;
}

interface GetRepositorySyncStatusOutput {
  readonly latestSync: RepositorySyncAttempt;
}

interface GetServiceInput {
  readonly name: string;
}

interface GetServiceInstanceInput {
  readonly name: string;
  readonly serviceName: string;
}

interface GetServiceInstanceOutput {
  readonly serviceInstance: ServiceInstance;
}

interface GetServiceOutput {
  readonly service: Service;
}

interface GetServiceTemplateInput {
  readonly name: string;
}

interface GetServiceTemplateOutput {
  readonly serviceTemplate: ServiceTemplate;
}

interface GetServiceTemplateVersionInput {
  readonly majorVersion: string;
  readonly minorVersion: string;
  readonly templateName: string;
}

interface GetServiceTemplateVersionOutput {
  readonly serviceTemplateVersion: ServiceTemplateVersion;
}

interface GetTemplateSyncConfigInput {
  readonly templateName: string;
  readonly templateType: string;
}

interface GetTemplateSyncConfigOutput {
  readonly templateSyncConfig: TemplateSyncConfig;
}

interface GetTemplateSyncStatusInput {
  readonly templateName: string;
  readonly templateType: string;
  readonly templateVersion: string;
}

interface GetTemplateSyncStatusOutput {
  readonly desiredState: Revision;
  readonly latestSuccessfulSync: ResourceSyncAttempt;
  readonly latestSync: ResourceSyncAttempt;
}

interface InternalServerException {
  readonly message: string;
}

interface ListEnvironmentAccountConnectionsInput {
  readonly environmentName: string;
  readonly maxResults: number;
  readonly nextToken: string;
  readonly requestedBy: string;
  readonly statuses: [];
}

interface ListEnvironmentAccountConnectionsOutput {
  readonly environmentAccountConnections: [];
  readonly nextToken: string;
}

interface ListEnvironmentOutputsInput {
  readonly environmentName: string;
  readonly nextToken: string;
}

interface ListEnvironmentOutputsOutput {
  readonly nextToken: string;
  readonly outputs: [];
}

interface ListEnvironmentProvisionedResourcesInput {
  readonly environmentName: string;
  readonly nextToken: string;
}

interface ListEnvironmentProvisionedResourcesOutput {
  readonly nextToken: string;
  readonly provisionedResources: [];
}

interface ListEnvironmentTemplateVersionsInput {
  readonly majorVersion: string;
  readonly maxResults: number;
  readonly nextToken: string;
  readonly templateName: string;
}

interface ListEnvironmentTemplateVersionsOutput {
  readonly nextToken: string;
  readonly templateVersions: [];
}

interface ListEnvironmentTemplatesInput {
  readonly maxResults: number;
  readonly nextToken: string;
}

interface ListEnvironmentTemplatesOutput {
  readonly nextToken: string;
  readonly templates: [];
}

interface ListEnvironmentsInput {
  readonly environmentTemplates: [];
  readonly maxResults: number;
  readonly nextToken: string;
}

interface ListEnvironmentsOutput {
  readonly environments: [];
  readonly nextToken: string;
}

interface ListRepositoriesInput {
  readonly maxResults: number;
  readonly nextToken: string;
}

interface ListRepositoriesOutput {
  readonly nextToken: string;
  readonly repositories: [];
}

interface ListRepositorySyncDefinitionsInput {
  readonly nextToken: string;
  readonly repositoryName: string;
  readonly repositoryProvider: string;
  readonly syncType: string;
}

interface ListRepositorySyncDefinitionsOutput {
  readonly nextToken: string;
  readonly syncDefinitions: [];
}

interface ListServiceInstanceOutputsInput {
  readonly nextToken: string;
  readonly serviceInstanceName: string;
  readonly serviceName: string;
}

interface ListServiceInstanceOutputsOutput {
  readonly nextToken: string;
  readonly outputs: [];
}

interface ListServiceInstanceProvisionedResourcesInput {
  readonly nextToken: string;
  readonly serviceInstanceName: string;
  readonly serviceName: string;
}

interface ListServiceInstanceProvisionedResourcesOutput {
  readonly nextToken: string;
  readonly provisionedResources: [];
}

interface ListServiceInstancesInput {
  readonly maxResults: number;
  readonly nextToken: string;
  readonly serviceName: string;
}

interface ListServiceInstancesOutput {
  readonly nextToken: string;
  readonly serviceInstances: [];
}

interface ListServicePipelineOutputsInput {
  readonly nextToken: string;
  readonly serviceName: string;
}

interface ListServicePipelineOutputsOutput {
  readonly nextToken: string;
  readonly outputs: [];
}

interface ListServicePipelineProvisionedResourcesInput {
  readonly nextToken: string;
  readonly serviceName: string;
}

interface ListServicePipelineProvisionedResourcesOutput {
  readonly nextToken: string;
  readonly provisionedResources: [];
}

interface ListServiceTemplateVersionsInput {
  readonly majorVersion: string;
  readonly maxResults: number;
  readonly nextToken: string;
  readonly templateName: string;
}

interface ListServiceTemplateVersionsOutput {
  readonly nextToken: string;
  readonly templateVersions: [];
}

interface ListServiceTemplatesInput {
  readonly maxResults: number;
  readonly nextToken: string;
}

interface ListServiceTemplatesOutput {
  readonly nextToken: string;
  readonly templates: [];
}

interface ListServicesInput {
  readonly maxResults: number;
  readonly nextToken: string;
}

interface ListServicesOutput {
  readonly nextToken: string;
  readonly services: [];
}

interface ListTagsForResourceInput {
  readonly maxResults: number;
  readonly nextToken: string;
  readonly resourceArn: string;
}

interface ListTagsForResourceOutput {
  readonly nextToken: string;
  readonly tags: [];
}

interface NotifyResourceDeploymentStatusChangeInput {
  readonly deploymentId: string;
  readonly outputs: [];
  readonly resourceArn: string;
  readonly status: string;
  readonly statusMessage: string;
}

interface NotifyResourceDeploymentStatusChangeOutput {
}

interface Output {
  readonly key: string;
  readonly valueString: string;
}

interface ProvisionedResource {
  readonly identifier: string;
  readonly name: string;
  readonly provisioningEngine: string;
}

interface RejectEnvironmentAccountConnectionInput {
  readonly id: string;
}

interface RejectEnvironmentAccountConnectionOutput {
  readonly environmentAccountConnection: EnvironmentAccountConnection;
}

interface Repository {
  readonly arn: string;
  readonly connectionArn: string;
  readonly encryptionKey: string;
  readonly name: string;
  readonly provider: string;
}

interface RepositoryBranch {
  readonly arn: string;
  readonly branch: string;
  readonly name: string;
  readonly provider: string;
}

interface RepositoryBranchInput {
  readonly branch: string;
  readonly name: string;
  readonly provider: string;
}

interface RepositorySummary {
  readonly arn: string;
  readonly name: string;
  readonly provider: string;
}

interface RepositorySyncAttempt {
  readonly events: [];
  readonly startedAt: Date;
  readonly status: string;
}

interface RepositorySyncDefinition {
  readonly branch: string;
  readonly directory: string;
  readonly parent: string;
  readonly target: string;
}

interface RepositorySyncEvent {
  readonly event: string;
  readonly externalId: string;
  readonly time: Date;
  readonly type: string;
}

interface ResourceNotFoundException {
  readonly message: string;
}

interface ResourceSyncAttempt {
  readonly events: [];
  readonly initialRevision: Revision;
  readonly startedAt: Date;
  readonly status: string;
  readonly target: string;
  readonly targetRevision: Revision;
}

interface ResourceSyncEvent {
  readonly event: string;
  readonly externalId: string;
  readonly time: Date;
  readonly type: string;
}

interface Revision {
  readonly branch: string;
  readonly directory: string;
  readonly repositoryName: string;
  readonly repositoryProvider: string;
  readonly sha: string;
}

interface S3ObjectSource {
  readonly bucket: string;
  readonly key: string;
}

interface Service {
  readonly arn: string;
  readonly branchName: string;
  readonly createdAt: Date;
  readonly description: string;
  readonly lastModifiedAt: Date;
  readonly name: string;
  readonly pipeline: ServicePipeline;
  readonly repositoryConnectionArn: string;
  readonly repositoryId: string;
  readonly spec: string;
  readonly status: string;
  readonly statusMessage: string;
  readonly templateName: string;
}

interface ServiceInstance {
  readonly arn: string;
  readonly createdAt: Date;
  readonly deploymentStatus: string;
  readonly deploymentStatusMessage: string;
  readonly environmentName: string;
  readonly lastDeploymentAttemptedAt: Date;
  readonly lastDeploymentSucceededAt: Date;
  readonly name: string;
  readonly serviceName: string;
  readonly spec: string;
  readonly templateMajorVersion: string;
  readonly templateMinorVersion: string;
  readonly templateName: string;
}

interface ServiceInstanceSummary {
  readonly arn: string;
  readonly createdAt: Date;
  readonly deploymentStatus: string;
  readonly deploymentStatusMessage: string;
  readonly environmentName: string;
  readonly lastDeploymentAttemptedAt: Date;
  readonly lastDeploymentSucceededAt: Date;
  readonly name: string;
  readonly serviceName: string;
  readonly templateMajorVersion: string;
  readonly templateMinorVersion: string;
  readonly templateName: string;
}

interface ServicePipeline {
  readonly arn: string;
  readonly createdAt: Date;
  readonly deploymentStatus: string;
  readonly deploymentStatusMessage: string;
  readonly lastDeploymentAttemptedAt: Date;
  readonly lastDeploymentSucceededAt: Date;
  readonly spec: string;
  readonly templateMajorVersion: string;
  readonly templateMinorVersion: string;
  readonly templateName: string;
}

interface ServiceQuotaExceededException {
  readonly message: string;
}

interface ServiceSummary {
  readonly arn: string;
  readonly createdAt: Date;
  readonly description: string;
  readonly lastModifiedAt: Date;
  readonly name: string;
  readonly status: string;
  readonly statusMessage: string;
  readonly templateName: string;
}

interface ServiceTemplate {
  readonly arn: string;
  readonly createdAt: Date;
  readonly description: string;
  readonly displayName: string;
  readonly encryptionKey: string;
  readonly lastModifiedAt: Date;
  readonly name: string;
  readonly pipelineProvisioning: string;
  readonly recommendedVersion: string;
}

interface ServiceTemplateSummary {
  readonly arn: string;
  readonly createdAt: Date;
  readonly description: string;
  readonly displayName: string;
  readonly lastModifiedAt: Date;
  readonly name: string;
  readonly pipelineProvisioning: string;
  readonly recommendedVersion: string;
}

interface ServiceTemplateVersion {
  readonly arn: string;
  readonly compatibleEnvironmentTemplates: [];
  readonly createdAt: Date;
  readonly description: string;
  readonly lastModifiedAt: Date;
  readonly majorVersion: string;
  readonly minorVersion: string;
  readonly recommendedMinorVersion: string;
  readonly schema: string;
  readonly status: string;
  readonly statusMessage: string;
  readonly templateName: string;
}

interface ServiceTemplateVersionSummary {
  readonly arn: string;
  readonly createdAt: Date;
  readonly description: string;
  readonly lastModifiedAt: Date;
  readonly majorVersion: string;
  readonly minorVersion: string;
  readonly recommendedMinorVersion: string;
  readonly status: string;
  readonly statusMessage: string;
  readonly templateName: string;
}

interface Tag {
  readonly key: string;
  readonly value: string;
}

interface TagResourceInput {
  readonly resourceArn: string;
  readonly tags: [];
}

interface TagResourceOutput {
}

interface TemplateSyncConfig {
  readonly branch: string;
  readonly repositoryName: string;
  readonly repositoryProvider: string;
  readonly subdirectory: string;
  readonly templateName: string;
  readonly templateType: string;
}

interface TemplateVersionSourceInput {
  readonly s3: S3ObjectSource;
}

interface ThrottlingException {
  readonly message: string;
}

interface UntagResourceInput {
  readonly resourceArn: string;
  readonly tagKeys: [];
}

interface UntagResourceOutput {
}

interface UpdateAccountSettingsInput {
  readonly pipelineProvisioningRepository: RepositoryBranchInput;
  readonly pipelineServiceRoleArn: string;
}

interface UpdateAccountSettingsOutput {
  readonly accountSettings: AccountSettings;
}

interface UpdateEnvironmentAccountConnectionInput {
  readonly id: string;
  readonly roleArn: string;
}

interface UpdateEnvironmentAccountConnectionOutput {
  readonly environmentAccountConnection: EnvironmentAccountConnection;
}

interface UpdateEnvironmentInput {
  readonly deploymentType: string;
  readonly description: string;
  readonly environmentAccountConnectionId: string;
  readonly name: string;
  readonly protonServiceRoleArn: string;
  readonly provisioningRepository: RepositoryBranchInput;
  readonly spec: string;
  readonly templateMajorVersion: string;
  readonly templateMinorVersion: string;
}

interface UpdateEnvironmentOutput {
  readonly environment: Environment;
}

interface UpdateEnvironmentTemplateInput {
  readonly description: string;
  readonly displayName: string;
  readonly name: string;
}

interface UpdateEnvironmentTemplateOutput {
  readonly environmentTemplate: EnvironmentTemplate;
}

interface UpdateEnvironmentTemplateVersionInput {
  readonly description: string;
  readonly majorVersion: string;
  readonly minorVersion: string;
  readonly status: string;
  readonly templateName: string;
}

interface UpdateEnvironmentTemplateVersionOutput {
  readonly environmentTemplateVersion: EnvironmentTemplateVersion;
}

interface UpdateServiceInput {
  readonly description: string;
  readonly name: string;
  readonly spec: string;
}

interface UpdateServiceInstanceInput {
  readonly deploymentType: string;
  readonly name: string;
  readonly serviceName: string;
  readonly spec: string;
  readonly templateMajorVersion: string;
  readonly templateMinorVersion: string;
}

interface UpdateServiceInstanceOutput {
  readonly serviceInstance: ServiceInstance;
}

interface UpdateServiceOutput {
  readonly service: Service;
}

interface UpdateServicePipelineInput {
  readonly deploymentType: string;
  readonly serviceName: string;
  readonly spec: string;
  readonly templateMajorVersion: string;
  readonly templateMinorVersion: string;
}

interface UpdateServicePipelineOutput {
  readonly pipeline: ServicePipeline;
}

interface UpdateServiceTemplateInput {
  readonly description: string;
  readonly displayName: string;
  readonly name: string;
}

interface UpdateServiceTemplateOutput {
  readonly serviceTemplate: ServiceTemplate;
}

interface UpdateServiceTemplateVersionInput {
  readonly compatibleEnvironmentTemplates: [];
  readonly description: string;
  readonly majorVersion: string;
  readonly minorVersion: string;
  readonly status: string;
  readonly templateName: string;
}

interface UpdateServiceTemplateVersionOutput {
  readonly serviceTemplateVersion: ServiceTemplateVersion;
}

interface UpdateTemplateSyncConfigInput {
  readonly branch: string;
  readonly repositoryName: string;
  readonly repositoryProvider: string;
  readonly subdirectory: string;
  readonly templateName: string;
  readonly templateType: string;
}

interface UpdateTemplateSyncConfigOutput {
  readonly templateSyncConfig: TemplateSyncConfig;
}

interface ValidationException {
  readonly message: string;
}

