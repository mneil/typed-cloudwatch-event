/**
 * STOP. This file is autogenerated. DO NOT EDIT by hand
 */
export interface CancelRotateSecret {
  readonly SecretId: string;
}
export interface CreateSecret {
  readonly Name: string;
  readonly ClientRequestToken: string;
  readonly Description: string;
  readonly KmsKeyId: string;
  readonly SecretBinary: unknown;
  readonly SecretString: string;
  readonly Tags: [];
  readonly AddReplicaRegions: [];
  readonly ForceOverwriteReplicaSecret: boolean;
}
export interface DeleteResourcePolicy {
  readonly SecretId: string;
}
export interface DeleteSecret {
  readonly SecretId: string;
  readonly RecoveryWindowInDays: number;
  readonly ForceDeleteWithoutRecovery: boolean;
}
export interface DescribeSecret {
  readonly SecretId: string;
}
export interface GetRandomPassword {
  readonly PasswordLength: number;
  readonly ExcludeCharacters: string;
  readonly ExcludeNumbers: boolean;
  readonly ExcludePunctuation: boolean;
  readonly ExcludeUppercase: boolean;
  readonly ExcludeLowercase: boolean;
  readonly IncludeSpace: boolean;
  readonly RequireEachIncludedType: boolean;
}
export interface GetResourcePolicy {
  readonly SecretId: string;
}
export interface GetSecretValue {
  readonly SecretId: string;
  readonly VersionId: string;
  readonly VersionStage: string;
}
export interface ListSecretVersionIds {
  readonly SecretId: string;
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly IncludeDeprecated: boolean;
}
export interface ListSecrets {
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly Filters: [];
  readonly SortOrder: string;
}
export interface PutResourcePolicy {
  readonly SecretId: string;
  readonly ResourcePolicy: string;
  readonly BlockPublicPolicy: boolean;
}
export interface PutSecretValue {
  readonly SecretId: string;
  readonly ClientRequestToken: string;
  readonly SecretBinary: unknown;
  readonly SecretString: string;
  readonly VersionStages: [];
}
export interface RemoveRegionsFromReplication {
  readonly SecretId: string;
  readonly RemoveReplicaRegions: [];
}
export interface ReplicateSecretToRegions {
  readonly SecretId: string;
  readonly AddReplicaRegions: [];
  readonly ForceOverwriteReplicaSecret: boolean;
}
export interface RestoreSecret {
  readonly SecretId: string;
}
export interface RotateSecret {
  readonly SecretId: string;
  readonly ClientRequestToken: string;
  readonly RotationLambdaARN: string;
  readonly RotationRules: RotationRulesType;
}
export interface StopReplicationToReplica {
  readonly SecretId: string;
}
export interface TagResource {
  readonly SecretId: string;
  readonly Tags: [];
}
export interface UntagResource {
  readonly SecretId: string;
  readonly TagKeys: [];
}
export interface UpdateSecret {
  readonly SecretId: string;
  readonly ClientRequestToken: string;
  readonly Description: string;
  readonly KmsKeyId: string;
  readonly SecretBinary: unknown;
  readonly SecretString: string;
}
export interface UpdateSecretVersionStage {
  readonly SecretId: string;
  readonly VersionStage: string;
  readonly RemoveFromVersionId: string;
  readonly MoveToVersionId: string;
}
export interface ValidateResourcePolicy {
  readonly SecretId: string;
  readonly ResourcePolicy: string;
}



interface CancelRotateSecretRequest {
  readonly SecretId: string;
}

interface CancelRotateSecretResponse {
  readonly ARN: string;
  readonly Name: string;
  readonly VersionId: string;
}

interface CreateSecretRequest {
  readonly Name: string;
  readonly ClientRequestToken: string;
  readonly Description: string;
  readonly KmsKeyId: string;
  readonly SecretBinary: unknown;
  readonly SecretString: string;
  readonly Tags: [];
  readonly AddReplicaRegions: [];
  readonly ForceOverwriteReplicaSecret: boolean;
}

interface CreateSecretResponse {
  readonly ARN: string;
  readonly Name: string;
  readonly VersionId: string;
  readonly ReplicationStatus: [];
}

interface DecryptionFailure {
  readonly Message: string;
}

interface DeleteResourcePolicyRequest {
  readonly SecretId: string;
}

interface DeleteResourcePolicyResponse {
  readonly ARN: string;
  readonly Name: string;
}

interface DeleteSecretRequest {
  readonly SecretId: string;
  readonly RecoveryWindowInDays: number;
  readonly ForceDeleteWithoutRecovery: boolean;
}

interface DeleteSecretResponse {
  readonly ARN: string;
  readonly Name: string;
  readonly DeletionDate: Date;
}

interface DescribeSecretRequest {
  readonly SecretId: string;
}

interface DescribeSecretResponse {
  readonly ARN: string;
  readonly Name: string;
  readonly Description: string;
  readonly KmsKeyId: string;
  readonly RotationEnabled: boolean;
  readonly RotationLambdaARN: string;
  readonly RotationRules: RotationRulesType;
  readonly LastRotatedDate: Date;
  readonly LastChangedDate: Date;
  readonly LastAccessedDate: Date;
  readonly DeletedDate: Date;
  readonly Tags: [];
  readonly VersionIdsToStages: {[key: string]: any};
  readonly OwningService: string;
  readonly CreatedDate: Date;
  readonly PrimaryRegion: string;
  readonly ReplicationStatus: [];
}

interface EncryptionFailure {
  readonly Message: string;
}

interface Filter {
  readonly Key: string;
  readonly Values: [];
}

interface GetRandomPasswordRequest {
  readonly PasswordLength: number;
  readonly ExcludeCharacters: string;
  readonly ExcludeNumbers: boolean;
  readonly ExcludePunctuation: boolean;
  readonly ExcludeUppercase: boolean;
  readonly ExcludeLowercase: boolean;
  readonly IncludeSpace: boolean;
  readonly RequireEachIncludedType: boolean;
}

interface GetRandomPasswordResponse {
  readonly RandomPassword: string;
}

interface GetResourcePolicyRequest {
  readonly SecretId: string;
}

interface GetResourcePolicyResponse {
  readonly ARN: string;
  readonly Name: string;
  readonly ResourcePolicy: string;
}

interface GetSecretValueRequest {
  readonly SecretId: string;
  readonly VersionId: string;
  readonly VersionStage: string;
}

interface GetSecretValueResponse {
  readonly ARN: string;
  readonly Name: string;
  readonly VersionId: string;
  readonly SecretBinary: unknown;
  readonly SecretString: string;
  readonly VersionStages: [];
  readonly CreatedDate: Date;
}

interface InternalServiceError {
  readonly Message: string;
}

interface InvalidNextTokenException {
  readonly Message: string;
}

interface InvalidParameterException {
  readonly Message: string;
}

interface InvalidRequestException {
  readonly Message: string;
}

interface LimitExceededException {
  readonly Message: string;
}

interface ListSecretVersionIdsRequest {
  readonly SecretId: string;
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly IncludeDeprecated: boolean;
}

interface ListSecretVersionIdsResponse {
  readonly Versions: [];
  readonly NextToken: string;
  readonly ARN: string;
  readonly Name: string;
}

interface ListSecretsRequest {
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly Filters: [];
  readonly SortOrder: string;
}

interface ListSecretsResponse {
  readonly SecretList: [];
  readonly NextToken: string;
}

interface MalformedPolicyDocumentException {
  readonly Message: string;
}

interface PreconditionNotMetException {
  readonly Message: string;
}

interface PublicPolicyException {
  readonly Message: string;
}

interface PutResourcePolicyRequest {
  readonly SecretId: string;
  readonly ResourcePolicy: string;
  readonly BlockPublicPolicy: boolean;
}

interface PutResourcePolicyResponse {
  readonly ARN: string;
  readonly Name: string;
}

interface PutSecretValueRequest {
  readonly SecretId: string;
  readonly ClientRequestToken: string;
  readonly SecretBinary: unknown;
  readonly SecretString: string;
  readonly VersionStages: [];
}

interface PutSecretValueResponse {
  readonly ARN: string;
  readonly Name: string;
  readonly VersionId: string;
  readonly VersionStages: [];
}

interface RemoveRegionsFromReplicationRequest {
  readonly SecretId: string;
  readonly RemoveReplicaRegions: [];
}

interface RemoveRegionsFromReplicationResponse {
  readonly ARN: string;
  readonly ReplicationStatus: [];
}

interface ReplicaRegionType {
  readonly Region: string;
  readonly KmsKeyId: string;
}

interface ReplicateSecretToRegionsRequest {
  readonly SecretId: string;
  readonly AddReplicaRegions: [];
  readonly ForceOverwriteReplicaSecret: boolean;
}

interface ReplicateSecretToRegionsResponse {
  readonly ARN: string;
  readonly ReplicationStatus: [];
}

interface ReplicationStatusType {
  readonly Region: string;
  readonly KmsKeyId: string;
  readonly Status: string;
  readonly StatusMessage: string;
  readonly LastAccessedDate: Date;
}

interface ResourceExistsException {
  readonly Message: string;
}

interface ResourceNotFoundException {
  readonly Message: string;
}

interface RestoreSecretRequest {
  readonly SecretId: string;
}

interface RestoreSecretResponse {
  readonly ARN: string;
  readonly Name: string;
}

interface RotateSecretRequest {
  readonly SecretId: string;
  readonly ClientRequestToken: string;
  readonly RotationLambdaARN: string;
  readonly RotationRules: RotationRulesType;
}

interface RotateSecretResponse {
  readonly ARN: string;
  readonly Name: string;
  readonly VersionId: string;
}

interface RotationRulesType {
  readonly AutomaticallyAfterDays: number;
}

interface SecretListEntry {
  readonly ARN: string;
  readonly Name: string;
  readonly Description: string;
  readonly KmsKeyId: string;
  readonly RotationEnabled: boolean;
  readonly RotationLambdaARN: string;
  readonly RotationRules: RotationRulesType;
  readonly LastRotatedDate: Date;
  readonly LastChangedDate: Date;
  readonly LastAccessedDate: Date;
  readonly DeletedDate: Date;
  readonly Tags: [];
  readonly SecretVersionsToStages: {[key: string]: any};
  readonly OwningService: string;
  readonly CreatedDate: Date;
  readonly PrimaryRegion: string;
}

interface SecretVersionsListEntry {
  readonly VersionId: string;
  readonly VersionStages: [];
  readonly LastAccessedDate: Date;
  readonly CreatedDate: Date;
  readonly KmsKeyIds: [];
}

interface StopReplicationToReplicaRequest {
  readonly SecretId: string;
}

interface StopReplicationToReplicaResponse {
  readonly ARN: string;
}

interface Tag {
  readonly Key: string;
  readonly Value: string;
}

interface TagResourceRequest {
  readonly SecretId: string;
  readonly Tags: [];
}

interface UntagResourceRequest {
  readonly SecretId: string;
  readonly TagKeys: [];
}

interface UpdateSecretRequest {
  readonly SecretId: string;
  readonly ClientRequestToken: string;
  readonly Description: string;
  readonly KmsKeyId: string;
  readonly SecretBinary: unknown;
  readonly SecretString: string;
}

interface UpdateSecretResponse {
  readonly ARN: string;
  readonly Name: string;
  readonly VersionId: string;
}

interface UpdateSecretVersionStageRequest {
  readonly SecretId: string;
  readonly VersionStage: string;
  readonly RemoveFromVersionId: string;
  readonly MoveToVersionId: string;
}

interface UpdateSecretVersionStageResponse {
  readonly ARN: string;
  readonly Name: string;
}

interface ValidateResourcePolicyRequest {
  readonly SecretId: string;
  readonly ResourcePolicy: string;
}

interface ValidateResourcePolicyResponse {
  readonly PolicyValidationPassed: boolean;
  readonly ValidationErrors: [];
}

interface ValidationErrorsEntry {
  readonly CheckName: string;
  readonly ErrorMessage: string;
}

