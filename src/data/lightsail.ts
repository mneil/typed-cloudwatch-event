/**
 * STOP. This file is autogenerated. DO NOT EDIT by hand
 */
export interface AllocateStaticIp {
  readonly staticIpName: string;
}
export interface AttachCertificateToDistribution {
  readonly distributionName: string;
  readonly certificateName: string;
}
export interface AttachDisk {
  readonly diskName: string;
  readonly instanceName: string;
  readonly diskPath: string;
}
export interface AttachInstancesToLoadBalancer {
  readonly loadBalancerName: string;
  readonly instanceNames: [];
}
export interface AttachLoadBalancerTlsCertificate {
  readonly loadBalancerName: string;
  readonly certificateName: string;
}
export interface AttachStaticIp {
  readonly staticIpName: string;
  readonly instanceName: string;
}
export interface CloseInstancePublicPorts {
  readonly portInfo: PortInfo;
  readonly instanceName: string;
}
export interface CopySnapshot {
  readonly sourceSnapshotName: string;
  readonly sourceResourceName: string;
  readonly restoreDate: string;
  readonly useLatestRestorableAutoSnapshot: boolean;
  readonly targetSnapshotName: string;
  readonly sourceRegion: string;
}
export interface CreateBucket {
  readonly bucketName: string;
  readonly bundleId: string;
  readonly tags: [];
  readonly enableObjectVersioning: boolean;
}
export interface CreateBucketAccessKey {
  readonly bucketName: string;
}
export interface CreateCertificate {
  readonly certificateName: string;
  readonly domainName: string;
  readonly subjectAlternativeNames: [];
  readonly tags: [];
}
export interface CreateCloudFormationStack {
  readonly instances: [];
}
export interface CreateContactMethod {
  readonly protocol: string;
  readonly contactEndpoint: string;
}
export interface CreateContainerService {
  readonly serviceName: string;
  readonly power: string;
  readonly scale: number;
  readonly tags: [];
  readonly publicDomainNames: {[key: string]: any};
  readonly deployment: ContainerServiceDeploymentRequest;
}
export interface CreateContainerServiceDeployment {
  readonly serviceName: string;
  readonly containers: {[key: string]: any};
  readonly publicEndpoint: EndpointRequest;
}
export interface CreateContainerServiceRegistryLogin {
}
export interface CreateDisk {
  readonly diskName: string;
  readonly availabilityZone: string;
  readonly sizeInGb: number;
  readonly tags: [];
  readonly addOns: [];
}
export interface CreateDiskFromSnapshot {
  readonly diskName: string;
  readonly diskSnapshotName: string;
  readonly availabilityZone: string;
  readonly sizeInGb: number;
  readonly tags: [];
  readonly addOns: [];
  readonly sourceDiskName: string;
  readonly restoreDate: string;
  readonly useLatestRestorableAutoSnapshot: boolean;
}
export interface CreateDiskSnapshot {
  readonly diskName: string;
  readonly diskSnapshotName: string;
  readonly instanceName: string;
  readonly tags: [];
}
export interface CreateDistribution {
  readonly distributionName: string;
  readonly origin: InputOrigin;
  readonly defaultCacheBehavior: CacheBehavior;
  readonly cacheBehaviorSettings: CacheSettings;
  readonly cacheBehaviors: [];
  readonly bundleId: string;
  readonly ipAddressType: string;
  readonly tags: [];
}
export interface CreateDomain {
  readonly domainName: string;
  readonly tags: [];
}
export interface CreateDomainEntry {
  readonly domainName: string;
  readonly domainEntry: DomainEntry;
}
export interface CreateInstanceSnapshot {
  readonly instanceSnapshotName: string;
  readonly instanceName: string;
  readonly tags: [];
}
export interface CreateInstances {
  readonly instanceNames: [];
  readonly availabilityZone: string;
  readonly customImageName: string;
  readonly blueprintId: string;
  readonly bundleId: string;
  readonly userData: string;
  readonly keyPairName: string;
  readonly tags: [];
  readonly addOns: [];
  readonly ipAddressType: string;
}
export interface CreateInstancesFromSnapshot {
  readonly instanceNames: [];
  readonly attachedDiskMapping: {[key: string]: any};
  readonly availabilityZone: string;
  readonly instanceSnapshotName: string;
  readonly bundleId: string;
  readonly userData: string;
  readonly keyPairName: string;
  readonly tags: [];
  readonly addOns: [];
  readonly ipAddressType: string;
  readonly sourceInstanceName: string;
  readonly restoreDate: string;
  readonly useLatestRestorableAutoSnapshot: boolean;
}
export interface CreateKeyPair {
  readonly keyPairName: string;
  readonly tags: [];
}
export interface CreateLoadBalancer {
  readonly loadBalancerName: string;
  readonly instancePort: number;
  readonly healthCheckPath: string;
  readonly certificateName: string;
  readonly certificateDomainName: string;
  readonly certificateAlternativeNames: [];
  readonly tags: [];
  readonly ipAddressType: string;
}
export interface CreateLoadBalancerTlsCertificate {
  readonly loadBalancerName: string;
  readonly certificateName: string;
  readonly certificateDomainName: string;
  readonly certificateAlternativeNames: [];
  readonly tags: [];
}
export interface CreateRelationalDatabase {
  readonly relationalDatabaseName: string;
  readonly availabilityZone: string;
  readonly relationalDatabaseBlueprintId: string;
  readonly relationalDatabaseBundleId: string;
  readonly masterDatabaseName: string;
  readonly masterUsername: string;
  readonly masterUserPassword: string;
  readonly preferredBackupWindow: string;
  readonly preferredMaintenanceWindow: string;
  readonly publiclyAccessible: boolean;
  readonly tags: [];
}
export interface CreateRelationalDatabaseFromSnapshot {
  readonly relationalDatabaseName: string;
  readonly availabilityZone: string;
  readonly publiclyAccessible: boolean;
  readonly relationalDatabaseSnapshotName: string;
  readonly relationalDatabaseBundleId: string;
  readonly sourceRelationalDatabaseName: string;
  readonly restoreTime: Date;
  readonly useLatestRestorableTime: boolean;
  readonly tags: [];
}
export interface CreateRelationalDatabaseSnapshot {
  readonly relationalDatabaseName: string;
  readonly relationalDatabaseSnapshotName: string;
  readonly tags: [];
}
export interface DeleteAlarm {
  readonly alarmName: string;
}
export interface DeleteAutoSnapshot {
  readonly resourceName: string;
  readonly date: string;
}
export interface DeleteBucket {
  readonly bucketName: string;
  readonly forceDelete: boolean;
}
export interface DeleteBucketAccessKey {
  readonly bucketName: string;
  readonly accessKeyId: string;
}
export interface DeleteCertificate {
  readonly certificateName: string;
}
export interface DeleteContactMethod {
  readonly protocol: string;
}
export interface DeleteContainerImage {
  readonly serviceName: string;
  readonly image: string;
}
export interface DeleteContainerService {
  readonly serviceName: string;
}
export interface DeleteDisk {
  readonly diskName: string;
  readonly forceDeleteAddOns: boolean;
}
export interface DeleteDiskSnapshot {
  readonly diskSnapshotName: string;
}
export interface DeleteDistribution {
  readonly distributionName: string;
}
export interface DeleteDomain {
  readonly domainName: string;
}
export interface DeleteDomainEntry {
  readonly domainName: string;
  readonly domainEntry: DomainEntry;
}
export interface DeleteInstance {
  readonly instanceName: string;
  readonly forceDeleteAddOns: boolean;
}
export interface DeleteInstanceSnapshot {
  readonly instanceSnapshotName: string;
}
export interface DeleteKeyPair {
  readonly keyPairName: string;
}
export interface DeleteKnownHostKeys {
  readonly instanceName: string;
}
export interface DeleteLoadBalancer {
  readonly loadBalancerName: string;
}
export interface DeleteLoadBalancerTlsCertificate {
  readonly loadBalancerName: string;
  readonly certificateName: string;
  readonly force: boolean;
}
export interface DeleteRelationalDatabase {
  readonly relationalDatabaseName: string;
  readonly skipFinalSnapshot: boolean;
  readonly finalRelationalDatabaseSnapshotName: string;
}
export interface DeleteRelationalDatabaseSnapshot {
  readonly relationalDatabaseSnapshotName: string;
}
export interface DetachCertificateFromDistribution {
  readonly distributionName: string;
}
export interface DetachDisk {
  readonly diskName: string;
}
export interface DetachInstancesFromLoadBalancer {
  readonly loadBalancerName: string;
  readonly instanceNames: [];
}
export interface DetachStaticIp {
  readonly staticIpName: string;
}
export interface DisableAddOn {
  readonly addOnType: string;
  readonly resourceName: string;
}
export interface DownloadDefaultKeyPair {
}
export interface EnableAddOn {
  readonly resourceName: string;
  readonly addOnRequest: AddOnRequest;
}
export interface ExportSnapshot {
  readonly sourceSnapshotName: string;
}
export interface GetActiveNames {
  readonly pageToken: string;
}
export interface GetAlarms {
  readonly alarmName: string;
  readonly pageToken: string;
  readonly monitoredResourceName: string;
}
export interface GetAutoSnapshots {
  readonly resourceName: string;
}
export interface GetBlueprints {
  readonly includeInactive: boolean;
  readonly pageToken: string;
}
export interface GetBucketAccessKeys {
  readonly bucketName: string;
}
export interface GetBucketBundles {
  readonly includeInactive: boolean;
}
export interface GetBucketMetricData {
  readonly bucketName: string;
  readonly metricName: string;
  readonly startTime: Date;
  readonly endTime: Date;
  readonly period: number;
  readonly statistics: [];
  readonly unit: string;
}
export interface GetBuckets {
  readonly bucketName: string;
  readonly pageToken: string;
  readonly includeConnectedResources: boolean;
}
export interface GetBundles {
  readonly includeInactive: boolean;
  readonly pageToken: string;
}
export interface GetCertificates {
  readonly certificateStatuses: [];
  readonly includeCertificateDetails: boolean;
  readonly certificateName: string;
}
export interface GetCloudFormationStackRecords {
  readonly pageToken: string;
}
export interface GetContactMethods {
  readonly protocols: [];
}
export interface GetContainerAPIMetadata {
}
export interface GetContainerImages {
  readonly serviceName: string;
}
export interface GetContainerLog {
  readonly serviceName: string;
  readonly containerName: string;
  readonly startTime: Date;
  readonly endTime: Date;
  readonly filterPattern: string;
  readonly pageToken: string;
}
export interface GetContainerServiceDeployments {
  readonly serviceName: string;
}
export interface GetContainerServiceMetricData {
  readonly serviceName: string;
  readonly metricName: string;
  readonly startTime: Date;
  readonly endTime: Date;
  readonly period: number;
  readonly statistics: [];
}
export interface GetContainerServicePowers {
}
export interface GetContainerServices {
  readonly serviceName: string;
}
export interface GetDisk {
  readonly diskName: string;
}
export interface GetDiskSnapshot {
  readonly diskSnapshotName: string;
}
export interface GetDiskSnapshots {
  readonly pageToken: string;
}
export interface GetDisks {
  readonly pageToken: string;
}
export interface GetDistributionBundles {
}
export interface GetDistributionLatestCacheReset {
  readonly distributionName: string;
}
export interface GetDistributionMetricData {
  readonly distributionName: string;
  readonly metricName: string;
  readonly startTime: Date;
  readonly endTime: Date;
  readonly period: number;
  readonly unit: string;
  readonly statistics: [];
}
export interface GetDistributions {
  readonly distributionName: string;
  readonly pageToken: string;
}
export interface GetDomain {
  readonly domainName: string;
}
export interface GetDomains {
  readonly pageToken: string;
}
export interface GetExportSnapshotRecords {
  readonly pageToken: string;
}
export interface GetInstance {
  readonly instanceName: string;
}
export interface GetInstanceAccessDetails {
  readonly instanceName: string;
  readonly protocol: string;
}
export interface GetInstanceMetricData {
  readonly instanceName: string;
  readonly metricName: string;
  readonly period: number;
  readonly startTime: Date;
  readonly endTime: Date;
  readonly unit: string;
  readonly statistics: [];
}
export interface GetInstancePortStates {
  readonly instanceName: string;
}
export interface GetInstanceSnapshot {
  readonly instanceSnapshotName: string;
}
export interface GetInstanceSnapshots {
  readonly pageToken: string;
}
export interface GetInstanceState {
  readonly instanceName: string;
}
export interface GetInstances {
  readonly pageToken: string;
}
export interface GetKeyPair {
  readonly keyPairName: string;
}
export interface GetKeyPairs {
  readonly pageToken: string;
}
export interface GetLoadBalancer {
  readonly loadBalancerName: string;
}
export interface GetLoadBalancerMetricData {
  readonly loadBalancerName: string;
  readonly metricName: string;
  readonly period: number;
  readonly startTime: Date;
  readonly endTime: Date;
  readonly unit: string;
  readonly statistics: [];
}
export interface GetLoadBalancerTlsCertificates {
  readonly loadBalancerName: string;
}
export interface GetLoadBalancers {
  readonly pageToken: string;
}
export interface GetOperation {
  readonly operationId: string;
}
export interface GetOperations {
  readonly pageToken: string;
}
export interface GetOperationsForResource {
  readonly resourceName: string;
  readonly pageToken: string;
}
export interface GetRegions {
  readonly includeAvailabilityZones: boolean;
  readonly includeRelationalDatabaseAvailabilityZones: boolean;
}
export interface GetRelationalDatabase {
  readonly relationalDatabaseName: string;
}
export interface GetRelationalDatabaseBlueprints {
  readonly pageToken: string;
}
export interface GetRelationalDatabaseBundles {
  readonly pageToken: string;
}
export interface GetRelationalDatabaseEvents {
  readonly relationalDatabaseName: string;
  readonly durationInMinutes: number;
  readonly pageToken: string;
}
export interface GetRelationalDatabaseLogEvents {
  readonly relationalDatabaseName: string;
  readonly logStreamName: string;
  readonly startTime: Date;
  readonly endTime: Date;
  readonly startFromHead: boolean;
  readonly pageToken: string;
}
export interface GetRelationalDatabaseLogStreams {
  readonly relationalDatabaseName: string;
}
export interface GetRelationalDatabaseMasterUserPassword {
  readonly relationalDatabaseName: string;
  readonly passwordVersion: string;
}
export interface GetRelationalDatabaseMetricData {
  readonly relationalDatabaseName: string;
  readonly metricName: string;
  readonly period: number;
  readonly startTime: Date;
  readonly endTime: Date;
  readonly unit: string;
  readonly statistics: [];
}
export interface GetRelationalDatabaseParameters {
  readonly relationalDatabaseName: string;
  readonly pageToken: string;
}
export interface GetRelationalDatabaseSnapshot {
  readonly relationalDatabaseSnapshotName: string;
}
export interface GetRelationalDatabaseSnapshots {
  readonly pageToken: string;
}
export interface GetRelationalDatabases {
  readonly pageToken: string;
}
export interface GetStaticIp {
  readonly staticIpName: string;
}
export interface GetStaticIps {
  readonly pageToken: string;
}
export interface ImportKeyPair {
  readonly keyPairName: string;
  readonly publicKeyBase64: string;
}
export interface IsVpcPeered {
}
export interface OpenInstancePublicPorts {
  readonly portInfo: PortInfo;
  readonly instanceName: string;
}
export interface PeerVpc {
}
export interface PutAlarm {
  readonly alarmName: string;
  readonly metricName: string;
  readonly monitoredResourceName: string;
  readonly comparisonOperator: string;
  readonly threshold: unknown;
  readonly evaluationPeriods: number;
  readonly datapointsToAlarm: number;
  readonly treatMissingData: string;
  readonly contactProtocols: [];
  readonly notificationTriggers: [];
  readonly notificationEnabled: boolean;
}
export interface PutInstancePublicPorts {
  readonly portInfos: [];
  readonly instanceName: string;
}
export interface RebootInstance {
  readonly instanceName: string;
}
export interface RebootRelationalDatabase {
  readonly relationalDatabaseName: string;
}
export interface RegisterContainerImage {
  readonly serviceName: string;
  readonly label: string;
  readonly digest: string;
}
export interface ReleaseStaticIp {
  readonly staticIpName: string;
}
export interface ResetDistributionCache {
  readonly distributionName: string;
}
export interface SendContactMethodVerification {
  readonly protocol: string;
}
export interface SetIpAddressType {
  readonly resourceType: string;
  readonly resourceName: string;
  readonly ipAddressType: string;
}
export interface SetResourceAccessForBucket {
  readonly resourceName: string;
  readonly bucketName: string;
  readonly access: string;
}
export interface StartInstance {
  readonly instanceName: string;
}
export interface StartRelationalDatabase {
  readonly relationalDatabaseName: string;
}
export interface StopInstance {
  readonly instanceName: string;
  readonly force: boolean;
}
export interface StopRelationalDatabase {
  readonly relationalDatabaseName: string;
  readonly relationalDatabaseSnapshotName: string;
}
export interface TagResource {
  readonly resourceName: string;
  readonly resourceArn: string;
  readonly tags: [];
}
export interface TestAlarm {
  readonly alarmName: string;
  readonly state: string;
}
export interface UnpeerVpc {
}
export interface UntagResource {
  readonly resourceName: string;
  readonly resourceArn: string;
  readonly tagKeys: [];
}
export interface UpdateBucket {
  readonly bucketName: string;
  readonly accessRules: AccessRules;
  readonly versioning: string;
  readonly readonlyAccessAccounts: [];
  readonly accessLogConfig: BucketAccessLogConfig;
}
export interface UpdateBucketBundle {
  readonly bucketName: string;
  readonly bundleId: string;
}
export interface UpdateContainerService {
  readonly serviceName: string;
  readonly power: string;
  readonly scale: number;
  readonly isDisabled: boolean;
  readonly publicDomainNames: {[key: string]: any};
}
export interface UpdateDistribution {
  readonly distributionName: string;
  readonly origin: InputOrigin;
  readonly defaultCacheBehavior: CacheBehavior;
  readonly cacheBehaviorSettings: CacheSettings;
  readonly cacheBehaviors: [];
  readonly isEnabled: boolean;
}
export interface UpdateDistributionBundle {
  readonly distributionName: string;
  readonly bundleId: string;
}
export interface UpdateDomainEntry {
  readonly domainName: string;
  readonly domainEntry: DomainEntry;
}
export interface UpdateLoadBalancerAttribute {
  readonly loadBalancerName: string;
  readonly attributeName: string;
  readonly attributeValue: string;
}
export interface UpdateRelationalDatabase {
  readonly relationalDatabaseName: string;
  readonly masterUserPassword: string;
  readonly rotateMasterUserPassword: boolean;
  readonly preferredBackupWindow: string;
  readonly preferredMaintenanceWindow: string;
  readonly enableBackupRetention: boolean;
  readonly disableBackupRetention: boolean;
  readonly publiclyAccessible: boolean;
  readonly applyImmediately: boolean;
  readonly caCertificateIdentifier: string;
}
export interface UpdateRelationalDatabaseParameters {
  readonly relationalDatabaseName: string;
  readonly parameters: [];
}



interface AccessDeniedException {
  readonly code: string;
  readonly docs: string;
  readonly message: string;
  readonly tip: string;
}

interface AccessKey {
  readonly accessKeyId: string;
  readonly secretAccessKey: string;
  readonly status: string;
  readonly createdAt: Date;
  readonly lastUsed: AccessKeyLastUsed;
}

interface AccessKeyLastUsed {
  readonly lastUsedDate: Date;
  readonly region: string;
  readonly serviceName: string;
}

interface AccessRules {
  readonly getObject: string;
  readonly allowPublicOverrides: boolean;
}

interface AccountSetupInProgressException {
  readonly code: string;
  readonly docs: string;
  readonly message: string;
  readonly tip: string;
}

interface AddOn {
  readonly name: string;
  readonly status: string;
  readonly snapshotTimeOfDay: string;
  readonly nextSnapshotTimeOfDay: string;
}

interface AddOnRequest {
  readonly addOnType: string;
  readonly autoSnapshotAddOnRequest: AutoSnapshotAddOnRequest;
}

interface Alarm {
  readonly name: string;
  readonly arn: string;
  readonly createdAt: Date;
  readonly location: ResourceLocation;
  readonly resourceType: string;
  readonly supportCode: string;
  readonly monitoredResourceInfo: MonitoredResourceInfo;
  readonly comparisonOperator: string;
  readonly evaluationPeriods: number;
  readonly period: number;
  readonly threshold: unknown;
  readonly datapointsToAlarm: number;
  readonly treatMissingData: string;
  readonly statistic: string;
  readonly metricName: string;
  readonly state: string;
  readonly unit: string;
  readonly contactProtocols: [];
  readonly notificationTriggers: [];
  readonly notificationEnabled: boolean;
}

interface AllocateStaticIpRequest {
  readonly staticIpName: string;
}

interface AllocateStaticIpResult {
  readonly operations: [];
}

interface AttachCertificateToDistributionRequest {
  readonly distributionName: string;
  readonly certificateName: string;
}

interface AttachCertificateToDistributionResult {
  readonly operation: Operation;
}

interface AttachDiskRequest {
  readonly diskName: string;
  readonly instanceName: string;
  readonly diskPath: string;
}

interface AttachDiskResult {
  readonly operations: [];
}

interface AttachInstancesToLoadBalancerRequest {
  readonly loadBalancerName: string;
  readonly instanceNames: [];
}

interface AttachInstancesToLoadBalancerResult {
  readonly operations: [];
}

interface AttachLoadBalancerTlsCertificateRequest {
  readonly loadBalancerName: string;
  readonly certificateName: string;
}

interface AttachLoadBalancerTlsCertificateResult {
  readonly operations: [];
}

interface AttachStaticIpRequest {
  readonly staticIpName: string;
  readonly instanceName: string;
}

interface AttachStaticIpResult {
  readonly operations: [];
}

interface AttachedDisk {
  readonly path: string;
  readonly sizeInGb: number;
}

interface AutoSnapshotAddOnRequest {
  readonly snapshotTimeOfDay: string;
}

interface AutoSnapshotDetails {
  readonly date: string;
  readonly createdAt: Date;
  readonly status: string;
  readonly fromAttachedDisks: [];
}

interface AvailabilityZone {
  readonly zoneName: string;
  readonly state: string;
}

interface Blueprint {
  readonly blueprintId: string;
  readonly name: string;
  readonly group: string;
  readonly type: string;
  readonly description: string;
  readonly isActive: boolean;
  readonly minPower: number;
  readonly version: string;
  readonly versionCode: string;
  readonly productUrl: string;
  readonly licenseUrl: string;
  readonly platform: string;
}

interface Bucket {
  readonly resourceType: string;
  readonly accessRules: AccessRules;
  readonly arn: string;
  readonly bundleId: string;
  readonly createdAt: Date;
  readonly url: string;
  readonly location: ResourceLocation;
  readonly name: string;
  readonly supportCode: string;
  readonly tags: [];
  readonly objectVersioning: string;
  readonly ableToUpdateBundle: boolean;
  readonly readonlyAccessAccounts: [];
  readonly resourcesReceivingAccess: [];
  readonly state: BucketState;
  readonly accessLogConfig: BucketAccessLogConfig;
}

interface BucketAccessLogConfig {
  readonly enabled: boolean;
  readonly destination: string;
  readonly prefix: string;
}

interface BucketBundle {
  readonly bundleId: string;
  readonly name: string;
  readonly price: unknown;
  readonly storagePerMonthInGb: number;
  readonly transferPerMonthInGb: number;
  readonly isActive: boolean;
}

interface BucketState {
  readonly code: string;
  readonly message: string;
}

interface Bundle {
  readonly price: unknown;
  readonly cpuCount: number;
  readonly diskSizeInGb: number;
  readonly bundleId: string;
  readonly instanceType: string;
  readonly isActive: boolean;
  readonly name: string;
  readonly power: number;
  readonly ramSizeInGb: unknown;
  readonly transferPerMonthInGb: number;
  readonly supportedPlatforms: [];
}

interface CacheBehavior {
  readonly behavior: string;
}

interface CacheBehaviorPerPath {
  readonly path: string;
  readonly behavior: string;
}

interface CacheSettings {
  readonly defaultTTL: number;
  readonly minimumTTL: number;
  readonly maximumTTL: number;
  readonly allowedHTTPMethods: string;
  readonly cachedHTTPMethods: string;
  readonly forwardedCookies: CookieObject;
  readonly forwardedHeaders: HeaderObject;
  readonly forwardedQueryStrings: QueryStringObject;
}

interface Certificate {
  readonly arn: string;
  readonly name: string;
  readonly domainName: string;
  readonly status: string;
  readonly serialNumber: string;
  readonly subjectAlternativeNames: [];
  readonly domainValidationRecords: [];
  readonly requestFailureReason: string;
  readonly inUseResourceCount: number;
  readonly keyAlgorithm: string;
  readonly createdAt: Date;
  readonly issuedAt: Date;
  readonly issuerCA: string;
  readonly notBefore: Date;
  readonly notAfter: Date;
  readonly eligibleToRenew: string;
  readonly renewalSummary: RenewalSummary;
  readonly revokedAt: Date;
  readonly revocationReason: string;
  readonly tags: [];
  readonly supportCode: string;
}

interface CertificateSummary {
  readonly certificateArn: string;
  readonly certificateName: string;
  readonly domainName: string;
  readonly certificateDetail: Certificate;
  readonly tags: [];
}

interface CloseInstancePublicPortsRequest {
  readonly portInfo: PortInfo;
  readonly instanceName: string;
}

interface CloseInstancePublicPortsResult {
  readonly operation: Operation;
}

interface CloudFormationStackRecord {
  readonly name: string;
  readonly arn: string;
  readonly createdAt: Date;
  readonly location: ResourceLocation;
  readonly resourceType: string;
  readonly state: string;
  readonly sourceInfo: [];
  readonly destinationInfo: DestinationInfo;
}

interface CloudFormationStackRecordSourceInfo {
  readonly resourceType: string;
  readonly name: string;
  readonly arn: string;
}

interface ContactMethod {
  readonly contactEndpoint: string;
  readonly status: string;
  readonly protocol: string;
  readonly name: string;
  readonly arn: string;
  readonly createdAt: Date;
  readonly location: ResourceLocation;
  readonly resourceType: string;
  readonly supportCode: string;
}

interface Container {
  readonly image: string;
  readonly command: [];
  readonly environment: {[key: string]: any};
  readonly ports: {[key: string]: any};
}

interface ContainerImage {
  readonly image: string;
  readonly digest: string;
  readonly createdAt: Date;
}

interface ContainerService {
  readonly containerServiceName: string;
  readonly arn: string;
  readonly createdAt: Date;
  readonly location: ResourceLocation;
  readonly resourceType: string;
  readonly tags: [];
  readonly power: string;
  readonly powerId: string;
  readonly state: string;
  readonly stateDetail: ContainerServiceStateDetail;
  readonly scale: number;
  readonly currentDeployment: ContainerServiceDeployment;
  readonly nextDeployment: ContainerServiceDeployment;
  readonly isDisabled: boolean;
  readonly principalArn: string;
  readonly privateDomainName: string;
  readonly publicDomainNames: {[key: string]: any};
  readonly url: string;
}

interface ContainerServiceDeployment {
  readonly version: number;
  readonly state: string;
  readonly containers: {[key: string]: any};
  readonly publicEndpoint: ContainerServiceEndpoint;
  readonly createdAt: Date;
}

interface ContainerServiceDeploymentRequest {
  readonly containers: {[key: string]: any};
  readonly publicEndpoint: EndpointRequest;
}

interface ContainerServiceEndpoint {
  readonly containerName: string;
  readonly containerPort: number;
  readonly healthCheck: ContainerServiceHealthCheckConfig;
}

interface ContainerServiceHealthCheckConfig {
  readonly healthyThreshold: number;
  readonly unhealthyThreshold: number;
  readonly timeoutSeconds: number;
  readonly intervalSeconds: number;
  readonly path: string;
  readonly successCodes: string;
}

interface ContainerServiceLogEvent {
  readonly createdAt: Date;
  readonly message: string;
}

interface ContainerServicePower {
  readonly powerId: string;
  readonly price: unknown;
  readonly cpuCount: unknown;
  readonly ramSizeInGb: unknown;
  readonly name: string;
  readonly isActive: boolean;
}

interface ContainerServiceRegistryLogin {
  readonly username: string;
  readonly password: string;
  readonly expiresAt: Date;
  readonly registry: string;
}

interface ContainerServiceStateDetail {
  readonly code: string;
  readonly message: string;
}

interface ContainerServicesListResult {
  readonly containerServices: [];
}

interface CookieObject {
  readonly option: string;
  readonly cookiesAllowList: [];
}

interface CopySnapshotRequest {
  readonly sourceSnapshotName: string;
  readonly sourceResourceName: string;
  readonly restoreDate: string;
  readonly useLatestRestorableAutoSnapshot: boolean;
  readonly targetSnapshotName: string;
  readonly sourceRegion: string;
}

interface CopySnapshotResult {
  readonly operations: [];
}

interface CreateBucketAccessKeyRequest {
  readonly bucketName: string;
}

interface CreateBucketAccessKeyResult {
  readonly accessKey: AccessKey;
  readonly operations: [];
}

interface CreateBucketRequest {
  readonly bucketName: string;
  readonly bundleId: string;
  readonly tags: [];
  readonly enableObjectVersioning: boolean;
}

interface CreateBucketResult {
  readonly bucket: Bucket;
  readonly operations: [];
}

interface CreateCertificateRequest {
  readonly certificateName: string;
  readonly domainName: string;
  readonly subjectAlternativeNames: [];
  readonly tags: [];
}

interface CreateCertificateResult {
  readonly certificate: CertificateSummary;
  readonly operations: [];
}

interface CreateCloudFormationStackRequest {
  readonly instances: [];
}

interface CreateCloudFormationStackResult {
  readonly operations: [];
}

interface CreateContactMethodRequest {
  readonly protocol: string;
  readonly contactEndpoint: string;
}

interface CreateContactMethodResult {
  readonly operations: [];
}

interface CreateContainerServiceDeploymentRequest {
  readonly serviceName: string;
  readonly containers: {[key: string]: any};
  readonly publicEndpoint: EndpointRequest;
}

interface CreateContainerServiceDeploymentResult {
  readonly containerService: ContainerService;
}

interface CreateContainerServiceRegistryLoginRequest {
}

interface CreateContainerServiceRegistryLoginResult {
  readonly registryLogin: ContainerServiceRegistryLogin;
}

interface CreateContainerServiceRequest {
  readonly serviceName: string;
  readonly power: string;
  readonly scale: number;
  readonly tags: [];
  readonly publicDomainNames: {[key: string]: any};
  readonly deployment: ContainerServiceDeploymentRequest;
}

interface CreateContainerServiceResult {
  readonly containerService: ContainerService;
}

interface CreateDiskFromSnapshotRequest {
  readonly diskName: string;
  readonly diskSnapshotName: string;
  readonly availabilityZone: string;
  readonly sizeInGb: number;
  readonly tags: [];
  readonly addOns: [];
  readonly sourceDiskName: string;
  readonly restoreDate: string;
  readonly useLatestRestorableAutoSnapshot: boolean;
}

interface CreateDiskFromSnapshotResult {
  readonly operations: [];
}

interface CreateDiskRequest {
  readonly diskName: string;
  readonly availabilityZone: string;
  readonly sizeInGb: number;
  readonly tags: [];
  readonly addOns: [];
}

interface CreateDiskResult {
  readonly operations: [];
}

interface CreateDiskSnapshotRequest {
  readonly diskName: string;
  readonly diskSnapshotName: string;
  readonly instanceName: string;
  readonly tags: [];
}

interface CreateDiskSnapshotResult {
  readonly operations: [];
}

interface CreateDistributionRequest {
  readonly distributionName: string;
  readonly origin: InputOrigin;
  readonly defaultCacheBehavior: CacheBehavior;
  readonly cacheBehaviorSettings: CacheSettings;
  readonly cacheBehaviors: [];
  readonly bundleId: string;
  readonly ipAddressType: string;
  readonly tags: [];
}

interface CreateDistributionResult {
  readonly distribution: LightsailDistribution;
  readonly operation: Operation;
}

interface CreateDomainEntryRequest {
  readonly domainName: string;
  readonly domainEntry: DomainEntry;
}

interface CreateDomainEntryResult {
  readonly operation: Operation;
}

interface CreateDomainRequest {
  readonly domainName: string;
  readonly tags: [];
}

interface CreateDomainResult {
  readonly operation: Operation;
}

interface CreateInstanceSnapshotRequest {
  readonly instanceSnapshotName: string;
  readonly instanceName: string;
  readonly tags: [];
}

interface CreateInstanceSnapshotResult {
  readonly operations: [];
}

interface CreateInstancesFromSnapshotRequest {
  readonly instanceNames: [];
  readonly attachedDiskMapping: {[key: string]: any};
  readonly availabilityZone: string;
  readonly instanceSnapshotName: string;
  readonly bundleId: string;
  readonly userData: string;
  readonly keyPairName: string;
  readonly tags: [];
  readonly addOns: [];
  readonly ipAddressType: string;
  readonly sourceInstanceName: string;
  readonly restoreDate: string;
  readonly useLatestRestorableAutoSnapshot: boolean;
}

interface CreateInstancesFromSnapshotResult {
  readonly operations: [];
}

interface CreateInstancesRequest {
  readonly instanceNames: [];
  readonly availabilityZone: string;
  readonly customImageName: string;
  readonly blueprintId: string;
  readonly bundleId: string;
  readonly userData: string;
  readonly keyPairName: string;
  readonly tags: [];
  readonly addOns: [];
  readonly ipAddressType: string;
}

interface CreateInstancesResult {
  readonly operations: [];
}

interface CreateKeyPairRequest {
  readonly keyPairName: string;
  readonly tags: [];
}

interface CreateKeyPairResult {
  readonly keyPair: KeyPair;
  readonly publicKeyBase64: string;
  readonly privateKeyBase64: string;
  readonly operation: Operation;
}

interface CreateLoadBalancerRequest {
  readonly loadBalancerName: string;
  readonly instancePort: number;
  readonly healthCheckPath: string;
  readonly certificateName: string;
  readonly certificateDomainName: string;
  readonly certificateAlternativeNames: [];
  readonly tags: [];
  readonly ipAddressType: string;
}

interface CreateLoadBalancerResult {
  readonly operations: [];
}

interface CreateLoadBalancerTlsCertificateRequest {
  readonly loadBalancerName: string;
  readonly certificateName: string;
  readonly certificateDomainName: string;
  readonly certificateAlternativeNames: [];
  readonly tags: [];
}

interface CreateLoadBalancerTlsCertificateResult {
  readonly operations: [];
}

interface CreateRelationalDatabaseFromSnapshotRequest {
  readonly relationalDatabaseName: string;
  readonly availabilityZone: string;
  readonly publiclyAccessible: boolean;
  readonly relationalDatabaseSnapshotName: string;
  readonly relationalDatabaseBundleId: string;
  readonly sourceRelationalDatabaseName: string;
  readonly restoreTime: Date;
  readonly useLatestRestorableTime: boolean;
  readonly tags: [];
}

interface CreateRelationalDatabaseFromSnapshotResult {
  readonly operations: [];
}

interface CreateRelationalDatabaseRequest {
  readonly relationalDatabaseName: string;
  readonly availabilityZone: string;
  readonly relationalDatabaseBlueprintId: string;
  readonly relationalDatabaseBundleId: string;
  readonly masterDatabaseName: string;
  readonly masterUsername: string;
  readonly masterUserPassword: string;
  readonly preferredBackupWindow: string;
  readonly preferredMaintenanceWindow: string;
  readonly publiclyAccessible: boolean;
  readonly tags: [];
}

interface CreateRelationalDatabaseResult {
  readonly operations: [];
}

interface CreateRelationalDatabaseSnapshotRequest {
  readonly relationalDatabaseName: string;
  readonly relationalDatabaseSnapshotName: string;
  readonly tags: [];
}

interface CreateRelationalDatabaseSnapshotResult {
  readonly operations: [];
}

interface DeleteAlarmRequest {
  readonly alarmName: string;
}

interface DeleteAlarmResult {
  readonly operations: [];
}

interface DeleteAutoSnapshotRequest {
  readonly resourceName: string;
  readonly date: string;
}

interface DeleteAutoSnapshotResult {
  readonly operations: [];
}

interface DeleteBucketAccessKeyRequest {
  readonly bucketName: string;
  readonly accessKeyId: string;
}

interface DeleteBucketAccessKeyResult {
  readonly operations: [];
}

interface DeleteBucketRequest {
  readonly bucketName: string;
  readonly forceDelete: boolean;
}

interface DeleteBucketResult {
  readonly operations: [];
}

interface DeleteCertificateRequest {
  readonly certificateName: string;
}

interface DeleteCertificateResult {
  readonly operations: [];
}

interface DeleteContactMethodRequest {
  readonly protocol: string;
}

interface DeleteContactMethodResult {
  readonly operations: [];
}

interface DeleteContainerImageRequest {
  readonly serviceName: string;
  readonly image: string;
}

interface DeleteContainerImageResult {
}

interface DeleteContainerServiceRequest {
  readonly serviceName: string;
}

interface DeleteContainerServiceResult {
}

interface DeleteDiskRequest {
  readonly diskName: string;
  readonly forceDeleteAddOns: boolean;
}

interface DeleteDiskResult {
  readonly operations: [];
}

interface DeleteDiskSnapshotRequest {
  readonly diskSnapshotName: string;
}

interface DeleteDiskSnapshotResult {
  readonly operations: [];
}

interface DeleteDistributionRequest {
  readonly distributionName: string;
}

interface DeleteDistributionResult {
  readonly operation: Operation;
}

interface DeleteDomainEntryRequest {
  readonly domainName: string;
  readonly domainEntry: DomainEntry;
}

interface DeleteDomainEntryResult {
  readonly operation: Operation;
}

interface DeleteDomainRequest {
  readonly domainName: string;
}

interface DeleteDomainResult {
  readonly operation: Operation;
}

interface DeleteInstanceRequest {
  readonly instanceName: string;
  readonly forceDeleteAddOns: boolean;
}

interface DeleteInstanceResult {
  readonly operations: [];
}

interface DeleteInstanceSnapshotRequest {
  readonly instanceSnapshotName: string;
}

interface DeleteInstanceSnapshotResult {
  readonly operations: [];
}

interface DeleteKeyPairRequest {
  readonly keyPairName: string;
}

interface DeleteKeyPairResult {
  readonly operation: Operation;
}

interface DeleteKnownHostKeysRequest {
  readonly instanceName: string;
}

interface DeleteKnownHostKeysResult {
  readonly operations: [];
}

interface DeleteLoadBalancerRequest {
  readonly loadBalancerName: string;
}

interface DeleteLoadBalancerResult {
  readonly operations: [];
}

interface DeleteLoadBalancerTlsCertificateRequest {
  readonly loadBalancerName: string;
  readonly certificateName: string;
  readonly force: boolean;
}

interface DeleteLoadBalancerTlsCertificateResult {
  readonly operations: [];
}

interface DeleteRelationalDatabaseRequest {
  readonly relationalDatabaseName: string;
  readonly skipFinalSnapshot: boolean;
  readonly finalRelationalDatabaseSnapshotName: string;
}

interface DeleteRelationalDatabaseResult {
  readonly operations: [];
}

interface DeleteRelationalDatabaseSnapshotRequest {
  readonly relationalDatabaseSnapshotName: string;
}

interface DeleteRelationalDatabaseSnapshotResult {
  readonly operations: [];
}

interface DestinationInfo {
  readonly id: string;
  readonly service: string;
}

interface DetachCertificateFromDistributionRequest {
  readonly distributionName: string;
}

interface DetachCertificateFromDistributionResult {
  readonly operation: Operation;
}

interface DetachDiskRequest {
  readonly diskName: string;
}

interface DetachDiskResult {
  readonly operations: [];
}

interface DetachInstancesFromLoadBalancerRequest {
  readonly loadBalancerName: string;
  readonly instanceNames: [];
}

interface DetachInstancesFromLoadBalancerResult {
  readonly operations: [];
}

interface DetachStaticIpRequest {
  readonly staticIpName: string;
}

interface DetachStaticIpResult {
  readonly operations: [];
}

interface DisableAddOnRequest {
  readonly addOnType: string;
  readonly resourceName: string;
}

interface DisableAddOnResult {
  readonly operations: [];
}

interface Disk {
  readonly name: string;
  readonly arn: string;
  readonly supportCode: string;
  readonly createdAt: Date;
  readonly location: ResourceLocation;
  readonly resourceType: string;
  readonly tags: [];
  readonly addOns: [];
  readonly sizeInGb: number;
  readonly isSystemDisk: boolean;
  readonly iops: number;
  readonly path: string;
  readonly state: string;
  readonly attachedTo: string;
  readonly isAttached: boolean;
  readonly attachmentState: string;
  readonly gbInUse: number;
}

interface DiskInfo {
  readonly name: string;
  readonly path: string;
  readonly sizeInGb: number;
  readonly isSystemDisk: boolean;
}

interface DiskMap {
  readonly originalDiskPath: string;
  readonly newDiskName: string;
}

interface DiskSnapshot {
  readonly name: string;
  readonly arn: string;
  readonly supportCode: string;
  readonly createdAt: Date;
  readonly location: ResourceLocation;
  readonly resourceType: string;
  readonly tags: [];
  readonly sizeInGb: number;
  readonly state: string;
  readonly progress: string;
  readonly fromDiskName: string;
  readonly fromDiskArn: string;
  readonly fromInstanceName: string;
  readonly fromInstanceArn: string;
  readonly isFromAutoSnapshot: boolean;
}

interface DiskSnapshotInfo {
  readonly sizeInGb: number;
}

interface DistributionBundle {
  readonly bundleId: string;
  readonly name: string;
  readonly price: unknown;
  readonly transferPerMonthInGb: number;
  readonly isActive: boolean;
}

interface Domain {
  readonly name: string;
  readonly arn: string;
  readonly supportCode: string;
  readonly createdAt: Date;
  readonly location: ResourceLocation;
  readonly resourceType: string;
  readonly tags: [];
  readonly domainEntries: [];
}

interface DomainEntry {
  readonly id: string;
  readonly name: string;
  readonly target: string;
  readonly isAlias: boolean;
  readonly type: string;
  readonly options: {[key: string]: any};
}

interface DomainValidationRecord {
  readonly domainName: string;
  readonly resourceRecord: ResourceRecord;
}

interface DownloadDefaultKeyPairRequest {
}

interface DownloadDefaultKeyPairResult {
  readonly publicKeyBase64: string;
  readonly privateKeyBase64: string;
}

interface EnableAddOnRequest {
  readonly resourceName: string;
  readonly addOnRequest: AddOnRequest;
}

interface EnableAddOnResult {
  readonly operations: [];
}

interface EndpointRequest {
  readonly containerName: string;
  readonly containerPort: number;
  readonly healthCheck: ContainerServiceHealthCheckConfig;
}

interface ExportSnapshotRecord {
  readonly name: string;
  readonly arn: string;
  readonly createdAt: Date;
  readonly location: ResourceLocation;
  readonly resourceType: string;
  readonly state: string;
  readonly sourceInfo: ExportSnapshotRecordSourceInfo;
  readonly destinationInfo: DestinationInfo;
}

interface ExportSnapshotRecordSourceInfo {
  readonly resourceType: string;
  readonly createdAt: Date;
  readonly name: string;
  readonly arn: string;
  readonly fromResourceName: string;
  readonly fromResourceArn: string;
  readonly instanceSnapshotInfo: InstanceSnapshotInfo;
  readonly diskSnapshotInfo: DiskSnapshotInfo;
}

interface ExportSnapshotRequest {
  readonly sourceSnapshotName: string;
}

interface ExportSnapshotResult {
  readonly operations: [];
}

interface GetActiveNamesRequest {
  readonly pageToken: string;
}

interface GetActiveNamesResult {
  readonly activeNames: [];
  readonly nextPageToken: string;
}

interface GetAlarmsRequest {
  readonly alarmName: string;
  readonly pageToken: string;
  readonly monitoredResourceName: string;
}

interface GetAlarmsResult {
  readonly alarms: [];
  readonly nextPageToken: string;
}

interface GetAutoSnapshotsRequest {
  readonly resourceName: string;
}

interface GetAutoSnapshotsResult {
  readonly resourceName: string;
  readonly resourceType: string;
  readonly autoSnapshots: [];
}

interface GetBlueprintsRequest {
  readonly includeInactive: boolean;
  readonly pageToken: string;
}

interface GetBlueprintsResult {
  readonly blueprints: [];
  readonly nextPageToken: string;
}

interface GetBucketAccessKeysRequest {
  readonly bucketName: string;
}

interface GetBucketAccessKeysResult {
  readonly accessKeys: [];
}

interface GetBucketBundlesRequest {
  readonly includeInactive: boolean;
}

interface GetBucketBundlesResult {
  readonly bundles: [];
}

interface GetBucketMetricDataRequest {
  readonly bucketName: string;
  readonly metricName: string;
  readonly startTime: Date;
  readonly endTime: Date;
  readonly period: number;
  readonly statistics: [];
  readonly unit: string;
}

interface GetBucketMetricDataResult {
  readonly metricName: string;
  readonly metricData: [];
}

interface GetBucketsRequest {
  readonly bucketName: string;
  readonly pageToken: string;
  readonly includeConnectedResources: boolean;
}

interface GetBucketsResult {
  readonly buckets: [];
  readonly nextPageToken: string;
}

interface GetBundlesRequest {
  readonly includeInactive: boolean;
  readonly pageToken: string;
}

interface GetBundlesResult {
  readonly bundles: [];
  readonly nextPageToken: string;
}

interface GetCertificatesRequest {
  readonly certificateStatuses: [];
  readonly includeCertificateDetails: boolean;
  readonly certificateName: string;
}

interface GetCertificatesResult {
  readonly certificates: [];
}

interface GetCloudFormationStackRecordsRequest {
  readonly pageToken: string;
}

interface GetCloudFormationStackRecordsResult {
  readonly cloudFormationStackRecords: [];
  readonly nextPageToken: string;
}

interface GetContactMethodsRequest {
  readonly protocols: [];
}

interface GetContactMethodsResult {
  readonly contactMethods: [];
}

interface GetContainerAPIMetadataRequest {
}

interface GetContainerAPIMetadataResult {
  readonly metadata: [];
}

interface GetContainerImagesRequest {
  readonly serviceName: string;
}

interface GetContainerImagesResult {
  readonly containerImages: [];
}

interface GetContainerLogRequest {
  readonly serviceName: string;
  readonly containerName: string;
  readonly startTime: Date;
  readonly endTime: Date;
  readonly filterPattern: string;
  readonly pageToken: string;
}

interface GetContainerLogResult {
  readonly logEvents: [];
  readonly nextPageToken: string;
}

interface GetContainerServiceDeploymentsRequest {
  readonly serviceName: string;
}

interface GetContainerServiceDeploymentsResult {
  readonly deployments: [];
}

interface GetContainerServiceMetricDataRequest {
  readonly serviceName: string;
  readonly metricName: string;
  readonly startTime: Date;
  readonly endTime: Date;
  readonly period: number;
  readonly statistics: [];
}

interface GetContainerServiceMetricDataResult {
  readonly metricName: string;
  readonly metricData: [];
}

interface GetContainerServicePowersRequest {
}

interface GetContainerServicePowersResult {
  readonly powers: [];
}

interface GetContainerServicesRequest {
  readonly serviceName: string;
}

interface GetDiskRequest {
  readonly diskName: string;
}

interface GetDiskResult {
  readonly disk: Disk;
}

interface GetDiskSnapshotRequest {
  readonly diskSnapshotName: string;
}

interface GetDiskSnapshotResult {
  readonly diskSnapshot: DiskSnapshot;
}

interface GetDiskSnapshotsRequest {
  readonly pageToken: string;
}

interface GetDiskSnapshotsResult {
  readonly diskSnapshots: [];
  readonly nextPageToken: string;
}

interface GetDisksRequest {
  readonly pageToken: string;
}

interface GetDisksResult {
  readonly disks: [];
  readonly nextPageToken: string;
}

interface GetDistributionBundlesRequest {
}

interface GetDistributionBundlesResult {
  readonly bundles: [];
}

interface GetDistributionLatestCacheResetRequest {
  readonly distributionName: string;
}

interface GetDistributionLatestCacheResetResult {
  readonly status: string;
  readonly createTime: Date;
}

interface GetDistributionMetricDataRequest {
  readonly distributionName: string;
  readonly metricName: string;
  readonly startTime: Date;
  readonly endTime: Date;
  readonly period: number;
  readonly unit: string;
  readonly statistics: [];
}

interface GetDistributionMetricDataResult {
  readonly metricName: string;
  readonly metricData: [];
}

interface GetDistributionsRequest {
  readonly distributionName: string;
  readonly pageToken: string;
}

interface GetDistributionsResult {
  readonly distributions: [];
  readonly nextPageToken: string;
}

interface GetDomainRequest {
  readonly domainName: string;
}

interface GetDomainResult {
  readonly domain: Domain;
}

interface GetDomainsRequest {
  readonly pageToken: string;
}

interface GetDomainsResult {
  readonly domains: [];
  readonly nextPageToken: string;
}

interface GetExportSnapshotRecordsRequest {
  readonly pageToken: string;
}

interface GetExportSnapshotRecordsResult {
  readonly exportSnapshotRecords: [];
  readonly nextPageToken: string;
}

interface GetInstanceAccessDetailsRequest {
  readonly instanceName: string;
  readonly protocol: string;
}

interface GetInstanceAccessDetailsResult {
  readonly accessDetails: InstanceAccessDetails;
}

interface GetInstanceMetricDataRequest {
  readonly instanceName: string;
  readonly metricName: string;
  readonly period: number;
  readonly startTime: Date;
  readonly endTime: Date;
  readonly unit: string;
  readonly statistics: [];
}

interface GetInstanceMetricDataResult {
  readonly metricName: string;
  readonly metricData: [];
}

interface GetInstancePortStatesRequest {
  readonly instanceName: string;
}

interface GetInstancePortStatesResult {
  readonly portStates: [];
}

interface GetInstanceRequest {
  readonly instanceName: string;
}

interface GetInstanceResult {
  readonly instance: Instance;
}

interface GetInstanceSnapshotRequest {
  readonly instanceSnapshotName: string;
}

interface GetInstanceSnapshotResult {
  readonly instanceSnapshot: InstanceSnapshot;
}

interface GetInstanceSnapshotsRequest {
  readonly pageToken: string;
}

interface GetInstanceSnapshotsResult {
  readonly instanceSnapshots: [];
  readonly nextPageToken: string;
}

interface GetInstanceStateRequest {
  readonly instanceName: string;
}

interface GetInstanceStateResult {
  readonly state: InstanceState;
}

interface GetInstancesRequest {
  readonly pageToken: string;
}

interface GetInstancesResult {
  readonly instances: [];
  readonly nextPageToken: string;
}

interface GetKeyPairRequest {
  readonly keyPairName: string;
}

interface GetKeyPairResult {
  readonly keyPair: KeyPair;
}

interface GetKeyPairsRequest {
  readonly pageToken: string;
}

interface GetKeyPairsResult {
  readonly keyPairs: [];
  readonly nextPageToken: string;
}

interface GetLoadBalancerMetricDataRequest {
  readonly loadBalancerName: string;
  readonly metricName: string;
  readonly period: number;
  readonly startTime: Date;
  readonly endTime: Date;
  readonly unit: string;
  readonly statistics: [];
}

interface GetLoadBalancerMetricDataResult {
  readonly metricName: string;
  readonly metricData: [];
}

interface GetLoadBalancerRequest {
  readonly loadBalancerName: string;
}

interface GetLoadBalancerResult {
  readonly loadBalancer: LoadBalancer;
}

interface GetLoadBalancerTlsCertificatesRequest {
  readonly loadBalancerName: string;
}

interface GetLoadBalancerTlsCertificatesResult {
  readonly tlsCertificates: [];
}

interface GetLoadBalancersRequest {
  readonly pageToken: string;
}

interface GetLoadBalancersResult {
  readonly loadBalancers: [];
  readonly nextPageToken: string;
}

interface GetOperationRequest {
  readonly operationId: string;
}

interface GetOperationResult {
  readonly operation: Operation;
}

interface GetOperationsForResourceRequest {
  readonly resourceName: string;
  readonly pageToken: string;
}

interface GetOperationsForResourceResult {
  readonly operations: [];
  readonly nextPageCount: string;
  readonly nextPageToken: string;
}

interface GetOperationsRequest {
  readonly pageToken: string;
}

interface GetOperationsResult {
  readonly operations: [];
  readonly nextPageToken: string;
}

interface GetRegionsRequest {
  readonly includeAvailabilityZones: boolean;
  readonly includeRelationalDatabaseAvailabilityZones: boolean;
}

interface GetRegionsResult {
  readonly regions: [];
}

interface GetRelationalDatabaseBlueprintsRequest {
  readonly pageToken: string;
}

interface GetRelationalDatabaseBlueprintsResult {
  readonly blueprints: [];
  readonly nextPageToken: string;
}

interface GetRelationalDatabaseBundlesRequest {
  readonly pageToken: string;
}

interface GetRelationalDatabaseBundlesResult {
  readonly bundles: [];
  readonly nextPageToken: string;
}

interface GetRelationalDatabaseEventsRequest {
  readonly relationalDatabaseName: string;
  readonly durationInMinutes: number;
  readonly pageToken: string;
}

interface GetRelationalDatabaseEventsResult {
  readonly relationalDatabaseEvents: [];
  readonly nextPageToken: string;
}

interface GetRelationalDatabaseLogEventsRequest {
  readonly relationalDatabaseName: string;
  readonly logStreamName: string;
  readonly startTime: Date;
  readonly endTime: Date;
  readonly startFromHead: boolean;
  readonly pageToken: string;
}

interface GetRelationalDatabaseLogEventsResult {
  readonly resourceLogEvents: [];
  readonly nextBackwardToken: string;
  readonly nextForwardToken: string;
}

interface GetRelationalDatabaseLogStreamsRequest {
  readonly relationalDatabaseName: string;
}

interface GetRelationalDatabaseLogStreamsResult {
  readonly logStreams: [];
}

interface GetRelationalDatabaseMasterUserPasswordRequest {
  readonly relationalDatabaseName: string;
  readonly passwordVersion: string;
}

interface GetRelationalDatabaseMasterUserPasswordResult {
  readonly masterUserPassword: string;
  readonly createdAt: Date;
}

interface GetRelationalDatabaseMetricDataRequest {
  readonly relationalDatabaseName: string;
  readonly metricName: string;
  readonly period: number;
  readonly startTime: Date;
  readonly endTime: Date;
  readonly unit: string;
  readonly statistics: [];
}

interface GetRelationalDatabaseMetricDataResult {
  readonly metricName: string;
  readonly metricData: [];
}

interface GetRelationalDatabaseParametersRequest {
  readonly relationalDatabaseName: string;
  readonly pageToken: string;
}

interface GetRelationalDatabaseParametersResult {
  readonly parameters: [];
  readonly nextPageToken: string;
}

interface GetRelationalDatabaseRequest {
  readonly relationalDatabaseName: string;
}

interface GetRelationalDatabaseResult {
  readonly relationalDatabase: RelationalDatabase;
}

interface GetRelationalDatabaseSnapshotRequest {
  readonly relationalDatabaseSnapshotName: string;
}

interface GetRelationalDatabaseSnapshotResult {
  readonly relationalDatabaseSnapshot: RelationalDatabaseSnapshot;
}

interface GetRelationalDatabaseSnapshotsRequest {
  readonly pageToken: string;
}

interface GetRelationalDatabaseSnapshotsResult {
  readonly relationalDatabaseSnapshots: [];
  readonly nextPageToken: string;
}

interface GetRelationalDatabasesRequest {
  readonly pageToken: string;
}

interface GetRelationalDatabasesResult {
  readonly relationalDatabases: [];
  readonly nextPageToken: string;
}

interface GetStaticIpRequest {
  readonly staticIpName: string;
}

interface GetStaticIpResult {
  readonly staticIp: StaticIp;
}

interface GetStaticIpsRequest {
  readonly pageToken: string;
}

interface GetStaticIpsResult {
  readonly staticIps: [];
  readonly nextPageToken: string;
}

interface HeaderObject {
  readonly option: string;
  readonly headersAllowList: [];
}

interface HostKeyAttributes {
  readonly algorithm: string;
  readonly publicKey: string;
  readonly witnessedAt: Date;
  readonly fingerprintSHA1: string;
  readonly fingerprintSHA256: string;
  readonly notValidBefore: Date;
  readonly notValidAfter: Date;
}

interface ImportKeyPairRequest {
  readonly keyPairName: string;
  readonly publicKeyBase64: string;
}

interface ImportKeyPairResult {
  readonly operation: Operation;
}

interface InputOrigin {
  readonly name: string;
  readonly regionName: string;
  readonly protocolPolicy: string;
}

interface Instance {
  readonly name: string;
  readonly arn: string;
  readonly supportCode: string;
  readonly createdAt: Date;
  readonly location: ResourceLocation;
  readonly resourceType: string;
  readonly tags: [];
  readonly blueprintId: string;
  readonly blueprintName: string;
  readonly bundleId: string;
  readonly addOns: [];
  readonly isStaticIp: boolean;
  readonly privateIpAddress: string;
  readonly publicIpAddress: string;
  readonly ipv6Addresses: [];
  readonly ipAddressType: string;
  readonly hardware: InstanceHardware;
  readonly networking: InstanceNetworking;
  readonly state: InstanceState;
  readonly username: string;
  readonly sshKeyName: string;
}

interface InstanceAccessDetails {
  readonly certKey: string;
  readonly expiresAt: Date;
  readonly ipAddress: string;
  readonly password: string;
  readonly passwordData: PasswordData;
  readonly privateKey: string;
  readonly protocol: string;
  readonly instanceName: string;
  readonly username: string;
  readonly hostKeys: [];
}

interface InstanceEntry {
  readonly sourceName: string;
  readonly instanceType: string;
  readonly portInfoSource: string;
  readonly userData: string;
  readonly availabilityZone: string;
}

interface InstanceHardware {
  readonly cpuCount: number;
  readonly disks: [];
  readonly ramSizeInGb: unknown;
}

interface InstanceHealthSummary {
  readonly instanceName: string;
  readonly instanceHealth: string;
  readonly instanceHealthReason: string;
}

interface InstanceNetworking {
  readonly monthlyTransfer: MonthlyTransfer;
  readonly ports: [];
}

interface InstancePortInfo {
  readonly fromPort: number;
  readonly toPort: number;
  readonly protocol: string;
  readonly accessFrom: string;
  readonly accessType: string;
  readonly commonName: string;
  readonly accessDirection: string;
  readonly cidrs: [];
  readonly ipv6Cidrs: [];
  readonly cidrListAliases: [];
}

interface InstancePortState {
  readonly fromPort: number;
  readonly toPort: number;
  readonly protocol: string;
  readonly state: string;
  readonly cidrs: [];
  readonly ipv6Cidrs: [];
  readonly cidrListAliases: [];
}

interface InstanceSnapshot {
  readonly name: string;
  readonly arn: string;
  readonly supportCode: string;
  readonly createdAt: Date;
  readonly location: ResourceLocation;
  readonly resourceType: string;
  readonly tags: [];
  readonly state: string;
  readonly progress: string;
  readonly fromAttachedDisks: [];
  readonly fromInstanceName: string;
  readonly fromInstanceArn: string;
  readonly fromBlueprintId: string;
  readonly fromBundleId: string;
  readonly isFromAutoSnapshot: boolean;
  readonly sizeInGb: number;
}

interface InstanceSnapshotInfo {
  readonly fromBundleId: string;
  readonly fromBlueprintId: string;
  readonly fromDiskInfo: [];
}

interface InstanceState {
  readonly code: number;
  readonly name: string;
}

interface InvalidInputException {
  readonly code: string;
  readonly docs: string;
  readonly message: string;
  readonly tip: string;
}

interface IsVpcPeeredRequest {
}

interface IsVpcPeeredResult {
  readonly isPeered: boolean;
}

interface KeyPair {
  readonly name: string;
  readonly arn: string;
  readonly supportCode: string;
  readonly createdAt: Date;
  readonly location: ResourceLocation;
  readonly resourceType: string;
  readonly tags: [];
  readonly fingerprint: string;
}

interface LightsailDistribution {
  readonly name: string;
  readonly arn: string;
  readonly supportCode: string;
  readonly createdAt: Date;
  readonly location: ResourceLocation;
  readonly resourceType: string;
  readonly alternativeDomainNames: [];
  readonly status: string;
  readonly isEnabled: boolean;
  readonly domainName: string;
  readonly bundleId: string;
  readonly certificateName: string;
  readonly origin: Origin;
  readonly originPublicDNS: string;
  readonly defaultCacheBehavior: CacheBehavior;
  readonly cacheBehaviorSettings: CacheSettings;
  readonly cacheBehaviors: [];
  readonly ableToUpdateBundle: boolean;
  readonly ipAddressType: string;
  readonly tags: [];
}

interface LoadBalancer {
  readonly name: string;
  readonly arn: string;
  readonly supportCode: string;
  readonly createdAt: Date;
  readonly location: ResourceLocation;
  readonly resourceType: string;
  readonly tags: [];
  readonly dnsName: string;
  readonly state: string;
  readonly protocol: string;
  readonly publicPorts: [];
  readonly healthCheckPath: string;
  readonly instancePort: number;
  readonly instanceHealthSummary: [];
  readonly tlsCertificateSummaries: [];
  readonly configurationOptions: {[key: string]: any};
  readonly ipAddressType: string;
}

interface LoadBalancerTlsCertificate {
  readonly name: string;
  readonly arn: string;
  readonly supportCode: string;
  readonly createdAt: Date;
  readonly location: ResourceLocation;
  readonly resourceType: string;
  readonly tags: [];
  readonly loadBalancerName: string;
  readonly isAttached: boolean;
  readonly status: string;
  readonly domainName: string;
  readonly domainValidationRecords: [];
  readonly failureReason: string;
  readonly issuedAt: Date;
  readonly issuer: string;
  readonly keyAlgorithm: string;
  readonly notAfter: Date;
  readonly notBefore: Date;
  readonly renewalSummary: LoadBalancerTlsCertificateRenewalSummary;
  readonly revocationReason: string;
  readonly revokedAt: Date;
  readonly serial: string;
  readonly signatureAlgorithm: string;
  readonly subject: string;
  readonly subjectAlternativeNames: [];
}

interface LoadBalancerTlsCertificateDomainValidationOption {
  readonly domainName: string;
  readonly validationStatus: string;
}

interface LoadBalancerTlsCertificateDomainValidationRecord {
  readonly name: string;
  readonly type: string;
  readonly value: string;
  readonly validationStatus: string;
  readonly domainName: string;
}

interface LoadBalancerTlsCertificateRenewalSummary {
  readonly renewalStatus: string;
  readonly domainValidationOptions: [];
}

interface LoadBalancerTlsCertificateSummary {
  readonly name: string;
  readonly isAttached: boolean;
}

interface LogEvent {
  readonly createdAt: Date;
  readonly message: string;
}

interface MetricDatapoint {
  readonly average: unknown;
  readonly maximum: unknown;
  readonly minimum: unknown;
  readonly sampleCount: unknown;
  readonly sum: unknown;
  readonly timestamp: Date;
  readonly unit: string;
}

interface MonitoredResourceInfo {
  readonly arn: string;
  readonly name: string;
  readonly resourceType: string;
}

interface MonthlyTransfer {
  readonly gbPerMonthAllocated: number;
}

interface NotFoundException {
  readonly code: string;
  readonly docs: string;
  readonly message: string;
  readonly tip: string;
}

interface OpenInstancePublicPortsRequest {
  readonly portInfo: PortInfo;
  readonly instanceName: string;
}

interface OpenInstancePublicPortsResult {
  readonly operation: Operation;
}

interface Operation {
  readonly id: string;
  readonly resourceName: string;
  readonly resourceType: string;
  readonly createdAt: Date;
  readonly location: ResourceLocation;
  readonly isTerminal: boolean;
  readonly operationDetails: string;
  readonly operationType: string;
  readonly status: string;
  readonly statusChangedAt: Date;
  readonly errorCode: string;
  readonly errorDetails: string;
}

interface OperationFailureException {
  readonly code: string;
  readonly docs: string;
  readonly message: string;
  readonly tip: string;
}

interface Origin {
  readonly name: string;
  readonly resourceType: string;
  readonly regionName: string;
  readonly protocolPolicy: string;
}

interface PasswordData {
  readonly ciphertext: string;
  readonly keyPairName: string;
}

interface PeerVpcRequest {
}

interface PeerVpcResult {
  readonly operation: Operation;
}

interface PendingMaintenanceAction {
  readonly action: string;
  readonly description: string;
  readonly currentApplyDate: Date;
}

interface PendingModifiedRelationalDatabaseValues {
  readonly masterUserPassword: string;
  readonly engineVersion: string;
  readonly backupRetentionEnabled: boolean;
}

interface PortInfo {
  readonly fromPort: number;
  readonly toPort: number;
  readonly protocol: string;
  readonly cidrs: [];
  readonly ipv6Cidrs: [];
  readonly cidrListAliases: [];
}

interface PutAlarmRequest {
  readonly alarmName: string;
  readonly metricName: string;
  readonly monitoredResourceName: string;
  readonly comparisonOperator: string;
  readonly threshold: unknown;
  readonly evaluationPeriods: number;
  readonly datapointsToAlarm: number;
  readonly treatMissingData: string;
  readonly contactProtocols: [];
  readonly notificationTriggers: [];
  readonly notificationEnabled: boolean;
}

interface PutAlarmResult {
  readonly operations: [];
}

interface PutInstancePublicPortsRequest {
  readonly portInfos: [];
  readonly instanceName: string;
}

interface PutInstancePublicPortsResult {
  readonly operation: Operation;
}

interface QueryStringObject {
  readonly option: boolean;
  readonly queryStringsAllowList: [];
}

interface RebootInstanceRequest {
  readonly instanceName: string;
}

interface RebootInstanceResult {
  readonly operations: [];
}

interface RebootRelationalDatabaseRequest {
  readonly relationalDatabaseName: string;
}

interface RebootRelationalDatabaseResult {
  readonly operations: [];
}

interface Region {
  readonly continentCode: string;
  readonly description: string;
  readonly displayName: string;
  readonly name: string;
  readonly availabilityZones: [];
  readonly relationalDatabaseAvailabilityZones: [];
}

interface RegisterContainerImageRequest {
  readonly serviceName: string;
  readonly label: string;
  readonly digest: string;
}

interface RegisterContainerImageResult {
  readonly containerImage: ContainerImage;
}

interface RelationalDatabase {
  readonly name: string;
  readonly arn: string;
  readonly supportCode: string;
  readonly createdAt: Date;
  readonly location: ResourceLocation;
  readonly resourceType: string;
  readonly tags: [];
  readonly relationalDatabaseBlueprintId: string;
  readonly relationalDatabaseBundleId: string;
  readonly masterDatabaseName: string;
  readonly hardware: RelationalDatabaseHardware;
  readonly state: string;
  readonly secondaryAvailabilityZone: string;
  readonly backupRetentionEnabled: boolean;
  readonly pendingModifiedValues: PendingModifiedRelationalDatabaseValues;
  readonly engine: string;
  readonly engineVersion: string;
  readonly latestRestorableTime: Date;
  readonly masterUsername: string;
  readonly parameterApplyStatus: string;
  readonly preferredBackupWindow: string;
  readonly preferredMaintenanceWindow: string;
  readonly publiclyAccessible: boolean;
  readonly masterEndpoint: RelationalDatabaseEndpoint;
  readonly pendingMaintenanceActions: [];
  readonly caCertificateIdentifier: string;
}

interface RelationalDatabaseBlueprint {
  readonly blueprintId: string;
  readonly engine: string;
  readonly engineVersion: string;
  readonly engineDescription: string;
  readonly engineVersionDescription: string;
  readonly isEngineDefault: boolean;
}

interface RelationalDatabaseBundle {
  readonly bundleId: string;
  readonly name: string;
  readonly price: unknown;
  readonly ramSizeInGb: unknown;
  readonly diskSizeInGb: number;
  readonly transferPerMonthInGb: number;
  readonly cpuCount: number;
  readonly isEncrypted: boolean;
  readonly isActive: boolean;
}

interface RelationalDatabaseEndpoint {
  readonly port: number;
  readonly address: string;
}

interface RelationalDatabaseEvent {
  readonly resource: string;
  readonly createdAt: Date;
  readonly message: string;
  readonly eventCategories: [];
}

interface RelationalDatabaseHardware {
  readonly cpuCount: number;
  readonly diskSizeInGb: number;
  readonly ramSizeInGb: unknown;
}

interface RelationalDatabaseParameter {
  readonly allowedValues: string;
  readonly applyMethod: string;
  readonly applyType: string;
  readonly dataType: string;
  readonly description: string;
  readonly isModifiable: boolean;
  readonly parameterName: string;
  readonly parameterValue: string;
}

interface RelationalDatabaseSnapshot {
  readonly name: string;
  readonly arn: string;
  readonly supportCode: string;
  readonly createdAt: Date;
  readonly location: ResourceLocation;
  readonly resourceType: string;
  readonly tags: [];
  readonly engine: string;
  readonly engineVersion: string;
  readonly sizeInGb: number;
  readonly state: string;
  readonly fromRelationalDatabaseName: string;
  readonly fromRelationalDatabaseArn: string;
  readonly fromRelationalDatabaseBundleId: string;
  readonly fromRelationalDatabaseBlueprintId: string;
}

interface ReleaseStaticIpRequest {
  readonly staticIpName: string;
}

interface ReleaseStaticIpResult {
  readonly operations: [];
}

interface RenewalSummary {
  readonly domainValidationRecords: [];
  readonly renewalStatus: string;
  readonly renewalStatusReason: string;
  readonly updatedAt: Date;
}

interface ResetDistributionCacheRequest {
  readonly distributionName: string;
}

interface ResetDistributionCacheResult {
  readonly status: string;
  readonly createTime: Date;
  readonly operation: Operation;
}

interface ResourceLocation {
  readonly availabilityZone: string;
  readonly regionName: string;
}

interface ResourceReceivingAccess {
  readonly name: string;
  readonly resourceType: string;
}

interface ResourceRecord {
  readonly name: string;
  readonly type: string;
  readonly value: string;
}

interface SendContactMethodVerificationRequest {
  readonly protocol: string;
}

interface SendContactMethodVerificationResult {
  readonly operations: [];
}

interface ServiceException {
  readonly code: string;
  readonly docs: string;
  readonly message: string;
  readonly tip: string;
}

interface SetIpAddressTypeRequest {
  readonly resourceType: string;
  readonly resourceName: string;
  readonly ipAddressType: string;
}

interface SetIpAddressTypeResult {
  readonly operations: [];
}

interface SetResourceAccessForBucketRequest {
  readonly resourceName: string;
  readonly bucketName: string;
  readonly access: string;
}

interface SetResourceAccessForBucketResult {
  readonly operations: [];
}

interface StartInstanceRequest {
  readonly instanceName: string;
}

interface StartInstanceResult {
  readonly operations: [];
}

interface StartRelationalDatabaseRequest {
  readonly relationalDatabaseName: string;
}

interface StartRelationalDatabaseResult {
  readonly operations: [];
}

interface StaticIp {
  readonly name: string;
  readonly arn: string;
  readonly supportCode: string;
  readonly createdAt: Date;
  readonly location: ResourceLocation;
  readonly resourceType: string;
  readonly ipAddress: string;
  readonly attachedTo: string;
  readonly isAttached: boolean;
}

interface StopInstanceRequest {
  readonly instanceName: string;
  readonly force: boolean;
}

interface StopInstanceResult {
  readonly operations: [];
}

interface StopRelationalDatabaseRequest {
  readonly relationalDatabaseName: string;
  readonly relationalDatabaseSnapshotName: string;
}

interface StopRelationalDatabaseResult {
  readonly operations: [];
}

interface Tag {
  readonly key: string;
  readonly value: string;
}

interface TagResourceRequest {
  readonly resourceName: string;
  readonly resourceArn: string;
  readonly tags: [];
}

interface TagResourceResult {
  readonly operations: [];
}

interface TestAlarmRequest {
  readonly alarmName: string;
  readonly state: string;
}

interface TestAlarmResult {
  readonly operations: [];
}

interface UnauthenticatedException {
  readonly code: string;
  readonly docs: string;
  readonly message: string;
  readonly tip: string;
}

interface UnpeerVpcRequest {
}

interface UnpeerVpcResult {
  readonly operation: Operation;
}

interface UntagResourceRequest {
  readonly resourceName: string;
  readonly resourceArn: string;
  readonly tagKeys: [];
}

interface UntagResourceResult {
  readonly operations: [];
}

interface UpdateBucketBundleRequest {
  readonly bucketName: string;
  readonly bundleId: string;
}

interface UpdateBucketBundleResult {
  readonly operations: [];
}

interface UpdateBucketRequest {
  readonly bucketName: string;
  readonly accessRules: AccessRules;
  readonly versioning: string;
  readonly readonlyAccessAccounts: [];
  readonly accessLogConfig: BucketAccessLogConfig;
}

interface UpdateBucketResult {
  readonly bucket: Bucket;
  readonly operations: [];
}

interface UpdateContainerServiceRequest {
  readonly serviceName: string;
  readonly power: string;
  readonly scale: number;
  readonly isDisabled: boolean;
  readonly publicDomainNames: {[key: string]: any};
}

interface UpdateContainerServiceResult {
  readonly containerService: ContainerService;
}

interface UpdateDistributionBundleRequest {
  readonly distributionName: string;
  readonly bundleId: string;
}

interface UpdateDistributionBundleResult {
  readonly operation: Operation;
}

interface UpdateDistributionRequest {
  readonly distributionName: string;
  readonly origin: InputOrigin;
  readonly defaultCacheBehavior: CacheBehavior;
  readonly cacheBehaviorSettings: CacheSettings;
  readonly cacheBehaviors: [];
  readonly isEnabled: boolean;
}

interface UpdateDistributionResult {
  readonly operation: Operation;
}

interface UpdateDomainEntryRequest {
  readonly domainName: string;
  readonly domainEntry: DomainEntry;
}

interface UpdateDomainEntryResult {
  readonly operations: [];
}

interface UpdateLoadBalancerAttributeRequest {
  readonly loadBalancerName: string;
  readonly attributeName: string;
  readonly attributeValue: string;
}

interface UpdateLoadBalancerAttributeResult {
  readonly operations: [];
}

interface UpdateRelationalDatabaseParametersRequest {
  readonly relationalDatabaseName: string;
  readonly parameters: [];
}

interface UpdateRelationalDatabaseParametersResult {
  readonly operations: [];
}

interface UpdateRelationalDatabaseRequest {
  readonly relationalDatabaseName: string;
  readonly masterUserPassword: string;
  readonly rotateMasterUserPassword: boolean;
  readonly preferredBackupWindow: string;
  readonly preferredMaintenanceWindow: string;
  readonly enableBackupRetention: boolean;
  readonly disableBackupRetention: boolean;
  readonly publiclyAccessible: boolean;
  readonly applyImmediately: boolean;
  readonly caCertificateIdentifier: string;
}

interface UpdateRelationalDatabaseResult {
  readonly operations: [];
}

