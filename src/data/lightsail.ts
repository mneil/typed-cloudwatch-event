/**
 * STOP. This file is autogenerated. DO NOT EDIT by hand
 */
export interface AllocateStaticIp {
  readonly staticIpName: string;
}

export interface AttachCertificateToDistribution {
  readonly distributionName: string;
  readonly certificateName: string;
}

export interface AttachDisk {
  readonly diskName: string;
  readonly instanceName: string;
  readonly diskPath: string;
}

export interface AttachInstancesToLoadBalancer {
  readonly loadBalancerName: string;
  readonly instanceNames: [];
}

export interface AttachLoadBalancerTlsCertificate {
  readonly loadBalancerName: string;
  readonly certificateName: string;
}

export interface AttachStaticIp {
  readonly staticIpName: string;
  readonly instanceName: string;
}

export interface CloseInstancePublicPorts {
  readonly portInfo: PortInfo;
  readonly instanceName: string;
}

export interface CopySnapshot {
  readonly sourceSnapshotName?: string;
  readonly sourceResourceName?: string;
  readonly restoreDate?: string;
  readonly useLatestRestorableAutoSnapshot?: boolean;
  readonly targetSnapshotName: string;
  readonly sourceRegion: string;
}

export interface CreateBucket {
  readonly bucketName: string;
  readonly bundleId: string;
  readonly tags?: [];
  readonly enableObjectVersioning?: boolean;
}

export interface CreateBucketAccessKey {
  readonly bucketName: string;
}

export interface CreateCertificate {
  readonly certificateName: string;
  readonly domainName: string;
  readonly subjectAlternativeNames?: [];
  readonly tags?: [];
}

export interface CreateCloudFormationStack {
  readonly instances: [];
}

export interface CreateContactMethod {
  readonly protocol: string;
  readonly contactEndpoint: string;
}

export interface CreateContainerService {
  readonly serviceName: string;
  readonly power: string;
  readonly scale: number;
  readonly tags?: [];
  readonly publicDomainNames?: {[key: string]: any};
  readonly deployment?: ContainerServiceDeploymentRequest;
}

export interface CreateContainerServiceDeployment {
  readonly serviceName: string;
  readonly containers?: {[key: string]: any};
  readonly publicEndpoint?: EndpointRequest;
}

export interface CreateContainerServiceRegistryLogin {
}

export interface CreateDisk {
  readonly diskName: string;
  readonly availabilityZone: string;
  readonly sizeInGb: number;
  readonly tags?: [];
  readonly addOns?: [];
}

export interface CreateDiskFromSnapshot {
  readonly diskName: string;
  readonly diskSnapshotName?: string;
  readonly availabilityZone: string;
  readonly sizeInGb: number;
  readonly tags?: [];
  readonly addOns?: [];
  readonly sourceDiskName?: string;
  readonly restoreDate?: string;
  readonly useLatestRestorableAutoSnapshot?: boolean;
}

export interface CreateDiskSnapshot {
  readonly diskName?: string;
  readonly diskSnapshotName: string;
  readonly instanceName?: string;
  readonly tags?: [];
}

export interface CreateDistribution {
  readonly distributionName: string;
  readonly origin: InputOrigin;
  readonly defaultCacheBehavior: CacheBehavior;
  readonly cacheBehaviorSettings?: CacheSettings;
  readonly cacheBehaviors?: [];
  readonly bundleId: string;
  readonly ipAddressType?: string;
  readonly tags?: [];
}

export interface CreateDomain {
  readonly domainName: string;
  readonly tags?: [];
}

export interface CreateDomainEntry {
  readonly domainName: string;
  readonly domainEntry: DomainEntry;
}

export interface CreateInstanceSnapshot {
  readonly instanceSnapshotName: string;
  readonly instanceName: string;
  readonly tags?: [];
}

export interface CreateInstances {
  readonly instanceNames: [];
  readonly availabilityZone: string;
  readonly customImageName?: string;
  readonly blueprintId: string;
  readonly bundleId: string;
  readonly userData?: string;
  readonly keyPairName?: string;
  readonly tags?: [];
  readonly addOns?: [];
  readonly ipAddressType?: string;
}

export interface CreateInstancesFromSnapshot {
  readonly instanceNames: [];
  readonly attachedDiskMapping?: {[key: string]: any};
  readonly availabilityZone: string;
  readonly instanceSnapshotName?: string;
  readonly bundleId: string;
  readonly userData?: string;
  readonly keyPairName?: string;
  readonly tags?: [];
  readonly addOns?: [];
  readonly ipAddressType?: string;
  readonly sourceInstanceName?: string;
  readonly restoreDate?: string;
  readonly useLatestRestorableAutoSnapshot?: boolean;
}

export interface CreateKeyPair {
  readonly keyPairName: string;
  readonly tags?: [];
}

export interface CreateLoadBalancer {
  readonly loadBalancerName: string;
  readonly instancePort: number;
  readonly healthCheckPath?: string;
  readonly certificateName?: string;
  readonly certificateDomainName?: string;
  readonly certificateAlternativeNames?: [];
  readonly tags?: [];
  readonly ipAddressType?: string;
}

export interface CreateLoadBalancerTlsCertificate {
  readonly loadBalancerName: string;
  readonly certificateName: string;
  readonly certificateDomainName: string;
  readonly certificateAlternativeNames?: [];
  readonly tags?: [];
}

export interface CreateRelationalDatabase {
  readonly relationalDatabaseName: string;
  readonly availabilityZone?: string;
  readonly relationalDatabaseBlueprintId: string;
  readonly relationalDatabaseBundleId: string;
  readonly masterDatabaseName: string;
  readonly masterUsername: string;
  readonly masterUserPassword?: string;
  readonly preferredBackupWindow?: string;
  readonly preferredMaintenanceWindow?: string;
  readonly publiclyAccessible?: boolean;
  readonly tags?: [];
}

export interface CreateRelationalDatabaseFromSnapshot {
  readonly relationalDatabaseName: string;
  readonly availabilityZone?: string;
  readonly publiclyAccessible?: boolean;
  readonly relationalDatabaseSnapshotName?: string;
  readonly relationalDatabaseBundleId?: string;
  readonly sourceRelationalDatabaseName?: string;
  readonly restoreTime?: Date;
  readonly useLatestRestorableTime?: boolean;
  readonly tags?: [];
}

export interface CreateRelationalDatabaseSnapshot {
  readonly relationalDatabaseName: string;
  readonly relationalDatabaseSnapshotName: string;
  readonly tags?: [];
}

export interface DeleteAlarm {
  readonly alarmName: string;
}

export interface DeleteAutoSnapshot {
  readonly resourceName: string;
  readonly date: string;
}

export interface DeleteBucket {
  readonly bucketName: string;
  readonly forceDelete?: boolean;
}

export interface DeleteBucketAccessKey {
  readonly bucketName: string;
  readonly accessKeyId: string;
}

export interface DeleteCertificate {
  readonly certificateName: string;
}

export interface DeleteContactMethod {
  readonly protocol: string;
}

export interface DeleteContainerImage {
  readonly serviceName: string;
  readonly image: string;
}

export interface DeleteContainerService {
  readonly serviceName: string;
}

export interface DeleteDisk {
  readonly diskName: string;
  readonly forceDeleteAddOns?: boolean;
}

export interface DeleteDiskSnapshot {
  readonly diskSnapshotName: string;
}

export interface DeleteDistribution {
  readonly distributionName?: string;
}

export interface DeleteDomain {
  readonly domainName: string;
}

export interface DeleteDomainEntry {
  readonly domainName: string;
  readonly domainEntry: DomainEntry;
}

export interface DeleteInstance {
  readonly instanceName: string;
  readonly forceDeleteAddOns?: boolean;
}

export interface DeleteInstanceSnapshot {
  readonly instanceSnapshotName: string;
}

export interface DeleteKeyPair {
  readonly keyPairName: string;
}

export interface DeleteKnownHostKeys {
  readonly instanceName: string;
}

export interface DeleteLoadBalancer {
  readonly loadBalancerName: string;
}

export interface DeleteLoadBalancerTlsCertificate {
  readonly loadBalancerName: string;
  readonly certificateName: string;
  readonly force?: boolean;
}

export interface DeleteRelationalDatabase {
  readonly relationalDatabaseName: string;
  readonly skipFinalSnapshot?: boolean;
  readonly finalRelationalDatabaseSnapshotName?: string;
}

export interface DeleteRelationalDatabaseSnapshot {
  readonly relationalDatabaseSnapshotName: string;
}

export interface DetachCertificateFromDistribution {
  readonly distributionName: string;
}

export interface DetachDisk {
  readonly diskName: string;
}

export interface DetachInstancesFromLoadBalancer {
  readonly loadBalancerName: string;
  readonly instanceNames: [];
}

export interface DetachStaticIp {
  readonly staticIpName: string;
}

export interface DisableAddOn {
  readonly addOnType: string;
  readonly resourceName: string;
}

export interface DownloadDefaultKeyPair {
}

export interface EnableAddOn {
  readonly resourceName: string;
  readonly addOnRequest: AddOnRequest;
}

export interface ExportSnapshot {
  readonly sourceSnapshotName: string;
}

export interface GetActiveNames {
  readonly pageToken?: string;
}

export interface GetAlarms {
  readonly alarmName?: string;
  readonly pageToken?: string;
  readonly monitoredResourceName?: string;
}

export interface GetAutoSnapshots {
  readonly resourceName: string;
}

export interface GetBlueprints {
  readonly includeInactive?: boolean;
  readonly pageToken?: string;
}

export interface GetBucketAccessKeys {
  readonly bucketName: string;
}

export interface GetBucketBundles {
  readonly includeInactive?: boolean;
}

export interface GetBucketMetricData {
  readonly bucketName: string;
  readonly metricName: string;
  readonly startTime: Date;
  readonly endTime: Date;
  readonly period: number;
  readonly statistics: [];
  readonly unit: string;
}

export interface GetBuckets {
  readonly bucketName?: string;
  readonly pageToken?: string;
  readonly includeConnectedResources?: boolean;
}

export interface GetBundles {
  readonly includeInactive?: boolean;
  readonly pageToken?: string;
}

export interface GetCertificates {
  readonly certificateStatuses?: [];
  readonly includeCertificateDetails?: boolean;
  readonly certificateName?: string;
}

export interface GetCloudFormationStackRecords {
  readonly pageToken?: string;
}

export interface GetContactMethods {
  readonly protocols?: [];
}

export interface GetContainerAPIMetadata {
}

export interface GetContainerImages {
  readonly serviceName: string;
}

export interface GetContainerLog {
  readonly serviceName: string;
  readonly containerName: string;
  readonly startTime?: Date;
  readonly endTime?: Date;
  readonly filterPattern?: string;
  readonly pageToken?: string;
}

export interface GetContainerServiceDeployments {
  readonly serviceName: string;
}

export interface GetContainerServiceMetricData {
  readonly serviceName: string;
  readonly metricName: string;
  readonly startTime: Date;
  readonly endTime: Date;
  readonly period: number;
  readonly statistics: [];
}

export interface GetContainerServicePowers {
}

export interface GetContainerServices {
  readonly serviceName?: string;
}

export interface GetDisk {
  readonly diskName: string;
}

export interface GetDiskSnapshot {
  readonly diskSnapshotName: string;
}

export interface GetDiskSnapshots {
  readonly pageToken?: string;
}

export interface GetDisks {
  readonly pageToken?: string;
}

export interface GetDistributionBundles {
}

export interface GetDistributionLatestCacheReset {
  readonly distributionName?: string;
}

export interface GetDistributionMetricData {
  readonly distributionName: string;
  readonly metricName: string;
  readonly startTime: Date;
  readonly endTime: Date;
  readonly period: number;
  readonly unit: string;
  readonly statistics: [];
}

export interface GetDistributions {
  readonly distributionName?: string;
  readonly pageToken?: string;
}

export interface GetDomain {
  readonly domainName: string;
}

export interface GetDomains {
  readonly pageToken?: string;
}

export interface GetExportSnapshotRecords {
  readonly pageToken?: string;
}

export interface GetInstance {
  readonly instanceName: string;
}

export interface GetInstanceAccessDetails {
  readonly instanceName: string;
  readonly protocol?: string;
}

export interface GetInstanceMetricData {
  readonly instanceName: string;
  readonly metricName: string;
  readonly period: number;
  readonly startTime: Date;
  readonly endTime: Date;
  readonly unit: string;
  readonly statistics: [];
}

export interface GetInstancePortStates {
  readonly instanceName: string;
}

export interface GetInstanceSnapshot {
  readonly instanceSnapshotName: string;
}

export interface GetInstanceSnapshots {
  readonly pageToken?: string;
}

export interface GetInstanceState {
  readonly instanceName: string;
}

export interface GetInstances {
  readonly pageToken?: string;
}

export interface GetKeyPair {
  readonly keyPairName: string;
}

export interface GetKeyPairs {
  readonly pageToken?: string;
}

export interface GetLoadBalancer {
  readonly loadBalancerName: string;
}

export interface GetLoadBalancerMetricData {
  readonly loadBalancerName: string;
  readonly metricName: string;
  readonly period: number;
  readonly startTime: Date;
  readonly endTime: Date;
  readonly unit: string;
  readonly statistics: [];
}

export interface GetLoadBalancerTlsCertificates {
  readonly loadBalancerName: string;
}

export interface GetLoadBalancers {
  readonly pageToken?: string;
}

export interface GetOperation {
  readonly operationId: string;
}

export interface GetOperations {
  readonly pageToken?: string;
}

export interface GetOperationsForResource {
  readonly resourceName: string;
  readonly pageToken?: string;
}

export interface GetRegions {
  readonly includeAvailabilityZones?: boolean;
  readonly includeRelationalDatabaseAvailabilityZones?: boolean;
}

export interface GetRelationalDatabase {
  readonly relationalDatabaseName: string;
}

export interface GetRelationalDatabaseBlueprints {
  readonly pageToken?: string;
}

export interface GetRelationalDatabaseBundles {
  readonly pageToken?: string;
}

export interface GetRelationalDatabaseEvents {
  readonly relationalDatabaseName: string;
  readonly durationInMinutes?: number;
  readonly pageToken?: string;
}

export interface GetRelationalDatabaseLogEvents {
  readonly relationalDatabaseName: string;
  readonly logStreamName: string;
  readonly startTime?: Date;
  readonly endTime?: Date;
  readonly startFromHead?: boolean;
  readonly pageToken?: string;
}

export interface GetRelationalDatabaseLogStreams {
  readonly relationalDatabaseName: string;
}

export interface GetRelationalDatabaseMasterUserPassword {
  readonly relationalDatabaseName: string;
  readonly passwordVersion?: string;
}

export interface GetRelationalDatabaseMetricData {
  readonly relationalDatabaseName: string;
  readonly metricName: string;
  readonly period: number;
  readonly startTime: Date;
  readonly endTime: Date;
  readonly unit: string;
  readonly statistics: [];
}

export interface GetRelationalDatabaseParameters {
  readonly relationalDatabaseName: string;
  readonly pageToken?: string;
}

export interface GetRelationalDatabaseSnapshot {
  readonly relationalDatabaseSnapshotName: string;
}

export interface GetRelationalDatabaseSnapshots {
  readonly pageToken?: string;
}

export interface GetRelationalDatabases {
  readonly pageToken?: string;
}

export interface GetStaticIp {
  readonly staticIpName: string;
}

export interface GetStaticIps {
  readonly pageToken?: string;
}

export interface ImportKeyPair {
  readonly keyPairName: string;
  readonly publicKeyBase64: string;
}

export interface IsVpcPeered {
}

export interface OpenInstancePublicPorts {
  readonly portInfo: PortInfo;
  readonly instanceName: string;
}

export interface PeerVpc {
}

export interface PutAlarm {
  readonly alarmName: string;
  readonly metricName: string;
  readonly monitoredResourceName: string;
  readonly comparisonOperator: string;
  readonly threshold: unknown;
  readonly evaluationPeriods: number;
  readonly datapointsToAlarm?: number;
  readonly treatMissingData?: string;
  readonly contactProtocols?: [];
  readonly notificationTriggers?: [];
  readonly notificationEnabled?: boolean;
}

export interface PutInstancePublicPorts {
  readonly portInfos: [];
  readonly instanceName: string;
}

export interface RebootInstance {
  readonly instanceName: string;
}

export interface RebootRelationalDatabase {
  readonly relationalDatabaseName: string;
}

export interface RegisterContainerImage {
  readonly serviceName: string;
  readonly label: string;
  readonly digest: string;
}

export interface ReleaseStaticIp {
  readonly staticIpName: string;
}

export interface ResetDistributionCache {
  readonly distributionName?: string;
}

export interface SendContactMethodVerification {
  readonly protocol: string;
}

export interface SetIpAddressType {
  readonly resourceType: string;
  readonly resourceName: string;
  readonly ipAddressType: string;
}

export interface SetResourceAccessForBucket {
  readonly resourceName: string;
  readonly bucketName: string;
  readonly access: string;
}

export interface StartInstance {
  readonly instanceName: string;
}

export interface StartRelationalDatabase {
  readonly relationalDatabaseName: string;
}

export interface StopInstance {
  readonly instanceName: string;
  readonly force?: boolean;
}

export interface StopRelationalDatabase {
  readonly relationalDatabaseName: string;
  readonly relationalDatabaseSnapshotName?: string;
}

export interface TagResource {
  readonly resourceName: string;
  readonly resourceArn?: string;
  readonly tags: [];
}

export interface TestAlarm {
  readonly alarmName: string;
  readonly state: string;
}

export interface UnpeerVpc {
}

export interface UntagResource {
  readonly resourceName: string;
  readonly resourceArn?: string;
  readonly tagKeys: [];
}

export interface UpdateBucket {
  readonly bucketName: string;
  readonly accessRules?: AccessRules;
  readonly versioning?: string;
  readonly readonlyAccessAccounts?: [];
  readonly accessLogConfig?: BucketAccessLogConfig;
}

export interface UpdateBucketBundle {
  readonly bucketName: string;
  readonly bundleId: string;
}

export interface UpdateContainerService {
  readonly serviceName: string;
  readonly power?: string;
  readonly scale?: number;
  readonly isDisabled?: boolean;
  readonly publicDomainNames?: {[key: string]: any};
}

export interface UpdateDistribution {
  readonly distributionName: string;
  readonly origin?: InputOrigin;
  readonly defaultCacheBehavior?: CacheBehavior;
  readonly cacheBehaviorSettings?: CacheSettings;
  readonly cacheBehaviors?: [];
  readonly isEnabled?: boolean;
}

export interface UpdateDistributionBundle {
  readonly distributionName?: string;
  readonly bundleId?: string;
}

export interface UpdateDomainEntry {
  readonly domainName: string;
  readonly domainEntry: DomainEntry;
}

export interface UpdateLoadBalancerAttribute {
  readonly loadBalancerName: string;
  readonly attributeName: string;
  readonly attributeValue: string;
}

export interface UpdateRelationalDatabase {
  readonly relationalDatabaseName: string;
  readonly masterUserPassword?: string;
  readonly rotateMasterUserPassword?: boolean;
  readonly preferredBackupWindow?: string;
  readonly preferredMaintenanceWindow?: string;
  readonly enableBackupRetention?: boolean;
  readonly disableBackupRetention?: boolean;
  readonly publiclyAccessible?: boolean;
  readonly applyImmediately?: boolean;
  readonly caCertificateIdentifier?: string;
}

export interface UpdateRelationalDatabaseParameters {
  readonly relationalDatabaseName: string;
  readonly parameters: [];
}

export interface AccessDeniedException {
  readonly code?: string;
  readonly docs?: string;
  readonly message?: string;
  readonly tip?: string;
}

export interface AccessKey {
  readonly accessKeyId?: string;
  readonly secretAccessKey?: string;
  readonly status?: string;
  readonly createdAt?: Date;
  readonly lastUsed?: AccessKeyLastUsed;
}

export interface AccessKeyLastUsed {
  readonly lastUsedDate?: Date;
  readonly region?: string;
  readonly serviceName?: string;
}

export interface AccessRules {
  readonly getObject?: string;
  readonly allowPublicOverrides?: boolean;
}

export interface AccountSetupInProgressException {
  readonly code?: string;
  readonly docs?: string;
  readonly message?: string;
  readonly tip?: string;
}

export interface AddOn {
  readonly name?: string;
  readonly status?: string;
  readonly snapshotTimeOfDay?: string;
  readonly nextSnapshotTimeOfDay?: string;
}

export interface AddOnRequest {
  readonly addOnType: string;
  readonly autoSnapshotAddOnRequest?: AutoSnapshotAddOnRequest;
}

export interface Alarm {
  readonly name?: string;
  readonly arn?: string;
  readonly createdAt?: Date;
  readonly location?: ResourceLocation;
  readonly resourceType?: string;
  readonly supportCode?: string;
  readonly monitoredResourceInfo?: MonitoredResourceInfo;
  readonly comparisonOperator?: string;
  readonly evaluationPeriods?: number;
  readonly period?: number;
  readonly threshold?: unknown;
  readonly datapointsToAlarm?: number;
  readonly treatMissingData?: string;
  readonly statistic?: string;
  readonly metricName?: string;
  readonly state?: string;
  readonly unit?: string;
  readonly contactProtocols?: [];
  readonly notificationTriggers?: [];
  readonly notificationEnabled?: boolean;
}

export interface AllocateStaticIpRequest {
  readonly staticIpName: string;
}

export interface AllocateStaticIpResult {
  readonly operations?: [];
}

export interface AttachCertificateToDistributionRequest {
  readonly distributionName: string;
  readonly certificateName: string;
}

export interface AttachCertificateToDistributionResult {
  readonly operation?: Operation;
}

export interface AttachDiskRequest {
  readonly diskName: string;
  readonly instanceName: string;
  readonly diskPath: string;
}

export interface AttachDiskResult {
  readonly operations?: [];
}

export interface AttachInstancesToLoadBalancerRequest {
  readonly loadBalancerName: string;
  readonly instanceNames: [];
}

export interface AttachInstancesToLoadBalancerResult {
  readonly operations?: [];
}

export interface AttachLoadBalancerTlsCertificateRequest {
  readonly loadBalancerName: string;
  readonly certificateName: string;
}

export interface AttachLoadBalancerTlsCertificateResult {
  readonly operations?: [];
}

export interface AttachStaticIpRequest {
  readonly staticIpName: string;
  readonly instanceName: string;
}

export interface AttachStaticIpResult {
  readonly operations?: [];
}

export interface AttachedDisk {
  readonly path?: string;
  readonly sizeInGb?: number;
}

export interface AutoSnapshotAddOnRequest {
  readonly snapshotTimeOfDay?: string;
}

export interface AutoSnapshotDetails {
  readonly date?: string;
  readonly createdAt?: Date;
  readonly status?: string;
  readonly fromAttachedDisks?: [];
}

export interface AvailabilityZone {
  readonly zoneName?: string;
  readonly state?: string;
}

export interface Blueprint {
  readonly blueprintId?: string;
  readonly name?: string;
  readonly group?: string;
  readonly type?: string;
  readonly description?: string;
  readonly isActive?: boolean;
  readonly minPower?: number;
  readonly version?: string;
  readonly versionCode?: string;
  readonly productUrl?: string;
  readonly licenseUrl?: string;
  readonly platform?: string;
}

export interface Bucket {
  readonly resourceType?: string;
  readonly accessRules?: AccessRules;
  readonly arn?: string;
  readonly bundleId?: string;
  readonly createdAt?: Date;
  readonly url?: string;
  readonly location?: ResourceLocation;
  readonly name?: string;
  readonly supportCode?: string;
  readonly tags?: [];
  readonly objectVersioning?: string;
  readonly ableToUpdateBundle?: boolean;
  readonly readonlyAccessAccounts?: [];
  readonly resourcesReceivingAccess?: [];
  readonly state?: BucketState;
  readonly accessLogConfig?: BucketAccessLogConfig;
}

export interface BucketAccessLogConfig {
  readonly enabled: boolean;
  readonly destination?: string;
  readonly prefix?: string;
}

export interface BucketBundle {
  readonly bundleId?: string;
  readonly name?: string;
  readonly price?: unknown;
  readonly storagePerMonthInGb?: number;
  readonly transferPerMonthInGb?: number;
  readonly isActive?: boolean;
}

export interface BucketState {
  readonly code?: string;
  readonly message?: string;
}

export interface Bundle {
  readonly price?: unknown;
  readonly cpuCount?: number;
  readonly diskSizeInGb?: number;
  readonly bundleId?: string;
  readonly instanceType?: string;
  readonly isActive?: boolean;
  readonly name?: string;
  readonly power?: number;
  readonly ramSizeInGb?: unknown;
  readonly transferPerMonthInGb?: number;
  readonly supportedPlatforms?: [];
}

export interface CacheBehavior {
  readonly behavior?: string;
}

export interface CacheBehaviorPerPath {
  readonly path?: string;
  readonly behavior?: string;
}

export interface CacheSettings {
  readonly defaultTTL?: number;
  readonly minimumTTL?: number;
  readonly maximumTTL?: number;
  readonly allowedHTTPMethods?: string;
  readonly cachedHTTPMethods?: string;
  readonly forwardedCookies?: CookieObject;
  readonly forwardedHeaders?: HeaderObject;
  readonly forwardedQueryStrings?: QueryStringObject;
}

export interface Certificate {
  readonly arn?: string;
  readonly name?: string;
  readonly domainName?: string;
  readonly status?: string;
  readonly serialNumber?: string;
  readonly subjectAlternativeNames?: [];
  readonly domainValidationRecords?: [];
  readonly requestFailureReason?: string;
  readonly inUseResourceCount?: number;
  readonly keyAlgorithm?: string;
  readonly createdAt?: Date;
  readonly issuedAt?: Date;
  readonly issuerCA?: string;
  readonly notBefore?: Date;
  readonly notAfter?: Date;
  readonly eligibleToRenew?: string;
  readonly renewalSummary?: RenewalSummary;
  readonly revokedAt?: Date;
  readonly revocationReason?: string;
  readonly tags?: [];
  readonly supportCode?: string;
}

export interface CertificateSummary {
  readonly certificateArn?: string;
  readonly certificateName?: string;
  readonly domainName?: string;
  readonly certificateDetail?: Certificate;
  readonly tags?: [];
}

export interface CloseInstancePublicPortsRequest {
  readonly portInfo: PortInfo;
  readonly instanceName: string;
}

export interface CloseInstancePublicPortsResult {
  readonly operation?: Operation;
}

export interface CloudFormationStackRecord {
  readonly name?: string;
  readonly arn?: string;
  readonly createdAt?: Date;
  readonly location?: ResourceLocation;
  readonly resourceType?: string;
  readonly state?: string;
  readonly sourceInfo?: [];
  readonly destinationInfo?: DestinationInfo;
}

export interface CloudFormationStackRecordSourceInfo {
  readonly resourceType?: string;
  readonly name?: string;
  readonly arn?: string;
}

export interface ContactMethod {
  readonly contactEndpoint?: string;
  readonly status?: string;
  readonly protocol?: string;
  readonly name?: string;
  readonly arn?: string;
  readonly createdAt?: Date;
  readonly location?: ResourceLocation;
  readonly resourceType?: string;
  readonly supportCode?: string;
}

export interface Container {
  readonly image?: string;
  readonly command?: [];
  readonly environment?: {[key: string]: any};
  readonly ports?: {[key: string]: any};
}

export interface ContainerImage {
  readonly image?: string;
  readonly digest?: string;
  readonly createdAt?: Date;
}

export interface ContainerService {
  readonly containerServiceName?: string;
  readonly arn?: string;
  readonly createdAt?: Date;
  readonly location?: ResourceLocation;
  readonly resourceType?: string;
  readonly tags?: [];
  readonly power?: string;
  readonly powerId?: string;
  readonly state?: string;
  readonly stateDetail?: ContainerServiceStateDetail;
  readonly scale?: number;
  readonly currentDeployment?: ContainerServiceDeployment;
  readonly nextDeployment?: ContainerServiceDeployment;
  readonly isDisabled?: boolean;
  readonly principalArn?: string;
  readonly privateDomainName?: string;
  readonly publicDomainNames?: {[key: string]: any};
  readonly url?: string;
}

export interface ContainerServiceDeployment {
  readonly version?: number;
  readonly state?: string;
  readonly containers?: {[key: string]: any};
  readonly publicEndpoint?: ContainerServiceEndpoint;
  readonly createdAt?: Date;
}

export interface ContainerServiceDeploymentRequest {
  readonly containers?: {[key: string]: any};
  readonly publicEndpoint?: EndpointRequest;
}

export interface ContainerServiceEndpoint {
  readonly containerName?: string;
  readonly containerPort?: number;
  readonly healthCheck?: ContainerServiceHealthCheckConfig;
}

export interface ContainerServiceHealthCheckConfig {
  readonly healthyThreshold?: number;
  readonly unhealthyThreshold?: number;
  readonly timeoutSeconds?: number;
  readonly intervalSeconds?: number;
  readonly path?: string;
  readonly successCodes?: string;
}

export interface ContainerServiceLogEvent {
  readonly createdAt?: Date;
  readonly message?: string;
}

export interface ContainerServicePower {
  readonly powerId?: string;
  readonly price?: unknown;
  readonly cpuCount?: unknown;
  readonly ramSizeInGb?: unknown;
  readonly name?: string;
  readonly isActive?: boolean;
}

export interface ContainerServiceRegistryLogin {
  readonly username?: string;
  readonly password?: string;
  readonly expiresAt?: Date;
  readonly registry?: string;
}

export interface ContainerServiceStateDetail {
  readonly code?: string;
  readonly message?: string;
}

export interface ContainerServicesListResult {
  readonly containerServices?: [];
}

export interface CookieObject {
  readonly option?: string;
  readonly cookiesAllowList?: [];
}

export interface CopySnapshotRequest {
  readonly sourceSnapshotName?: string;
  readonly sourceResourceName?: string;
  readonly restoreDate?: string;
  readonly useLatestRestorableAutoSnapshot?: boolean;
  readonly targetSnapshotName: string;
  readonly sourceRegion: string;
}

export interface CopySnapshotResult {
  readonly operations?: [];
}

export interface CreateBucketAccessKeyRequest {
  readonly bucketName: string;
}

export interface CreateBucketAccessKeyResult {
  readonly accessKey?: AccessKey;
  readonly operations?: [];
}

export interface CreateBucketRequest {
  readonly bucketName: string;
  readonly bundleId: string;
  readonly tags?: [];
  readonly enableObjectVersioning?: boolean;
}

export interface CreateBucketResult {
  readonly bucket?: Bucket;
  readonly operations?: [];
}

export interface CreateCertificateRequest {
  readonly certificateName: string;
  readonly domainName: string;
  readonly subjectAlternativeNames?: [];
  readonly tags?: [];
}

export interface CreateCertificateResult {
  readonly certificate?: CertificateSummary;
  readonly operations?: [];
}

export interface CreateCloudFormationStackRequest {
  readonly instances: [];
}

export interface CreateCloudFormationStackResult {
  readonly operations?: [];
}

export interface CreateContactMethodRequest {
  readonly protocol: string;
  readonly contactEndpoint: string;
}

export interface CreateContactMethodResult {
  readonly operations?: [];
}

export interface CreateContainerServiceDeploymentRequest {
  readonly serviceName: string;
  readonly containers?: {[key: string]: any};
  readonly publicEndpoint?: EndpointRequest;
}

export interface CreateContainerServiceDeploymentResult {
  readonly containerService?: ContainerService;
}

export interface CreateContainerServiceRegistryLoginRequest {
}

export interface CreateContainerServiceRegistryLoginResult {
  readonly registryLogin?: ContainerServiceRegistryLogin;
}

export interface CreateContainerServiceRequest {
  readonly serviceName: string;
  readonly power: string;
  readonly scale: number;
  readonly tags?: [];
  readonly publicDomainNames?: {[key: string]: any};
  readonly deployment?: ContainerServiceDeploymentRequest;
}

export interface CreateContainerServiceResult {
  readonly containerService?: ContainerService;
}

export interface CreateDiskFromSnapshotRequest {
  readonly diskName: string;
  readonly diskSnapshotName?: string;
  readonly availabilityZone: string;
  readonly sizeInGb: number;
  readonly tags?: [];
  readonly addOns?: [];
  readonly sourceDiskName?: string;
  readonly restoreDate?: string;
  readonly useLatestRestorableAutoSnapshot?: boolean;
}

export interface CreateDiskFromSnapshotResult {
  readonly operations?: [];
}

export interface CreateDiskRequest {
  readonly diskName: string;
  readonly availabilityZone: string;
  readonly sizeInGb: number;
  readonly tags?: [];
  readonly addOns?: [];
}

export interface CreateDiskResult {
  readonly operations?: [];
}

export interface CreateDiskSnapshotRequest {
  readonly diskName?: string;
  readonly diskSnapshotName: string;
  readonly instanceName?: string;
  readonly tags?: [];
}

export interface CreateDiskSnapshotResult {
  readonly operations?: [];
}

export interface CreateDistributionRequest {
  readonly distributionName: string;
  readonly origin: InputOrigin;
  readonly defaultCacheBehavior: CacheBehavior;
  readonly cacheBehaviorSettings?: CacheSettings;
  readonly cacheBehaviors?: [];
  readonly bundleId: string;
  readonly ipAddressType?: string;
  readonly tags?: [];
}

export interface CreateDistributionResult {
  readonly distribution?: LightsailDistribution;
  readonly operation?: Operation;
}

export interface CreateDomainEntryRequest {
  readonly domainName: string;
  readonly domainEntry: DomainEntry;
}

export interface CreateDomainEntryResult {
  readonly operation?: Operation;
}

export interface CreateDomainRequest {
  readonly domainName: string;
  readonly tags?: [];
}

export interface CreateDomainResult {
  readonly operation?: Operation;
}

export interface CreateInstanceSnapshotRequest {
  readonly instanceSnapshotName: string;
  readonly instanceName: string;
  readonly tags?: [];
}

export interface CreateInstanceSnapshotResult {
  readonly operations?: [];
}

export interface CreateInstancesFromSnapshotRequest {
  readonly instanceNames: [];
  readonly attachedDiskMapping?: {[key: string]: any};
  readonly availabilityZone: string;
  readonly instanceSnapshotName?: string;
  readonly bundleId: string;
  readonly userData?: string;
  readonly keyPairName?: string;
  readonly tags?: [];
  readonly addOns?: [];
  readonly ipAddressType?: string;
  readonly sourceInstanceName?: string;
  readonly restoreDate?: string;
  readonly useLatestRestorableAutoSnapshot?: boolean;
}

export interface CreateInstancesFromSnapshotResult {
  readonly operations?: [];
}

export interface CreateInstancesRequest {
  readonly instanceNames: [];
  readonly availabilityZone: string;
  readonly customImageName?: string;
  readonly blueprintId: string;
  readonly bundleId: string;
  readonly userData?: string;
  readonly keyPairName?: string;
  readonly tags?: [];
  readonly addOns?: [];
  readonly ipAddressType?: string;
}

export interface CreateInstancesResult {
  readonly operations?: [];
}

export interface CreateKeyPairRequest {
  readonly keyPairName: string;
  readonly tags?: [];
}

export interface CreateKeyPairResult {
  readonly keyPair?: KeyPair;
  readonly publicKeyBase64?: string;
  readonly privateKeyBase64?: string;
  readonly operation?: Operation;
}

export interface CreateLoadBalancerRequest {
  readonly loadBalancerName: string;
  readonly instancePort: number;
  readonly healthCheckPath?: string;
  readonly certificateName?: string;
  readonly certificateDomainName?: string;
  readonly certificateAlternativeNames?: [];
  readonly tags?: [];
  readonly ipAddressType?: string;
}

export interface CreateLoadBalancerResult {
  readonly operations?: [];
}

export interface CreateLoadBalancerTlsCertificateRequest {
  readonly loadBalancerName: string;
  readonly certificateName: string;
  readonly certificateDomainName: string;
  readonly certificateAlternativeNames?: [];
  readonly tags?: [];
}

export interface CreateLoadBalancerTlsCertificateResult {
  readonly operations?: [];
}

export interface CreateRelationalDatabaseFromSnapshotRequest {
  readonly relationalDatabaseName: string;
  readonly availabilityZone?: string;
  readonly publiclyAccessible?: boolean;
  readonly relationalDatabaseSnapshotName?: string;
  readonly relationalDatabaseBundleId?: string;
  readonly sourceRelationalDatabaseName?: string;
  readonly restoreTime?: Date;
  readonly useLatestRestorableTime?: boolean;
  readonly tags?: [];
}

export interface CreateRelationalDatabaseFromSnapshotResult {
  readonly operations?: [];
}

export interface CreateRelationalDatabaseRequest {
  readonly relationalDatabaseName: string;
  readonly availabilityZone?: string;
  readonly relationalDatabaseBlueprintId: string;
  readonly relationalDatabaseBundleId: string;
  readonly masterDatabaseName: string;
  readonly masterUsername: string;
  readonly masterUserPassword?: string;
  readonly preferredBackupWindow?: string;
  readonly preferredMaintenanceWindow?: string;
  readonly publiclyAccessible?: boolean;
  readonly tags?: [];
}

export interface CreateRelationalDatabaseResult {
  readonly operations?: [];
}

export interface CreateRelationalDatabaseSnapshotRequest {
  readonly relationalDatabaseName: string;
  readonly relationalDatabaseSnapshotName: string;
  readonly tags?: [];
}

export interface CreateRelationalDatabaseSnapshotResult {
  readonly operations?: [];
}

export interface DeleteAlarmRequest {
  readonly alarmName: string;
}

export interface DeleteAlarmResult {
  readonly operations?: [];
}

export interface DeleteAutoSnapshotRequest {
  readonly resourceName: string;
  readonly date: string;
}

export interface DeleteAutoSnapshotResult {
  readonly operations?: [];
}

export interface DeleteBucketAccessKeyRequest {
  readonly bucketName: string;
  readonly accessKeyId: string;
}

export interface DeleteBucketAccessKeyResult {
  readonly operations?: [];
}

export interface DeleteBucketRequest {
  readonly bucketName: string;
  readonly forceDelete?: boolean;
}

export interface DeleteBucketResult {
  readonly operations?: [];
}

export interface DeleteCertificateRequest {
  readonly certificateName: string;
}

export interface DeleteCertificateResult {
  readonly operations?: [];
}

export interface DeleteContactMethodRequest {
  readonly protocol: string;
}

export interface DeleteContactMethodResult {
  readonly operations?: [];
}

export interface DeleteContainerImageRequest {
  readonly serviceName: string;
  readonly image: string;
}

export interface DeleteContainerImageResult {
}

export interface DeleteContainerServiceRequest {
  readonly serviceName: string;
}

export interface DeleteContainerServiceResult {
}

export interface DeleteDiskRequest {
  readonly diskName: string;
  readonly forceDeleteAddOns?: boolean;
}

export interface DeleteDiskResult {
  readonly operations?: [];
}

export interface DeleteDiskSnapshotRequest {
  readonly diskSnapshotName: string;
}

export interface DeleteDiskSnapshotResult {
  readonly operations?: [];
}

export interface DeleteDistributionRequest {
  readonly distributionName?: string;
}

export interface DeleteDistributionResult {
  readonly operation?: Operation;
}

export interface DeleteDomainEntryRequest {
  readonly domainName: string;
  readonly domainEntry: DomainEntry;
}

export interface DeleteDomainEntryResult {
  readonly operation?: Operation;
}

export interface DeleteDomainRequest {
  readonly domainName: string;
}

export interface DeleteDomainResult {
  readonly operation?: Operation;
}

export interface DeleteInstanceRequest {
  readonly instanceName: string;
  readonly forceDeleteAddOns?: boolean;
}

export interface DeleteInstanceResult {
  readonly operations?: [];
}

export interface DeleteInstanceSnapshotRequest {
  readonly instanceSnapshotName: string;
}

export interface DeleteInstanceSnapshotResult {
  readonly operations?: [];
}

export interface DeleteKeyPairRequest {
  readonly keyPairName: string;
}

export interface DeleteKeyPairResult {
  readonly operation?: Operation;
}

export interface DeleteKnownHostKeysRequest {
  readonly instanceName: string;
}

export interface DeleteKnownHostKeysResult {
  readonly operations?: [];
}

export interface DeleteLoadBalancerRequest {
  readonly loadBalancerName: string;
}

export interface DeleteLoadBalancerResult {
  readonly operations?: [];
}

export interface DeleteLoadBalancerTlsCertificateRequest {
  readonly loadBalancerName: string;
  readonly certificateName: string;
  readonly force?: boolean;
}

export interface DeleteLoadBalancerTlsCertificateResult {
  readonly operations?: [];
}

export interface DeleteRelationalDatabaseRequest {
  readonly relationalDatabaseName: string;
  readonly skipFinalSnapshot?: boolean;
  readonly finalRelationalDatabaseSnapshotName?: string;
}

export interface DeleteRelationalDatabaseResult {
  readonly operations?: [];
}

export interface DeleteRelationalDatabaseSnapshotRequest {
  readonly relationalDatabaseSnapshotName: string;
}

export interface DeleteRelationalDatabaseSnapshotResult {
  readonly operations?: [];
}

export interface DestinationInfo {
  readonly id?: string;
  readonly service?: string;
}

export interface DetachCertificateFromDistributionRequest {
  readonly distributionName: string;
}

export interface DetachCertificateFromDistributionResult {
  readonly operation?: Operation;
}

export interface DetachDiskRequest {
  readonly diskName: string;
}

export interface DetachDiskResult {
  readonly operations?: [];
}

export interface DetachInstancesFromLoadBalancerRequest {
  readonly loadBalancerName: string;
  readonly instanceNames: [];
}

export interface DetachInstancesFromLoadBalancerResult {
  readonly operations?: [];
}

export interface DetachStaticIpRequest {
  readonly staticIpName: string;
}

export interface DetachStaticIpResult {
  readonly operations?: [];
}

export interface DisableAddOnRequest {
  readonly addOnType: string;
  readonly resourceName: string;
}

export interface DisableAddOnResult {
  readonly operations?: [];
}

export interface Disk {
  readonly name?: string;
  readonly arn?: string;
  readonly supportCode?: string;
  readonly createdAt?: Date;
  readonly location?: ResourceLocation;
  readonly resourceType?: string;
  readonly tags?: [];
  readonly addOns?: [];
  readonly sizeInGb?: number;
  readonly isSystemDisk?: boolean;
  readonly iops?: number;
  readonly path?: string;
  readonly state?: string;
  readonly attachedTo?: string;
  readonly isAttached?: boolean;
  readonly attachmentState?: string;
  readonly gbInUse?: number;
}

export interface DiskInfo {
  readonly name?: string;
  readonly path?: string;
  readonly sizeInGb?: number;
  readonly isSystemDisk?: boolean;
}

export interface DiskMap {
  readonly originalDiskPath?: string;
  readonly newDiskName?: string;
}

export interface DiskSnapshot {
  readonly name?: string;
  readonly arn?: string;
  readonly supportCode?: string;
  readonly createdAt?: Date;
  readonly location?: ResourceLocation;
  readonly resourceType?: string;
  readonly tags?: [];
  readonly sizeInGb?: number;
  readonly state?: string;
  readonly progress?: string;
  readonly fromDiskName?: string;
  readonly fromDiskArn?: string;
  readonly fromInstanceName?: string;
  readonly fromInstanceArn?: string;
  readonly isFromAutoSnapshot?: boolean;
}

export interface DiskSnapshotInfo {
  readonly sizeInGb?: number;
}

export interface DistributionBundle {
  readonly bundleId?: string;
  readonly name?: string;
  readonly price?: unknown;
  readonly transferPerMonthInGb?: number;
  readonly isActive?: boolean;
}

export interface Domain {
  readonly name?: string;
  readonly arn?: string;
  readonly supportCode?: string;
  readonly createdAt?: Date;
  readonly location?: ResourceLocation;
  readonly resourceType?: string;
  readonly tags?: [];
  readonly domainEntries?: [];
}

export interface DomainEntry {
  readonly id?: string;
  readonly name?: string;
  readonly target?: string;
  readonly isAlias?: boolean;
  readonly type?: string;
  readonly options?: {[key: string]: any};
}

export interface DomainValidationRecord {
  readonly domainName?: string;
  readonly resourceRecord?: ResourceRecord;
}

export interface DownloadDefaultKeyPairRequest {
}

export interface DownloadDefaultKeyPairResult {
  readonly publicKeyBase64?: string;
  readonly privateKeyBase64?: string;
}

export interface EnableAddOnRequest {
  readonly resourceName: string;
  readonly addOnRequest: AddOnRequest;
}

export interface EnableAddOnResult {
  readonly operations?: [];
}

export interface EndpointRequest {
  readonly containerName: string;
  readonly containerPort: number;
  readonly healthCheck?: ContainerServiceHealthCheckConfig;
}

export interface ExportSnapshotRecord {
  readonly name?: string;
  readonly arn?: string;
  readonly createdAt?: Date;
  readonly location?: ResourceLocation;
  readonly resourceType?: string;
  readonly state?: string;
  readonly sourceInfo?: ExportSnapshotRecordSourceInfo;
  readonly destinationInfo?: DestinationInfo;
}

export interface ExportSnapshotRecordSourceInfo {
  readonly resourceType?: string;
  readonly createdAt?: Date;
  readonly name?: string;
  readonly arn?: string;
  readonly fromResourceName?: string;
  readonly fromResourceArn?: string;
  readonly instanceSnapshotInfo?: InstanceSnapshotInfo;
  readonly diskSnapshotInfo?: DiskSnapshotInfo;
}

export interface ExportSnapshotRequest {
  readonly sourceSnapshotName: string;
}

export interface ExportSnapshotResult {
  readonly operations?: [];
}

export interface GetActiveNamesRequest {
  readonly pageToken?: string;
}

export interface GetActiveNamesResult {
  readonly activeNames?: [];
  readonly nextPageToken?: string;
}

export interface GetAlarmsRequest {
  readonly alarmName?: string;
  readonly pageToken?: string;
  readonly monitoredResourceName?: string;
}

export interface GetAlarmsResult {
  readonly alarms?: [];
  readonly nextPageToken?: string;
}

export interface GetAutoSnapshotsRequest {
  readonly resourceName: string;
}

export interface GetAutoSnapshotsResult {
  readonly resourceName?: string;
  readonly resourceType?: string;
  readonly autoSnapshots?: [];
}

export interface GetBlueprintsRequest {
  readonly includeInactive?: boolean;
  readonly pageToken?: string;
}

export interface GetBlueprintsResult {
  readonly blueprints?: [];
  readonly nextPageToken?: string;
}

export interface GetBucketAccessKeysRequest {
  readonly bucketName: string;
}

export interface GetBucketAccessKeysResult {
  readonly accessKeys?: [];
}

export interface GetBucketBundlesRequest {
  readonly includeInactive?: boolean;
}

export interface GetBucketBundlesResult {
  readonly bundles?: [];
}

export interface GetBucketMetricDataRequest {
  readonly bucketName: string;
  readonly metricName: string;
  readonly startTime: Date;
  readonly endTime: Date;
  readonly period: number;
  readonly statistics: [];
  readonly unit: string;
}

export interface GetBucketMetricDataResult {
  readonly metricName?: string;
  readonly metricData?: [];
}

export interface GetBucketsRequest {
  readonly bucketName?: string;
  readonly pageToken?: string;
  readonly includeConnectedResources?: boolean;
}

export interface GetBucketsResult {
  readonly buckets?: [];
  readonly nextPageToken?: string;
}

export interface GetBundlesRequest {
  readonly includeInactive?: boolean;
  readonly pageToken?: string;
}

export interface GetBundlesResult {
  readonly bundles?: [];
  readonly nextPageToken?: string;
}

export interface GetCertificatesRequest {
  readonly certificateStatuses?: [];
  readonly includeCertificateDetails?: boolean;
  readonly certificateName?: string;
}

export interface GetCertificatesResult {
  readonly certificates?: [];
}

export interface GetCloudFormationStackRecordsRequest {
  readonly pageToken?: string;
}

export interface GetCloudFormationStackRecordsResult {
  readonly cloudFormationStackRecords?: [];
  readonly nextPageToken?: string;
}

export interface GetContactMethodsRequest {
  readonly protocols?: [];
}

export interface GetContactMethodsResult {
  readonly contactMethods?: [];
}

export interface GetContainerAPIMetadataRequest {
}

export interface GetContainerAPIMetadataResult {
  readonly metadata?: [];
}

export interface GetContainerImagesRequest {
  readonly serviceName: string;
}

export interface GetContainerImagesResult {
  readonly containerImages?: [];
}

export interface GetContainerLogRequest {
  readonly serviceName: string;
  readonly containerName: string;
  readonly startTime?: Date;
  readonly endTime?: Date;
  readonly filterPattern?: string;
  readonly pageToken?: string;
}

export interface GetContainerLogResult {
  readonly logEvents?: [];
  readonly nextPageToken?: string;
}

export interface GetContainerServiceDeploymentsRequest {
  readonly serviceName: string;
}

export interface GetContainerServiceDeploymentsResult {
  readonly deployments?: [];
}

export interface GetContainerServiceMetricDataRequest {
  readonly serviceName: string;
  readonly metricName: string;
  readonly startTime: Date;
  readonly endTime: Date;
  readonly period: number;
  readonly statistics: [];
}

export interface GetContainerServiceMetricDataResult {
  readonly metricName?: string;
  readonly metricData?: [];
}

export interface GetContainerServicePowersRequest {
}

export interface GetContainerServicePowersResult {
  readonly powers?: [];
}

export interface GetContainerServicesRequest {
  readonly serviceName?: string;
}

export interface GetDiskRequest {
  readonly diskName: string;
}

export interface GetDiskResult {
  readonly disk?: Disk;
}

export interface GetDiskSnapshotRequest {
  readonly diskSnapshotName: string;
}

export interface GetDiskSnapshotResult {
  readonly diskSnapshot?: DiskSnapshot;
}

export interface GetDiskSnapshotsRequest {
  readonly pageToken?: string;
}

export interface GetDiskSnapshotsResult {
  readonly diskSnapshots?: [];
  readonly nextPageToken?: string;
}

export interface GetDisksRequest {
  readonly pageToken?: string;
}

export interface GetDisksResult {
  readonly disks?: [];
  readonly nextPageToken?: string;
}

export interface GetDistributionBundlesRequest {
}

export interface GetDistributionBundlesResult {
  readonly bundles?: [];
}

export interface GetDistributionLatestCacheResetRequest {
  readonly distributionName?: string;
}

export interface GetDistributionLatestCacheResetResult {
  readonly status?: string;
  readonly createTime?: Date;
}

export interface GetDistributionMetricDataRequest {
  readonly distributionName: string;
  readonly metricName: string;
  readonly startTime: Date;
  readonly endTime: Date;
  readonly period: number;
  readonly unit: string;
  readonly statistics: [];
}

export interface GetDistributionMetricDataResult {
  readonly metricName?: string;
  readonly metricData?: [];
}

export interface GetDistributionsRequest {
  readonly distributionName?: string;
  readonly pageToken?: string;
}

export interface GetDistributionsResult {
  readonly distributions?: [];
  readonly nextPageToken?: string;
}

export interface GetDomainRequest {
  readonly domainName: string;
}

export interface GetDomainResult {
  readonly domain?: Domain;
}

export interface GetDomainsRequest {
  readonly pageToken?: string;
}

export interface GetDomainsResult {
  readonly domains?: [];
  readonly nextPageToken?: string;
}

export interface GetExportSnapshotRecordsRequest {
  readonly pageToken?: string;
}

export interface GetExportSnapshotRecordsResult {
  readonly exportSnapshotRecords?: [];
  readonly nextPageToken?: string;
}

export interface GetInstanceAccessDetailsRequest {
  readonly instanceName: string;
  readonly protocol?: string;
}

export interface GetInstanceAccessDetailsResult {
  readonly accessDetails?: InstanceAccessDetails;
}

export interface GetInstanceMetricDataRequest {
  readonly instanceName: string;
  readonly metricName: string;
  readonly period: number;
  readonly startTime: Date;
  readonly endTime: Date;
  readonly unit: string;
  readonly statistics: [];
}

export interface GetInstanceMetricDataResult {
  readonly metricName?: string;
  readonly metricData?: [];
}

export interface GetInstancePortStatesRequest {
  readonly instanceName: string;
}

export interface GetInstancePortStatesResult {
  readonly portStates?: [];
}

export interface GetInstanceRequest {
  readonly instanceName: string;
}

export interface GetInstanceResult {
  readonly instance?: Instance;
}

export interface GetInstanceSnapshotRequest {
  readonly instanceSnapshotName: string;
}

export interface GetInstanceSnapshotResult {
  readonly instanceSnapshot?: InstanceSnapshot;
}

export interface GetInstanceSnapshotsRequest {
  readonly pageToken?: string;
}

export interface GetInstanceSnapshotsResult {
  readonly instanceSnapshots?: [];
  readonly nextPageToken?: string;
}

export interface GetInstanceStateRequest {
  readonly instanceName: string;
}

export interface GetInstanceStateResult {
  readonly state?: InstanceState;
}

export interface GetInstancesRequest {
  readonly pageToken?: string;
}

export interface GetInstancesResult {
  readonly instances?: [];
  readonly nextPageToken?: string;
}

export interface GetKeyPairRequest {
  readonly keyPairName: string;
}

export interface GetKeyPairResult {
  readonly keyPair?: KeyPair;
}

export interface GetKeyPairsRequest {
  readonly pageToken?: string;
}

export interface GetKeyPairsResult {
  readonly keyPairs?: [];
  readonly nextPageToken?: string;
}

export interface GetLoadBalancerMetricDataRequest {
  readonly loadBalancerName: string;
  readonly metricName: string;
  readonly period: number;
  readonly startTime: Date;
  readonly endTime: Date;
  readonly unit: string;
  readonly statistics: [];
}

export interface GetLoadBalancerMetricDataResult {
  readonly metricName?: string;
  readonly metricData?: [];
}

export interface GetLoadBalancerRequest {
  readonly loadBalancerName: string;
}

export interface GetLoadBalancerResult {
  readonly loadBalancer?: LoadBalancer;
}

export interface GetLoadBalancerTlsCertificatesRequest {
  readonly loadBalancerName: string;
}

export interface GetLoadBalancerTlsCertificatesResult {
  readonly tlsCertificates?: [];
}

export interface GetLoadBalancersRequest {
  readonly pageToken?: string;
}

export interface GetLoadBalancersResult {
  readonly loadBalancers?: [];
  readonly nextPageToken?: string;
}

export interface GetOperationRequest {
  readonly operationId: string;
}

export interface GetOperationResult {
  readonly operation?: Operation;
}

export interface GetOperationsForResourceRequest {
  readonly resourceName: string;
  readonly pageToken?: string;
}

export interface GetOperationsForResourceResult {
  readonly operations?: [];
  readonly nextPageCount?: string;
  readonly nextPageToken?: string;
}

export interface GetOperationsRequest {
  readonly pageToken?: string;
}

export interface GetOperationsResult {
  readonly operations?: [];
  readonly nextPageToken?: string;
}

export interface GetRegionsRequest {
  readonly includeAvailabilityZones?: boolean;
  readonly includeRelationalDatabaseAvailabilityZones?: boolean;
}

export interface GetRegionsResult {
  readonly regions?: [];
}

export interface GetRelationalDatabaseBlueprintsRequest {
  readonly pageToken?: string;
}

export interface GetRelationalDatabaseBlueprintsResult {
  readonly blueprints?: [];
  readonly nextPageToken?: string;
}

export interface GetRelationalDatabaseBundlesRequest {
  readonly pageToken?: string;
}

export interface GetRelationalDatabaseBundlesResult {
  readonly bundles?: [];
  readonly nextPageToken?: string;
}

export interface GetRelationalDatabaseEventsRequest {
  readonly relationalDatabaseName: string;
  readonly durationInMinutes?: number;
  readonly pageToken?: string;
}

export interface GetRelationalDatabaseEventsResult {
  readonly relationalDatabaseEvents?: [];
  readonly nextPageToken?: string;
}

export interface GetRelationalDatabaseLogEventsRequest {
  readonly relationalDatabaseName: string;
  readonly logStreamName: string;
  readonly startTime?: Date;
  readonly endTime?: Date;
  readonly startFromHead?: boolean;
  readonly pageToken?: string;
}

export interface GetRelationalDatabaseLogEventsResult {
  readonly resourceLogEvents?: [];
  readonly nextBackwardToken?: string;
  readonly nextForwardToken?: string;
}

export interface GetRelationalDatabaseLogStreamsRequest {
  readonly relationalDatabaseName: string;
}

export interface GetRelationalDatabaseLogStreamsResult {
  readonly logStreams?: [];
}

export interface GetRelationalDatabaseMasterUserPasswordRequest {
  readonly relationalDatabaseName: string;
  readonly passwordVersion?: string;
}

export interface GetRelationalDatabaseMasterUserPasswordResult {
  readonly masterUserPassword?: string;
  readonly createdAt?: Date;
}

export interface GetRelationalDatabaseMetricDataRequest {
  readonly relationalDatabaseName: string;
  readonly metricName: string;
  readonly period: number;
  readonly startTime: Date;
  readonly endTime: Date;
  readonly unit: string;
  readonly statistics: [];
}

export interface GetRelationalDatabaseMetricDataResult {
  readonly metricName?: string;
  readonly metricData?: [];
}

export interface GetRelationalDatabaseParametersRequest {
  readonly relationalDatabaseName: string;
  readonly pageToken?: string;
}

export interface GetRelationalDatabaseParametersResult {
  readonly parameters?: [];
  readonly nextPageToken?: string;
}

export interface GetRelationalDatabaseRequest {
  readonly relationalDatabaseName: string;
}

export interface GetRelationalDatabaseResult {
  readonly relationalDatabase?: RelationalDatabase;
}

export interface GetRelationalDatabaseSnapshotRequest {
  readonly relationalDatabaseSnapshotName: string;
}

export interface GetRelationalDatabaseSnapshotResult {
  readonly relationalDatabaseSnapshot?: RelationalDatabaseSnapshot;
}

export interface GetRelationalDatabaseSnapshotsRequest {
  readonly pageToken?: string;
}

export interface GetRelationalDatabaseSnapshotsResult {
  readonly relationalDatabaseSnapshots?: [];
  readonly nextPageToken?: string;
}

export interface GetRelationalDatabasesRequest {
  readonly pageToken?: string;
}

export interface GetRelationalDatabasesResult {
  readonly relationalDatabases?: [];
  readonly nextPageToken?: string;
}

export interface GetStaticIpRequest {
  readonly staticIpName: string;
}

export interface GetStaticIpResult {
  readonly staticIp?: StaticIp;
}

export interface GetStaticIpsRequest {
  readonly pageToken?: string;
}

export interface GetStaticIpsResult {
  readonly staticIps?: [];
  readonly nextPageToken?: string;
}

export interface HeaderObject {
  readonly option?: string;
  readonly headersAllowList?: [];
}

export interface HostKeyAttributes {
  readonly algorithm?: string;
  readonly publicKey?: string;
  readonly witnessedAt?: Date;
  readonly fingerprintSHA1?: string;
  readonly fingerprintSHA256?: string;
  readonly notValidBefore?: Date;
  readonly notValidAfter?: Date;
}

export interface ImportKeyPairRequest {
  readonly keyPairName: string;
  readonly publicKeyBase64: string;
}

export interface ImportKeyPairResult {
  readonly operation?: Operation;
}

export interface InputOrigin {
  readonly name?: string;
  readonly regionName?: string;
  readonly protocolPolicy?: string;
}

export interface Instance {
  readonly name?: string;
  readonly arn?: string;
  readonly supportCode?: string;
  readonly createdAt?: Date;
  readonly location?: ResourceLocation;
  readonly resourceType?: string;
  readonly tags?: [];
  readonly blueprintId?: string;
  readonly blueprintName?: string;
  readonly bundleId?: string;
  readonly addOns?: [];
  readonly isStaticIp?: boolean;
  readonly privateIpAddress?: string;
  readonly publicIpAddress?: string;
  readonly ipv6Addresses?: [];
  readonly ipAddressType?: string;
  readonly hardware?: InstanceHardware;
  readonly networking?: InstanceNetworking;
  readonly state?: InstanceState;
  readonly username?: string;
  readonly sshKeyName?: string;
}

export interface InstanceAccessDetails {
  readonly certKey?: string;
  readonly expiresAt?: Date;
  readonly ipAddress?: string;
  readonly password?: string;
  readonly passwordData?: PasswordData;
  readonly privateKey?: string;
  readonly protocol?: string;
  readonly instanceName?: string;
  readonly username?: string;
  readonly hostKeys?: [];
}

export interface InstanceEntry {
  readonly sourceName: string;
  readonly instanceType: string;
  readonly portInfoSource: string;
  readonly userData?: string;
  readonly availabilityZone: string;
}

export interface InstanceHardware {
  readonly cpuCount?: number;
  readonly disks?: [];
  readonly ramSizeInGb?: unknown;
}

export interface InstanceHealthSummary {
  readonly instanceName?: string;
  readonly instanceHealth?: string;
  readonly instanceHealthReason?: string;
}

export interface InstanceNetworking {
  readonly monthlyTransfer?: MonthlyTransfer;
  readonly ports?: [];
}

export interface InstancePortInfo {
  readonly fromPort?: number;
  readonly toPort?: number;
  readonly protocol?: string;
  readonly accessFrom?: string;
  readonly accessType?: string;
  readonly commonName?: string;
  readonly accessDirection?: string;
  readonly cidrs?: [];
  readonly ipv6Cidrs?: [];
  readonly cidrListAliases?: [];
}

export interface InstancePortState {
  readonly fromPort?: number;
  readonly toPort?: number;
  readonly protocol?: string;
  readonly state?: string;
  readonly cidrs?: [];
  readonly ipv6Cidrs?: [];
  readonly cidrListAliases?: [];
}

export interface InstanceSnapshot {
  readonly name?: string;
  readonly arn?: string;
  readonly supportCode?: string;
  readonly createdAt?: Date;
  readonly location?: ResourceLocation;
  readonly resourceType?: string;
  readonly tags?: [];
  readonly state?: string;
  readonly progress?: string;
  readonly fromAttachedDisks?: [];
  readonly fromInstanceName?: string;
  readonly fromInstanceArn?: string;
  readonly fromBlueprintId?: string;
  readonly fromBundleId?: string;
  readonly isFromAutoSnapshot?: boolean;
  readonly sizeInGb?: number;
}

export interface InstanceSnapshotInfo {
  readonly fromBundleId?: string;
  readonly fromBlueprintId?: string;
  readonly fromDiskInfo?: [];
}

export interface InstanceState {
  readonly code?: number;
  readonly name?: string;
}

export interface InvalidInputException {
  readonly code?: string;
  readonly docs?: string;
  readonly message?: string;
  readonly tip?: string;
}

export interface IsVpcPeeredRequest {
}

export interface IsVpcPeeredResult {
  readonly isPeered?: boolean;
}

export interface KeyPair {
  readonly name?: string;
  readonly arn?: string;
  readonly supportCode?: string;
  readonly createdAt?: Date;
  readonly location?: ResourceLocation;
  readonly resourceType?: string;
  readonly tags?: [];
  readonly fingerprint?: string;
}

export interface LightsailDistribution {
  readonly name?: string;
  readonly arn?: string;
  readonly supportCode?: string;
  readonly createdAt?: Date;
  readonly location?: ResourceLocation;
  readonly resourceType?: string;
  readonly alternativeDomainNames?: [];
  readonly status?: string;
  readonly isEnabled?: boolean;
  readonly domainName?: string;
  readonly bundleId?: string;
  readonly certificateName?: string;
  readonly origin?: Origin;
  readonly originPublicDNS?: string;
  readonly defaultCacheBehavior?: CacheBehavior;
  readonly cacheBehaviorSettings?: CacheSettings;
  readonly cacheBehaviors?: [];
  readonly ableToUpdateBundle?: boolean;
  readonly ipAddressType?: string;
  readonly tags?: [];
}

export interface LoadBalancer {
  readonly name?: string;
  readonly arn?: string;
  readonly supportCode?: string;
  readonly createdAt?: Date;
  readonly location?: ResourceLocation;
  readonly resourceType?: string;
  readonly tags?: [];
  readonly dnsName?: string;
  readonly state?: string;
  readonly protocol?: string;
  readonly publicPorts?: [];
  readonly healthCheckPath?: string;
  readonly instancePort?: number;
  readonly instanceHealthSummary?: [];
  readonly tlsCertificateSummaries?: [];
  readonly configurationOptions?: {[key: string]: any};
  readonly ipAddressType?: string;
}

export interface LoadBalancerTlsCertificate {
  readonly name?: string;
  readonly arn?: string;
  readonly supportCode?: string;
  readonly createdAt?: Date;
  readonly location?: ResourceLocation;
  readonly resourceType?: string;
  readonly tags?: [];
  readonly loadBalancerName?: string;
  readonly isAttached?: boolean;
  readonly status?: string;
  readonly domainName?: string;
  readonly domainValidationRecords?: [];
  readonly failureReason?: string;
  readonly issuedAt?: Date;
  readonly issuer?: string;
  readonly keyAlgorithm?: string;
  readonly notAfter?: Date;
  readonly notBefore?: Date;
  readonly renewalSummary?: LoadBalancerTlsCertificateRenewalSummary;
  readonly revocationReason?: string;
  readonly revokedAt?: Date;
  readonly serial?: string;
  readonly signatureAlgorithm?: string;
  readonly subject?: string;
  readonly subjectAlternativeNames?: [];
}

export interface LoadBalancerTlsCertificateDomainValidationOption {
  readonly domainName?: string;
  readonly validationStatus?: string;
}

export interface LoadBalancerTlsCertificateDomainValidationRecord {
  readonly name?: string;
  readonly type?: string;
  readonly value?: string;
  readonly validationStatus?: string;
  readonly domainName?: string;
}

export interface LoadBalancerTlsCertificateRenewalSummary {
  readonly renewalStatus?: string;
  readonly domainValidationOptions?: [];
}

export interface LoadBalancerTlsCertificateSummary {
  readonly name?: string;
  readonly isAttached?: boolean;
}

export interface LogEvent {
  readonly createdAt?: Date;
  readonly message?: string;
}

export interface MetricDatapoint {
  readonly average?: unknown;
  readonly maximum?: unknown;
  readonly minimum?: unknown;
  readonly sampleCount?: unknown;
  readonly sum?: unknown;
  readonly timestamp?: Date;
  readonly unit?: string;
}

export interface MonitoredResourceInfo {
  readonly arn?: string;
  readonly name?: string;
  readonly resourceType?: string;
}

export interface MonthlyTransfer {
  readonly gbPerMonthAllocated?: number;
}

export interface NotFoundException {
  readonly code?: string;
  readonly docs?: string;
  readonly message?: string;
  readonly tip?: string;
}

export interface OpenInstancePublicPortsRequest {
  readonly portInfo: PortInfo;
  readonly instanceName: string;
}

export interface OpenInstancePublicPortsResult {
  readonly operation?: Operation;
}

export interface Operation {
  readonly id?: string;
  readonly resourceName?: string;
  readonly resourceType?: string;
  readonly createdAt?: Date;
  readonly location?: ResourceLocation;
  readonly isTerminal?: boolean;
  readonly operationDetails?: string;
  readonly operationType?: string;
  readonly status?: string;
  readonly statusChangedAt?: Date;
  readonly errorCode?: string;
  readonly errorDetails?: string;
}

export interface OperationFailureException {
  readonly code?: string;
  readonly docs?: string;
  readonly message?: string;
  readonly tip?: string;
}

export interface Origin {
  readonly name?: string;
  readonly resourceType?: string;
  readonly regionName?: string;
  readonly protocolPolicy?: string;
}

export interface PasswordData {
  readonly ciphertext?: string;
  readonly keyPairName?: string;
}

export interface PeerVpcRequest {
}

export interface PeerVpcResult {
  readonly operation?: Operation;
}

export interface PendingMaintenanceAction {
  readonly action?: string;
  readonly description?: string;
  readonly currentApplyDate?: Date;
}

export interface PendingModifiedRelationalDatabaseValues {
  readonly masterUserPassword?: string;
  readonly engineVersion?: string;
  readonly backupRetentionEnabled?: boolean;
}

export interface PortInfo {
  readonly fromPort?: number;
  readonly toPort?: number;
  readonly protocol?: string;
  readonly cidrs?: [];
  readonly ipv6Cidrs?: [];
  readonly cidrListAliases?: [];
}

export interface PutAlarmRequest {
  readonly alarmName: string;
  readonly metricName: string;
  readonly monitoredResourceName: string;
  readonly comparisonOperator: string;
  readonly threshold: unknown;
  readonly evaluationPeriods: number;
  readonly datapointsToAlarm?: number;
  readonly treatMissingData?: string;
  readonly contactProtocols?: [];
  readonly notificationTriggers?: [];
  readonly notificationEnabled?: boolean;
}

export interface PutAlarmResult {
  readonly operations?: [];
}

export interface PutInstancePublicPortsRequest {
  readonly portInfos: [];
  readonly instanceName: string;
}

export interface PutInstancePublicPortsResult {
  readonly operation?: Operation;
}

export interface QueryStringObject {
  readonly option?: boolean;
  readonly queryStringsAllowList?: [];
}

export interface RebootInstanceRequest {
  readonly instanceName: string;
}

export interface RebootInstanceResult {
  readonly operations?: [];
}

export interface RebootRelationalDatabaseRequest {
  readonly relationalDatabaseName: string;
}

export interface RebootRelationalDatabaseResult {
  readonly operations?: [];
}

export interface Region {
  readonly continentCode?: string;
  readonly description?: string;
  readonly displayName?: string;
  readonly name?: string;
  readonly availabilityZones?: [];
  readonly relationalDatabaseAvailabilityZones?: [];
}

export interface RegisterContainerImageRequest {
  readonly serviceName: string;
  readonly label: string;
  readonly digest: string;
}

export interface RegisterContainerImageResult {
  readonly containerImage?: ContainerImage;
}

export interface RelationalDatabase {
  readonly name?: string;
  readonly arn?: string;
  readonly supportCode?: string;
  readonly createdAt?: Date;
  readonly location?: ResourceLocation;
  readonly resourceType?: string;
  readonly tags?: [];
  readonly relationalDatabaseBlueprintId?: string;
  readonly relationalDatabaseBundleId?: string;
  readonly masterDatabaseName?: string;
  readonly hardware?: RelationalDatabaseHardware;
  readonly state?: string;
  readonly secondaryAvailabilityZone?: string;
  readonly backupRetentionEnabled?: boolean;
  readonly pendingModifiedValues?: PendingModifiedRelationalDatabaseValues;
  readonly engine?: string;
  readonly engineVersion?: string;
  readonly latestRestorableTime?: Date;
  readonly masterUsername?: string;
  readonly parameterApplyStatus?: string;
  readonly preferredBackupWindow?: string;
  readonly preferredMaintenanceWindow?: string;
  readonly publiclyAccessible?: boolean;
  readonly masterEndpoint?: RelationalDatabaseEndpoint;
  readonly pendingMaintenanceActions?: [];
  readonly caCertificateIdentifier?: string;
}

export interface RelationalDatabaseBlueprint {
  readonly blueprintId?: string;
  readonly engine?: string;
  readonly engineVersion?: string;
  readonly engineDescription?: string;
  readonly engineVersionDescription?: string;
  readonly isEngineDefault?: boolean;
}

export interface RelationalDatabaseBundle {
  readonly bundleId?: string;
  readonly name?: string;
  readonly price?: unknown;
  readonly ramSizeInGb?: unknown;
  readonly diskSizeInGb?: number;
  readonly transferPerMonthInGb?: number;
  readonly cpuCount?: number;
  readonly isEncrypted?: boolean;
  readonly isActive?: boolean;
}

export interface RelationalDatabaseEndpoint {
  readonly port?: number;
  readonly address?: string;
}

export interface RelationalDatabaseEvent {
  readonly resource?: string;
  readonly createdAt?: Date;
  readonly message?: string;
  readonly eventCategories?: [];
}

export interface RelationalDatabaseHardware {
  readonly cpuCount?: number;
  readonly diskSizeInGb?: number;
  readonly ramSizeInGb?: unknown;
}

export interface RelationalDatabaseParameter {
  readonly allowedValues?: string;
  readonly applyMethod?: string;
  readonly applyType?: string;
  readonly dataType?: string;
  readonly description?: string;
  readonly isModifiable?: boolean;
  readonly parameterName?: string;
  readonly parameterValue?: string;
}

export interface RelationalDatabaseSnapshot {
  readonly name?: string;
  readonly arn?: string;
  readonly supportCode?: string;
  readonly createdAt?: Date;
  readonly location?: ResourceLocation;
  readonly resourceType?: string;
  readonly tags?: [];
  readonly engine?: string;
  readonly engineVersion?: string;
  readonly sizeInGb?: number;
  readonly state?: string;
  readonly fromRelationalDatabaseName?: string;
  readonly fromRelationalDatabaseArn?: string;
  readonly fromRelationalDatabaseBundleId?: string;
  readonly fromRelationalDatabaseBlueprintId?: string;
}

export interface ReleaseStaticIpRequest {
  readonly staticIpName: string;
}

export interface ReleaseStaticIpResult {
  readonly operations?: [];
}

export interface RenewalSummary {
  readonly domainValidationRecords?: [];
  readonly renewalStatus?: string;
  readonly renewalStatusReason?: string;
  readonly updatedAt?: Date;
}

export interface ResetDistributionCacheRequest {
  readonly distributionName?: string;
}

export interface ResetDistributionCacheResult {
  readonly status?: string;
  readonly createTime?: Date;
  readonly operation?: Operation;
}

export interface ResourceLocation {
  readonly availabilityZone?: string;
  readonly regionName?: string;
}

export interface ResourceReceivingAccess {
  readonly name?: string;
  readonly resourceType?: string;
}

export interface ResourceRecord {
  readonly name?: string;
  readonly type?: string;
  readonly value?: string;
}

export interface SendContactMethodVerificationRequest {
  readonly protocol: string;
}

export interface SendContactMethodVerificationResult {
  readonly operations?: [];
}

export interface ServiceException {
  readonly code?: string;
  readonly docs?: string;
  readonly message?: string;
  readonly tip?: string;
}

export interface SetIpAddressTypeRequest {
  readonly resourceType: string;
  readonly resourceName: string;
  readonly ipAddressType: string;
}

export interface SetIpAddressTypeResult {
  readonly operations?: [];
}

export interface SetResourceAccessForBucketRequest {
  readonly resourceName: string;
  readonly bucketName: string;
  readonly access: string;
}

export interface SetResourceAccessForBucketResult {
  readonly operations?: [];
}

export interface StartInstanceRequest {
  readonly instanceName: string;
}

export interface StartInstanceResult {
  readonly operations?: [];
}

export interface StartRelationalDatabaseRequest {
  readonly relationalDatabaseName: string;
}

export interface StartRelationalDatabaseResult {
  readonly operations?: [];
}

export interface StaticIp {
  readonly name?: string;
  readonly arn?: string;
  readonly supportCode?: string;
  readonly createdAt?: Date;
  readonly location?: ResourceLocation;
  readonly resourceType?: string;
  readonly ipAddress?: string;
  readonly attachedTo?: string;
  readonly isAttached?: boolean;
}

export interface StopInstanceRequest {
  readonly instanceName: string;
  readonly force?: boolean;
}

export interface StopInstanceResult {
  readonly operations?: [];
}

export interface StopRelationalDatabaseRequest {
  readonly relationalDatabaseName: string;
  readonly relationalDatabaseSnapshotName?: string;
}

export interface StopRelationalDatabaseResult {
  readonly operations?: [];
}

export interface Tag {
  readonly key?: string;
  readonly value?: string;
}

export interface TagResourceRequest {
  readonly resourceName: string;
  readonly resourceArn?: string;
  readonly tags: [];
}

export interface TagResourceResult {
  readonly operations?: [];
}

export interface TestAlarmRequest {
  readonly alarmName: string;
  readonly state: string;
}

export interface TestAlarmResult {
  readonly operations?: [];
}

export interface UnauthenticatedException {
  readonly code?: string;
  readonly docs?: string;
  readonly message?: string;
  readonly tip?: string;
}

export interface UnpeerVpcRequest {
}

export interface UnpeerVpcResult {
  readonly operation?: Operation;
}

export interface UntagResourceRequest {
  readonly resourceName: string;
  readonly resourceArn?: string;
  readonly tagKeys: [];
}

export interface UntagResourceResult {
  readonly operations?: [];
}

export interface UpdateBucketBundleRequest {
  readonly bucketName: string;
  readonly bundleId: string;
}

export interface UpdateBucketBundleResult {
  readonly operations?: [];
}

export interface UpdateBucketRequest {
  readonly bucketName: string;
  readonly accessRules?: AccessRules;
  readonly versioning?: string;
  readonly readonlyAccessAccounts?: [];
  readonly accessLogConfig?: BucketAccessLogConfig;
}

export interface UpdateBucketResult {
  readonly bucket?: Bucket;
  readonly operations?: [];
}

export interface UpdateContainerServiceRequest {
  readonly serviceName: string;
  readonly power?: string;
  readonly scale?: number;
  readonly isDisabled?: boolean;
  readonly publicDomainNames?: {[key: string]: any};
}

export interface UpdateContainerServiceResult {
  readonly containerService?: ContainerService;
}

export interface UpdateDistributionBundleRequest {
  readonly distributionName?: string;
  readonly bundleId?: string;
}

export interface UpdateDistributionBundleResult {
  readonly operation?: Operation;
}

export interface UpdateDistributionRequest {
  readonly distributionName: string;
  readonly origin?: InputOrigin;
  readonly defaultCacheBehavior?: CacheBehavior;
  readonly cacheBehaviorSettings?: CacheSettings;
  readonly cacheBehaviors?: [];
  readonly isEnabled?: boolean;
}

export interface UpdateDistributionResult {
  readonly operation?: Operation;
}

export interface UpdateDomainEntryRequest {
  readonly domainName: string;
  readonly domainEntry: DomainEntry;
}

export interface UpdateDomainEntryResult {
  readonly operations?: [];
}

export interface UpdateLoadBalancerAttributeRequest {
  readonly loadBalancerName: string;
  readonly attributeName: string;
  readonly attributeValue: string;
}

export interface UpdateLoadBalancerAttributeResult {
  readonly operations?: [];
}

export interface UpdateRelationalDatabaseParametersRequest {
  readonly relationalDatabaseName: string;
  readonly parameters: [];
}

export interface UpdateRelationalDatabaseParametersResult {
  readonly operations?: [];
}

export interface UpdateRelationalDatabaseRequest {
  readonly relationalDatabaseName: string;
  readonly masterUserPassword?: string;
  readonly rotateMasterUserPassword?: boolean;
  readonly preferredBackupWindow?: string;
  readonly preferredMaintenanceWindow?: string;
  readonly enableBackupRetention?: boolean;
  readonly disableBackupRetention?: boolean;
  readonly publiclyAccessible?: boolean;
  readonly applyImmediately?: boolean;
  readonly caCertificateIdentifier?: string;
}

export interface UpdateRelationalDatabaseResult {
  readonly operations?: [];
}


