/**
 * STOP. This file is autogenerated. DO NOT EDIT by hand
 */
export interface AcceptResourceShareInvitation {
  readonly resourceShareInvitationArn: string;
  readonly clientToken?: string;
}
export interface AssociateResourceShare {
  readonly resourceShareArn: string;
  readonly resourceArns?: [];
  readonly principals?: [];
  readonly clientToken?: string;
}
export interface AssociateResourceSharePermission {
  readonly resourceShareArn: string;
  readonly permissionArn: string;
  readonly replace?: boolean;
  readonly clientToken?: string;
  readonly permissionVersion?: number;
}
export interface CreateResourceShare {
  readonly name: string;
  readonly resourceArns?: [];
  readonly principals?: [];
  readonly tags?: [];
  readonly allowExternalPrincipals?: boolean;
  readonly clientToken?: string;
  readonly permissionArns?: [];
}
export interface DeleteResourceShare {
  readonly resourceShareArn: string;
  readonly clientToken?: string;
}
export interface DisassociateResourceShare {
  readonly resourceShareArn: string;
  readonly resourceArns?: [];
  readonly principals?: [];
  readonly clientToken?: string;
}
export interface DisassociateResourceSharePermission {
  readonly resourceShareArn: string;
  readonly permissionArn: string;
  readonly clientToken?: string;
}
export interface EnableSharingWithAwsOrganization {
}
export interface GetPermission {
  readonly permissionArn: string;
  readonly permissionVersion?: number;
}
export interface GetResourcePolicies {
  readonly resourceArns: [];
  readonly principal?: string;
  readonly nextToken?: string;
  readonly maxResults?: number;
}
export interface GetResourceShareAssociations {
  readonly associationType: string;
  readonly resourceShareArns?: [];
  readonly resourceArn?: string;
  readonly principal?: string;
  readonly associationStatus?: string;
  readonly nextToken?: string;
  readonly maxResults?: number;
}
export interface GetResourceShareInvitations {
  readonly resourceShareInvitationArns?: [];
  readonly resourceShareArns?: [];
  readonly nextToken?: string;
  readonly maxResults?: number;
}
export interface GetResourceShares {
  readonly resourceShareArns?: [];
  readonly resourceShareStatus?: string;
  readonly resourceOwner: string;
  readonly name?: string;
  readonly tagFilters?: [];
  readonly nextToken?: string;
  readonly maxResults?: number;
  readonly permissionArn?: string;
}
export interface ListPendingInvitationResources {
  readonly resourceShareInvitationArn: string;
  readonly nextToken?: string;
  readonly maxResults?: number;
  readonly resourceRegionScope?: string;
}
export interface ListPermissions {
  readonly resourceType?: string;
  readonly nextToken?: string;
  readonly maxResults?: number;
}
export interface ListPrincipals {
  readonly resourceOwner: string;
  readonly resourceArn?: string;
  readonly principals?: [];
  readonly resourceType?: string;
  readonly resourceShareArns?: [];
  readonly nextToken?: string;
  readonly maxResults?: number;
}
export interface ListResourceSharePermissions {
  readonly resourceShareArn: string;
  readonly nextToken?: string;
  readonly maxResults?: number;
}
export interface ListResourceTypes {
  readonly nextToken?: string;
  readonly maxResults?: number;
  readonly resourceRegionScope?: string;
}
export interface ListResources {
  readonly resourceOwner: string;
  readonly principal?: string;
  readonly resourceType?: string;
  readonly resourceArns?: [];
  readonly resourceShareArns?: [];
  readonly nextToken?: string;
  readonly maxResults?: number;
  readonly resourceRegionScope?: string;
}
export interface PromoteResourceShareCreatedFromPolicy {
  readonly resourceShareArn: string;
}
export interface RejectResourceShareInvitation {
  readonly resourceShareInvitationArn: string;
  readonly clientToken?: string;
}
export interface TagResource {
  readonly resourceShareArn: string;
  readonly tags: [];
}
export interface UntagResource {
  readonly resourceShareArn: string;
  readonly tagKeys: [];
}
export interface UpdateResourceShare {
  readonly resourceShareArn: string;
  readonly name?: string;
  readonly allowExternalPrincipals?: boolean;
  readonly clientToken?: string;
}



interface AcceptResourceShareInvitationRequest {
  readonly resourceShareInvitationArn: string;
  readonly clientToken: string;
}

interface AcceptResourceShareInvitationResponse {
  readonly resourceShareInvitation: ResourceShareInvitation;
  readonly clientToken: string;
}

interface AssociateResourceSharePermissionRequest {
  readonly resourceShareArn: string;
  readonly permissionArn: string;
  readonly replace: boolean;
  readonly clientToken: string;
  readonly permissionVersion: number;
}

interface AssociateResourceSharePermissionResponse {
  readonly returnValue: boolean;
  readonly clientToken: string;
}

interface AssociateResourceShareRequest {
  readonly resourceShareArn: string;
  readonly resourceArns: [];
  readonly principals: [];
  readonly clientToken: string;
}

interface AssociateResourceShareResponse {
  readonly resourceShareAssociations: [];
  readonly clientToken: string;
}

interface CreateResourceShareRequest {
  readonly name: string;
  readonly resourceArns: [];
  readonly principals: [];
  readonly tags: [];
  readonly allowExternalPrincipals: boolean;
  readonly clientToken: string;
  readonly permissionArns: [];
}

interface CreateResourceShareResponse {
  readonly resourceShare: ResourceShare;
  readonly clientToken: string;
}

interface DeleteResourceShareRequest {
  readonly resourceShareArn: string;
  readonly clientToken: string;
}

interface DeleteResourceShareResponse {
  readonly returnValue: boolean;
  readonly clientToken: string;
}

interface DisassociateResourceSharePermissionRequest {
  readonly resourceShareArn: string;
  readonly permissionArn: string;
  readonly clientToken: string;
}

interface DisassociateResourceSharePermissionResponse {
  readonly returnValue: boolean;
  readonly clientToken: string;
}

interface DisassociateResourceShareRequest {
  readonly resourceShareArn: string;
  readonly resourceArns: [];
  readonly principals: [];
  readonly clientToken: string;
}

interface DisassociateResourceShareResponse {
  readonly resourceShareAssociations: [];
  readonly clientToken: string;
}

interface EnableSharingWithAwsOrganizationRequest {
}

interface EnableSharingWithAwsOrganizationResponse {
  readonly returnValue: boolean;
}

interface GetPermissionRequest {
  readonly permissionArn: string;
  readonly permissionVersion: number;
}

interface GetPermissionResponse {
  readonly permission: ResourceSharePermissionDetail;
}

interface GetResourcePoliciesRequest {
  readonly resourceArns: [];
  readonly principal: string;
  readonly nextToken: string;
  readonly maxResults: number;
}

interface GetResourcePoliciesResponse {
  readonly policies: [];
  readonly nextToken: string;
}

interface GetResourceShareAssociationsRequest {
  readonly associationType: string;
  readonly resourceShareArns: [];
  readonly resourceArn: string;
  readonly principal: string;
  readonly associationStatus: string;
  readonly nextToken: string;
  readonly maxResults: number;
}

interface GetResourceShareAssociationsResponse {
  readonly resourceShareAssociations: [];
  readonly nextToken: string;
}

interface GetResourceShareInvitationsRequest {
  readonly resourceShareInvitationArns: [];
  readonly resourceShareArns: [];
  readonly nextToken: string;
  readonly maxResults: number;
}

interface GetResourceShareInvitationsResponse {
  readonly resourceShareInvitations: [];
  readonly nextToken: string;
}

interface GetResourceSharesRequest {
  readonly resourceShareArns: [];
  readonly resourceShareStatus: string;
  readonly resourceOwner: string;
  readonly name: string;
  readonly tagFilters: [];
  readonly nextToken: string;
  readonly maxResults: number;
  readonly permissionArn: string;
}

interface GetResourceSharesResponse {
  readonly resourceShares: [];
  readonly nextToken: string;
}

interface IdempotentParameterMismatchException {
  readonly message: string;
}

interface InvalidClientTokenException {
  readonly message: string;
}

interface InvalidMaxResultsException {
  readonly message: string;
}

interface InvalidNextTokenException {
  readonly message: string;
}

interface InvalidParameterException {
  readonly message: string;
}

interface InvalidResourceTypeException {
  readonly message: string;
}

interface InvalidStateTransitionException {
  readonly message: string;
}

interface ListPendingInvitationResourcesRequest {
  readonly resourceShareInvitationArn: string;
  readonly nextToken: string;
  readonly maxResults: number;
  readonly resourceRegionScope: string;
}

interface ListPendingInvitationResourcesResponse {
  readonly resources: [];
  readonly nextToken: string;
}

interface ListPermissionsRequest {
  readonly resourceType: string;
  readonly nextToken: string;
  readonly maxResults: number;
}

interface ListPermissionsResponse {
  readonly permissions: [];
  readonly nextToken: string;
}

interface ListPrincipalsRequest {
  readonly resourceOwner: string;
  readonly resourceArn: string;
  readonly principals: [];
  readonly resourceType: string;
  readonly resourceShareArns: [];
  readonly nextToken: string;
  readonly maxResults: number;
}

interface ListPrincipalsResponse {
  readonly principals: [];
  readonly nextToken: string;
}

interface ListResourceSharePermissionsRequest {
  readonly resourceShareArn: string;
  readonly nextToken: string;
  readonly maxResults: number;
}

interface ListResourceSharePermissionsResponse {
  readonly permissions: [];
  readonly nextToken: string;
}

interface ListResourceTypesRequest {
  readonly nextToken: string;
  readonly maxResults: number;
  readonly resourceRegionScope: string;
}

interface ListResourceTypesResponse {
  readonly resourceTypes: [];
  readonly nextToken: string;
}

interface ListResourcesRequest {
  readonly resourceOwner: string;
  readonly principal: string;
  readonly resourceType: string;
  readonly resourceArns: [];
  readonly resourceShareArns: [];
  readonly nextToken: string;
  readonly maxResults: number;
  readonly resourceRegionScope: string;
}

interface ListResourcesResponse {
  readonly resources: [];
  readonly nextToken: string;
}

interface MalformedArnException {
  readonly message: string;
}

interface MissingRequiredParameterException {
  readonly message: string;
}

interface OperationNotPermittedException {
  readonly message: string;
}

interface Principal {
  readonly id: string;
  readonly resourceShareArn: string;
  readonly creationTime: Date;
  readonly lastUpdatedTime: Date;
  readonly external: boolean;
}

interface PromoteResourceShareCreatedFromPolicyRequest {
  readonly resourceShareArn: string;
}

interface PromoteResourceShareCreatedFromPolicyResponse {
  readonly returnValue: boolean;
}

interface RejectResourceShareInvitationRequest {
  readonly resourceShareInvitationArn: string;
  readonly clientToken: string;
}

interface RejectResourceShareInvitationResponse {
  readonly resourceShareInvitation: ResourceShareInvitation;
  readonly clientToken: string;
}

interface Resource {
  readonly arn: string;
  readonly type: string;
  readonly resourceShareArn: string;
  readonly resourceGroupArn: string;
  readonly status: string;
  readonly statusMessage: string;
  readonly creationTime: Date;
  readonly lastUpdatedTime: Date;
  readonly resourceRegionScope: string;
}

interface ResourceArnNotFoundException {
  readonly message: string;
}

interface ResourceShare {
  readonly resourceShareArn: string;
  readonly name: string;
  readonly owningAccountId: string;
  readonly allowExternalPrincipals: boolean;
  readonly status: string;
  readonly statusMessage: string;
  readonly tags: [];
  readonly creationTime: Date;
  readonly lastUpdatedTime: Date;
  readonly featureSet: string;
}

interface ResourceShareAssociation {
  readonly resourceShareArn: string;
  readonly resourceShareName: string;
  readonly associatedEntity: string;
  readonly associationType: string;
  readonly status: string;
  readonly statusMessage: string;
  readonly creationTime: Date;
  readonly lastUpdatedTime: Date;
  readonly external: boolean;
}

interface ResourceShareInvitation {
  readonly resourceShareInvitationArn: string;
  readonly resourceShareName: string;
  readonly resourceShareArn: string;
  readonly senderAccountId: string;
  readonly receiverAccountId: string;
  readonly invitationTimestamp: Date;
  readonly status: string;
  readonly resourceShareAssociations: [];
  readonly receiverArn: string;
}

interface ResourceShareInvitationAlreadyAcceptedException {
  readonly message: string;
}

interface ResourceShareInvitationAlreadyRejectedException {
  readonly message: string;
}

interface ResourceShareInvitationArnNotFoundException {
  readonly message: string;
}

interface ResourceShareInvitationExpiredException {
  readonly message: string;
}

interface ResourceShareLimitExceededException {
  readonly message: string;
}

interface ResourceSharePermissionDetail {
  readonly arn: string;
  readonly version: string;
  readonly defaultVersion: boolean;
  readonly name: string;
  readonly resourceType: string;
  readonly permission: string;
  readonly creationTime: Date;
  readonly lastUpdatedTime: Date;
  readonly isResourceTypeDefault: boolean;
}

interface ResourceSharePermissionSummary {
  readonly arn: string;
  readonly version: string;
  readonly defaultVersion: boolean;
  readonly name: string;
  readonly resourceType: string;
  readonly status: string;
  readonly creationTime: Date;
  readonly lastUpdatedTime: Date;
  readonly isResourceTypeDefault: boolean;
}

interface ServerInternalException {
  readonly message: string;
}

interface ServiceNameAndResourceType {
  readonly resourceType: string;
  readonly serviceName: string;
  readonly resourceRegionScope: string;
}

interface ServiceUnavailableException {
  readonly message: string;
}

interface Tag {
  readonly key: string;
  readonly value: string;
}

interface TagFilter {
  readonly tagKey: string;
  readonly tagValues: [];
}

interface TagLimitExceededException {
  readonly message: string;
}

interface TagPolicyViolationException {
  readonly message: string;
}

interface TagResourceRequest {
  readonly resourceShareArn: string;
  readonly tags: [];
}

interface TagResourceResponse {
}

interface ThrottlingException {
  readonly message: string;
}

interface UnknownResourceException {
  readonly message: string;
}

interface UntagResourceRequest {
  readonly resourceShareArn: string;
  readonly tagKeys: [];
}

interface UntagResourceResponse {
}

interface UpdateResourceShareRequest {
  readonly resourceShareArn: string;
  readonly name: string;
  readonly allowExternalPrincipals: boolean;
  readonly clientToken: string;
}

interface UpdateResourceShareResponse {
  readonly resourceShare: ResourceShare;
  readonly clientToken: string;
}

