/**
 * STOP. This file is autogenerated. DO NOT EDIT by hand
 */
export interface CreateComponent {
  readonly appId: string;
  readonly clientToken?: string;
  readonly componentToCreate: CreateComponentData;
  readonly environmentName: string;
}

export interface CreateTheme {
  readonly appId: string;
  readonly clientToken?: string;
  readonly environmentName: string;
  readonly themeToCreate: CreateThemeData;
}

export interface DeleteComponent {
  readonly appId: string;
  readonly environmentName: string;
  readonly id: string;
}

export interface DeleteTheme {
  readonly appId: string;
  readonly environmentName: string;
  readonly id: string;
}

export interface ExchangeCodeForToken {
  readonly provider: string;
  readonly request: ExchangeCodeForTokenRequestBody;
}

export interface ExportComponents {
  readonly appId: string;
  readonly environmentName: string;
}

export interface ExportThemes {
  readonly appId: string;
  readonly environmentName: string;
}

export interface GetComponent {
  readonly appId: string;
  readonly environmentName: string;
  readonly id: string;
}

export interface GetTheme {
  readonly appId: string;
  readonly environmentName: string;
  readonly id: string;
}

export interface ListComponents {
  readonly appId: string;
  readonly environmentName: string;
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface ListThemes {
  readonly appId: string;
  readonly environmentName: string;
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface RefreshToken {
  readonly provider: string;
  readonly refreshTokenBody: RefreshTokenRequestBody;
}

export interface UpdateComponent {
  readonly appId: string;
  readonly clientToken?: string;
  readonly environmentName: string;
  readonly id: string;
  readonly updatedComponent: UpdateComponentData;
}

export interface UpdateTheme {
  readonly appId: string;
  readonly clientToken?: string;
  readonly environmentName: string;
  readonly id: string;
  readonly updatedTheme: UpdateThemeData;
}

export interface Component {
  readonly appId: string;
  readonly bindingProperties: {[key: string]: any};
  readonly children?: [];
  readonly collectionProperties?: {[key: string]: any};
  readonly componentType: string;
  readonly createdAt: Date;
  readonly environmentName: string;
  readonly id: string;
  readonly modifiedAt?: Date;
  readonly name: string;
  readonly overrides: {[key: string]: any};
  readonly properties: {[key: string]: any};
  readonly sourceId?: string;
  readonly tags?: {[key: string]: any};
  readonly variants: [];
}

export interface ComponentBindingPropertiesValue {
  readonly bindingProperties?: ComponentBindingPropertiesValueProperties;
  readonly defaultValue?: string;
  readonly type?: string;
}

export interface ComponentBindingPropertiesValueProperties {
  readonly bucket?: string;
  readonly defaultValue?: string;
  readonly field?: string;
  readonly key?: string;
  readonly model?: string;
  readonly predicates?: [];
  readonly userAttribute?: string;
}

export interface ComponentChild {
  readonly children?: [];
  readonly componentType: string;
  readonly name: string;
  readonly properties: {[key: string]: any};
}

export interface ComponentConditionProperty {
  readonly else?: ComponentProperty;
  readonly field?: string;
  readonly operand?: string;
  readonly operator?: string;
  readonly property?: string;
  readonly then?: ComponentProperty;
}

export interface ComponentDataConfiguration {
  readonly identifiers?: [];
  readonly model: string;
  readonly predicate?: Predicate;
  readonly sort?: [];
}

export interface ComponentProperty {
  readonly bindingProperties?: ComponentPropertyBindingProperties;
  readonly bindings?: {[key: string]: any};
  readonly collectionBindingProperties?: ComponentPropertyBindingProperties;
  readonly concat?: [];
  readonly condition?: ComponentConditionProperty;
  readonly configured?: boolean;
  readonly defaultValue?: string;
  readonly event?: string;
  readonly importedValue?: string;
  readonly model?: string;
  readonly type?: string;
  readonly userAttribute?: string;
  readonly value?: string;
}

export interface ComponentPropertyBindingProperties {
  readonly field?: string;
  readonly property: string;
}

export interface ComponentSummary {
  readonly appId: string;
  readonly componentType: string;
  readonly environmentName: string;
  readonly id: string;
  readonly name: string;
}

export interface ComponentVariant {
  readonly overrides?: {[key: string]: any};
  readonly variantValues?: {[key: string]: any};
}

export interface CreateComponentData {
  readonly bindingProperties: {[key: string]: any};
  readonly children?: [];
  readonly collectionProperties?: {[key: string]: any};
  readonly componentType: string;
  readonly name: string;
  readonly overrides: {[key: string]: any};
  readonly properties: {[key: string]: any};
  readonly sourceId?: string;
  readonly tags?: {[key: string]: any};
  readonly variants: [];
}

export interface CreateComponentRequest {
  readonly appId: string;
  readonly clientToken?: string;
  readonly componentToCreate: CreateComponentData;
  readonly environmentName: string;
}

export interface CreateComponentResponse {
  readonly entity?: Component;
}

export interface CreateThemeData {
  readonly name: string;
  readonly overrides?: [];
  readonly tags?: {[key: string]: any};
  readonly values: [];
}

export interface CreateThemeRequest {
  readonly appId: string;
  readonly clientToken?: string;
  readonly environmentName: string;
  readonly themeToCreate: CreateThemeData;
}

export interface CreateThemeResponse {
  readonly entity?: Theme;
}

export interface DeleteComponentRequest {
  readonly appId: string;
  readonly environmentName: string;
  readonly id: string;
}

export interface DeleteThemeRequest {
  readonly appId: string;
  readonly environmentName: string;
  readonly id: string;
}

export interface ExchangeCodeForTokenRequest {
  readonly provider: string;
  readonly request: ExchangeCodeForTokenRequestBody;
}

export interface ExchangeCodeForTokenRequestBody {
  readonly code: string;
  readonly redirectUri: string;
}

export interface ExchangeCodeForTokenResponse {
  readonly accessToken: string;
  readonly expiresIn: number;
  readonly refreshToken: string;
}

export interface ExportComponentsRequest {
  readonly appId: string;
  readonly environmentName: string;
}

export interface ExportComponentsResponse {
  readonly entities: [];
}

export interface ExportThemesRequest {
  readonly appId: string;
  readonly environmentName: string;
}

export interface ExportThemesResponse {
  readonly entities: [];
}

export interface FormBindingElement {
  readonly element: string;
  readonly property: string;
}

export interface GetComponentRequest {
  readonly appId: string;
  readonly environmentName: string;
  readonly id: string;
}

export interface GetComponentResponse {
  readonly component?: Component;
}

export interface GetThemeRequest {
  readonly appId: string;
  readonly environmentName: string;
  readonly id: string;
}

export interface GetThemeResponse {
  readonly theme?: Theme;
}

export interface InternalServerException {
  readonly message?: string;
}

export interface InvalidParameterException {
  readonly message?: string;
}

export interface ListComponentsRequest {
  readonly appId: string;
  readonly environmentName: string;
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface ListComponentsResponse {
  readonly entities: [];
  readonly nextToken?: string;
}

export interface ListThemesRequest {
  readonly appId: string;
  readonly environmentName: string;
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface ListThemesResponse {
  readonly entities: [];
  readonly nextToken?: string;
}

export interface Predicate {
  readonly and?: [];
  readonly field?: string;
  readonly operand?: string;
  readonly operator?: string;
  readonly or?: [];
}

export interface RefreshTokenRequest {
  readonly provider: string;
  readonly refreshTokenBody: RefreshTokenRequestBody;
}

export interface RefreshTokenRequestBody {
  readonly token: string;
}

export interface RefreshTokenResponse {
  readonly accessToken: string;
  readonly expiresIn: number;
}

export interface ResourceConflictException {
  readonly message?: string;
}

export interface ResourceNotFoundException {
  readonly message?: string;
}

export interface ServiceQuotaExceededException {
  readonly message?: string;
}

export interface SortProperty {
  readonly direction: string;
  readonly field: string;
}

export interface Theme {
  readonly appId: string;
  readonly createdAt: Date;
  readonly environmentName: string;
  readonly id: string;
  readonly modifiedAt?: Date;
  readonly name: string;
  readonly overrides?: [];
  readonly tags?: {[key: string]: any};
  readonly values: [];
}

export interface ThemeSummary {
  readonly appId: string;
  readonly environmentName: string;
  readonly id: string;
  readonly name: string;
}

export interface ThemeValue {
  readonly children?: [];
  readonly value?: string;
}

export interface ThemeValues {
  readonly key?: string;
  readonly value?: ThemeValue;
}

export interface UpdateComponentData {
  readonly bindingProperties?: {[key: string]: any};
  readonly children?: [];
  readonly collectionProperties?: {[key: string]: any};
  readonly componentType?: string;
  readonly id?: string;
  readonly name?: string;
  readonly overrides?: {[key: string]: any};
  readonly properties?: {[key: string]: any};
  readonly sourceId?: string;
  readonly variants?: [];
}

export interface UpdateComponentRequest {
  readonly appId: string;
  readonly clientToken?: string;
  readonly environmentName: string;
  readonly id: string;
  readonly updatedComponent: UpdateComponentData;
}

export interface UpdateComponentResponse {
  readonly entity?: Component;
}

export interface UpdateThemeData {
  readonly id?: string;
  readonly name?: string;
  readonly overrides?: [];
  readonly values: [];
}

export interface UpdateThemeRequest {
  readonly appId: string;
  readonly clientToken?: string;
  readonly environmentName: string;
  readonly id: string;
  readonly updatedTheme: UpdateThemeData;
}

export interface UpdateThemeResponse {
  readonly entity?: Theme;
}


