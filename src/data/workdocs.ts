/**
 * STOP. This file is autogenerated. DO NOT EDIT by hand
 */
export interface AbortDocumentVersionUpload {
  readonly AuthenticationToken?: string;
  readonly DocumentId: string;
  readonly VersionId: string;
}
export interface ActivateUser {
  readonly UserId: string;
  readonly AuthenticationToken?: string;
}
export interface AddResourcePermissions {
  readonly AuthenticationToken?: string;
  readonly ResourceId: string;
  readonly Principals: [];
  readonly NotificationOptions?: NotificationOptions;
}
export interface CreateComment {
  readonly AuthenticationToken?: string;
  readonly DocumentId: string;
  readonly VersionId: string;
  readonly ParentId?: string;
  readonly ThreadId?: string;
  readonly Text: string;
  readonly Visibility?: string;
  readonly NotifyCollaborators?: boolean;
}
export interface CreateCustomMetadata {
  readonly AuthenticationToken?: string;
  readonly ResourceId: string;
  readonly VersionId?: string;
  readonly CustomMetadata: {[key: string]: any};
}
export interface CreateFolder {
  readonly AuthenticationToken?: string;
  readonly Name?: string;
  readonly ParentFolderId: string;
}
export interface CreateLabels {
  readonly ResourceId: string;
  readonly Labels: [];
  readonly AuthenticationToken?: string;
}
export interface CreateNotificationSubscription {
  readonly OrganizationId: string;
  readonly Endpoint: string;
  readonly Protocol: string;
  readonly SubscriptionType: string;
}
export interface CreateUser {
  readonly OrganizationId?: string;
  readonly Username: string;
  readonly EmailAddress?: string;
  readonly GivenName: string;
  readonly Surname: string;
  readonly Password: string;
  readonly TimeZoneId?: string;
  readonly StorageRule?: StorageRuleType;
  readonly AuthenticationToken?: string;
}
export interface DeactivateUser {
  readonly UserId: string;
  readonly AuthenticationToken?: string;
}
export interface DeleteComment {
  readonly AuthenticationToken?: string;
  readonly DocumentId: string;
  readonly VersionId: string;
  readonly CommentId: string;
}
export interface DeleteCustomMetadata {
  readonly AuthenticationToken?: string;
  readonly ResourceId: string;
  readonly VersionId?: string;
  readonly Keys?: [];
  readonly DeleteAll?: boolean;
}
export interface DeleteDocument {
  readonly AuthenticationToken?: string;
  readonly DocumentId: string;
}
export interface DeleteFolder {
  readonly AuthenticationToken?: string;
  readonly FolderId: string;
}
export interface DeleteFolderContents {
  readonly AuthenticationToken?: string;
  readonly FolderId: string;
}
export interface DeleteLabels {
  readonly ResourceId: string;
  readonly AuthenticationToken?: string;
  readonly Labels?: [];
  readonly DeleteAll?: boolean;
}
export interface DeleteNotificationSubscription {
  readonly SubscriptionId: string;
  readonly OrganizationId: string;
}
export interface DeleteUser {
  readonly AuthenticationToken?: string;
  readonly UserId: string;
}
export interface DescribeActivities {
  readonly AuthenticationToken?: string;
  readonly StartTime?: Date;
  readonly EndTime?: Date;
  readonly OrganizationId?: string;
  readonly ActivityTypes?: string;
  readonly ResourceId?: string;
  readonly UserId?: string;
  readonly IncludeIndirectActivities?: boolean;
  readonly Limit?: number;
  readonly Marker?: string;
}
export interface DescribeComments {
  readonly AuthenticationToken?: string;
  readonly DocumentId: string;
  readonly VersionId: string;
  readonly Limit?: number;
  readonly Marker?: string;
}
export interface DescribeDocumentVersions {
  readonly AuthenticationToken?: string;
  readonly DocumentId: string;
  readonly Marker?: string;
  readonly Limit?: number;
  readonly Include?: string;
  readonly Fields?: string;
}
export interface DescribeFolderContents {
  readonly AuthenticationToken?: string;
  readonly FolderId: string;
  readonly Sort?: string;
  readonly Order?: string;
  readonly Limit?: number;
  readonly Marker?: string;
  readonly Type?: string;
  readonly Include?: string;
}
export interface DescribeGroups {
  readonly AuthenticationToken?: string;
  readonly SearchQuery: string;
  readonly OrganizationId?: string;
  readonly Marker?: string;
  readonly Limit?: number;
}
export interface DescribeNotificationSubscriptions {
  readonly OrganizationId: string;
  readonly Marker?: string;
  readonly Limit?: number;
}
export interface DescribeResourcePermissions {
  readonly AuthenticationToken?: string;
  readonly ResourceId: string;
  readonly PrincipalId?: string;
  readonly Limit?: number;
  readonly Marker?: string;
}
export interface DescribeRootFolders {
  readonly AuthenticationToken: string;
  readonly Limit?: number;
  readonly Marker?: string;
}
export interface DescribeUsers {
  readonly AuthenticationToken?: string;
  readonly OrganizationId?: string;
  readonly UserIds?: string;
  readonly Query?: string;
  readonly Include?: string;
  readonly Order?: string;
  readonly Sort?: string;
  readonly Marker?: string;
  readonly Limit?: number;
  readonly Fields?: string;
}
export interface GetCurrentUser {
  readonly AuthenticationToken: string;
}
export interface GetDocument {
  readonly AuthenticationToken?: string;
  readonly DocumentId: string;
  readonly IncludeCustomMetadata?: boolean;
}
export interface GetDocumentPath {
  readonly AuthenticationToken?: string;
  readonly DocumentId: string;
  readonly Limit?: number;
  readonly Fields?: string;
  readonly Marker?: string;
}
export interface GetDocumentVersion {
  readonly AuthenticationToken?: string;
  readonly DocumentId: string;
  readonly VersionId: string;
  readonly Fields?: string;
  readonly IncludeCustomMetadata?: boolean;
}
export interface GetFolder {
  readonly AuthenticationToken?: string;
  readonly FolderId: string;
  readonly IncludeCustomMetadata?: boolean;
}
export interface GetFolderPath {
  readonly AuthenticationToken?: string;
  readonly FolderId: string;
  readonly Limit?: number;
  readonly Fields?: string;
  readonly Marker?: string;
}
export interface GetResources {
  readonly AuthenticationToken?: string;
  readonly UserId?: string;
  readonly CollectionType?: string;
  readonly Limit?: number;
  readonly Marker?: string;
}
export interface InitiateDocumentVersionUpload {
  readonly AuthenticationToken?: string;
  readonly Id?: string;
  readonly Name?: string;
  readonly ContentCreatedTimestamp?: Date;
  readonly ContentModifiedTimestamp?: Date;
  readonly ContentType?: string;
  readonly DocumentSizeInBytes?: number;
  readonly ParentFolderId: string;
}
export interface RemoveAllResourcePermissions {
  readonly AuthenticationToken?: string;
  readonly ResourceId: string;
}
export interface RemoveResourcePermission {
  readonly AuthenticationToken?: string;
  readonly ResourceId: string;
  readonly PrincipalId: string;
  readonly PrincipalType?: string;
}
export interface UpdateDocument {
  readonly AuthenticationToken?: string;
  readonly DocumentId: string;
  readonly Name?: string;
  readonly ParentFolderId?: string;
  readonly ResourceState?: string;
}
export interface UpdateDocumentVersion {
  readonly AuthenticationToken?: string;
  readonly DocumentId: string;
  readonly VersionId: string;
  readonly VersionStatus?: string;
}
export interface UpdateFolder {
  readonly AuthenticationToken?: string;
  readonly FolderId: string;
  readonly Name?: string;
  readonly ParentFolderId?: string;
  readonly ResourceState?: string;
}
export interface UpdateUser {
  readonly AuthenticationToken?: string;
  readonly UserId: string;
  readonly GivenName?: string;
  readonly Surname?: string;
  readonly Type?: string;
  readonly StorageRule?: StorageRuleType;
  readonly TimeZoneId?: string;
  readonly Locale?: string;
  readonly GrantPoweruserPrivileges?: string;
}



interface AbortDocumentVersionUploadRequest {
  readonly AuthenticationToken: string;
  readonly DocumentId: string;
  readonly VersionId: string;
}

interface ActivateUserRequest {
  readonly UserId: string;
  readonly AuthenticationToken: string;
}

interface ActivateUserResponse {
  readonly User: User;
}

interface Activity {
  readonly Type: string;
  readonly TimeStamp: Date;
  readonly IsIndirectActivity: boolean;
  readonly OrganizationId: string;
  readonly Initiator: UserMetadata;
  readonly Participants: Participants;
  readonly ResourceMetadata: ResourceMetadata;
  readonly OriginalParent: ResourceMetadata;
  readonly CommentMetadata: CommentMetadata;
}

interface AddResourcePermissionsRequest {
  readonly AuthenticationToken: string;
  readonly ResourceId: string;
  readonly Principals: [];
  readonly NotificationOptions: NotificationOptions;
}

interface AddResourcePermissionsResponse {
  readonly ShareResults: [];
}

interface Comment {
  readonly CommentId: string;
  readonly ParentId: string;
  readonly ThreadId: string;
  readonly Text: string;
  readonly Contributor: User;
  readonly CreatedTimestamp: Date;
  readonly Status: string;
  readonly Visibility: string;
  readonly RecipientId: string;
}

interface CommentMetadata {
  readonly CommentId: string;
  readonly Contributor: User;
  readonly CreatedTimestamp: Date;
  readonly CommentStatus: string;
  readonly RecipientId: string;
}

interface ConcurrentModificationException {
  readonly Message: string;
}

interface ConflictingOperationException {
  readonly Message: string;
}

interface CreateCommentRequest {
  readonly AuthenticationToken: string;
  readonly DocumentId: string;
  readonly VersionId: string;
  readonly ParentId: string;
  readonly ThreadId: string;
  readonly Text: string;
  readonly Visibility: string;
  readonly NotifyCollaborators: boolean;
}

interface CreateCommentResponse {
  readonly Comment: Comment;
}

interface CreateCustomMetadataRequest {
  readonly AuthenticationToken: string;
  readonly ResourceId: string;
  readonly VersionId: string;
  readonly CustomMetadata: {[key: string]: any};
}

interface CreateCustomMetadataResponse {
}

interface CreateFolderRequest {
  readonly AuthenticationToken: string;
  readonly Name: string;
  readonly ParentFolderId: string;
}

interface CreateFolderResponse {
  readonly Metadata: FolderMetadata;
}

interface CreateLabelsRequest {
  readonly ResourceId: string;
  readonly Labels: [];
  readonly AuthenticationToken: string;
}

interface CreateLabelsResponse {
}

interface CreateNotificationSubscriptionRequest {
  readonly OrganizationId: string;
  readonly Endpoint: string;
  readonly Protocol: string;
  readonly SubscriptionType: string;
}

interface CreateNotificationSubscriptionResponse {
  readonly Subscription: Subscription;
}

interface CreateUserRequest {
  readonly OrganizationId: string;
  readonly Username: string;
  readonly EmailAddress: string;
  readonly GivenName: string;
  readonly Surname: string;
  readonly Password: string;
  readonly TimeZoneId: string;
  readonly StorageRule: StorageRuleType;
  readonly AuthenticationToken: string;
}

interface CreateUserResponse {
  readonly User: User;
}

interface CustomMetadataLimitExceededException {
  readonly Message: string;
}

interface DeactivateUserRequest {
  readonly UserId: string;
  readonly AuthenticationToken: string;
}

interface DeactivatingLastSystemUserException {
}

interface DeleteCommentRequest {
  readonly AuthenticationToken: string;
  readonly DocumentId: string;
  readonly VersionId: string;
  readonly CommentId: string;
}

interface DeleteCustomMetadataRequest {
  readonly AuthenticationToken: string;
  readonly ResourceId: string;
  readonly VersionId: string;
  readonly Keys: [];
  readonly DeleteAll: boolean;
}

interface DeleteCustomMetadataResponse {
}

interface DeleteDocumentRequest {
  readonly AuthenticationToken: string;
  readonly DocumentId: string;
}

interface DeleteFolderContentsRequest {
  readonly AuthenticationToken: string;
  readonly FolderId: string;
}

interface DeleteFolderRequest {
  readonly AuthenticationToken: string;
  readonly FolderId: string;
}

interface DeleteLabelsRequest {
  readonly ResourceId: string;
  readonly AuthenticationToken: string;
  readonly Labels: [];
  readonly DeleteAll: boolean;
}

interface DeleteLabelsResponse {
}

interface DeleteNotificationSubscriptionRequest {
  readonly SubscriptionId: string;
  readonly OrganizationId: string;
}

interface DeleteUserRequest {
  readonly AuthenticationToken: string;
  readonly UserId: string;
}

interface DescribeActivitiesRequest {
  readonly AuthenticationToken: string;
  readonly StartTime: Date;
  readonly EndTime: Date;
  readonly OrganizationId: string;
  readonly ActivityTypes: string;
  readonly ResourceId: string;
  readonly UserId: string;
  readonly IncludeIndirectActivities: boolean;
  readonly Limit: number;
  readonly Marker: string;
}

interface DescribeActivitiesResponse {
  readonly UserActivities: [];
  readonly Marker: string;
}

interface DescribeCommentsRequest {
  readonly AuthenticationToken: string;
  readonly DocumentId: string;
  readonly VersionId: string;
  readonly Limit: number;
  readonly Marker: string;
}

interface DescribeCommentsResponse {
  readonly Comments: [];
  readonly Marker: string;
}

interface DescribeDocumentVersionsRequest {
  readonly AuthenticationToken: string;
  readonly DocumentId: string;
  readonly Marker: string;
  readonly Limit: number;
  readonly Include: string;
  readonly Fields: string;
}

interface DescribeDocumentVersionsResponse {
  readonly DocumentVersions: [];
  readonly Marker: string;
}

interface DescribeFolderContentsRequest {
  readonly AuthenticationToken: string;
  readonly FolderId: string;
  readonly Sort: string;
  readonly Order: string;
  readonly Limit: number;
  readonly Marker: string;
  readonly Type: string;
  readonly Include: string;
}

interface DescribeFolderContentsResponse {
  readonly Folders: [];
  readonly Documents: [];
  readonly Marker: string;
}

interface DescribeGroupsRequest {
  readonly AuthenticationToken: string;
  readonly SearchQuery: string;
  readonly OrganizationId: string;
  readonly Marker: string;
  readonly Limit: number;
}

interface DescribeGroupsResponse {
  readonly Groups: [];
  readonly Marker: string;
}

interface DescribeNotificationSubscriptionsRequest {
  readonly OrganizationId: string;
  readonly Marker: string;
  readonly Limit: number;
}

interface DescribeNotificationSubscriptionsResponse {
  readonly Subscriptions: [];
  readonly Marker: string;
}

interface DescribeResourcePermissionsRequest {
  readonly AuthenticationToken: string;
  readonly ResourceId: string;
  readonly PrincipalId: string;
  readonly Limit: number;
  readonly Marker: string;
}

interface DescribeResourcePermissionsResponse {
  readonly Principals: [];
  readonly Marker: string;
}

interface DescribeRootFoldersRequest {
  readonly AuthenticationToken: string;
  readonly Limit: number;
  readonly Marker: string;
}

interface DescribeRootFoldersResponse {
  readonly Folders: [];
  readonly Marker: string;
}

interface DescribeUsersRequest {
  readonly AuthenticationToken: string;
  readonly OrganizationId: string;
  readonly UserIds: string;
  readonly Query: string;
  readonly Include: string;
  readonly Order: string;
  readonly Sort: string;
  readonly Marker: string;
  readonly Limit: number;
  readonly Fields: string;
}

interface DescribeUsersResponse {
  readonly Users: [];
  readonly TotalNumberOfUsers: number;
  readonly Marker: string;
}

interface DocumentLockedForCommentsException {
  readonly Message: string;
}

interface DocumentMetadata {
  readonly Id: string;
  readonly CreatorId: string;
  readonly ParentFolderId: string;
  readonly CreatedTimestamp: Date;
  readonly ModifiedTimestamp: Date;
  readonly LatestVersionMetadata: DocumentVersionMetadata;
  readonly ResourceState: string;
  readonly Labels: [];
}

interface DocumentVersionMetadata {
  readonly Id: string;
  readonly Name: string;
  readonly ContentType: string;
  readonly Size: number;
  readonly Signature: string;
  readonly Status: string;
  readonly CreatedTimestamp: Date;
  readonly ModifiedTimestamp: Date;
  readonly ContentCreatedTimestamp: Date;
  readonly ContentModifiedTimestamp: Date;
  readonly CreatorId: string;
  readonly Thumbnail: {[key: string]: any};
  readonly Source: {[key: string]: any};
}

interface DraftUploadOutOfSyncException {
  readonly Message: string;
}

interface EntityAlreadyExistsException {
  readonly Message: string;
}

interface EntityNotExistsException {
  readonly Message: string;
  readonly EntityIds: [];
}

interface FailedDependencyException {
  readonly Message: string;
}

interface FolderMetadata {
  readonly Id: string;
  readonly Name: string;
  readonly CreatorId: string;
  readonly ParentFolderId: string;
  readonly CreatedTimestamp: Date;
  readonly ModifiedTimestamp: Date;
  readonly ResourceState: string;
  readonly Signature: string;
  readonly Labels: [];
  readonly Size: number;
  readonly LatestVersionSize: number;
}

interface GetCurrentUserRequest {
  readonly AuthenticationToken: string;
}

interface GetCurrentUserResponse {
  readonly User: User;
}

interface GetDocumentPathRequest {
  readonly AuthenticationToken: string;
  readonly DocumentId: string;
  readonly Limit: number;
  readonly Fields: string;
  readonly Marker: string;
}

interface GetDocumentPathResponse {
  readonly Path: ResourcePath;
}

interface GetDocumentRequest {
  readonly AuthenticationToken: string;
  readonly DocumentId: string;
  readonly IncludeCustomMetadata: boolean;
}

interface GetDocumentResponse {
  readonly Metadata: DocumentMetadata;
  readonly CustomMetadata: {[key: string]: any};
}

interface GetDocumentVersionRequest {
  readonly AuthenticationToken: string;
  readonly DocumentId: string;
  readonly VersionId: string;
  readonly Fields: string;
  readonly IncludeCustomMetadata: boolean;
}

interface GetDocumentVersionResponse {
  readonly Metadata: DocumentVersionMetadata;
  readonly CustomMetadata: {[key: string]: any};
}

interface GetFolderPathRequest {
  readonly AuthenticationToken: string;
  readonly FolderId: string;
  readonly Limit: number;
  readonly Fields: string;
  readonly Marker: string;
}

interface GetFolderPathResponse {
  readonly Path: ResourcePath;
}

interface GetFolderRequest {
  readonly AuthenticationToken: string;
  readonly FolderId: string;
  readonly IncludeCustomMetadata: boolean;
}

interface GetFolderResponse {
  readonly Metadata: FolderMetadata;
  readonly CustomMetadata: {[key: string]: any};
}

interface GetResourcesRequest {
  readonly AuthenticationToken: string;
  readonly UserId: string;
  readonly CollectionType: string;
  readonly Limit: number;
  readonly Marker: string;
}

interface GetResourcesResponse {
  readonly Folders: [];
  readonly Documents: [];
  readonly Marker: string;
}

interface GroupMetadata {
  readonly Id: string;
  readonly Name: string;
}

interface IllegalUserStateException {
  readonly Message: string;
}

interface InitiateDocumentVersionUploadRequest {
  readonly AuthenticationToken: string;
  readonly Id: string;
  readonly Name: string;
  readonly ContentCreatedTimestamp: Date;
  readonly ContentModifiedTimestamp: Date;
  readonly ContentType: string;
  readonly DocumentSizeInBytes: number;
  readonly ParentFolderId: string;
}

interface InitiateDocumentVersionUploadResponse {
  readonly Metadata: DocumentMetadata;
  readonly UploadMetadata: UploadMetadata;
}

interface InvalidArgumentException {
  readonly Message: string;
}

interface InvalidCommentOperationException {
  readonly Message: string;
}

interface InvalidOperationException {
  readonly Message: string;
}

interface InvalidPasswordException {
  readonly Message: string;
}

interface LimitExceededException {
  readonly Message: string;
}

interface NotificationOptions {
  readonly SendEmail: boolean;
  readonly EmailMessage: string;
}

interface Participants {
  readonly Users: [];
  readonly Groups: [];
}

interface PermissionInfo {
  readonly Role: string;
  readonly Type: string;
}

interface Principal {
  readonly Id: string;
  readonly Type: string;
  readonly Roles: [];
}

interface ProhibitedStateException {
  readonly Message: string;
}

interface RemoveAllResourcePermissionsRequest {
  readonly AuthenticationToken: string;
  readonly ResourceId: string;
}

interface RemoveResourcePermissionRequest {
  readonly AuthenticationToken: string;
  readonly ResourceId: string;
  readonly PrincipalId: string;
  readonly PrincipalType: string;
}

interface RequestedEntityTooLargeException {
  readonly Message: string;
}

interface ResourceAlreadyCheckedOutException {
  readonly Message: string;
}

interface ResourceMetadata {
  readonly Type: string;
  readonly Name: string;
  readonly OriginalName: string;
  readonly Id: string;
  readonly VersionId: string;
  readonly Owner: UserMetadata;
  readonly ParentId: string;
}

interface ResourcePath {
  readonly Components: [];
}

interface ResourcePathComponent {
  readonly Id: string;
  readonly Name: string;
}

interface ServiceUnavailableException {
  readonly Message: string;
}

interface SharePrincipal {
  readonly Id: string;
  readonly Type: string;
  readonly Role: string;
}

interface ShareResult {
  readonly PrincipalId: string;
  readonly InviteePrincipalId: string;
  readonly Role: string;
  readonly Status: string;
  readonly ShareId: string;
  readonly StatusMessage: string;
}

interface StorageLimitExceededException {
  readonly Message: string;
}

interface StorageLimitWillExceedException {
  readonly Message: string;
}

interface StorageRuleType {
  readonly StorageAllocatedInBytes: number;
  readonly StorageType: string;
}

interface Subscription {
  readonly SubscriptionId: string;
  readonly EndPoint: string;
  readonly Protocol: string;
}

interface TooManyLabelsException {
  readonly Message: string;
}

interface TooManySubscriptionsException {
  readonly Message: string;
}

interface UnauthorizedOperationException {
}

interface UnauthorizedResourceAccessException {
  readonly Message: string;
}

interface UpdateDocumentRequest {
  readonly AuthenticationToken: string;
  readonly DocumentId: string;
  readonly Name: string;
  readonly ParentFolderId: string;
  readonly ResourceState: string;
}

interface UpdateDocumentVersionRequest {
  readonly AuthenticationToken: string;
  readonly DocumentId: string;
  readonly VersionId: string;
  readonly VersionStatus: string;
}

interface UpdateFolderRequest {
  readonly AuthenticationToken: string;
  readonly FolderId: string;
  readonly Name: string;
  readonly ParentFolderId: string;
  readonly ResourceState: string;
}

interface UpdateUserRequest {
  readonly AuthenticationToken: string;
  readonly UserId: string;
  readonly GivenName: string;
  readonly Surname: string;
  readonly Type: string;
  readonly StorageRule: StorageRuleType;
  readonly TimeZoneId: string;
  readonly Locale: string;
  readonly GrantPoweruserPrivileges: string;
}

interface UpdateUserResponse {
  readonly User: User;
}

interface UploadMetadata {
  readonly UploadUrl: string;
  readonly SignedHeaders: {[key: string]: any};
}

interface User {
  readonly Id: string;
  readonly Username: string;
  readonly EmailAddress: string;
  readonly GivenName: string;
  readonly Surname: string;
  readonly OrganizationId: string;
  readonly RootFolderId: string;
  readonly RecycleBinFolderId: string;
  readonly Status: string;
  readonly Type: string;
  readonly CreatedTimestamp: Date;
  readonly ModifiedTimestamp: Date;
  readonly TimeZoneId: string;
  readonly Locale: string;
  readonly Storage: UserStorageMetadata;
}

interface UserMetadata {
  readonly Id: string;
  readonly Username: string;
  readonly GivenName: string;
  readonly Surname: string;
  readonly EmailAddress: string;
}

interface UserStorageMetadata {
  readonly StorageUtilizedInBytes: number;
  readonly StorageRule: StorageRuleType;
}

