/**
 * STOP. This file is autogenerated. DO NOT EDIT by hand
 */
export interface AddTagsToResource {
  readonly ResourceName: string;
  readonly Tags: [];
}

export interface AuthorizeCacheSecurityGroupIngress {
  readonly CacheSecurityGroupName: string;
  readonly EC2SecurityGroupName: string;
  readonly EC2SecurityGroupOwnerId: string;
}

export interface BatchApplyUpdateAction {
  readonly ReplicationGroupIds?: [];
  readonly CacheClusterIds?: [];
  readonly ServiceUpdateName: string;
}

export interface BatchStopUpdateAction {
  readonly ReplicationGroupIds?: [];
  readonly CacheClusterIds?: [];
  readonly ServiceUpdateName: string;
}

export interface CompleteMigration {
  readonly ReplicationGroupId: string;
  readonly Force?: boolean;
}

export interface CopySnapshot {
  readonly SourceSnapshotName: string;
  readonly TargetSnapshotName: string;
  readonly TargetBucket?: string;
  readonly KmsKeyId?: string;
  readonly Tags?: [];
}

export interface CreateCacheCluster {
  readonly CacheClusterId: string;
  readonly ReplicationGroupId?: string;
  readonly AZMode?: string;
  readonly PreferredAvailabilityZone?: string;
  readonly PreferredAvailabilityZones?: [];
  readonly NumCacheNodes?: number;
  readonly CacheNodeType?: string;
  readonly Engine?: string;
  readonly EngineVersion?: string;
  readonly CacheParameterGroupName?: string;
  readonly CacheSubnetGroupName?: string;
  readonly CacheSecurityGroupNames?: [];
  readonly SecurityGroupIds?: [];
  readonly Tags?: [];
  readonly SnapshotArns?: [];
  readonly SnapshotName?: string;
  readonly PreferredMaintenanceWindow?: string;
  readonly Port?: number;
  readonly NotificationTopicArn?: string;
  readonly AutoMinorVersionUpgrade?: boolean;
  readonly SnapshotRetentionLimit?: number;
  readonly SnapshotWindow?: string;
  readonly AuthToken?: string;
  readonly OutpostMode?: string;
  readonly PreferredOutpostArn?: string;
  readonly PreferredOutpostArns?: [];
  readonly LogDeliveryConfigurations?: [];
}

export interface CreateCacheParameterGroup {
  readonly CacheParameterGroupName: string;
  readonly CacheParameterGroupFamily: string;
  readonly Description: string;
  readonly Tags?: [];
}

export interface CreateCacheSecurityGroup {
  readonly CacheSecurityGroupName: string;
  readonly Description: string;
  readonly Tags?: [];
}

export interface CreateCacheSubnetGroup {
  readonly CacheSubnetGroupName: string;
  readonly CacheSubnetGroupDescription: string;
  readonly SubnetIds: [];
  readonly Tags?: [];
}

export interface CreateGlobalReplicationGroup {
  readonly GlobalReplicationGroupIdSuffix: string;
  readonly GlobalReplicationGroupDescription?: string;
  readonly PrimaryReplicationGroupId: string;
}

export interface CreateReplicationGroup {
  readonly ReplicationGroupId: string;
  readonly ReplicationGroupDescription: string;
  readonly GlobalReplicationGroupId?: string;
  readonly PrimaryClusterId?: string;
  readonly AutomaticFailoverEnabled?: boolean;
  readonly MultiAZEnabled?: boolean;
  readonly NumCacheClusters?: number;
  readonly PreferredCacheClusterAZs?: [];
  readonly NumNodeGroups?: number;
  readonly ReplicasPerNodeGroup?: number;
  readonly NodeGroupConfiguration?: [];
  readonly CacheNodeType?: string;
  readonly Engine?: string;
  readonly EngineVersion?: string;
  readonly CacheParameterGroupName?: string;
  readonly CacheSubnetGroupName?: string;
  readonly CacheSecurityGroupNames?: [];
  readonly SecurityGroupIds?: [];
  readonly Tags?: [];
  readonly SnapshotArns?: [];
  readonly SnapshotName?: string;
  readonly PreferredMaintenanceWindow?: string;
  readonly Port?: number;
  readonly NotificationTopicArn?: string;
  readonly AutoMinorVersionUpgrade?: boolean;
  readonly SnapshotRetentionLimit?: number;
  readonly SnapshotWindow?: string;
  readonly AuthToken?: string;
  readonly TransitEncryptionEnabled?: boolean;
  readonly AtRestEncryptionEnabled?: boolean;
  readonly KmsKeyId?: string;
  readonly UserGroupIds?: [];
  readonly LogDeliveryConfigurations?: [];
  readonly DataTieringEnabled?: boolean;
}

export interface CreateSnapshot {
  readonly ReplicationGroupId?: string;
  readonly CacheClusterId?: string;
  readonly SnapshotName: string;
  readonly KmsKeyId?: string;
  readonly Tags?: [];
}

export interface CreateUser {
  readonly UserId: string;
  readonly UserName: string;
  readonly Engine: string;
  readonly Passwords?: [];
  readonly AccessString: string;
  readonly NoPasswordRequired?: boolean;
  readonly Tags?: [];
}

export interface CreateUserGroup {
  readonly UserGroupId: string;
  readonly Engine: string;
  readonly UserIds?: [];
  readonly Tags?: [];
}

export interface DecreaseNodeGroupsInGlobalReplicationGroup {
  readonly GlobalReplicationGroupId: string;
  readonly NodeGroupCount: number;
  readonly GlobalNodeGroupsToRemove?: [];
  readonly GlobalNodeGroupsToRetain?: [];
  readonly ApplyImmediately: boolean;
}

export interface DecreaseReplicaCount {
  readonly ReplicationGroupId: string;
  readonly NewReplicaCount?: number;
  readonly ReplicaConfiguration?: [];
  readonly ReplicasToRemove?: [];
  readonly ApplyImmediately: boolean;
}

export interface DeleteCacheCluster {
  readonly CacheClusterId: string;
  readonly FinalSnapshotIdentifier?: string;
}

export interface DeleteCacheParameterGroup {
  readonly CacheParameterGroupName: string;
}

export interface DeleteCacheSecurityGroup {
  readonly CacheSecurityGroupName: string;
}

export interface DeleteCacheSubnetGroup {
  readonly CacheSubnetGroupName: string;
}

export interface DeleteGlobalReplicationGroup {
  readonly GlobalReplicationGroupId: string;
  readonly RetainPrimaryReplicationGroup: boolean;
}

export interface DeleteReplicationGroup {
  readonly ReplicationGroupId: string;
  readonly RetainPrimaryCluster?: boolean;
  readonly FinalSnapshotIdentifier?: string;
}

export interface DeleteSnapshot {
  readonly SnapshotName: string;
}

export interface DeleteUser {
  readonly UserId: string;
}

export interface DeleteUserGroup {
  readonly UserGroupId: string;
}

export interface DescribeCacheClusters {
  readonly CacheClusterId?: string;
  readonly MaxRecords?: number;
  readonly Marker?: string;
  readonly ShowCacheNodeInfo?: boolean;
  readonly ShowCacheClustersNotInReplicationGroups?: boolean;
}

export interface DescribeCacheEngineVersions {
  readonly Engine?: string;
  readonly EngineVersion?: string;
  readonly CacheParameterGroupFamily?: string;
  readonly MaxRecords?: number;
  readonly Marker?: string;
  readonly DefaultOnly?: boolean;
}

export interface DescribeCacheParameterGroups {
  readonly CacheParameterGroupName?: string;
  readonly MaxRecords?: number;
  readonly Marker?: string;
}

export interface DescribeCacheParameters {
  readonly CacheParameterGroupName: string;
  readonly Source?: string;
  readonly MaxRecords?: number;
  readonly Marker?: string;
}

export interface DescribeCacheSecurityGroups {
  readonly CacheSecurityGroupName?: string;
  readonly MaxRecords?: number;
  readonly Marker?: string;
}

export interface DescribeCacheSubnetGroups {
  readonly CacheSubnetGroupName?: string;
  readonly MaxRecords?: number;
  readonly Marker?: string;
}

export interface DescribeEngineDefaultParameters {
  readonly CacheParameterGroupFamily: string;
  readonly MaxRecords?: number;
  readonly Marker?: string;
}

export interface DescribeEvents {
  readonly SourceIdentifier?: string;
  readonly SourceType?: string;
  readonly StartTime?: Date;
  readonly EndTime?: Date;
  readonly Duration?: number;
  readonly MaxRecords?: number;
  readonly Marker?: string;
}

export interface DescribeGlobalReplicationGroups {
  readonly GlobalReplicationGroupId?: string;
  readonly MaxRecords?: number;
  readonly Marker?: string;
  readonly ShowMemberInfo?: boolean;
}

export interface DescribeReplicationGroups {
  readonly ReplicationGroupId?: string;
  readonly MaxRecords?: number;
  readonly Marker?: string;
}

export interface DescribeReservedCacheNodes {
  readonly ReservedCacheNodeId?: string;
  readonly ReservedCacheNodesOfferingId?: string;
  readonly CacheNodeType?: string;
  readonly Duration?: string;
  readonly ProductDescription?: string;
  readonly OfferingType?: string;
  readonly MaxRecords?: number;
  readonly Marker?: string;
}

export interface DescribeReservedCacheNodesOfferings {
  readonly ReservedCacheNodesOfferingId?: string;
  readonly CacheNodeType?: string;
  readonly Duration?: string;
  readonly ProductDescription?: string;
  readonly OfferingType?: string;
  readonly MaxRecords?: number;
  readonly Marker?: string;
}

export interface DescribeServiceUpdates {
  readonly ServiceUpdateName?: string;
  readonly ServiceUpdateStatus?: [];
  readonly MaxRecords?: number;
  readonly Marker?: string;
}

export interface DescribeSnapshots {
  readonly ReplicationGroupId?: string;
  readonly CacheClusterId?: string;
  readonly SnapshotName?: string;
  readonly SnapshotSource?: string;
  readonly Marker?: string;
  readonly MaxRecords?: number;
  readonly ShowNodeGroupConfig?: boolean;
}

export interface DescribeUpdateActions {
  readonly ServiceUpdateName?: string;
  readonly ReplicationGroupIds?: [];
  readonly CacheClusterIds?: [];
  readonly Engine?: string;
  readonly ServiceUpdateStatus?: [];
  readonly ServiceUpdateTimeRange?: TimeRangeFilter;
  readonly UpdateActionStatus?: [];
  readonly ShowNodeLevelUpdateStatus?: boolean;
  readonly MaxRecords?: number;
  readonly Marker?: string;
}

export interface DescribeUserGroups {
  readonly UserGroupId?: string;
  readonly MaxRecords?: number;
  readonly Marker?: string;
}

export interface DescribeUsers {
  readonly Engine?: string;
  readonly UserId?: string;
  readonly Filters?: [];
  readonly MaxRecords?: number;
  readonly Marker?: string;
}

export interface DisassociateGlobalReplicationGroup {
  readonly GlobalReplicationGroupId: string;
  readonly ReplicationGroupId: string;
  readonly ReplicationGroupRegion: string;
}

export interface FailoverGlobalReplicationGroup {
  readonly GlobalReplicationGroupId: string;
  readonly PrimaryRegion: string;
  readonly PrimaryReplicationGroupId: string;
}

export interface IncreaseNodeGroupsInGlobalReplicationGroup {
  readonly GlobalReplicationGroupId: string;
  readonly NodeGroupCount: number;
  readonly RegionalConfigurations?: [];
  readonly ApplyImmediately: boolean;
}

export interface IncreaseReplicaCount {
  readonly ReplicationGroupId: string;
  readonly NewReplicaCount?: number;
  readonly ReplicaConfiguration?: [];
  readonly ApplyImmediately: boolean;
}

export interface ListAllowedNodeTypeModifications {
  readonly CacheClusterId?: string;
  readonly ReplicationGroupId?: string;
}

export interface ListTagsForResource {
  readonly ResourceName: string;
}

export interface ModifyCacheCluster {
  readonly CacheClusterId: string;
  readonly NumCacheNodes?: number;
  readonly CacheNodeIdsToRemove?: [];
  readonly AZMode?: string;
  readonly NewAvailabilityZones?: [];
  readonly CacheSecurityGroupNames?: [];
  readonly SecurityGroupIds?: [];
  readonly PreferredMaintenanceWindow?: string;
  readonly NotificationTopicArn?: string;
  readonly CacheParameterGroupName?: string;
  readonly NotificationTopicStatus?: string;
  readonly ApplyImmediately?: boolean;
  readonly EngineVersion?: string;
  readonly AutoMinorVersionUpgrade?: boolean;
  readonly SnapshotRetentionLimit?: number;
  readonly SnapshotWindow?: string;
  readonly CacheNodeType?: string;
  readonly AuthToken?: string;
  readonly AuthTokenUpdateStrategy?: string;
  readonly LogDeliveryConfigurations?: [];
}

export interface ModifyCacheParameterGroup {
  readonly CacheParameterGroupName: string;
  readonly ParameterNameValues: [];
}

export interface ModifyCacheSubnetGroup {
  readonly CacheSubnetGroupName: string;
  readonly CacheSubnetGroupDescription?: string;
  readonly SubnetIds?: [];
}

export interface ModifyGlobalReplicationGroup {
  readonly GlobalReplicationGroupId: string;
  readonly ApplyImmediately: boolean;
  readonly CacheNodeType?: string;
  readonly EngineVersion?: string;
  readonly CacheParameterGroupName?: string;
  readonly GlobalReplicationGroupDescription?: string;
  readonly AutomaticFailoverEnabled?: boolean;
}

export interface ModifyReplicationGroup {
  readonly ReplicationGroupId: string;
  readonly ReplicationGroupDescription?: string;
  readonly PrimaryClusterId?: string;
  readonly SnapshottingClusterId?: string;
  readonly AutomaticFailoverEnabled?: boolean;
  readonly MultiAZEnabled?: boolean;
  readonly NodeGroupId?: string;
  readonly CacheSecurityGroupNames?: [];
  readonly SecurityGroupIds?: [];
  readonly PreferredMaintenanceWindow?: string;
  readonly NotificationTopicArn?: string;
  readonly CacheParameterGroupName?: string;
  readonly NotificationTopicStatus?: string;
  readonly ApplyImmediately?: boolean;
  readonly EngineVersion?: string;
  readonly AutoMinorVersionUpgrade?: boolean;
  readonly SnapshotRetentionLimit?: number;
  readonly SnapshotWindow?: string;
  readonly CacheNodeType?: string;
  readonly AuthToken?: string;
  readonly AuthTokenUpdateStrategy?: string;
  readonly UserGroupIdsToAdd?: [];
  readonly UserGroupIdsToRemove?: [];
  readonly RemoveUserGroups?: boolean;
  readonly LogDeliveryConfigurations?: [];
}

export interface ModifyReplicationGroupShardConfiguration {
  readonly ReplicationGroupId: string;
  readonly NodeGroupCount: number;
  readonly ApplyImmediately: boolean;
  readonly ReshardingConfiguration?: [];
  readonly NodeGroupsToRemove?: [];
  readonly NodeGroupsToRetain?: [];
}

export interface ModifyUser {
  readonly UserId: string;
  readonly AccessString?: string;
  readonly AppendAccessString?: string;
  readonly Passwords?: [];
  readonly NoPasswordRequired?: boolean;
}

export interface ModifyUserGroup {
  readonly UserGroupId: string;
  readonly UserIdsToAdd?: [];
  readonly UserIdsToRemove?: [];
}

export interface PurchaseReservedCacheNodesOffering {
  readonly ReservedCacheNodesOfferingId: string;
  readonly ReservedCacheNodeId?: string;
  readonly CacheNodeCount?: number;
  readonly Tags?: [];
}

export interface RebalanceSlotsInGlobalReplicationGroup {
  readonly GlobalReplicationGroupId: string;
  readonly ApplyImmediately: boolean;
}

export interface RebootCacheCluster {
  readonly CacheClusterId: string;
  readonly CacheNodeIdsToReboot: [];
}

export interface RemoveTagsFromResource {
  readonly ResourceName: string;
  readonly TagKeys: [];
}

export interface ResetCacheParameterGroup {
  readonly CacheParameterGroupName: string;
  readonly ResetAllParameters?: boolean;
  readonly ParameterNameValues?: [];
}

export interface RevokeCacheSecurityGroupIngress {
  readonly CacheSecurityGroupName: string;
  readonly EC2SecurityGroupName: string;
  readonly EC2SecurityGroupOwnerId: string;
}

export interface StartMigration {
  readonly ReplicationGroupId: string;
  readonly CustomerNodeEndpointList: [];
}

export interface TestFailover {
  readonly ReplicationGroupId: string;
  readonly NodeGroupId: string;
}

export interface APICallRateForCustomerExceededFault {
}

export interface AddTagsToResourceMessage {
  readonly ResourceName: string;
  readonly Tags: [];
}

export interface AllowedNodeTypeModificationsMessage {
  readonly ScaleUpModifications?: [];
  readonly ScaleDownModifications?: [];
}

export interface Authentication {
  readonly Type?: string;
  readonly PasswordCount?: number;
}

export interface AuthorizationAlreadyExistsFault {
}

export interface AuthorizationNotFoundFault {
}

export interface AuthorizeCacheSecurityGroupIngressMessage {
  readonly CacheSecurityGroupName: string;
  readonly EC2SecurityGroupName: string;
  readonly EC2SecurityGroupOwnerId: string;
}

export interface AuthorizeCacheSecurityGroupIngressResult {
  readonly CacheSecurityGroup?: CacheSecurityGroup;
}

export interface AvailabilityZone {
  readonly Name?: string;
}

export interface BatchApplyUpdateActionMessage {
  readonly ReplicationGroupIds?: [];
  readonly CacheClusterIds?: [];
  readonly ServiceUpdateName: string;
}

export interface BatchStopUpdateActionMessage {
  readonly ReplicationGroupIds?: [];
  readonly CacheClusterIds?: [];
  readonly ServiceUpdateName: string;
}

export interface CacheCluster {
  readonly CacheClusterId?: string;
  readonly ConfigurationEndpoint?: Endpoint;
  readonly ClientDownloadLandingPage?: string;
  readonly CacheNodeType?: string;
  readonly Engine?: string;
  readonly EngineVersion?: string;
  readonly CacheClusterStatus?: string;
  readonly NumCacheNodes?: number;
  readonly PreferredAvailabilityZone?: string;
  readonly PreferredOutpostArn?: string;
  readonly CacheClusterCreateTime?: Date;
  readonly PreferredMaintenanceWindow?: string;
  readonly PendingModifiedValues?: PendingModifiedValues;
  readonly NotificationConfiguration?: NotificationConfiguration;
  readonly CacheSecurityGroups?: [];
  readonly CacheParameterGroup?: CacheParameterGroupStatus;
  readonly CacheSubnetGroupName?: string;
  readonly CacheNodes?: [];
  readonly AutoMinorVersionUpgrade?: boolean;
  readonly SecurityGroups?: [];
  readonly ReplicationGroupId?: string;
  readonly SnapshotRetentionLimit?: number;
  readonly SnapshotWindow?: string;
  readonly AuthTokenEnabled?: boolean;
  readonly AuthTokenLastModifiedDate?: Date;
  readonly TransitEncryptionEnabled?: boolean;
  readonly AtRestEncryptionEnabled?: boolean;
  readonly ARN?: string;
  readonly ReplicationGroupLogDeliveryEnabled?: boolean;
  readonly LogDeliveryConfigurations?: [];
}

export interface CacheClusterAlreadyExistsFault {
}

export interface CacheClusterMessage {
  readonly Marker?: string;
  readonly CacheClusters?: [];
}

export interface CacheClusterNotFoundFault {
}

export interface CacheEngineVersion {
  readonly Engine?: string;
  readonly EngineVersion?: string;
  readonly CacheParameterGroupFamily?: string;
  readonly CacheEngineDescription?: string;
  readonly CacheEngineVersionDescription?: string;
}

export interface CacheEngineVersionMessage {
  readonly Marker?: string;
  readonly CacheEngineVersions?: [];
}

export interface CacheNode {
  readonly CacheNodeId?: string;
  readonly CacheNodeStatus?: string;
  readonly CacheNodeCreateTime?: Date;
  readonly Endpoint?: Endpoint;
  readonly ParameterGroupStatus?: string;
  readonly SourceCacheNodeId?: string;
  readonly CustomerAvailabilityZone?: string;
  readonly CustomerOutpostArn?: string;
}

export interface CacheNodeTypeSpecificParameter {
  readonly ParameterName?: string;
  readonly Description?: string;
  readonly Source?: string;
  readonly DataType?: string;
  readonly AllowedValues?: string;
  readonly IsModifiable?: boolean;
  readonly MinimumEngineVersion?: string;
  readonly CacheNodeTypeSpecificValues?: [];
  readonly ChangeType?: string;
}

export interface CacheNodeTypeSpecificValue {
  readonly CacheNodeType?: string;
  readonly Value?: string;
}

export interface CacheNodeUpdateStatus {
  readonly CacheNodeId?: string;
  readonly NodeUpdateStatus?: string;
  readonly NodeDeletionDate?: Date;
  readonly NodeUpdateStartDate?: Date;
  readonly NodeUpdateEndDate?: Date;
  readonly NodeUpdateInitiatedBy?: string;
  readonly NodeUpdateInitiatedDate?: Date;
  readonly NodeUpdateStatusModifiedDate?: Date;
}

export interface CacheParameterGroup {
  readonly CacheParameterGroupName?: string;
  readonly CacheParameterGroupFamily?: string;
  readonly Description?: string;
  readonly IsGlobal?: boolean;
  readonly ARN?: string;
}

export interface CacheParameterGroupAlreadyExistsFault {
}

export interface CacheParameterGroupDetails {
  readonly Marker?: string;
  readonly Parameters?: [];
  readonly CacheNodeTypeSpecificParameters?: [];
}

export interface CacheParameterGroupNameMessage {
  readonly CacheParameterGroupName?: string;
}

export interface CacheParameterGroupNotFoundFault {
}

export interface CacheParameterGroupQuotaExceededFault {
}

export interface CacheParameterGroupStatus {
  readonly CacheParameterGroupName?: string;
  readonly ParameterApplyStatus?: string;
  readonly CacheNodeIdsToReboot?: [];
}

export interface CacheParameterGroupsMessage {
  readonly Marker?: string;
  readonly CacheParameterGroups?: [];
}

export interface CacheSecurityGroup {
  readonly OwnerId?: string;
  readonly CacheSecurityGroupName?: string;
  readonly Description?: string;
  readonly EC2SecurityGroups?: [];
  readonly ARN?: string;
}

export interface CacheSecurityGroupAlreadyExistsFault {
}

export interface CacheSecurityGroupMembership {
  readonly CacheSecurityGroupName?: string;
  readonly Status?: string;
}

export interface CacheSecurityGroupMessage {
  readonly Marker?: string;
  readonly CacheSecurityGroups?: [];
}

export interface CacheSecurityGroupNotFoundFault {
}

export interface CacheSecurityGroupQuotaExceededFault {
}

export interface CacheSubnetGroup {
  readonly CacheSubnetGroupName?: string;
  readonly CacheSubnetGroupDescription?: string;
  readonly VpcId?: string;
  readonly Subnets?: [];
  readonly ARN?: string;
}

export interface CacheSubnetGroupAlreadyExistsFault {
}

export interface CacheSubnetGroupInUse {
}

export interface CacheSubnetGroupMessage {
  readonly Marker?: string;
  readonly CacheSubnetGroups?: [];
}

export interface CacheSubnetGroupNotFoundFault {
}

export interface CacheSubnetGroupQuotaExceededFault {
}

export interface CacheSubnetQuotaExceededFault {
}

export interface CloudWatchLogsDestinationDetails {
  readonly LogGroup?: string;
}

export interface ClusterQuotaForCustomerExceededFault {
}

export interface CompleteMigrationMessage {
  readonly ReplicationGroupId: string;
  readonly Force?: boolean;
}

export interface CompleteMigrationResponse {
  readonly ReplicationGroup?: ReplicationGroup;
}

export interface ConfigureShard {
  readonly NodeGroupId: string;
  readonly NewReplicaCount: number;
  readonly PreferredAvailabilityZones?: [];
  readonly PreferredOutpostArns?: [];
}

export interface CopySnapshotMessage {
  readonly SourceSnapshotName: string;
  readonly TargetSnapshotName: string;
  readonly TargetBucket?: string;
  readonly KmsKeyId?: string;
  readonly Tags?: [];
}

export interface CopySnapshotResult {
  readonly Snapshot?: Snapshot;
}

export interface CreateCacheClusterMessage {
  readonly CacheClusterId: string;
  readonly ReplicationGroupId?: string;
  readonly AZMode?: string;
  readonly PreferredAvailabilityZone?: string;
  readonly PreferredAvailabilityZones?: [];
  readonly NumCacheNodes?: number;
  readonly CacheNodeType?: string;
  readonly Engine?: string;
  readonly EngineVersion?: string;
  readonly CacheParameterGroupName?: string;
  readonly CacheSubnetGroupName?: string;
  readonly CacheSecurityGroupNames?: [];
  readonly SecurityGroupIds?: [];
  readonly Tags?: [];
  readonly SnapshotArns?: [];
  readonly SnapshotName?: string;
  readonly PreferredMaintenanceWindow?: string;
  readonly Port?: number;
  readonly NotificationTopicArn?: string;
  readonly AutoMinorVersionUpgrade?: boolean;
  readonly SnapshotRetentionLimit?: number;
  readonly SnapshotWindow?: string;
  readonly AuthToken?: string;
  readonly OutpostMode?: string;
  readonly PreferredOutpostArn?: string;
  readonly PreferredOutpostArns?: [];
  readonly LogDeliveryConfigurations?: [];
}

export interface CreateCacheClusterResult {
  readonly CacheCluster?: CacheCluster;
}

export interface CreateCacheParameterGroupMessage {
  readonly CacheParameterGroupName: string;
  readonly CacheParameterGroupFamily: string;
  readonly Description: string;
  readonly Tags?: [];
}

export interface CreateCacheParameterGroupResult {
  readonly CacheParameterGroup?: CacheParameterGroup;
}

export interface CreateCacheSecurityGroupMessage {
  readonly CacheSecurityGroupName: string;
  readonly Description: string;
  readonly Tags?: [];
}

export interface CreateCacheSecurityGroupResult {
  readonly CacheSecurityGroup?: CacheSecurityGroup;
}

export interface CreateCacheSubnetGroupMessage {
  readonly CacheSubnetGroupName: string;
  readonly CacheSubnetGroupDescription: string;
  readonly SubnetIds: [];
  readonly Tags?: [];
}

export interface CreateCacheSubnetGroupResult {
  readonly CacheSubnetGroup?: CacheSubnetGroup;
}

export interface CreateGlobalReplicationGroupMessage {
  readonly GlobalReplicationGroupIdSuffix: string;
  readonly GlobalReplicationGroupDescription?: string;
  readonly PrimaryReplicationGroupId: string;
}

export interface CreateGlobalReplicationGroupResult {
  readonly GlobalReplicationGroup?: GlobalReplicationGroup;
}

export interface CreateReplicationGroupMessage {
  readonly ReplicationGroupId: string;
  readonly ReplicationGroupDescription: string;
  readonly GlobalReplicationGroupId?: string;
  readonly PrimaryClusterId?: string;
  readonly AutomaticFailoverEnabled?: boolean;
  readonly MultiAZEnabled?: boolean;
  readonly NumCacheClusters?: number;
  readonly PreferredCacheClusterAZs?: [];
  readonly NumNodeGroups?: number;
  readonly ReplicasPerNodeGroup?: number;
  readonly NodeGroupConfiguration?: [];
  readonly CacheNodeType?: string;
  readonly Engine?: string;
  readonly EngineVersion?: string;
  readonly CacheParameterGroupName?: string;
  readonly CacheSubnetGroupName?: string;
  readonly CacheSecurityGroupNames?: [];
  readonly SecurityGroupIds?: [];
  readonly Tags?: [];
  readonly SnapshotArns?: [];
  readonly SnapshotName?: string;
  readonly PreferredMaintenanceWindow?: string;
  readonly Port?: number;
  readonly NotificationTopicArn?: string;
  readonly AutoMinorVersionUpgrade?: boolean;
  readonly SnapshotRetentionLimit?: number;
  readonly SnapshotWindow?: string;
  readonly AuthToken?: string;
  readonly TransitEncryptionEnabled?: boolean;
  readonly AtRestEncryptionEnabled?: boolean;
  readonly KmsKeyId?: string;
  readonly UserGroupIds?: [];
  readonly LogDeliveryConfigurations?: [];
  readonly DataTieringEnabled?: boolean;
}

export interface CreateReplicationGroupResult {
  readonly ReplicationGroup?: ReplicationGroup;
}

export interface CreateSnapshotMessage {
  readonly ReplicationGroupId?: string;
  readonly CacheClusterId?: string;
  readonly SnapshotName: string;
  readonly KmsKeyId?: string;
  readonly Tags?: [];
}

export interface CreateSnapshotResult {
  readonly Snapshot?: Snapshot;
}

export interface CreateUserGroupMessage {
  readonly UserGroupId: string;
  readonly Engine: string;
  readonly UserIds?: [];
  readonly Tags?: [];
}

export interface CreateUserMessage {
  readonly UserId: string;
  readonly UserName: string;
  readonly Engine: string;
  readonly Passwords?: [];
  readonly AccessString: string;
  readonly NoPasswordRequired?: boolean;
  readonly Tags?: [];
}

export interface CustomerNodeEndpoint {
  readonly Address?: string;
  readonly Port?: number;
}

export interface DecreaseNodeGroupsInGlobalReplicationGroupMessage {
  readonly GlobalReplicationGroupId: string;
  readonly NodeGroupCount: number;
  readonly GlobalNodeGroupsToRemove?: [];
  readonly GlobalNodeGroupsToRetain?: [];
  readonly ApplyImmediately: boolean;
}

export interface DecreaseNodeGroupsInGlobalReplicationGroupResult {
  readonly GlobalReplicationGroup?: GlobalReplicationGroup;
}

export interface DecreaseReplicaCountMessage {
  readonly ReplicationGroupId: string;
  readonly NewReplicaCount?: number;
  readonly ReplicaConfiguration?: [];
  readonly ReplicasToRemove?: [];
  readonly ApplyImmediately: boolean;
}

export interface DecreaseReplicaCountResult {
  readonly ReplicationGroup?: ReplicationGroup;
}

export interface DefaultUserAssociatedToUserGroupFault {
}

export interface DefaultUserRequired {
}

export interface DeleteCacheClusterMessage {
  readonly CacheClusterId: string;
  readonly FinalSnapshotIdentifier?: string;
}

export interface DeleteCacheClusterResult {
  readonly CacheCluster?: CacheCluster;
}

export interface DeleteCacheParameterGroupMessage {
  readonly CacheParameterGroupName: string;
}

export interface DeleteCacheSecurityGroupMessage {
  readonly CacheSecurityGroupName: string;
}

export interface DeleteCacheSubnetGroupMessage {
  readonly CacheSubnetGroupName: string;
}

export interface DeleteGlobalReplicationGroupMessage {
  readonly GlobalReplicationGroupId: string;
  readonly RetainPrimaryReplicationGroup: boolean;
}

export interface DeleteGlobalReplicationGroupResult {
  readonly GlobalReplicationGroup?: GlobalReplicationGroup;
}

export interface DeleteReplicationGroupMessage {
  readonly ReplicationGroupId: string;
  readonly RetainPrimaryCluster?: boolean;
  readonly FinalSnapshotIdentifier?: string;
}

export interface DeleteReplicationGroupResult {
  readonly ReplicationGroup?: ReplicationGroup;
}

export interface DeleteSnapshotMessage {
  readonly SnapshotName: string;
}

export interface DeleteSnapshotResult {
  readonly Snapshot?: Snapshot;
}

export interface DeleteUserGroupMessage {
  readonly UserGroupId: string;
}

export interface DeleteUserMessage {
  readonly UserId: string;
}

export interface DescribeCacheClustersMessage {
  readonly CacheClusterId?: string;
  readonly MaxRecords?: number;
  readonly Marker?: string;
  readonly ShowCacheNodeInfo?: boolean;
  readonly ShowCacheClustersNotInReplicationGroups?: boolean;
}

export interface DescribeCacheEngineVersionsMessage {
  readonly Engine?: string;
  readonly EngineVersion?: string;
  readonly CacheParameterGroupFamily?: string;
  readonly MaxRecords?: number;
  readonly Marker?: string;
  readonly DefaultOnly?: boolean;
}

export interface DescribeCacheParameterGroupsMessage {
  readonly CacheParameterGroupName?: string;
  readonly MaxRecords?: number;
  readonly Marker?: string;
}

export interface DescribeCacheParametersMessage {
  readonly CacheParameterGroupName: string;
  readonly Source?: string;
  readonly MaxRecords?: number;
  readonly Marker?: string;
}

export interface DescribeCacheSecurityGroupsMessage {
  readonly CacheSecurityGroupName?: string;
  readonly MaxRecords?: number;
  readonly Marker?: string;
}

export interface DescribeCacheSubnetGroupsMessage {
  readonly CacheSubnetGroupName?: string;
  readonly MaxRecords?: number;
  readonly Marker?: string;
}

export interface DescribeEngineDefaultParametersMessage {
  readonly CacheParameterGroupFamily: string;
  readonly MaxRecords?: number;
  readonly Marker?: string;
}

export interface DescribeEngineDefaultParametersResult {
  readonly EngineDefaults?: EngineDefaults;
}

export interface DescribeEventsMessage {
  readonly SourceIdentifier?: string;
  readonly SourceType?: string;
  readonly StartTime?: Date;
  readonly EndTime?: Date;
  readonly Duration?: number;
  readonly MaxRecords?: number;
  readonly Marker?: string;
}

export interface DescribeGlobalReplicationGroupsMessage {
  readonly GlobalReplicationGroupId?: string;
  readonly MaxRecords?: number;
  readonly Marker?: string;
  readonly ShowMemberInfo?: boolean;
}

export interface DescribeGlobalReplicationGroupsResult {
  readonly Marker?: string;
  readonly GlobalReplicationGroups?: [];
}

export interface DescribeReplicationGroupsMessage {
  readonly ReplicationGroupId?: string;
  readonly MaxRecords?: number;
  readonly Marker?: string;
}

export interface DescribeReservedCacheNodesMessage {
  readonly ReservedCacheNodeId?: string;
  readonly ReservedCacheNodesOfferingId?: string;
  readonly CacheNodeType?: string;
  readonly Duration?: string;
  readonly ProductDescription?: string;
  readonly OfferingType?: string;
  readonly MaxRecords?: number;
  readonly Marker?: string;
}

export interface DescribeReservedCacheNodesOfferingsMessage {
  readonly ReservedCacheNodesOfferingId?: string;
  readonly CacheNodeType?: string;
  readonly Duration?: string;
  readonly ProductDescription?: string;
  readonly OfferingType?: string;
  readonly MaxRecords?: number;
  readonly Marker?: string;
}

export interface DescribeServiceUpdatesMessage {
  readonly ServiceUpdateName?: string;
  readonly ServiceUpdateStatus?: [];
  readonly MaxRecords?: number;
  readonly Marker?: string;
}

export interface DescribeSnapshotsListMessage {
  readonly Marker?: string;
  readonly Snapshots?: [];
}

export interface DescribeSnapshotsMessage {
  readonly ReplicationGroupId?: string;
  readonly CacheClusterId?: string;
  readonly SnapshotName?: string;
  readonly SnapshotSource?: string;
  readonly Marker?: string;
  readonly MaxRecords?: number;
  readonly ShowNodeGroupConfig?: boolean;
}

export interface DescribeUpdateActionsMessage {
  readonly ServiceUpdateName?: string;
  readonly ReplicationGroupIds?: [];
  readonly CacheClusterIds?: [];
  readonly Engine?: string;
  readonly ServiceUpdateStatus?: [];
  readonly ServiceUpdateTimeRange?: TimeRangeFilter;
  readonly UpdateActionStatus?: [];
  readonly ShowNodeLevelUpdateStatus?: boolean;
  readonly MaxRecords?: number;
  readonly Marker?: string;
}

export interface DescribeUserGroupsMessage {
  readonly UserGroupId?: string;
  readonly MaxRecords?: number;
  readonly Marker?: string;
}

export interface DescribeUserGroupsResult {
  readonly UserGroups?: [];
  readonly Marker?: string;
}

export interface DescribeUsersMessage {
  readonly Engine?: string;
  readonly UserId?: string;
  readonly Filters?: [];
  readonly MaxRecords?: number;
  readonly Marker?: string;
}

export interface DescribeUsersResult {
  readonly Users?: [];
  readonly Marker?: string;
}

export interface DestinationDetails {
  readonly CloudWatchLogsDetails?: CloudWatchLogsDestinationDetails;
  readonly KinesisFirehoseDetails?: KinesisFirehoseDestinationDetails;
}

export interface DisassociateGlobalReplicationGroupMessage {
  readonly GlobalReplicationGroupId: string;
  readonly ReplicationGroupId: string;
  readonly ReplicationGroupRegion: string;
}

export interface DisassociateGlobalReplicationGroupResult {
  readonly GlobalReplicationGroup?: GlobalReplicationGroup;
}

export interface DuplicateUserNameFault {
}

export interface EC2SecurityGroup {
  readonly Status?: string;
  readonly EC2SecurityGroupName?: string;
  readonly EC2SecurityGroupOwnerId?: string;
}

export interface Endpoint {
  readonly Address?: string;
  readonly Port?: number;
}

export interface EngineDefaults {
  readonly CacheParameterGroupFamily?: string;
  readonly Marker?: string;
  readonly Parameters?: [];
  readonly CacheNodeTypeSpecificParameters?: [];
}

export interface Event {
  readonly SourceIdentifier?: string;
  readonly SourceType?: string;
  readonly Message?: string;
  readonly Date?: Date;
}

export interface EventsMessage {
  readonly Marker?: string;
  readonly Events?: [];
}

export interface FailoverGlobalReplicationGroupMessage {
  readonly GlobalReplicationGroupId: string;
  readonly PrimaryRegion: string;
  readonly PrimaryReplicationGroupId: string;
}

export interface FailoverGlobalReplicationGroupResult {
  readonly GlobalReplicationGroup?: GlobalReplicationGroup;
}

export interface Filter {
  readonly Name: string;
  readonly Values: [];
}

export interface GlobalNodeGroup {
  readonly GlobalNodeGroupId?: string;
  readonly Slots?: string;
}

export interface GlobalReplicationGroup {
  readonly GlobalReplicationGroupId?: string;
  readonly GlobalReplicationGroupDescription?: string;
  readonly Status?: string;
  readonly CacheNodeType?: string;
  readonly Engine?: string;
  readonly EngineVersion?: string;
  readonly Members?: [];
  readonly ClusterEnabled?: boolean;
  readonly GlobalNodeGroups?: [];
  readonly AuthTokenEnabled?: boolean;
  readonly TransitEncryptionEnabled?: boolean;
  readonly AtRestEncryptionEnabled?: boolean;
  readonly ARN?: string;
}

export interface GlobalReplicationGroupAlreadyExistsFault {
}

export interface GlobalReplicationGroupInfo {
  readonly GlobalReplicationGroupId?: string;
  readonly GlobalReplicationGroupMemberRole?: string;
}

export interface GlobalReplicationGroupMember {
  readonly ReplicationGroupId?: string;
  readonly ReplicationGroupRegion?: string;
  readonly Role?: string;
  readonly AutomaticFailover?: string;
  readonly Status?: string;
}

export interface GlobalReplicationGroupNotFoundFault {
}

export interface IncreaseNodeGroupsInGlobalReplicationGroupMessage {
  readonly GlobalReplicationGroupId: string;
  readonly NodeGroupCount: number;
  readonly RegionalConfigurations?: [];
  readonly ApplyImmediately: boolean;
}

export interface IncreaseNodeGroupsInGlobalReplicationGroupResult {
  readonly GlobalReplicationGroup?: GlobalReplicationGroup;
}

export interface IncreaseReplicaCountMessage {
  readonly ReplicationGroupId: string;
  readonly NewReplicaCount?: number;
  readonly ReplicaConfiguration?: [];
  readonly ApplyImmediately: boolean;
}

export interface IncreaseReplicaCountResult {
  readonly ReplicationGroup?: ReplicationGroup;
}

export interface InsufficientCacheClusterCapacityFault {
}

export interface InvalidARNFault {
}

export interface InvalidCacheClusterStateFault {
}

export interface InvalidCacheParameterGroupStateFault {
}

export interface InvalidCacheSecurityGroupStateFault {
}

export interface InvalidGlobalReplicationGroupStateFault {
}

export interface InvalidKMSKeyFault {
}

export interface InvalidParameterCombinationException {
  readonly message?: string;
}

export interface InvalidParameterValueException {
  readonly message?: string;
}

export interface InvalidReplicationGroupStateFault {
}

export interface InvalidSnapshotStateFault {
}

export interface InvalidSubnet {
}

export interface InvalidUserGroupStateFault {
}

export interface InvalidUserStateFault {
}

export interface InvalidVPCNetworkStateFault {
}

export interface KinesisFirehoseDestinationDetails {
  readonly DeliveryStream?: string;
}

export interface ListAllowedNodeTypeModificationsMessage {
  readonly CacheClusterId?: string;
  readonly ReplicationGroupId?: string;
}

export interface ListTagsForResourceMessage {
  readonly ResourceName: string;
}

export interface LogDeliveryConfiguration {
  readonly LogType?: string;
  readonly DestinationType?: string;
  readonly DestinationDetails?: DestinationDetails;
  readonly LogFormat?: string;
  readonly Status?: string;
  readonly Message?: string;
}

export interface LogDeliveryConfigurationRequest {
  readonly LogType?: string;
  readonly DestinationType?: string;
  readonly DestinationDetails?: DestinationDetails;
  readonly LogFormat?: string;
  readonly Enabled?: boolean;
}

export interface ModifyCacheClusterMessage {
  readonly CacheClusterId: string;
  readonly NumCacheNodes?: number;
  readonly CacheNodeIdsToRemove?: [];
  readonly AZMode?: string;
  readonly NewAvailabilityZones?: [];
  readonly CacheSecurityGroupNames?: [];
  readonly SecurityGroupIds?: [];
  readonly PreferredMaintenanceWindow?: string;
  readonly NotificationTopicArn?: string;
  readonly CacheParameterGroupName?: string;
  readonly NotificationTopicStatus?: string;
  readonly ApplyImmediately?: boolean;
  readonly EngineVersion?: string;
  readonly AutoMinorVersionUpgrade?: boolean;
  readonly SnapshotRetentionLimit?: number;
  readonly SnapshotWindow?: string;
  readonly CacheNodeType?: string;
  readonly AuthToken?: string;
  readonly AuthTokenUpdateStrategy?: string;
  readonly LogDeliveryConfigurations?: [];
}

export interface ModifyCacheClusterResult {
  readonly CacheCluster?: CacheCluster;
}

export interface ModifyCacheParameterGroupMessage {
  readonly CacheParameterGroupName: string;
  readonly ParameterNameValues: [];
}

export interface ModifyCacheSubnetGroupMessage {
  readonly CacheSubnetGroupName: string;
  readonly CacheSubnetGroupDescription?: string;
  readonly SubnetIds?: [];
}

export interface ModifyCacheSubnetGroupResult {
  readonly CacheSubnetGroup?: CacheSubnetGroup;
}

export interface ModifyGlobalReplicationGroupMessage {
  readonly GlobalReplicationGroupId: string;
  readonly ApplyImmediately: boolean;
  readonly CacheNodeType?: string;
  readonly EngineVersion?: string;
  readonly CacheParameterGroupName?: string;
  readonly GlobalReplicationGroupDescription?: string;
  readonly AutomaticFailoverEnabled?: boolean;
}

export interface ModifyGlobalReplicationGroupResult {
  readonly GlobalReplicationGroup?: GlobalReplicationGroup;
}

export interface ModifyReplicationGroupMessage {
  readonly ReplicationGroupId: string;
  readonly ReplicationGroupDescription?: string;
  readonly PrimaryClusterId?: string;
  readonly SnapshottingClusterId?: string;
  readonly AutomaticFailoverEnabled?: boolean;
  readonly MultiAZEnabled?: boolean;
  readonly NodeGroupId?: string;
  readonly CacheSecurityGroupNames?: [];
  readonly SecurityGroupIds?: [];
  readonly PreferredMaintenanceWindow?: string;
  readonly NotificationTopicArn?: string;
  readonly CacheParameterGroupName?: string;
  readonly NotificationTopicStatus?: string;
  readonly ApplyImmediately?: boolean;
  readonly EngineVersion?: string;
  readonly AutoMinorVersionUpgrade?: boolean;
  readonly SnapshotRetentionLimit?: number;
  readonly SnapshotWindow?: string;
  readonly CacheNodeType?: string;
  readonly AuthToken?: string;
  readonly AuthTokenUpdateStrategy?: string;
  readonly UserGroupIdsToAdd?: [];
  readonly UserGroupIdsToRemove?: [];
  readonly RemoveUserGroups?: boolean;
  readonly LogDeliveryConfigurations?: [];
}

export interface ModifyReplicationGroupResult {
  readonly ReplicationGroup?: ReplicationGroup;
}

export interface ModifyReplicationGroupShardConfigurationMessage {
  readonly ReplicationGroupId: string;
  readonly NodeGroupCount: number;
  readonly ApplyImmediately: boolean;
  readonly ReshardingConfiguration?: [];
  readonly NodeGroupsToRemove?: [];
  readonly NodeGroupsToRetain?: [];
}

export interface ModifyReplicationGroupShardConfigurationResult {
  readonly ReplicationGroup?: ReplicationGroup;
}

export interface ModifyUserGroupMessage {
  readonly UserGroupId: string;
  readonly UserIdsToAdd?: [];
  readonly UserIdsToRemove?: [];
}

export interface ModifyUserMessage {
  readonly UserId: string;
  readonly AccessString?: string;
  readonly AppendAccessString?: string;
  readonly Passwords?: [];
  readonly NoPasswordRequired?: boolean;
}

export interface NoOperationFault {
}

export interface NodeGroup {
  readonly NodeGroupId?: string;
  readonly Status?: string;
  readonly PrimaryEndpoint?: Endpoint;
  readonly ReaderEndpoint?: Endpoint;
  readonly Slots?: string;
  readonly NodeGroupMembers?: [];
}

export interface NodeGroupConfiguration {
  readonly NodeGroupId?: string;
  readonly Slots?: string;
  readonly ReplicaCount?: number;
  readonly PrimaryAvailabilityZone?: string;
  readonly ReplicaAvailabilityZones?: [];
  readonly PrimaryOutpostArn?: string;
  readonly ReplicaOutpostArns?: [];
}

export interface NodeGroupMember {
  readonly CacheClusterId?: string;
  readonly CacheNodeId?: string;
  readonly ReadEndpoint?: Endpoint;
  readonly PreferredAvailabilityZone?: string;
  readonly PreferredOutpostArn?: string;
  readonly CurrentRole?: string;
}

export interface NodeGroupMemberUpdateStatus {
  readonly CacheClusterId?: string;
  readonly CacheNodeId?: string;
  readonly NodeUpdateStatus?: string;
  readonly NodeDeletionDate?: Date;
  readonly NodeUpdateStartDate?: Date;
  readonly NodeUpdateEndDate?: Date;
  readonly NodeUpdateInitiatedBy?: string;
  readonly NodeUpdateInitiatedDate?: Date;
  readonly NodeUpdateStatusModifiedDate?: Date;
}

export interface NodeGroupNotFoundFault {
}

export interface NodeGroupUpdateStatus {
  readonly NodeGroupId?: string;
  readonly NodeGroupMemberUpdateStatus?: [];
}

export interface NodeGroupsPerReplicationGroupQuotaExceededFault {
}

export interface NodeQuotaForClusterExceededFault {
}

export interface NodeQuotaForCustomerExceededFault {
}

export interface NodeSnapshot {
  readonly CacheClusterId?: string;
  readonly NodeGroupId?: string;
  readonly CacheNodeId?: string;
  readonly NodeGroupConfiguration?: NodeGroupConfiguration;
  readonly CacheSize?: string;
  readonly CacheNodeCreateTime?: Date;
  readonly SnapshotCreateTime?: Date;
}

export interface NotificationConfiguration {
  readonly TopicArn?: string;
  readonly TopicStatus?: string;
}

export interface Parameter {
  readonly ParameterName?: string;
  readonly ParameterValue?: string;
  readonly Description?: string;
  readonly Source?: string;
  readonly DataType?: string;
  readonly AllowedValues?: string;
  readonly IsModifiable?: boolean;
  readonly MinimumEngineVersion?: string;
  readonly ChangeType?: string;
}

export interface ParameterNameValue {
  readonly ParameterName?: string;
  readonly ParameterValue?: string;
}

export interface PendingLogDeliveryConfiguration {
  readonly LogType?: string;
  readonly DestinationType?: string;
  readonly DestinationDetails?: DestinationDetails;
  readonly LogFormat?: string;
}

export interface PendingModifiedValues {
  readonly NumCacheNodes?: number;
  readonly CacheNodeIdsToRemove?: [];
  readonly EngineVersion?: string;
  readonly CacheNodeType?: string;
  readonly AuthTokenStatus?: string;
  readonly LogDeliveryConfigurations?: [];
}

export interface ProcessedUpdateAction {
  readonly ReplicationGroupId?: string;
  readonly CacheClusterId?: string;
  readonly ServiceUpdateName?: string;
  readonly UpdateActionStatus?: string;
}

export interface PurchaseReservedCacheNodesOfferingMessage {
  readonly ReservedCacheNodesOfferingId: string;
  readonly ReservedCacheNodeId?: string;
  readonly CacheNodeCount?: number;
  readonly Tags?: [];
}

export interface PurchaseReservedCacheNodesOfferingResult {
  readonly ReservedCacheNode?: ReservedCacheNode;
}

export interface RebalanceSlotsInGlobalReplicationGroupMessage {
  readonly GlobalReplicationGroupId: string;
  readonly ApplyImmediately: boolean;
}

export interface RebalanceSlotsInGlobalReplicationGroupResult {
  readonly GlobalReplicationGroup?: GlobalReplicationGroup;
}

export interface RebootCacheClusterMessage {
  readonly CacheClusterId: string;
  readonly CacheNodeIdsToReboot: [];
}

export interface RebootCacheClusterResult {
  readonly CacheCluster?: CacheCluster;
}

export interface RecurringCharge {
  readonly RecurringChargeAmount?: unknown;
  readonly RecurringChargeFrequency?: string;
}

export interface RegionalConfiguration {
  readonly ReplicationGroupId: string;
  readonly ReplicationGroupRegion: string;
  readonly ReshardingConfiguration: [];
}

export interface RemoveTagsFromResourceMessage {
  readonly ResourceName: string;
  readonly TagKeys: [];
}

export interface ReplicationGroup {
  readonly ReplicationGroupId?: string;
  readonly Description?: string;
  readonly GlobalReplicationGroupInfo?: GlobalReplicationGroupInfo;
  readonly Status?: string;
  readonly PendingModifiedValues?: ReplicationGroupPendingModifiedValues;
  readonly MemberClusters?: [];
  readonly NodeGroups?: [];
  readonly SnapshottingClusterId?: string;
  readonly AutomaticFailover?: string;
  readonly MultiAZ?: string;
  readonly ConfigurationEndpoint?: Endpoint;
  readonly SnapshotRetentionLimit?: number;
  readonly SnapshotWindow?: string;
  readonly ClusterEnabled?: boolean;
  readonly CacheNodeType?: string;
  readonly AuthTokenEnabled?: boolean;
  readonly AuthTokenLastModifiedDate?: Date;
  readonly TransitEncryptionEnabled?: boolean;
  readonly AtRestEncryptionEnabled?: boolean;
  readonly MemberClustersOutpostArns?: [];
  readonly KmsKeyId?: string;
  readonly ARN?: string;
  readonly UserGroupIds?: [];
  readonly LogDeliveryConfigurations?: [];
  readonly ReplicationGroupCreateTime?: Date;
  readonly DataTiering?: string;
}

export interface ReplicationGroupAlreadyExistsFault {
}

export interface ReplicationGroupAlreadyUnderMigrationFault {
}

export interface ReplicationGroupMessage {
  readonly Marker?: string;
  readonly ReplicationGroups?: [];
}

export interface ReplicationGroupNotFoundFault {
}

export interface ReplicationGroupNotUnderMigrationFault {
}

export interface ReplicationGroupPendingModifiedValues {
  readonly PrimaryClusterId?: string;
  readonly AutomaticFailoverStatus?: string;
  readonly Resharding?: ReshardingStatus;
  readonly AuthTokenStatus?: string;
  readonly UserGroups?: UserGroupsUpdateStatus;
  readonly LogDeliveryConfigurations?: [];
}

export interface ReservedCacheNode {
  readonly ReservedCacheNodeId?: string;
  readonly ReservedCacheNodesOfferingId?: string;
  readonly CacheNodeType?: string;
  readonly StartTime?: Date;
  readonly Duration?: number;
  readonly FixedPrice?: unknown;
  readonly UsagePrice?: unknown;
  readonly CacheNodeCount?: number;
  readonly ProductDescription?: string;
  readonly OfferingType?: string;
  readonly State?: string;
  readonly RecurringCharges?: [];
  readonly ReservationARN?: string;
}

export interface ReservedCacheNodeAlreadyExistsFault {
}

export interface ReservedCacheNodeMessage {
  readonly Marker?: string;
  readonly ReservedCacheNodes?: [];
}

export interface ReservedCacheNodeNotFoundFault {
}

export interface ReservedCacheNodeQuotaExceededFault {
}

export interface ReservedCacheNodesOffering {
  readonly ReservedCacheNodesOfferingId?: string;
  readonly CacheNodeType?: string;
  readonly Duration?: number;
  readonly FixedPrice?: unknown;
  readonly UsagePrice?: unknown;
  readonly ProductDescription?: string;
  readonly OfferingType?: string;
  readonly RecurringCharges?: [];
}

export interface ReservedCacheNodesOfferingMessage {
  readonly Marker?: string;
  readonly ReservedCacheNodesOfferings?: [];
}

export interface ReservedCacheNodesOfferingNotFoundFault {
}

export interface ResetCacheParameterGroupMessage {
  readonly CacheParameterGroupName: string;
  readonly ResetAllParameters?: boolean;
  readonly ParameterNameValues?: [];
}

export interface ReshardingConfiguration {
  readonly NodeGroupId?: string;
  readonly PreferredAvailabilityZones?: [];
}

export interface ReshardingStatus {
  readonly SlotMigration?: SlotMigration;
}

export interface RevokeCacheSecurityGroupIngressMessage {
  readonly CacheSecurityGroupName: string;
  readonly EC2SecurityGroupName: string;
  readonly EC2SecurityGroupOwnerId: string;
}

export interface RevokeCacheSecurityGroupIngressResult {
  readonly CacheSecurityGroup?: CacheSecurityGroup;
}

export interface SecurityGroupMembership {
  readonly SecurityGroupId?: string;
  readonly Status?: string;
}

export interface ServiceLinkedRoleNotFoundFault {
}

export interface ServiceUpdate {
  readonly ServiceUpdateName?: string;
  readonly ServiceUpdateReleaseDate?: Date;
  readonly ServiceUpdateEndDate?: Date;
  readonly ServiceUpdateSeverity?: string;
  readonly ServiceUpdateRecommendedApplyByDate?: Date;
  readonly ServiceUpdateStatus?: string;
  readonly ServiceUpdateDescription?: string;
  readonly ServiceUpdateType?: string;
  readonly Engine?: string;
  readonly EngineVersion?: string;
  readonly AutoUpdateAfterRecommendedApplyByDate?: boolean;
  readonly EstimatedUpdateTime?: string;
}

export interface ServiceUpdateNotFoundFault {
}

export interface ServiceUpdatesMessage {
  readonly Marker?: string;
  readonly ServiceUpdates?: [];
}

export interface SlotMigration {
  readonly ProgressPercentage?: unknown;
}

export interface Snapshot {
  readonly SnapshotName?: string;
  readonly ReplicationGroupId?: string;
  readonly ReplicationGroupDescription?: string;
  readonly CacheClusterId?: string;
  readonly SnapshotStatus?: string;
  readonly SnapshotSource?: string;
  readonly CacheNodeType?: string;
  readonly Engine?: string;
  readonly EngineVersion?: string;
  readonly NumCacheNodes?: number;
  readonly PreferredAvailabilityZone?: string;
  readonly PreferredOutpostArn?: string;
  readonly CacheClusterCreateTime?: Date;
  readonly PreferredMaintenanceWindow?: string;
  readonly TopicArn?: string;
  readonly Port?: number;
  readonly CacheParameterGroupName?: string;
  readonly CacheSubnetGroupName?: string;
  readonly VpcId?: string;
  readonly AutoMinorVersionUpgrade?: boolean;
  readonly SnapshotRetentionLimit?: number;
  readonly SnapshotWindow?: string;
  readonly NumNodeGroups?: number;
  readonly AutomaticFailover?: string;
  readonly NodeSnapshots?: [];
  readonly KmsKeyId?: string;
  readonly ARN?: string;
  readonly DataTiering?: string;
}

export interface SnapshotAlreadyExistsFault {
}

export interface SnapshotFeatureNotSupportedFault {
}

export interface SnapshotNotFoundFault {
}

export interface SnapshotQuotaExceededFault {
}

export interface StartMigrationMessage {
  readonly ReplicationGroupId: string;
  readonly CustomerNodeEndpointList: [];
}

export interface StartMigrationResponse {
  readonly ReplicationGroup?: ReplicationGroup;
}

export interface Subnet {
  readonly SubnetIdentifier?: string;
  readonly SubnetAvailabilityZone?: AvailabilityZone;
  readonly SubnetOutpost?: SubnetOutpost;
}

export interface SubnetInUse {
}

export interface SubnetNotAllowedFault {
}

export interface SubnetOutpost {
  readonly SubnetOutpostArn?: string;
}

export interface Tag {
  readonly Key?: string;
  readonly Value?: string;
}

export interface TagListMessage {
  readonly TagList?: [];
}

export interface TagNotFoundFault {
}

export interface TagQuotaPerResourceExceeded {
}

export interface TestFailoverMessage {
  readonly ReplicationGroupId: string;
  readonly NodeGroupId: string;
}

export interface TestFailoverNotAvailableFault {
}

export interface TestFailoverResult {
  readonly ReplicationGroup?: ReplicationGroup;
}

export interface TimeRangeFilter {
  readonly StartTime?: Date;
  readonly EndTime?: Date;
}

export interface UnprocessedUpdateAction {
  readonly ReplicationGroupId?: string;
  readonly CacheClusterId?: string;
  readonly ServiceUpdateName?: string;
  readonly ErrorType?: string;
  readonly ErrorMessage?: string;
}

export interface UpdateAction {
  readonly ReplicationGroupId?: string;
  readonly CacheClusterId?: string;
  readonly ServiceUpdateName?: string;
  readonly ServiceUpdateReleaseDate?: Date;
  readonly ServiceUpdateSeverity?: string;
  readonly ServiceUpdateStatus?: string;
  readonly ServiceUpdateRecommendedApplyByDate?: Date;
  readonly ServiceUpdateType?: string;
  readonly UpdateActionAvailableDate?: Date;
  readonly UpdateActionStatus?: string;
  readonly NodesUpdated?: string;
  readonly UpdateActionStatusModifiedDate?: Date;
  readonly SlaMet?: string;
  readonly NodeGroupUpdateStatus?: [];
  readonly CacheNodeUpdateStatus?: [];
  readonly EstimatedUpdateTime?: string;
  readonly Engine?: string;
}

export interface UpdateActionResultsMessage {
  readonly ProcessedUpdateActions?: [];
  readonly UnprocessedUpdateActions?: [];
}

export interface UpdateActionsMessage {
  readonly Marker?: string;
  readonly UpdateActions?: [];
}

export interface User {
  readonly UserId?: string;
  readonly UserName?: string;
  readonly Status?: string;
  readonly Engine?: string;
  readonly MinimumEngineVersion?: string;
  readonly AccessString?: string;
  readonly UserGroupIds?: [];
  readonly Authentication?: Authentication;
  readonly ARN?: string;
}

export interface UserAlreadyExistsFault {
}

export interface UserGroup {
  readonly UserGroupId?: string;
  readonly Status?: string;
  readonly Engine?: string;
  readonly UserIds?: [];
  readonly MinimumEngineVersion?: string;
  readonly PendingChanges?: UserGroupPendingChanges;
  readonly ReplicationGroups?: [];
  readonly ARN?: string;
}

export interface UserGroupAlreadyExistsFault {
}

export interface UserGroupNotFoundFault {
}

export interface UserGroupPendingChanges {
  readonly UserIdsToRemove?: [];
  readonly UserIdsToAdd?: [];
}

export interface UserGroupQuotaExceededFault {
}

export interface UserGroupsUpdateStatus {
  readonly UserGroupIdsToAdd?: [];
  readonly UserGroupIdsToRemove?: [];
}

export interface UserNotFoundFault {
}

export interface UserQuotaExceededFault {
}


