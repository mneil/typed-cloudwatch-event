/**
 * STOP. This file is autogenerated. DO NOT EDIT by hand
 */
export interface AddTagsToResource {
  readonly ResourceName: string;
  readonly Tags: [];
}
export interface AuthorizeCacheSecurityGroupIngress {
  readonly CacheSecurityGroupName: string;
  readonly EC2SecurityGroupName: string;
  readonly EC2SecurityGroupOwnerId: string;
}
export interface BatchApplyUpdateAction {
  readonly ReplicationGroupIds?: [];
  readonly CacheClusterIds?: [];
  readonly ServiceUpdateName: string;
}
export interface BatchStopUpdateAction {
  readonly ReplicationGroupIds?: [];
  readonly CacheClusterIds?: [];
  readonly ServiceUpdateName: string;
}
export interface CompleteMigration {
  readonly ReplicationGroupId: string;
  readonly Force?: boolean;
}
export interface CopySnapshot {
  readonly SourceSnapshotName: string;
  readonly TargetSnapshotName: string;
  readonly TargetBucket?: string;
  readonly KmsKeyId?: string;
  readonly Tags?: [];
}
export interface CreateCacheCluster {
  readonly CacheClusterId: string;
  readonly ReplicationGroupId?: string;
  readonly AZMode?: string;
  readonly PreferredAvailabilityZone?: string;
  readonly PreferredAvailabilityZones?: [];
  readonly NumCacheNodes?: number;
  readonly CacheNodeType?: string;
  readonly Engine?: string;
  readonly EngineVersion?: string;
  readonly CacheParameterGroupName?: string;
  readonly CacheSubnetGroupName?: string;
  readonly CacheSecurityGroupNames?: [];
  readonly SecurityGroupIds?: [];
  readonly Tags?: [];
  readonly SnapshotArns?: [];
  readonly SnapshotName?: string;
  readonly PreferredMaintenanceWindow?: string;
  readonly Port?: number;
  readonly NotificationTopicArn?: string;
  readonly AutoMinorVersionUpgrade?: boolean;
  readonly SnapshotRetentionLimit?: number;
  readonly SnapshotWindow?: string;
  readonly AuthToken?: string;
  readonly OutpostMode?: string;
  readonly PreferredOutpostArn?: string;
  readonly PreferredOutpostArns?: [];
  readonly LogDeliveryConfigurations?: [];
}
export interface CreateCacheParameterGroup {
  readonly CacheParameterGroupName: string;
  readonly CacheParameterGroupFamily: string;
  readonly Description: string;
  readonly Tags?: [];
}
export interface CreateCacheSecurityGroup {
  readonly CacheSecurityGroupName: string;
  readonly Description: string;
  readonly Tags?: [];
}
export interface CreateCacheSubnetGroup {
  readonly CacheSubnetGroupName: string;
  readonly CacheSubnetGroupDescription: string;
  readonly SubnetIds: [];
  readonly Tags?: [];
}
export interface CreateGlobalReplicationGroup {
  readonly GlobalReplicationGroupIdSuffix: string;
  readonly GlobalReplicationGroupDescription?: string;
  readonly PrimaryReplicationGroupId: string;
}
export interface CreateReplicationGroup {
  readonly ReplicationGroupId: string;
  readonly ReplicationGroupDescription: string;
  readonly GlobalReplicationGroupId?: string;
  readonly PrimaryClusterId?: string;
  readonly AutomaticFailoverEnabled?: boolean;
  readonly MultiAZEnabled?: boolean;
  readonly NumCacheClusters?: number;
  readonly PreferredCacheClusterAZs?: [];
  readonly NumNodeGroups?: number;
  readonly ReplicasPerNodeGroup?: number;
  readonly NodeGroupConfiguration?: [];
  readonly CacheNodeType?: string;
  readonly Engine?: string;
  readonly EngineVersion?: string;
  readonly CacheParameterGroupName?: string;
  readonly CacheSubnetGroupName?: string;
  readonly CacheSecurityGroupNames?: [];
  readonly SecurityGroupIds?: [];
  readonly Tags?: [];
  readonly SnapshotArns?: [];
  readonly SnapshotName?: string;
  readonly PreferredMaintenanceWindow?: string;
  readonly Port?: number;
  readonly NotificationTopicArn?: string;
  readonly AutoMinorVersionUpgrade?: boolean;
  readonly SnapshotRetentionLimit?: number;
  readonly SnapshotWindow?: string;
  readonly AuthToken?: string;
  readonly TransitEncryptionEnabled?: boolean;
  readonly AtRestEncryptionEnabled?: boolean;
  readonly KmsKeyId?: string;
  readonly UserGroupIds?: [];
  readonly LogDeliveryConfigurations?: [];
  readonly DataTieringEnabled?: boolean;
}
export interface CreateSnapshot {
  readonly ReplicationGroupId?: string;
  readonly CacheClusterId?: string;
  readonly SnapshotName: string;
  readonly KmsKeyId?: string;
  readonly Tags?: [];
}
export interface CreateUser {
  readonly UserId: string;
  readonly UserName: string;
  readonly Engine: string;
  readonly Passwords?: [];
  readonly AccessString: string;
  readonly NoPasswordRequired?: boolean;
  readonly Tags?: [];
}
export interface CreateUserGroup {
  readonly UserGroupId: string;
  readonly Engine: string;
  readonly UserIds?: [];
  readonly Tags?: [];
}
export interface DecreaseNodeGroupsInGlobalReplicationGroup {
  readonly GlobalReplicationGroupId: string;
  readonly NodeGroupCount: number;
  readonly GlobalNodeGroupsToRemove?: [];
  readonly GlobalNodeGroupsToRetain?: [];
  readonly ApplyImmediately: boolean;
}
export interface DecreaseReplicaCount {
  readonly ReplicationGroupId: string;
  readonly NewReplicaCount?: number;
  readonly ReplicaConfiguration?: [];
  readonly ReplicasToRemove?: [];
  readonly ApplyImmediately: boolean;
}
export interface DeleteCacheCluster {
  readonly CacheClusterId: string;
  readonly FinalSnapshotIdentifier?: string;
}
export interface DeleteCacheParameterGroup {
  readonly CacheParameterGroupName: string;
}
export interface DeleteCacheSecurityGroup {
  readonly CacheSecurityGroupName: string;
}
export interface DeleteCacheSubnetGroup {
  readonly CacheSubnetGroupName: string;
}
export interface DeleteGlobalReplicationGroup {
  readonly GlobalReplicationGroupId: string;
  readonly RetainPrimaryReplicationGroup: boolean;
}
export interface DeleteReplicationGroup {
  readonly ReplicationGroupId: string;
  readonly RetainPrimaryCluster?: boolean;
  readonly FinalSnapshotIdentifier?: string;
}
export interface DeleteSnapshot {
  readonly SnapshotName: string;
}
export interface DeleteUser {
  readonly UserId: string;
}
export interface DeleteUserGroup {
  readonly UserGroupId: string;
}
export interface DescribeCacheClusters {
  readonly CacheClusterId?: string;
  readonly MaxRecords?: number;
  readonly Marker?: string;
  readonly ShowCacheNodeInfo?: boolean;
  readonly ShowCacheClustersNotInReplicationGroups?: boolean;
}
export interface DescribeCacheEngineVersions {
  readonly Engine?: string;
  readonly EngineVersion?: string;
  readonly CacheParameterGroupFamily?: string;
  readonly MaxRecords?: number;
  readonly Marker?: string;
  readonly DefaultOnly?: boolean;
}
export interface DescribeCacheParameterGroups {
  readonly CacheParameterGroupName?: string;
  readonly MaxRecords?: number;
  readonly Marker?: string;
}
export interface DescribeCacheParameters {
  readonly CacheParameterGroupName: string;
  readonly Source?: string;
  readonly MaxRecords?: number;
  readonly Marker?: string;
}
export interface DescribeCacheSecurityGroups {
  readonly CacheSecurityGroupName?: string;
  readonly MaxRecords?: number;
  readonly Marker?: string;
}
export interface DescribeCacheSubnetGroups {
  readonly CacheSubnetGroupName?: string;
  readonly MaxRecords?: number;
  readonly Marker?: string;
}
export interface DescribeEngineDefaultParameters {
  readonly CacheParameterGroupFamily: string;
  readonly MaxRecords?: number;
  readonly Marker?: string;
}
export interface DescribeEvents {
  readonly SourceIdentifier?: string;
  readonly SourceType?: string;
  readonly StartTime?: Date;
  readonly EndTime?: Date;
  readonly Duration?: number;
  readonly MaxRecords?: number;
  readonly Marker?: string;
}
export interface DescribeGlobalReplicationGroups {
  readonly GlobalReplicationGroupId?: string;
  readonly MaxRecords?: number;
  readonly Marker?: string;
  readonly ShowMemberInfo?: boolean;
}
export interface DescribeReplicationGroups {
  readonly ReplicationGroupId?: string;
  readonly MaxRecords?: number;
  readonly Marker?: string;
}
export interface DescribeReservedCacheNodes {
  readonly ReservedCacheNodeId?: string;
  readonly ReservedCacheNodesOfferingId?: string;
  readonly CacheNodeType?: string;
  readonly Duration?: string;
  readonly ProductDescription?: string;
  readonly OfferingType?: string;
  readonly MaxRecords?: number;
  readonly Marker?: string;
}
export interface DescribeReservedCacheNodesOfferings {
  readonly ReservedCacheNodesOfferingId?: string;
  readonly CacheNodeType?: string;
  readonly Duration?: string;
  readonly ProductDescription?: string;
  readonly OfferingType?: string;
  readonly MaxRecords?: number;
  readonly Marker?: string;
}
export interface DescribeServiceUpdates {
  readonly ServiceUpdateName?: string;
  readonly ServiceUpdateStatus?: [];
  readonly MaxRecords?: number;
  readonly Marker?: string;
}
export interface DescribeSnapshots {
  readonly ReplicationGroupId?: string;
  readonly CacheClusterId?: string;
  readonly SnapshotName?: string;
  readonly SnapshotSource?: string;
  readonly Marker?: string;
  readonly MaxRecords?: number;
  readonly ShowNodeGroupConfig?: boolean;
}
export interface DescribeUpdateActions {
  readonly ServiceUpdateName?: string;
  readonly ReplicationGroupIds?: [];
  readonly CacheClusterIds?: [];
  readonly Engine?: string;
  readonly ServiceUpdateStatus?: [];
  readonly ServiceUpdateTimeRange?: TimeRangeFilter;
  readonly UpdateActionStatus?: [];
  readonly ShowNodeLevelUpdateStatus?: boolean;
  readonly MaxRecords?: number;
  readonly Marker?: string;
}
export interface DescribeUserGroups {
  readonly UserGroupId?: string;
  readonly MaxRecords?: number;
  readonly Marker?: string;
}
export interface DescribeUsers {
  readonly Engine?: string;
  readonly UserId?: string;
  readonly Filters?: [];
  readonly MaxRecords?: number;
  readonly Marker?: string;
}
export interface DisassociateGlobalReplicationGroup {
  readonly GlobalReplicationGroupId: string;
  readonly ReplicationGroupId: string;
  readonly ReplicationGroupRegion: string;
}
export interface FailoverGlobalReplicationGroup {
  readonly GlobalReplicationGroupId: string;
  readonly PrimaryRegion: string;
  readonly PrimaryReplicationGroupId: string;
}
export interface IncreaseNodeGroupsInGlobalReplicationGroup {
  readonly GlobalReplicationGroupId: string;
  readonly NodeGroupCount: number;
  readonly RegionalConfigurations?: [];
  readonly ApplyImmediately: boolean;
}
export interface IncreaseReplicaCount {
  readonly ReplicationGroupId: string;
  readonly NewReplicaCount?: number;
  readonly ReplicaConfiguration?: [];
  readonly ApplyImmediately: boolean;
}
export interface ListAllowedNodeTypeModifications {
  readonly CacheClusterId?: string;
  readonly ReplicationGroupId?: string;
}
export interface ListTagsForResource {
  readonly ResourceName: string;
}
export interface ModifyCacheCluster {
  readonly CacheClusterId: string;
  readonly NumCacheNodes?: number;
  readonly CacheNodeIdsToRemove?: [];
  readonly AZMode?: string;
  readonly NewAvailabilityZones?: [];
  readonly CacheSecurityGroupNames?: [];
  readonly SecurityGroupIds?: [];
  readonly PreferredMaintenanceWindow?: string;
  readonly NotificationTopicArn?: string;
  readonly CacheParameterGroupName?: string;
  readonly NotificationTopicStatus?: string;
  readonly ApplyImmediately?: boolean;
  readonly EngineVersion?: string;
  readonly AutoMinorVersionUpgrade?: boolean;
  readonly SnapshotRetentionLimit?: number;
  readonly SnapshotWindow?: string;
  readonly CacheNodeType?: string;
  readonly AuthToken?: string;
  readonly AuthTokenUpdateStrategy?: string;
  readonly LogDeliveryConfigurations?: [];
}
export interface ModifyCacheParameterGroup {
  readonly CacheParameterGroupName: string;
  readonly ParameterNameValues: [];
}
export interface ModifyCacheSubnetGroup {
  readonly CacheSubnetGroupName: string;
  readonly CacheSubnetGroupDescription?: string;
  readonly SubnetIds?: [];
}
export interface ModifyGlobalReplicationGroup {
  readonly GlobalReplicationGroupId: string;
  readonly ApplyImmediately: boolean;
  readonly CacheNodeType?: string;
  readonly EngineVersion?: string;
  readonly CacheParameterGroupName?: string;
  readonly GlobalReplicationGroupDescription?: string;
  readonly AutomaticFailoverEnabled?: boolean;
}
export interface ModifyReplicationGroup {
  readonly ReplicationGroupId: string;
  readonly ReplicationGroupDescription?: string;
  readonly PrimaryClusterId?: string;
  readonly SnapshottingClusterId?: string;
  readonly AutomaticFailoverEnabled?: boolean;
  readonly MultiAZEnabled?: boolean;
  readonly NodeGroupId?: string;
  readonly CacheSecurityGroupNames?: [];
  readonly SecurityGroupIds?: [];
  readonly PreferredMaintenanceWindow?: string;
  readonly NotificationTopicArn?: string;
  readonly CacheParameterGroupName?: string;
  readonly NotificationTopicStatus?: string;
  readonly ApplyImmediately?: boolean;
  readonly EngineVersion?: string;
  readonly AutoMinorVersionUpgrade?: boolean;
  readonly SnapshotRetentionLimit?: number;
  readonly SnapshotWindow?: string;
  readonly CacheNodeType?: string;
  readonly AuthToken?: string;
  readonly AuthTokenUpdateStrategy?: string;
  readonly UserGroupIdsToAdd?: [];
  readonly UserGroupIdsToRemove?: [];
  readonly RemoveUserGroups?: boolean;
  readonly LogDeliveryConfigurations?: [];
}
export interface ModifyReplicationGroupShardConfiguration {
  readonly ReplicationGroupId: string;
  readonly NodeGroupCount: number;
  readonly ApplyImmediately: boolean;
  readonly ReshardingConfiguration?: [];
  readonly NodeGroupsToRemove?: [];
  readonly NodeGroupsToRetain?: [];
}
export interface ModifyUser {
  readonly UserId: string;
  readonly AccessString?: string;
  readonly AppendAccessString?: string;
  readonly Passwords?: [];
  readonly NoPasswordRequired?: boolean;
}
export interface ModifyUserGroup {
  readonly UserGroupId: string;
  readonly UserIdsToAdd?: [];
  readonly UserIdsToRemove?: [];
}
export interface PurchaseReservedCacheNodesOffering {
  readonly ReservedCacheNodesOfferingId: string;
  readonly ReservedCacheNodeId?: string;
  readonly CacheNodeCount?: number;
  readonly Tags?: [];
}
export interface RebalanceSlotsInGlobalReplicationGroup {
  readonly GlobalReplicationGroupId: string;
  readonly ApplyImmediately: boolean;
}
export interface RebootCacheCluster {
  readonly CacheClusterId: string;
  readonly CacheNodeIdsToReboot: [];
}
export interface RemoveTagsFromResource {
  readonly ResourceName: string;
  readonly TagKeys: [];
}
export interface ResetCacheParameterGroup {
  readonly CacheParameterGroupName: string;
  readonly ResetAllParameters?: boolean;
  readonly ParameterNameValues?: [];
}
export interface RevokeCacheSecurityGroupIngress {
  readonly CacheSecurityGroupName: string;
  readonly EC2SecurityGroupName: string;
  readonly EC2SecurityGroupOwnerId: string;
}
export interface StartMigration {
  readonly ReplicationGroupId: string;
  readonly CustomerNodeEndpointList: [];
}
export interface TestFailover {
  readonly ReplicationGroupId: string;
  readonly NodeGroupId: string;
}



interface APICallRateForCustomerExceededFault {
}

interface AddTagsToResourceMessage {
  readonly ResourceName: string;
  readonly Tags: [];
}

interface AllowedNodeTypeModificationsMessage {
  readonly ScaleUpModifications: [];
  readonly ScaleDownModifications: [];
}

interface Authentication {
  readonly Type: string;
  readonly PasswordCount: number;
}

interface AuthorizationAlreadyExistsFault {
}

interface AuthorizationNotFoundFault {
}

interface AuthorizeCacheSecurityGroupIngressMessage {
  readonly CacheSecurityGroupName: string;
  readonly EC2SecurityGroupName: string;
  readonly EC2SecurityGroupOwnerId: string;
}

interface AuthorizeCacheSecurityGroupIngressResult {
  readonly CacheSecurityGroup: CacheSecurityGroup;
}

interface AvailabilityZone {
  readonly Name: string;
}

interface BatchApplyUpdateActionMessage {
  readonly ReplicationGroupIds: [];
  readonly CacheClusterIds: [];
  readonly ServiceUpdateName: string;
}

interface BatchStopUpdateActionMessage {
  readonly ReplicationGroupIds: [];
  readonly CacheClusterIds: [];
  readonly ServiceUpdateName: string;
}

interface CacheCluster {
  readonly CacheClusterId: string;
  readonly ConfigurationEndpoint: Endpoint;
  readonly ClientDownloadLandingPage: string;
  readonly CacheNodeType: string;
  readonly Engine: string;
  readonly EngineVersion: string;
  readonly CacheClusterStatus: string;
  readonly NumCacheNodes: number;
  readonly PreferredAvailabilityZone: string;
  readonly PreferredOutpostArn: string;
  readonly CacheClusterCreateTime: Date;
  readonly PreferredMaintenanceWindow: string;
  readonly PendingModifiedValues: PendingModifiedValues;
  readonly NotificationConfiguration: NotificationConfiguration;
  readonly CacheSecurityGroups: [];
  readonly CacheParameterGroup: CacheParameterGroupStatus;
  readonly CacheSubnetGroupName: string;
  readonly CacheNodes: [];
  readonly AutoMinorVersionUpgrade: boolean;
  readonly SecurityGroups: [];
  readonly ReplicationGroupId: string;
  readonly SnapshotRetentionLimit: number;
  readonly SnapshotWindow: string;
  readonly AuthTokenEnabled: boolean;
  readonly AuthTokenLastModifiedDate: Date;
  readonly TransitEncryptionEnabled: boolean;
  readonly AtRestEncryptionEnabled: boolean;
  readonly ARN: string;
  readonly ReplicationGroupLogDeliveryEnabled: boolean;
  readonly LogDeliveryConfigurations: [];
}

interface CacheClusterAlreadyExistsFault {
}

interface CacheClusterMessage {
  readonly Marker: string;
  readonly CacheClusters: [];
}

interface CacheClusterNotFoundFault {
}

interface CacheEngineVersion {
  readonly Engine: string;
  readonly EngineVersion: string;
  readonly CacheParameterGroupFamily: string;
  readonly CacheEngineDescription: string;
  readonly CacheEngineVersionDescription: string;
}

interface CacheEngineVersionMessage {
  readonly Marker: string;
  readonly CacheEngineVersions: [];
}

interface CacheNode {
  readonly CacheNodeId: string;
  readonly CacheNodeStatus: string;
  readonly CacheNodeCreateTime: Date;
  readonly Endpoint: Endpoint;
  readonly ParameterGroupStatus: string;
  readonly SourceCacheNodeId: string;
  readonly CustomerAvailabilityZone: string;
  readonly CustomerOutpostArn: string;
}

interface CacheNodeTypeSpecificParameter {
  readonly ParameterName: string;
  readonly Description: string;
  readonly Source: string;
  readonly DataType: string;
  readonly AllowedValues: string;
  readonly IsModifiable: boolean;
  readonly MinimumEngineVersion: string;
  readonly CacheNodeTypeSpecificValues: [];
  readonly ChangeType: string;
}

interface CacheNodeTypeSpecificValue {
  readonly CacheNodeType: string;
  readonly Value: string;
}

interface CacheNodeUpdateStatus {
  readonly CacheNodeId: string;
  readonly NodeUpdateStatus: string;
  readonly NodeDeletionDate: Date;
  readonly NodeUpdateStartDate: Date;
  readonly NodeUpdateEndDate: Date;
  readonly NodeUpdateInitiatedBy: string;
  readonly NodeUpdateInitiatedDate: Date;
  readonly NodeUpdateStatusModifiedDate: Date;
}

interface CacheParameterGroup {
  readonly CacheParameterGroupName: string;
  readonly CacheParameterGroupFamily: string;
  readonly Description: string;
  readonly IsGlobal: boolean;
  readonly ARN: string;
}

interface CacheParameterGroupAlreadyExistsFault {
}

interface CacheParameterGroupDetails {
  readonly Marker: string;
  readonly Parameters: [];
  readonly CacheNodeTypeSpecificParameters: [];
}

interface CacheParameterGroupNameMessage {
  readonly CacheParameterGroupName: string;
}

interface CacheParameterGroupNotFoundFault {
}

interface CacheParameterGroupQuotaExceededFault {
}

interface CacheParameterGroupStatus {
  readonly CacheParameterGroupName: string;
  readonly ParameterApplyStatus: string;
  readonly CacheNodeIdsToReboot: [];
}

interface CacheParameterGroupsMessage {
  readonly Marker: string;
  readonly CacheParameterGroups: [];
}

interface CacheSecurityGroup {
  readonly OwnerId: string;
  readonly CacheSecurityGroupName: string;
  readonly Description: string;
  readonly EC2SecurityGroups: [];
  readonly ARN: string;
}

interface CacheSecurityGroupAlreadyExistsFault {
}

interface CacheSecurityGroupMembership {
  readonly CacheSecurityGroupName: string;
  readonly Status: string;
}

interface CacheSecurityGroupMessage {
  readonly Marker: string;
  readonly CacheSecurityGroups: [];
}

interface CacheSecurityGroupNotFoundFault {
}

interface CacheSecurityGroupQuotaExceededFault {
}

interface CacheSubnetGroup {
  readonly CacheSubnetGroupName: string;
  readonly CacheSubnetGroupDescription: string;
  readonly VpcId: string;
  readonly Subnets: [];
  readonly ARN: string;
}

interface CacheSubnetGroupAlreadyExistsFault {
}

interface CacheSubnetGroupInUse {
}

interface CacheSubnetGroupMessage {
  readonly Marker: string;
  readonly CacheSubnetGroups: [];
}

interface CacheSubnetGroupNotFoundFault {
}

interface CacheSubnetGroupQuotaExceededFault {
}

interface CacheSubnetQuotaExceededFault {
}

interface CloudWatchLogsDestinationDetails {
  readonly LogGroup: string;
}

interface ClusterQuotaForCustomerExceededFault {
}

interface CompleteMigrationMessage {
  readonly ReplicationGroupId: string;
  readonly Force: boolean;
}

interface CompleteMigrationResponse {
  readonly ReplicationGroup: ReplicationGroup;
}

interface ConfigureShard {
  readonly NodeGroupId: string;
  readonly NewReplicaCount: number;
  readonly PreferredAvailabilityZones: [];
  readonly PreferredOutpostArns: [];
}

interface CopySnapshotMessage {
  readonly SourceSnapshotName: string;
  readonly TargetSnapshotName: string;
  readonly TargetBucket: string;
  readonly KmsKeyId: string;
  readonly Tags: [];
}

interface CopySnapshotResult {
  readonly Snapshot: Snapshot;
}

interface CreateCacheClusterMessage {
  readonly CacheClusterId: string;
  readonly ReplicationGroupId: string;
  readonly AZMode: string;
  readonly PreferredAvailabilityZone: string;
  readonly PreferredAvailabilityZones: [];
  readonly NumCacheNodes: number;
  readonly CacheNodeType: string;
  readonly Engine: string;
  readonly EngineVersion: string;
  readonly CacheParameterGroupName: string;
  readonly CacheSubnetGroupName: string;
  readonly CacheSecurityGroupNames: [];
  readonly SecurityGroupIds: [];
  readonly Tags: [];
  readonly SnapshotArns: [];
  readonly SnapshotName: string;
  readonly PreferredMaintenanceWindow: string;
  readonly Port: number;
  readonly NotificationTopicArn: string;
  readonly AutoMinorVersionUpgrade: boolean;
  readonly SnapshotRetentionLimit: number;
  readonly SnapshotWindow: string;
  readonly AuthToken: string;
  readonly OutpostMode: string;
  readonly PreferredOutpostArn: string;
  readonly PreferredOutpostArns: [];
  readonly LogDeliveryConfigurations: [];
}

interface CreateCacheClusterResult {
  readonly CacheCluster: CacheCluster;
}

interface CreateCacheParameterGroupMessage {
  readonly CacheParameterGroupName: string;
  readonly CacheParameterGroupFamily: string;
  readonly Description: string;
  readonly Tags: [];
}

interface CreateCacheParameterGroupResult {
  readonly CacheParameterGroup: CacheParameterGroup;
}

interface CreateCacheSecurityGroupMessage {
  readonly CacheSecurityGroupName: string;
  readonly Description: string;
  readonly Tags: [];
}

interface CreateCacheSecurityGroupResult {
  readonly CacheSecurityGroup: CacheSecurityGroup;
}

interface CreateCacheSubnetGroupMessage {
  readonly CacheSubnetGroupName: string;
  readonly CacheSubnetGroupDescription: string;
  readonly SubnetIds: [];
  readonly Tags: [];
}

interface CreateCacheSubnetGroupResult {
  readonly CacheSubnetGroup: CacheSubnetGroup;
}

interface CreateGlobalReplicationGroupMessage {
  readonly GlobalReplicationGroupIdSuffix: string;
  readonly GlobalReplicationGroupDescription: string;
  readonly PrimaryReplicationGroupId: string;
}

interface CreateGlobalReplicationGroupResult {
  readonly GlobalReplicationGroup: GlobalReplicationGroup;
}

interface CreateReplicationGroupMessage {
  readonly ReplicationGroupId: string;
  readonly ReplicationGroupDescription: string;
  readonly GlobalReplicationGroupId: string;
  readonly PrimaryClusterId: string;
  readonly AutomaticFailoverEnabled: boolean;
  readonly MultiAZEnabled: boolean;
  readonly NumCacheClusters: number;
  readonly PreferredCacheClusterAZs: [];
  readonly NumNodeGroups: number;
  readonly ReplicasPerNodeGroup: number;
  readonly NodeGroupConfiguration: [];
  readonly CacheNodeType: string;
  readonly Engine: string;
  readonly EngineVersion: string;
  readonly CacheParameterGroupName: string;
  readonly CacheSubnetGroupName: string;
  readonly CacheSecurityGroupNames: [];
  readonly SecurityGroupIds: [];
  readonly Tags: [];
  readonly SnapshotArns: [];
  readonly SnapshotName: string;
  readonly PreferredMaintenanceWindow: string;
  readonly Port: number;
  readonly NotificationTopicArn: string;
  readonly AutoMinorVersionUpgrade: boolean;
  readonly SnapshotRetentionLimit: number;
  readonly SnapshotWindow: string;
  readonly AuthToken: string;
  readonly TransitEncryptionEnabled: boolean;
  readonly AtRestEncryptionEnabled: boolean;
  readonly KmsKeyId: string;
  readonly UserGroupIds: [];
  readonly LogDeliveryConfigurations: [];
  readonly DataTieringEnabled: boolean;
}

interface CreateReplicationGroupResult {
  readonly ReplicationGroup: ReplicationGroup;
}

interface CreateSnapshotMessage {
  readonly ReplicationGroupId: string;
  readonly CacheClusterId: string;
  readonly SnapshotName: string;
  readonly KmsKeyId: string;
  readonly Tags: [];
}

interface CreateSnapshotResult {
  readonly Snapshot: Snapshot;
}

interface CreateUserGroupMessage {
  readonly UserGroupId: string;
  readonly Engine: string;
  readonly UserIds: [];
  readonly Tags: [];
}

interface CreateUserMessage {
  readonly UserId: string;
  readonly UserName: string;
  readonly Engine: string;
  readonly Passwords: [];
  readonly AccessString: string;
  readonly NoPasswordRequired: boolean;
  readonly Tags: [];
}

interface CustomerNodeEndpoint {
  readonly Address: string;
  readonly Port: number;
}

interface DecreaseNodeGroupsInGlobalReplicationGroupMessage {
  readonly GlobalReplicationGroupId: string;
  readonly NodeGroupCount: number;
  readonly GlobalNodeGroupsToRemove: [];
  readonly GlobalNodeGroupsToRetain: [];
  readonly ApplyImmediately: boolean;
}

interface DecreaseNodeGroupsInGlobalReplicationGroupResult {
  readonly GlobalReplicationGroup: GlobalReplicationGroup;
}

interface DecreaseReplicaCountMessage {
  readonly ReplicationGroupId: string;
  readonly NewReplicaCount: number;
  readonly ReplicaConfiguration: [];
  readonly ReplicasToRemove: [];
  readonly ApplyImmediately: boolean;
}

interface DecreaseReplicaCountResult {
  readonly ReplicationGroup: ReplicationGroup;
}

interface DefaultUserAssociatedToUserGroupFault {
}

interface DefaultUserRequired {
}

interface DeleteCacheClusterMessage {
  readonly CacheClusterId: string;
  readonly FinalSnapshotIdentifier: string;
}

interface DeleteCacheClusterResult {
  readonly CacheCluster: CacheCluster;
}

interface DeleteCacheParameterGroupMessage {
  readonly CacheParameterGroupName: string;
}

interface DeleteCacheSecurityGroupMessage {
  readonly CacheSecurityGroupName: string;
}

interface DeleteCacheSubnetGroupMessage {
  readonly CacheSubnetGroupName: string;
}

interface DeleteGlobalReplicationGroupMessage {
  readonly GlobalReplicationGroupId: string;
  readonly RetainPrimaryReplicationGroup: boolean;
}

interface DeleteGlobalReplicationGroupResult {
  readonly GlobalReplicationGroup: GlobalReplicationGroup;
}

interface DeleteReplicationGroupMessage {
  readonly ReplicationGroupId: string;
  readonly RetainPrimaryCluster: boolean;
  readonly FinalSnapshotIdentifier: string;
}

interface DeleteReplicationGroupResult {
  readonly ReplicationGroup: ReplicationGroup;
}

interface DeleteSnapshotMessage {
  readonly SnapshotName: string;
}

interface DeleteSnapshotResult {
  readonly Snapshot: Snapshot;
}

interface DeleteUserGroupMessage {
  readonly UserGroupId: string;
}

interface DeleteUserMessage {
  readonly UserId: string;
}

interface DescribeCacheClustersMessage {
  readonly CacheClusterId: string;
  readonly MaxRecords: number;
  readonly Marker: string;
  readonly ShowCacheNodeInfo: boolean;
  readonly ShowCacheClustersNotInReplicationGroups: boolean;
}

interface DescribeCacheEngineVersionsMessage {
  readonly Engine: string;
  readonly EngineVersion: string;
  readonly CacheParameterGroupFamily: string;
  readonly MaxRecords: number;
  readonly Marker: string;
  readonly DefaultOnly: boolean;
}

interface DescribeCacheParameterGroupsMessage {
  readonly CacheParameterGroupName: string;
  readonly MaxRecords: number;
  readonly Marker: string;
}

interface DescribeCacheParametersMessage {
  readonly CacheParameterGroupName: string;
  readonly Source: string;
  readonly MaxRecords: number;
  readonly Marker: string;
}

interface DescribeCacheSecurityGroupsMessage {
  readonly CacheSecurityGroupName: string;
  readonly MaxRecords: number;
  readonly Marker: string;
}

interface DescribeCacheSubnetGroupsMessage {
  readonly CacheSubnetGroupName: string;
  readonly MaxRecords: number;
  readonly Marker: string;
}

interface DescribeEngineDefaultParametersMessage {
  readonly CacheParameterGroupFamily: string;
  readonly MaxRecords: number;
  readonly Marker: string;
}

interface DescribeEngineDefaultParametersResult {
  readonly EngineDefaults: EngineDefaults;
}

interface DescribeEventsMessage {
  readonly SourceIdentifier: string;
  readonly SourceType: string;
  readonly StartTime: Date;
  readonly EndTime: Date;
  readonly Duration: number;
  readonly MaxRecords: number;
  readonly Marker: string;
}

interface DescribeGlobalReplicationGroupsMessage {
  readonly GlobalReplicationGroupId: string;
  readonly MaxRecords: number;
  readonly Marker: string;
  readonly ShowMemberInfo: boolean;
}

interface DescribeGlobalReplicationGroupsResult {
  readonly Marker: string;
  readonly GlobalReplicationGroups: [];
}

interface DescribeReplicationGroupsMessage {
  readonly ReplicationGroupId: string;
  readonly MaxRecords: number;
  readonly Marker: string;
}

interface DescribeReservedCacheNodesMessage {
  readonly ReservedCacheNodeId: string;
  readonly ReservedCacheNodesOfferingId: string;
  readonly CacheNodeType: string;
  readonly Duration: string;
  readonly ProductDescription: string;
  readonly OfferingType: string;
  readonly MaxRecords: number;
  readonly Marker: string;
}

interface DescribeReservedCacheNodesOfferingsMessage {
  readonly ReservedCacheNodesOfferingId: string;
  readonly CacheNodeType: string;
  readonly Duration: string;
  readonly ProductDescription: string;
  readonly OfferingType: string;
  readonly MaxRecords: number;
  readonly Marker: string;
}

interface DescribeServiceUpdatesMessage {
  readonly ServiceUpdateName: string;
  readonly ServiceUpdateStatus: [];
  readonly MaxRecords: number;
  readonly Marker: string;
}

interface DescribeSnapshotsListMessage {
  readonly Marker: string;
  readonly Snapshots: [];
}

interface DescribeSnapshotsMessage {
  readonly ReplicationGroupId: string;
  readonly CacheClusterId: string;
  readonly SnapshotName: string;
  readonly SnapshotSource: string;
  readonly Marker: string;
  readonly MaxRecords: number;
  readonly ShowNodeGroupConfig: boolean;
}

interface DescribeUpdateActionsMessage {
  readonly ServiceUpdateName: string;
  readonly ReplicationGroupIds: [];
  readonly CacheClusterIds: [];
  readonly Engine: string;
  readonly ServiceUpdateStatus: [];
  readonly ServiceUpdateTimeRange: TimeRangeFilter;
  readonly UpdateActionStatus: [];
  readonly ShowNodeLevelUpdateStatus: boolean;
  readonly MaxRecords: number;
  readonly Marker: string;
}

interface DescribeUserGroupsMessage {
  readonly UserGroupId: string;
  readonly MaxRecords: number;
  readonly Marker: string;
}

interface DescribeUserGroupsResult {
  readonly UserGroups: [];
  readonly Marker: string;
}

interface DescribeUsersMessage {
  readonly Engine: string;
  readonly UserId: string;
  readonly Filters: [];
  readonly MaxRecords: number;
  readonly Marker: string;
}

interface DescribeUsersResult {
  readonly Users: [];
  readonly Marker: string;
}

interface DestinationDetails {
  readonly CloudWatchLogsDetails: CloudWatchLogsDestinationDetails;
  readonly KinesisFirehoseDetails: KinesisFirehoseDestinationDetails;
}

interface DisassociateGlobalReplicationGroupMessage {
  readonly GlobalReplicationGroupId: string;
  readonly ReplicationGroupId: string;
  readonly ReplicationGroupRegion: string;
}

interface DisassociateGlobalReplicationGroupResult {
  readonly GlobalReplicationGroup: GlobalReplicationGroup;
}

interface DuplicateUserNameFault {
}

interface EC2SecurityGroup {
  readonly Status: string;
  readonly EC2SecurityGroupName: string;
  readonly EC2SecurityGroupOwnerId: string;
}

interface Endpoint {
  readonly Address: string;
  readonly Port: number;
}

interface EngineDefaults {
  readonly CacheParameterGroupFamily: string;
  readonly Marker: string;
  readonly Parameters: [];
  readonly CacheNodeTypeSpecificParameters: [];
}

interface Event {
  readonly SourceIdentifier: string;
  readonly SourceType: string;
  readonly Message: string;
  readonly Date: Date;
}

interface EventsMessage {
  readonly Marker: string;
  readonly Events: [];
}

interface FailoverGlobalReplicationGroupMessage {
  readonly GlobalReplicationGroupId: string;
  readonly PrimaryRegion: string;
  readonly PrimaryReplicationGroupId: string;
}

interface FailoverGlobalReplicationGroupResult {
  readonly GlobalReplicationGroup: GlobalReplicationGroup;
}

interface Filter {
  readonly Name: string;
  readonly Values: [];
}

interface GlobalNodeGroup {
  readonly GlobalNodeGroupId: string;
  readonly Slots: string;
}

interface GlobalReplicationGroup {
  readonly GlobalReplicationGroupId: string;
  readonly GlobalReplicationGroupDescription: string;
  readonly Status: string;
  readonly CacheNodeType: string;
  readonly Engine: string;
  readonly EngineVersion: string;
  readonly Members: [];
  readonly ClusterEnabled: boolean;
  readonly GlobalNodeGroups: [];
  readonly AuthTokenEnabled: boolean;
  readonly TransitEncryptionEnabled: boolean;
  readonly AtRestEncryptionEnabled: boolean;
  readonly ARN: string;
}

interface GlobalReplicationGroupAlreadyExistsFault {
}

interface GlobalReplicationGroupInfo {
  readonly GlobalReplicationGroupId: string;
  readonly GlobalReplicationGroupMemberRole: string;
}

interface GlobalReplicationGroupMember {
  readonly ReplicationGroupId: string;
  readonly ReplicationGroupRegion: string;
  readonly Role: string;
  readonly AutomaticFailover: string;
  readonly Status: string;
}

interface GlobalReplicationGroupNotFoundFault {
}

interface IncreaseNodeGroupsInGlobalReplicationGroupMessage {
  readonly GlobalReplicationGroupId: string;
  readonly NodeGroupCount: number;
  readonly RegionalConfigurations: [];
  readonly ApplyImmediately: boolean;
}

interface IncreaseNodeGroupsInGlobalReplicationGroupResult {
  readonly GlobalReplicationGroup: GlobalReplicationGroup;
}

interface IncreaseReplicaCountMessage {
  readonly ReplicationGroupId: string;
  readonly NewReplicaCount: number;
  readonly ReplicaConfiguration: [];
  readonly ApplyImmediately: boolean;
}

interface IncreaseReplicaCountResult {
  readonly ReplicationGroup: ReplicationGroup;
}

interface InsufficientCacheClusterCapacityFault {
}

interface InvalidARNFault {
}

interface InvalidCacheClusterStateFault {
}

interface InvalidCacheParameterGroupStateFault {
}

interface InvalidCacheSecurityGroupStateFault {
}

interface InvalidGlobalReplicationGroupStateFault {
}

interface InvalidKMSKeyFault {
}

interface InvalidParameterCombinationException {
  readonly message: string;
}

interface InvalidParameterValueException {
  readonly message: string;
}

interface InvalidReplicationGroupStateFault {
}

interface InvalidSnapshotStateFault {
}

interface InvalidSubnet {
}

interface InvalidUserGroupStateFault {
}

interface InvalidUserStateFault {
}

interface InvalidVPCNetworkStateFault {
}

interface KinesisFirehoseDestinationDetails {
  readonly DeliveryStream: string;
}

interface ListAllowedNodeTypeModificationsMessage {
  readonly CacheClusterId: string;
  readonly ReplicationGroupId: string;
}

interface ListTagsForResourceMessage {
  readonly ResourceName: string;
}

interface LogDeliveryConfiguration {
  readonly LogType: string;
  readonly DestinationType: string;
  readonly DestinationDetails: DestinationDetails;
  readonly LogFormat: string;
  readonly Status: string;
  readonly Message: string;
}

interface LogDeliveryConfigurationRequest {
  readonly LogType: string;
  readonly DestinationType: string;
  readonly DestinationDetails: DestinationDetails;
  readonly LogFormat: string;
  readonly Enabled: boolean;
}

interface ModifyCacheClusterMessage {
  readonly CacheClusterId: string;
  readonly NumCacheNodes: number;
  readonly CacheNodeIdsToRemove: [];
  readonly AZMode: string;
  readonly NewAvailabilityZones: [];
  readonly CacheSecurityGroupNames: [];
  readonly SecurityGroupIds: [];
  readonly PreferredMaintenanceWindow: string;
  readonly NotificationTopicArn: string;
  readonly CacheParameterGroupName: string;
  readonly NotificationTopicStatus: string;
  readonly ApplyImmediately: boolean;
  readonly EngineVersion: string;
  readonly AutoMinorVersionUpgrade: boolean;
  readonly SnapshotRetentionLimit: number;
  readonly SnapshotWindow: string;
  readonly CacheNodeType: string;
  readonly AuthToken: string;
  readonly AuthTokenUpdateStrategy: string;
  readonly LogDeliveryConfigurations: [];
}

interface ModifyCacheClusterResult {
  readonly CacheCluster: CacheCluster;
}

interface ModifyCacheParameterGroupMessage {
  readonly CacheParameterGroupName: string;
  readonly ParameterNameValues: [];
}

interface ModifyCacheSubnetGroupMessage {
  readonly CacheSubnetGroupName: string;
  readonly CacheSubnetGroupDescription: string;
  readonly SubnetIds: [];
}

interface ModifyCacheSubnetGroupResult {
  readonly CacheSubnetGroup: CacheSubnetGroup;
}

interface ModifyGlobalReplicationGroupMessage {
  readonly GlobalReplicationGroupId: string;
  readonly ApplyImmediately: boolean;
  readonly CacheNodeType: string;
  readonly EngineVersion: string;
  readonly CacheParameterGroupName: string;
  readonly GlobalReplicationGroupDescription: string;
  readonly AutomaticFailoverEnabled: boolean;
}

interface ModifyGlobalReplicationGroupResult {
  readonly GlobalReplicationGroup: GlobalReplicationGroup;
}

interface ModifyReplicationGroupMessage {
  readonly ReplicationGroupId: string;
  readonly ReplicationGroupDescription: string;
  readonly PrimaryClusterId: string;
  readonly SnapshottingClusterId: string;
  readonly AutomaticFailoverEnabled: boolean;
  readonly MultiAZEnabled: boolean;
  readonly NodeGroupId: string;
  readonly CacheSecurityGroupNames: [];
  readonly SecurityGroupIds: [];
  readonly PreferredMaintenanceWindow: string;
  readonly NotificationTopicArn: string;
  readonly CacheParameterGroupName: string;
  readonly NotificationTopicStatus: string;
  readonly ApplyImmediately: boolean;
  readonly EngineVersion: string;
  readonly AutoMinorVersionUpgrade: boolean;
  readonly SnapshotRetentionLimit: number;
  readonly SnapshotWindow: string;
  readonly CacheNodeType: string;
  readonly AuthToken: string;
  readonly AuthTokenUpdateStrategy: string;
  readonly UserGroupIdsToAdd: [];
  readonly UserGroupIdsToRemove: [];
  readonly RemoveUserGroups: boolean;
  readonly LogDeliveryConfigurations: [];
}

interface ModifyReplicationGroupResult {
  readonly ReplicationGroup: ReplicationGroup;
}

interface ModifyReplicationGroupShardConfigurationMessage {
  readonly ReplicationGroupId: string;
  readonly NodeGroupCount: number;
  readonly ApplyImmediately: boolean;
  readonly ReshardingConfiguration: [];
  readonly NodeGroupsToRemove: [];
  readonly NodeGroupsToRetain: [];
}

interface ModifyReplicationGroupShardConfigurationResult {
  readonly ReplicationGroup: ReplicationGroup;
}

interface ModifyUserGroupMessage {
  readonly UserGroupId: string;
  readonly UserIdsToAdd: [];
  readonly UserIdsToRemove: [];
}

interface ModifyUserMessage {
  readonly UserId: string;
  readonly AccessString: string;
  readonly AppendAccessString: string;
  readonly Passwords: [];
  readonly NoPasswordRequired: boolean;
}

interface NoOperationFault {
}

interface NodeGroup {
  readonly NodeGroupId: string;
  readonly Status: string;
  readonly PrimaryEndpoint: Endpoint;
  readonly ReaderEndpoint: Endpoint;
  readonly Slots: string;
  readonly NodeGroupMembers: [];
}

interface NodeGroupConfiguration {
  readonly NodeGroupId: string;
  readonly Slots: string;
  readonly ReplicaCount: number;
  readonly PrimaryAvailabilityZone: string;
  readonly ReplicaAvailabilityZones: [];
  readonly PrimaryOutpostArn: string;
  readonly ReplicaOutpostArns: [];
}

interface NodeGroupMember {
  readonly CacheClusterId: string;
  readonly CacheNodeId: string;
  readonly ReadEndpoint: Endpoint;
  readonly PreferredAvailabilityZone: string;
  readonly PreferredOutpostArn: string;
  readonly CurrentRole: string;
}

interface NodeGroupMemberUpdateStatus {
  readonly CacheClusterId: string;
  readonly CacheNodeId: string;
  readonly NodeUpdateStatus: string;
  readonly NodeDeletionDate: Date;
  readonly NodeUpdateStartDate: Date;
  readonly NodeUpdateEndDate: Date;
  readonly NodeUpdateInitiatedBy: string;
  readonly NodeUpdateInitiatedDate: Date;
  readonly NodeUpdateStatusModifiedDate: Date;
}

interface NodeGroupNotFoundFault {
}

interface NodeGroupUpdateStatus {
  readonly NodeGroupId: string;
  readonly NodeGroupMemberUpdateStatus: [];
}

interface NodeGroupsPerReplicationGroupQuotaExceededFault {
}

interface NodeQuotaForClusterExceededFault {
}

interface NodeQuotaForCustomerExceededFault {
}

interface NodeSnapshot {
  readonly CacheClusterId: string;
  readonly NodeGroupId: string;
  readonly CacheNodeId: string;
  readonly NodeGroupConfiguration: NodeGroupConfiguration;
  readonly CacheSize: string;
  readonly CacheNodeCreateTime: Date;
  readonly SnapshotCreateTime: Date;
}

interface NotificationConfiguration {
  readonly TopicArn: string;
  readonly TopicStatus: string;
}

interface Parameter {
  readonly ParameterName: string;
  readonly ParameterValue: string;
  readonly Description: string;
  readonly Source: string;
  readonly DataType: string;
  readonly AllowedValues: string;
  readonly IsModifiable: boolean;
  readonly MinimumEngineVersion: string;
  readonly ChangeType: string;
}

interface ParameterNameValue {
  readonly ParameterName: string;
  readonly ParameterValue: string;
}

interface PendingLogDeliveryConfiguration {
  readonly LogType: string;
  readonly DestinationType: string;
  readonly DestinationDetails: DestinationDetails;
  readonly LogFormat: string;
}

interface PendingModifiedValues {
  readonly NumCacheNodes: number;
  readonly CacheNodeIdsToRemove: [];
  readonly EngineVersion: string;
  readonly CacheNodeType: string;
  readonly AuthTokenStatus: string;
  readonly LogDeliveryConfigurations: [];
}

interface ProcessedUpdateAction {
  readonly ReplicationGroupId: string;
  readonly CacheClusterId: string;
  readonly ServiceUpdateName: string;
  readonly UpdateActionStatus: string;
}

interface PurchaseReservedCacheNodesOfferingMessage {
  readonly ReservedCacheNodesOfferingId: string;
  readonly ReservedCacheNodeId: string;
  readonly CacheNodeCount: number;
  readonly Tags: [];
}

interface PurchaseReservedCacheNodesOfferingResult {
  readonly ReservedCacheNode: ReservedCacheNode;
}

interface RebalanceSlotsInGlobalReplicationGroupMessage {
  readonly GlobalReplicationGroupId: string;
  readonly ApplyImmediately: boolean;
}

interface RebalanceSlotsInGlobalReplicationGroupResult {
  readonly GlobalReplicationGroup: GlobalReplicationGroup;
}

interface RebootCacheClusterMessage {
  readonly CacheClusterId: string;
  readonly CacheNodeIdsToReboot: [];
}

interface RebootCacheClusterResult {
  readonly CacheCluster: CacheCluster;
}

interface RecurringCharge {
  readonly RecurringChargeAmount: unknown;
  readonly RecurringChargeFrequency: string;
}

interface RegionalConfiguration {
  readonly ReplicationGroupId: string;
  readonly ReplicationGroupRegion: string;
  readonly ReshardingConfiguration: [];
}

interface RemoveTagsFromResourceMessage {
  readonly ResourceName: string;
  readonly TagKeys: [];
}

interface ReplicationGroup {
  readonly ReplicationGroupId: string;
  readonly Description: string;
  readonly GlobalReplicationGroupInfo: GlobalReplicationGroupInfo;
  readonly Status: string;
  readonly PendingModifiedValues: ReplicationGroupPendingModifiedValues;
  readonly MemberClusters: [];
  readonly NodeGroups: [];
  readonly SnapshottingClusterId: string;
  readonly AutomaticFailover: string;
  readonly MultiAZ: string;
  readonly ConfigurationEndpoint: Endpoint;
  readonly SnapshotRetentionLimit: number;
  readonly SnapshotWindow: string;
  readonly ClusterEnabled: boolean;
  readonly CacheNodeType: string;
  readonly AuthTokenEnabled: boolean;
  readonly AuthTokenLastModifiedDate: Date;
  readonly TransitEncryptionEnabled: boolean;
  readonly AtRestEncryptionEnabled: boolean;
  readonly MemberClustersOutpostArns: [];
  readonly KmsKeyId: string;
  readonly ARN: string;
  readonly UserGroupIds: [];
  readonly LogDeliveryConfigurations: [];
  readonly ReplicationGroupCreateTime: Date;
  readonly DataTiering: string;
}

interface ReplicationGroupAlreadyExistsFault {
}

interface ReplicationGroupAlreadyUnderMigrationFault {
}

interface ReplicationGroupMessage {
  readonly Marker: string;
  readonly ReplicationGroups: [];
}

interface ReplicationGroupNotFoundFault {
}

interface ReplicationGroupNotUnderMigrationFault {
}

interface ReplicationGroupPendingModifiedValues {
  readonly PrimaryClusterId: string;
  readonly AutomaticFailoverStatus: string;
  readonly Resharding: ReshardingStatus;
  readonly AuthTokenStatus: string;
  readonly UserGroups: UserGroupsUpdateStatus;
  readonly LogDeliveryConfigurations: [];
}

interface ReservedCacheNode {
  readonly ReservedCacheNodeId: string;
  readonly ReservedCacheNodesOfferingId: string;
  readonly CacheNodeType: string;
  readonly StartTime: Date;
  readonly Duration: number;
  readonly FixedPrice: unknown;
  readonly UsagePrice: unknown;
  readonly CacheNodeCount: number;
  readonly ProductDescription: string;
  readonly OfferingType: string;
  readonly State: string;
  readonly RecurringCharges: [];
  readonly ReservationARN: string;
}

interface ReservedCacheNodeAlreadyExistsFault {
}

interface ReservedCacheNodeMessage {
  readonly Marker: string;
  readonly ReservedCacheNodes: [];
}

interface ReservedCacheNodeNotFoundFault {
}

interface ReservedCacheNodeQuotaExceededFault {
}

interface ReservedCacheNodesOffering {
  readonly ReservedCacheNodesOfferingId: string;
  readonly CacheNodeType: string;
  readonly Duration: number;
  readonly FixedPrice: unknown;
  readonly UsagePrice: unknown;
  readonly ProductDescription: string;
  readonly OfferingType: string;
  readonly RecurringCharges: [];
}

interface ReservedCacheNodesOfferingMessage {
  readonly Marker: string;
  readonly ReservedCacheNodesOfferings: [];
}

interface ReservedCacheNodesOfferingNotFoundFault {
}

interface ResetCacheParameterGroupMessage {
  readonly CacheParameterGroupName: string;
  readonly ResetAllParameters: boolean;
  readonly ParameterNameValues: [];
}

interface ReshardingConfiguration {
  readonly NodeGroupId: string;
  readonly PreferredAvailabilityZones: [];
}

interface ReshardingStatus {
  readonly SlotMigration: SlotMigration;
}

interface RevokeCacheSecurityGroupIngressMessage {
  readonly CacheSecurityGroupName: string;
  readonly EC2SecurityGroupName: string;
  readonly EC2SecurityGroupOwnerId: string;
}

interface RevokeCacheSecurityGroupIngressResult {
  readonly CacheSecurityGroup: CacheSecurityGroup;
}

interface SecurityGroupMembership {
  readonly SecurityGroupId: string;
  readonly Status: string;
}

interface ServiceLinkedRoleNotFoundFault {
}

interface ServiceUpdate {
  readonly ServiceUpdateName: string;
  readonly ServiceUpdateReleaseDate: Date;
  readonly ServiceUpdateEndDate: Date;
  readonly ServiceUpdateSeverity: string;
  readonly ServiceUpdateRecommendedApplyByDate: Date;
  readonly ServiceUpdateStatus: string;
  readonly ServiceUpdateDescription: string;
  readonly ServiceUpdateType: string;
  readonly Engine: string;
  readonly EngineVersion: string;
  readonly AutoUpdateAfterRecommendedApplyByDate: boolean;
  readonly EstimatedUpdateTime: string;
}

interface ServiceUpdateNotFoundFault {
}

interface ServiceUpdatesMessage {
  readonly Marker: string;
  readonly ServiceUpdates: [];
}

interface SlotMigration {
  readonly ProgressPercentage: unknown;
}

interface Snapshot {
  readonly SnapshotName: string;
  readonly ReplicationGroupId: string;
  readonly ReplicationGroupDescription: string;
  readonly CacheClusterId: string;
  readonly SnapshotStatus: string;
  readonly SnapshotSource: string;
  readonly CacheNodeType: string;
  readonly Engine: string;
  readonly EngineVersion: string;
  readonly NumCacheNodes: number;
  readonly PreferredAvailabilityZone: string;
  readonly PreferredOutpostArn: string;
  readonly CacheClusterCreateTime: Date;
  readonly PreferredMaintenanceWindow: string;
  readonly TopicArn: string;
  readonly Port: number;
  readonly CacheParameterGroupName: string;
  readonly CacheSubnetGroupName: string;
  readonly VpcId: string;
  readonly AutoMinorVersionUpgrade: boolean;
  readonly SnapshotRetentionLimit: number;
  readonly SnapshotWindow: string;
  readonly NumNodeGroups: number;
  readonly AutomaticFailover: string;
  readonly NodeSnapshots: [];
  readonly KmsKeyId: string;
  readonly ARN: string;
  readonly DataTiering: string;
}

interface SnapshotAlreadyExistsFault {
}

interface SnapshotFeatureNotSupportedFault {
}

interface SnapshotNotFoundFault {
}

interface SnapshotQuotaExceededFault {
}

interface StartMigrationMessage {
  readonly ReplicationGroupId: string;
  readonly CustomerNodeEndpointList: [];
}

interface StartMigrationResponse {
  readonly ReplicationGroup: ReplicationGroup;
}

interface Subnet {
  readonly SubnetIdentifier: string;
  readonly SubnetAvailabilityZone: AvailabilityZone;
  readonly SubnetOutpost: SubnetOutpost;
}

interface SubnetInUse {
}

interface SubnetNotAllowedFault {
}

interface SubnetOutpost {
  readonly SubnetOutpostArn: string;
}

interface Tag {
  readonly Key: string;
  readonly Value: string;
}

interface TagListMessage {
  readonly TagList: [];
}

interface TagNotFoundFault {
}

interface TagQuotaPerResourceExceeded {
}

interface TestFailoverMessage {
  readonly ReplicationGroupId: string;
  readonly NodeGroupId: string;
}

interface TestFailoverNotAvailableFault {
}

interface TestFailoverResult {
  readonly ReplicationGroup: ReplicationGroup;
}

interface TimeRangeFilter {
  readonly StartTime: Date;
  readonly EndTime: Date;
}

interface UnprocessedUpdateAction {
  readonly ReplicationGroupId: string;
  readonly CacheClusterId: string;
  readonly ServiceUpdateName: string;
  readonly ErrorType: string;
  readonly ErrorMessage: string;
}

interface UpdateAction {
  readonly ReplicationGroupId: string;
  readonly CacheClusterId: string;
  readonly ServiceUpdateName: string;
  readonly ServiceUpdateReleaseDate: Date;
  readonly ServiceUpdateSeverity: string;
  readonly ServiceUpdateStatus: string;
  readonly ServiceUpdateRecommendedApplyByDate: Date;
  readonly ServiceUpdateType: string;
  readonly UpdateActionAvailableDate: Date;
  readonly UpdateActionStatus: string;
  readonly NodesUpdated: string;
  readonly UpdateActionStatusModifiedDate: Date;
  readonly SlaMet: string;
  readonly NodeGroupUpdateStatus: [];
  readonly CacheNodeUpdateStatus: [];
  readonly EstimatedUpdateTime: string;
  readonly Engine: string;
}

interface UpdateActionResultsMessage {
  readonly ProcessedUpdateActions: [];
  readonly UnprocessedUpdateActions: [];
}

interface UpdateActionsMessage {
  readonly Marker: string;
  readonly UpdateActions: [];
}

interface User {
  readonly UserId: string;
  readonly UserName: string;
  readonly Status: string;
  readonly Engine: string;
  readonly MinimumEngineVersion: string;
  readonly AccessString: string;
  readonly UserGroupIds: [];
  readonly Authentication: Authentication;
  readonly ARN: string;
}

interface UserAlreadyExistsFault {
}

interface UserGroup {
  readonly UserGroupId: string;
  readonly Status: string;
  readonly Engine: string;
  readonly UserIds: [];
  readonly MinimumEngineVersion: string;
  readonly PendingChanges: UserGroupPendingChanges;
  readonly ReplicationGroups: [];
  readonly ARN: string;
}

interface UserGroupAlreadyExistsFault {
}

interface UserGroupNotFoundFault {
}

interface UserGroupPendingChanges {
  readonly UserIdsToRemove: [];
  readonly UserIdsToAdd: [];
}

interface UserGroupQuotaExceededFault {
}

interface UserGroupsUpdateStatus {
  readonly UserGroupIdsToAdd: [];
  readonly UserGroupIdsToRemove: [];
}

interface UserNotFoundFault {
}

interface UserQuotaExceededFault {
}

