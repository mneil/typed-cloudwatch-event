/**
 * STOP. This file is autogenerated. DO NOT EDIT by hand
 */
export interface AcceptInputDeviceTransfer {
  readonly InputDeviceId: string;
}

export interface BatchDelete {
  readonly ChannelIds?: [];
  readonly InputIds?: [];
  readonly InputSecurityGroupIds?: [];
  readonly MultiplexIds?: [];
}

export interface BatchStart {
  readonly ChannelIds?: [];
  readonly MultiplexIds?: [];
}

export interface BatchStop {
  readonly ChannelIds?: [];
  readonly MultiplexIds?: [];
}

export interface BatchUpdateSchedule {
  readonly ChannelId: string;
  readonly Creates?: BatchScheduleActionCreateRequest;
  readonly Deletes?: BatchScheduleActionDeleteRequest;
}

export interface CancelInputDeviceTransfer {
  readonly InputDeviceId: string;
}

export interface ClaimDevice {
  readonly Id?: string;
}

export interface CreateChannel {
  readonly CdiInputSpecification?: CdiInputSpecification;
  readonly ChannelClass?: string;
  readonly Destinations?: [];
  readonly EncoderSettings?: EncoderSettings;
  readonly InputAttachments?: [];
  readonly InputSpecification?: InputSpecification;
  readonly LogLevel?: string;
  readonly Name?: string;
  readonly RequestId?: string;
  readonly Reserved?: string;
  readonly RoleArn?: string;
  readonly Tags?: {[key: string]: any};
  readonly Vpc?: VpcOutputSettings;
}

export interface CreateInput {
  readonly Destinations?: [];
  readonly InputDevices?: [];
  readonly InputSecurityGroups?: [];
  readonly MediaConnectFlows?: [];
  readonly Name?: string;
  readonly RequestId?: string;
  readonly RoleArn?: string;
  readonly Sources?: [];
  readonly Tags?: {[key: string]: any};
  readonly Type?: string;
  readonly Vpc?: InputVpcRequest;
}

export interface CreateInputSecurityGroup {
  readonly Tags?: {[key: string]: any};
  readonly WhitelistRules?: [];
}

export interface CreateMultiplex {
  readonly AvailabilityZones: [];
  readonly MultiplexSettings: MultiplexSettings;
  readonly Name: string;
  readonly RequestId: string;
  readonly Tags?: {[key: string]: any};
}

export interface CreateMultiplexProgram {
  readonly MultiplexId: string;
  readonly MultiplexProgramSettings: MultiplexProgramSettings;
  readonly ProgramName: string;
  readonly RequestId: string;
}

export interface CreatePartnerInput {
  readonly InputId: string;
  readonly RequestId?: string;
  readonly Tags?: {[key: string]: any};
}

export interface CreateTags {
  readonly ResourceArn: string;
  readonly Tags?: {[key: string]: any};
}

export interface DeleteChannel {
  readonly ChannelId: string;
}

export interface DeleteInput {
  readonly InputId: string;
}

export interface DeleteInputSecurityGroup {
  readonly InputSecurityGroupId: string;
}

export interface DeleteMultiplex {
  readonly MultiplexId: string;
}

export interface DeleteMultiplexProgram {
  readonly MultiplexId: string;
  readonly ProgramName: string;
}

export interface DeleteReservation {
  readonly ReservationId: string;
}

export interface DeleteSchedule {
  readonly ChannelId: string;
}

export interface DeleteTags {
  readonly ResourceArn: string;
  readonly TagKeys: [];
}

export interface DescribeChannel {
  readonly ChannelId: string;
}

export interface DescribeInput {
  readonly InputId: string;
}

export interface DescribeInputDevice {
  readonly InputDeviceId: string;
}

export interface DescribeInputDeviceThumbnail {
  readonly InputDeviceId: string;
  readonly Accept: string;
}

export interface DescribeInputSecurityGroup {
  readonly InputSecurityGroupId: string;
}

export interface DescribeMultiplex {
  readonly MultiplexId: string;
}

export interface DescribeMultiplexProgram {
  readonly MultiplexId: string;
  readonly ProgramName: string;
}

export interface DescribeOffering {
  readonly OfferingId: string;
}

export interface DescribeReservation {
  readonly ReservationId: string;
}

export interface DescribeSchedule {
  readonly ChannelId: string;
  readonly MaxResults?: number;
  readonly NextToken?: string;
}

export interface ListChannels {
  readonly MaxResults?: number;
  readonly NextToken?: string;
}

export interface ListInputDeviceTransfers {
  readonly MaxResults?: number;
  readonly NextToken?: string;
  readonly TransferType: string;
}

export interface ListInputDevices {
  readonly MaxResults?: number;
  readonly NextToken?: string;
}

export interface ListInputSecurityGroups {
  readonly MaxResults?: number;
  readonly NextToken?: string;
}

export interface ListInputs {
  readonly MaxResults?: number;
  readonly NextToken?: string;
}

export interface ListMultiplexPrograms {
  readonly MaxResults?: number;
  readonly MultiplexId: string;
  readonly NextToken?: string;
}

export interface ListMultiplexes {
  readonly MaxResults?: number;
  readonly NextToken?: string;
}

export interface ListOfferings {
  readonly ChannelClass?: string;
  readonly ChannelConfiguration?: string;
  readonly Codec?: string;
  readonly Duration?: string;
  readonly MaxResults?: number;
  readonly MaximumBitrate?: string;
  readonly MaximumFramerate?: string;
  readonly NextToken?: string;
  readonly Resolution?: string;
  readonly ResourceType?: string;
  readonly SpecialFeature?: string;
  readonly VideoQuality?: string;
}

export interface ListReservations {
  readonly ChannelClass?: string;
  readonly Codec?: string;
  readonly MaxResults?: number;
  readonly MaximumBitrate?: string;
  readonly MaximumFramerate?: string;
  readonly NextToken?: string;
  readonly Resolution?: string;
  readonly ResourceType?: string;
  readonly SpecialFeature?: string;
  readonly VideoQuality?: string;
}

export interface ListTagsForResource {
  readonly ResourceArn: string;
}

export interface PurchaseOffering {
  readonly Count: number;
  readonly Name?: string;
  readonly OfferingId: string;
  readonly RequestId?: string;
  readonly Start?: string;
  readonly Tags?: {[key: string]: any};
}

export interface RejectInputDeviceTransfer {
  readonly InputDeviceId: string;
}

export interface StartChannel {
  readonly ChannelId: string;
}

export interface StartMultiplex {
  readonly MultiplexId: string;
}

export interface StopChannel {
  readonly ChannelId: string;
}

export interface StopMultiplex {
  readonly MultiplexId: string;
}

export interface TransferInputDevice {
  readonly InputDeviceId: string;
  readonly TargetCustomerId?: string;
  readonly TargetRegion?: string;
  readonly TransferMessage?: string;
}

export interface UpdateChannel {
  readonly CdiInputSpecification?: CdiInputSpecification;
  readonly ChannelId: string;
  readonly Destinations?: [];
  readonly EncoderSettings?: EncoderSettings;
  readonly InputAttachments?: [];
  readonly InputSpecification?: InputSpecification;
  readonly LogLevel?: string;
  readonly Name?: string;
  readonly RoleArn?: string;
}

export interface UpdateChannelClass {
  readonly ChannelClass: string;
  readonly ChannelId: string;
  readonly Destinations?: [];
}

export interface UpdateInput {
  readonly Destinations?: [];
  readonly InputDevices?: [];
  readonly InputId: string;
  readonly InputSecurityGroups?: [];
  readonly MediaConnectFlows?: [];
  readonly Name?: string;
  readonly RoleArn?: string;
  readonly Sources?: [];
}

export interface UpdateInputDevice {
  readonly HdDeviceSettings?: InputDeviceConfigurableSettings;
  readonly InputDeviceId: string;
  readonly Name?: string;
  readonly UhdDeviceSettings?: InputDeviceConfigurableSettings;
}

export interface UpdateInputSecurityGroup {
  readonly InputSecurityGroupId: string;
  readonly Tags?: {[key: string]: any};
  readonly WhitelistRules?: [];
}

export interface UpdateMultiplex {
  readonly MultiplexId: string;
  readonly MultiplexSettings?: MultiplexSettings;
  readonly Name?: string;
}

export interface UpdateMultiplexProgram {
  readonly MultiplexId: string;
  readonly MultiplexProgramSettings?: MultiplexProgramSettings;
  readonly ProgramName: string;
}

export interface UpdateReservation {
  readonly Name?: string;
  readonly ReservationId: string;
}

export interface AacSettings {
  readonly Bitrate?: unknown;
  readonly CodingMode?: string;
  readonly InputType?: string;
  readonly Profile?: string;
  readonly RateControlMode?: string;
  readonly RawFormat?: string;
  readonly SampleRate?: unknown;
  readonly Spec?: string;
  readonly VbrQuality?: string;
}

export interface Ac3Settings {
  readonly Bitrate?: unknown;
  readonly BitstreamMode?: string;
  readonly CodingMode?: string;
  readonly Dialnorm?: number;
  readonly DrcProfile?: string;
  readonly LfeFilter?: string;
  readonly MetadataControl?: string;
}

export interface AcceptInputDeviceTransferRequest {
  readonly InputDeviceId: string;
}

export interface AcceptInputDeviceTransferResponse {
}

export interface AccessDenied {
  readonly Message?: string;
}

export interface AncillarySourceSettings {
  readonly SourceAncillaryChannelNumber?: number;
}

export interface ArchiveCdnSettings {
  readonly ArchiveS3Settings?: ArchiveS3Settings;
}

export interface ArchiveContainerSettings {
  readonly M2tsSettings?: M2tsSettings;
  readonly RawSettings?: RawSettings;
}

export interface ArchiveGroupSettings {
  readonly ArchiveCdnSettings?: ArchiveCdnSettings;
  readonly Destination: OutputLocationRef;
  readonly RolloverInterval?: number;
}

export interface ArchiveOutputSettings {
  readonly ContainerSettings: ArchiveContainerSettings;
  readonly Extension?: string;
  readonly NameModifier?: string;
}

export interface ArchiveS3Settings {
  readonly CannedAcl?: string;
}

export interface AribDestinationSettings {
}

export interface AribSourceSettings {
}

export interface AudioChannelMapping {
  readonly InputChannelLevels: [];
  readonly OutputChannel: number;
}

export interface AudioCodecSettings {
  readonly AacSettings?: AacSettings;
  readonly Ac3Settings?: Ac3Settings;
  readonly Eac3Settings?: Eac3Settings;
  readonly Mp2Settings?: Mp2Settings;
  readonly PassThroughSettings?: PassThroughSettings;
  readonly WavSettings?: WavSettings;
}

export interface AudioDescription {
  readonly AudioNormalizationSettings?: AudioNormalizationSettings;
  readonly AudioSelectorName: string;
  readonly AudioType?: string;
  readonly AudioTypeControl?: string;
  readonly AudioWatermarkingSettings?: AudioWatermarkSettings;
  readonly CodecSettings?: AudioCodecSettings;
  readonly LanguageCode?: string;
  readonly LanguageCodeControl?: string;
  readonly Name: string;
  readonly RemixSettings?: RemixSettings;
  readonly StreamName?: string;
}

export interface AudioHlsRenditionSelection {
  readonly GroupId: string;
  readonly Name: string;
}

export interface AudioLanguageSelection {
  readonly LanguageCode: string;
  readonly LanguageSelectionPolicy?: string;
}

export interface AudioNormalizationSettings {
  readonly Algorithm?: string;
  readonly AlgorithmControl?: string;
  readonly TargetLkfs?: unknown;
}

export interface AudioOnlyHlsSettings {
  readonly AudioGroupId?: string;
  readonly AudioOnlyImage?: InputLocation;
  readonly AudioTrackType?: string;
  readonly SegmentType?: string;
}

export interface AudioPidSelection {
  readonly Pid: number;
}

export interface AudioSelector {
  readonly Name: string;
  readonly SelectorSettings?: AudioSelectorSettings;
}

export interface AudioSelectorSettings {
  readonly AudioHlsRenditionSelection?: AudioHlsRenditionSelection;
  readonly AudioLanguageSelection?: AudioLanguageSelection;
  readonly AudioPidSelection?: AudioPidSelection;
  readonly AudioTrackSelection?: AudioTrackSelection;
}

export interface AudioSilenceFailoverSettings {
  readonly AudioSelectorName: string;
  readonly AudioSilenceThresholdMsec?: number;
}

export interface AudioTrack {
  readonly Track: number;
}

export interface AudioTrackSelection {
  readonly Tracks: [];
}

export interface AudioWatermarkSettings {
  readonly NielsenWatermarksSettings?: NielsenWatermarksSettings;
}

export interface AutomaticInputFailoverSettings {
  readonly ErrorClearTimeMsec?: number;
  readonly FailoverConditions?: [];
  readonly InputPreference?: string;
  readonly SecondaryInputId: string;
}

export interface AvailBlanking {
  readonly AvailBlankingImage?: InputLocation;
  readonly State?: string;
}

export interface AvailConfiguration {
  readonly AvailSettings?: AvailSettings;
}

export interface AvailSettings {
  readonly Scte35SpliceInsert?: Scte35SpliceInsert;
  readonly Scte35TimeSignalApos?: Scte35TimeSignalApos;
}

export interface BadGatewayException {
  readonly Message?: string;
}

export interface BadRequestException {
  readonly Message?: string;
}

export interface BatchDelete {
  readonly ChannelIds?: [];
  readonly InputIds?: [];
  readonly InputSecurityGroupIds?: [];
  readonly MultiplexIds?: [];
}

export interface BatchDeleteRequest {
  readonly ChannelIds?: [];
  readonly InputIds?: [];
  readonly InputSecurityGroupIds?: [];
  readonly MultiplexIds?: [];
}

export interface BatchDeleteResponse {
  readonly Failed?: [];
  readonly Successful?: [];
}

export interface BatchDeleteResultModel {
  readonly Failed?: [];
  readonly Successful?: [];
}

export interface BatchFailedResultModel {
  readonly Arn?: string;
  readonly Code?: string;
  readonly Id?: string;
  readonly Message?: string;
}

export interface BatchScheduleActionCreateRequest {
  readonly ScheduleActions: [];
}

export interface BatchScheduleActionCreateResult {
  readonly ScheduleActions: [];
}

export interface BatchScheduleActionDeleteRequest {
  readonly ActionNames: [];
}

export interface BatchScheduleActionDeleteResult {
  readonly ScheduleActions: [];
}

export interface BatchStart {
  readonly ChannelIds?: [];
  readonly MultiplexIds?: [];
}

export interface BatchStartRequest {
  readonly ChannelIds?: [];
  readonly MultiplexIds?: [];
}

export interface BatchStartResponse {
  readonly Failed?: [];
  readonly Successful?: [];
}

export interface BatchStartResultModel {
  readonly Failed?: [];
  readonly Successful?: [];
}

export interface BatchStop {
  readonly ChannelIds?: [];
  readonly MultiplexIds?: [];
}

export interface BatchStopRequest {
  readonly ChannelIds?: [];
  readonly MultiplexIds?: [];
}

export interface BatchStopResponse {
  readonly Failed?: [];
  readonly Successful?: [];
}

export interface BatchStopResultModel {
  readonly Failed?: [];
  readonly Successful?: [];
}

export interface BatchSuccessfulResultModel {
  readonly Arn?: string;
  readonly Id?: string;
  readonly State?: string;
}

export interface BatchUpdateScheduleRequest {
  readonly ChannelId: string;
  readonly Creates?: BatchScheduleActionCreateRequest;
  readonly Deletes?: BatchScheduleActionDeleteRequest;
}

export interface BatchUpdateScheduleResponse {
  readonly Creates?: BatchScheduleActionCreateResult;
  readonly Deletes?: BatchScheduleActionDeleteResult;
}

export interface BatchUpdateScheduleResult {
  readonly Creates?: BatchScheduleActionCreateResult;
  readonly Deletes?: BatchScheduleActionDeleteResult;
}

export interface BlackoutSlate {
  readonly BlackoutSlateImage?: InputLocation;
  readonly NetworkEndBlackout?: string;
  readonly NetworkEndBlackoutImage?: InputLocation;
  readonly NetworkId?: string;
  readonly State?: string;
}

export interface BurnInDestinationSettings {
  readonly Alignment?: string;
  readonly BackgroundColor?: string;
  readonly BackgroundOpacity?: number;
  readonly Font?: InputLocation;
  readonly FontColor?: string;
  readonly FontOpacity?: number;
  readonly FontResolution?: number;
  readonly FontSize?: string;
  readonly OutlineColor?: string;
  readonly OutlineSize?: number;
  readonly ShadowColor?: string;
  readonly ShadowOpacity?: number;
  readonly ShadowXOffset?: number;
  readonly ShadowYOffset?: number;
  readonly TeletextGridControl?: string;
  readonly XPosition?: number;
  readonly YPosition?: number;
}

export interface CancelInputDeviceTransferRequest {
  readonly InputDeviceId: string;
}

export interface CancelInputDeviceTransferResponse {
}

export interface CaptionDescription {
  readonly CaptionSelectorName: string;
  readonly DestinationSettings?: CaptionDestinationSettings;
  readonly LanguageCode?: string;
  readonly LanguageDescription?: string;
  readonly Name: string;
}

export interface CaptionDestinationSettings {
  readonly AribDestinationSettings?: AribDestinationSettings;
  readonly BurnInDestinationSettings?: BurnInDestinationSettings;
  readonly DvbSubDestinationSettings?: DvbSubDestinationSettings;
  readonly EbuTtDDestinationSettings?: EbuTtDDestinationSettings;
  readonly EmbeddedDestinationSettings?: EmbeddedDestinationSettings;
  readonly EmbeddedPlusScte20DestinationSettings?: EmbeddedPlusScte20DestinationSettings;
  readonly RtmpCaptionInfoDestinationSettings?: RtmpCaptionInfoDestinationSettings;
  readonly Scte20PlusEmbeddedDestinationSettings?: Scte20PlusEmbeddedDestinationSettings;
  readonly Scte27DestinationSettings?: Scte27DestinationSettings;
  readonly SmpteTtDestinationSettings?: SmpteTtDestinationSettings;
  readonly TeletextDestinationSettings?: TeletextDestinationSettings;
  readonly TtmlDestinationSettings?: TtmlDestinationSettings;
  readonly WebvttDestinationSettings?: WebvttDestinationSettings;
}

export interface CaptionLanguageMapping {
  readonly CaptionChannel: number;
  readonly LanguageCode: string;
  readonly LanguageDescription: string;
}

export interface CaptionRectangle {
  readonly Height: unknown;
  readonly LeftOffset: unknown;
  readonly TopOffset: unknown;
  readonly Width: unknown;
}

export interface CaptionSelector {
  readonly LanguageCode?: string;
  readonly Name: string;
  readonly SelectorSettings?: CaptionSelectorSettings;
}

export interface CaptionSelectorSettings {
  readonly AncillarySourceSettings?: AncillarySourceSettings;
  readonly AribSourceSettings?: AribSourceSettings;
  readonly DvbSubSourceSettings?: DvbSubSourceSettings;
  readonly EmbeddedSourceSettings?: EmbeddedSourceSettings;
  readonly Scte20SourceSettings?: Scte20SourceSettings;
  readonly Scte27SourceSettings?: Scte27SourceSettings;
  readonly TeletextSourceSettings?: TeletextSourceSettings;
}

export interface CdiInputSpecification {
  readonly Resolution?: string;
}

export interface Channel {
  readonly Arn?: string;
  readonly CdiInputSpecification?: CdiInputSpecification;
  readonly ChannelClass?: string;
  readonly Destinations?: [];
  readonly EgressEndpoints?: [];
  readonly EncoderSettings?: EncoderSettings;
  readonly Id?: string;
  readonly InputAttachments?: [];
  readonly InputSpecification?: InputSpecification;
  readonly LogLevel?: string;
  readonly Name?: string;
  readonly PipelineDetails?: [];
  readonly PipelinesRunningCount?: number;
  readonly RoleArn?: string;
  readonly State?: string;
  readonly Tags?: {[key: string]: any};
  readonly Vpc?: VpcOutputSettingsDescription;
}

export interface ChannelConfigurationValidationError {
  readonly Message?: string;
  readonly ValidationErrors?: [];
}

export interface ChannelEgressEndpoint {
  readonly SourceIp?: string;
}

export interface ChannelSummary {
  readonly Arn?: string;
  readonly CdiInputSpecification?: CdiInputSpecification;
  readonly ChannelClass?: string;
  readonly Destinations?: [];
  readonly EgressEndpoints?: [];
  readonly Id?: string;
  readonly InputAttachments?: [];
  readonly InputSpecification?: InputSpecification;
  readonly LogLevel?: string;
  readonly Name?: string;
  readonly PipelinesRunningCount?: number;
  readonly RoleArn?: string;
  readonly State?: string;
  readonly Tags?: {[key: string]: any};
  readonly Vpc?: VpcOutputSettingsDescription;
}

export interface ClaimDeviceRequest {
  readonly Id?: string;
}

export interface ClaimDeviceResponse {
}

export interface ColorSpacePassthroughSettings {
}

export interface ConflictException {
  readonly Message?: string;
}

export interface CreateChannel {
  readonly CdiInputSpecification?: CdiInputSpecification;
  readonly ChannelClass?: string;
  readonly Destinations?: [];
  readonly EncoderSettings?: EncoderSettings;
  readonly InputAttachments?: [];
  readonly InputSpecification?: InputSpecification;
  readonly LogLevel?: string;
  readonly Name?: string;
  readonly RequestId?: string;
  readonly Reserved?: string;
  readonly RoleArn?: string;
  readonly Tags?: {[key: string]: any};
  readonly Vpc?: VpcOutputSettings;
}

export interface CreateChannelRequest {
  readonly CdiInputSpecification?: CdiInputSpecification;
  readonly ChannelClass?: string;
  readonly Destinations?: [];
  readonly EncoderSettings?: EncoderSettings;
  readonly InputAttachments?: [];
  readonly InputSpecification?: InputSpecification;
  readonly LogLevel?: string;
  readonly Name?: string;
  readonly RequestId?: string;
  readonly Reserved?: string;
  readonly RoleArn?: string;
  readonly Tags?: {[key: string]: any};
  readonly Vpc?: VpcOutputSettings;
}

export interface CreateChannelResponse {
  readonly Channel?: Channel;
}

export interface CreateChannelResultModel {
  readonly Channel?: Channel;
}

export interface CreateInput {
  readonly Destinations?: [];
  readonly InputDevices?: [];
  readonly InputSecurityGroups?: [];
  readonly MediaConnectFlows?: [];
  readonly Name?: string;
  readonly RequestId?: string;
  readonly RoleArn?: string;
  readonly Sources?: [];
  readonly Tags?: {[key: string]: any};
  readonly Type?: string;
  readonly Vpc?: InputVpcRequest;
}

export interface CreateInputRequest {
  readonly Destinations?: [];
  readonly InputDevices?: [];
  readonly InputSecurityGroups?: [];
  readonly MediaConnectFlows?: [];
  readonly Name?: string;
  readonly RequestId?: string;
  readonly RoleArn?: string;
  readonly Sources?: [];
  readonly Tags?: {[key: string]: any};
  readonly Type?: string;
  readonly Vpc?: InputVpcRequest;
}

export interface CreateInputResponse {
  readonly Input?: Input;
}

export interface CreateInputResultModel {
  readonly Input?: Input;
}

export interface CreateInputSecurityGroupRequest {
  readonly Tags?: {[key: string]: any};
  readonly WhitelistRules?: [];
}

export interface CreateInputSecurityGroupResponse {
  readonly SecurityGroup?: InputSecurityGroup;
}

export interface CreateInputSecurityGroupResultModel {
  readonly SecurityGroup?: InputSecurityGroup;
}

export interface CreateMultiplex {
  readonly AvailabilityZones: [];
  readonly MultiplexSettings: MultiplexSettings;
  readonly Name: string;
  readonly RequestId: string;
  readonly Tags?: {[key: string]: any};
}

export interface CreateMultiplexProgram {
  readonly MultiplexProgramSettings: MultiplexProgramSettings;
  readonly ProgramName: string;
  readonly RequestId: string;
}

export interface CreateMultiplexProgramRequest {
  readonly MultiplexId: string;
  readonly MultiplexProgramSettings: MultiplexProgramSettings;
  readonly ProgramName: string;
  readonly RequestId: string;
}

export interface CreateMultiplexProgramResponse {
  readonly MultiplexProgram?: MultiplexProgram;
}

export interface CreateMultiplexProgramResultModel {
  readonly MultiplexProgram?: MultiplexProgram;
}

export interface CreateMultiplexRequest {
  readonly AvailabilityZones: [];
  readonly MultiplexSettings: MultiplexSettings;
  readonly Name: string;
  readonly RequestId: string;
  readonly Tags?: {[key: string]: any};
}

export interface CreateMultiplexResponse {
  readonly Multiplex?: Multiplex;
}

export interface CreateMultiplexResultModel {
  readonly Multiplex?: Multiplex;
}

export interface CreatePartnerInput {
  readonly RequestId?: string;
  readonly Tags?: {[key: string]: any};
}

export interface CreatePartnerInputRequest {
  readonly InputId: string;
  readonly RequestId?: string;
  readonly Tags?: {[key: string]: any};
}

export interface CreatePartnerInputResponse {
  readonly Input?: Input;
}

export interface CreatePartnerInputResultModel {
  readonly Input?: Input;
}

export interface CreateTagsRequest {
  readonly ResourceArn: string;
  readonly Tags?: {[key: string]: any};
}

export interface DeleteChannelRequest {
  readonly ChannelId: string;
}

export interface DeleteChannelResponse {
  readonly Arn?: string;
  readonly CdiInputSpecification?: CdiInputSpecification;
  readonly ChannelClass?: string;
  readonly Destinations?: [];
  readonly EgressEndpoints?: [];
  readonly EncoderSettings?: EncoderSettings;
  readonly Id?: string;
  readonly InputAttachments?: [];
  readonly InputSpecification?: InputSpecification;
  readonly LogLevel?: string;
  readonly Name?: string;
  readonly PipelineDetails?: [];
  readonly PipelinesRunningCount?: number;
  readonly RoleArn?: string;
  readonly State?: string;
  readonly Tags?: {[key: string]: any};
  readonly Vpc?: VpcOutputSettingsDescription;
}

export interface DeleteInputRequest {
  readonly InputId: string;
}

export interface DeleteInputResponse {
}

export interface DeleteInputSecurityGroupRequest {
  readonly InputSecurityGroupId: string;
}

export interface DeleteInputSecurityGroupResponse {
}

export interface DeleteMultiplexProgramRequest {
  readonly MultiplexId: string;
  readonly ProgramName: string;
}

export interface DeleteMultiplexProgramResponse {
  readonly ChannelId?: string;
  readonly MultiplexProgramSettings?: MultiplexProgramSettings;
  readonly PacketIdentifiersMap?: MultiplexProgramPacketIdentifiersMap;
  readonly PipelineDetails?: [];
  readonly ProgramName?: string;
}

export interface DeleteMultiplexRequest {
  readonly MultiplexId: string;
}

export interface DeleteMultiplexResponse {
  readonly Arn?: string;
  readonly AvailabilityZones?: [];
  readonly Destinations?: [];
  readonly Id?: string;
  readonly MultiplexSettings?: MultiplexSettings;
  readonly Name?: string;
  readonly PipelinesRunningCount?: number;
  readonly ProgramCount?: number;
  readonly State?: string;
  readonly Tags?: {[key: string]: any};
}

export interface DeleteReservationRequest {
  readonly ReservationId: string;
}

export interface DeleteReservationResponse {
  readonly Arn?: string;
  readonly Count?: number;
  readonly CurrencyCode?: string;
  readonly Duration?: number;
  readonly DurationUnits?: string;
  readonly End?: string;
  readonly FixedPrice?: unknown;
  readonly Name?: string;
  readonly OfferingDescription?: string;
  readonly OfferingId?: string;
  readonly OfferingType?: string;
  readonly Region?: string;
  readonly ReservationId?: string;
  readonly ResourceSpecification?: ReservationResourceSpecification;
  readonly Start?: string;
  readonly State?: string;
  readonly Tags?: {[key: string]: any};
  readonly UsagePrice?: unknown;
}

export interface DeleteScheduleRequest {
  readonly ChannelId: string;
}

export interface DeleteScheduleResponse {
}

export interface DeleteTagsRequest {
  readonly ResourceArn: string;
  readonly TagKeys: [];
}

export interface DescribeChannelRequest {
  readonly ChannelId: string;
}

export interface DescribeChannelResponse {
  readonly Arn?: string;
  readonly CdiInputSpecification?: CdiInputSpecification;
  readonly ChannelClass?: string;
  readonly Destinations?: [];
  readonly EgressEndpoints?: [];
  readonly EncoderSettings?: EncoderSettings;
  readonly Id?: string;
  readonly InputAttachments?: [];
  readonly InputSpecification?: InputSpecification;
  readonly LogLevel?: string;
  readonly Name?: string;
  readonly PipelineDetails?: [];
  readonly PipelinesRunningCount?: number;
  readonly RoleArn?: string;
  readonly State?: string;
  readonly Tags?: {[key: string]: any};
  readonly Vpc?: VpcOutputSettingsDescription;
}

export interface DescribeInputDeviceRequest {
  readonly InputDeviceId: string;
}

export interface DescribeInputDeviceResponse {
  readonly Arn?: string;
  readonly ConnectionState?: string;
  readonly DeviceSettingsSyncState?: string;
  readonly DeviceUpdateStatus?: string;
  readonly HdDeviceSettings?: InputDeviceHdSettings;
  readonly Id?: string;
  readonly MacAddress?: string;
  readonly Name?: string;
  readonly NetworkSettings?: InputDeviceNetworkSettings;
  readonly SerialNumber?: string;
  readonly Type?: string;
  readonly UhdDeviceSettings?: InputDeviceUhdSettings;
}

export interface DescribeInputDeviceThumbnailRequest {
  readonly InputDeviceId: string;
  readonly Accept: string;
}

export interface DescribeInputDeviceThumbnailResponse {
  readonly Body?: unknown;
  readonly ContentType?: string;
  readonly ContentLength?: number;
  readonly ETag?: string;
  readonly LastModified?: Date;
}

export interface DescribeInputRequest {
  readonly InputId: string;
}

export interface DescribeInputResponse {
  readonly Arn?: string;
  readonly AttachedChannels?: [];
  readonly Destinations?: [];
  readonly Id?: string;
  readonly InputClass?: string;
  readonly InputDevices?: [];
  readonly InputPartnerIds?: [];
  readonly InputSourceType?: string;
  readonly MediaConnectFlows?: [];
  readonly Name?: string;
  readonly RoleArn?: string;
  readonly SecurityGroups?: [];
  readonly Sources?: [];
  readonly State?: string;
  readonly Tags?: {[key: string]: any};
  readonly Type?: string;
}

export interface DescribeInputSecurityGroupRequest {
  readonly InputSecurityGroupId: string;
}

export interface DescribeInputSecurityGroupResponse {
  readonly Arn?: string;
  readonly Id?: string;
  readonly Inputs?: [];
  readonly State?: string;
  readonly Tags?: {[key: string]: any};
  readonly WhitelistRules?: [];
}

export interface DescribeMultiplexProgramRequest {
  readonly MultiplexId: string;
  readonly ProgramName: string;
}

export interface DescribeMultiplexProgramResponse {
  readonly ChannelId?: string;
  readonly MultiplexProgramSettings?: MultiplexProgramSettings;
  readonly PacketIdentifiersMap?: MultiplexProgramPacketIdentifiersMap;
  readonly PipelineDetails?: [];
  readonly ProgramName?: string;
}

export interface DescribeMultiplexRequest {
  readonly MultiplexId: string;
}

export interface DescribeMultiplexResponse {
  readonly Arn?: string;
  readonly AvailabilityZones?: [];
  readonly Destinations?: [];
  readonly Id?: string;
  readonly MultiplexSettings?: MultiplexSettings;
  readonly Name?: string;
  readonly PipelinesRunningCount?: number;
  readonly ProgramCount?: number;
  readonly State?: string;
  readonly Tags?: {[key: string]: any};
}

export interface DescribeOfferingRequest {
  readonly OfferingId: string;
}

export interface DescribeOfferingResponse {
  readonly Arn?: string;
  readonly CurrencyCode?: string;
  readonly Duration?: number;
  readonly DurationUnits?: string;
  readonly FixedPrice?: unknown;
  readonly OfferingDescription?: string;
  readonly OfferingId?: string;
  readonly OfferingType?: string;
  readonly Region?: string;
  readonly ResourceSpecification?: ReservationResourceSpecification;
  readonly UsagePrice?: unknown;
}

export interface DescribeReservationRequest {
  readonly ReservationId: string;
}

export interface DescribeReservationResponse {
  readonly Arn?: string;
  readonly Count?: number;
  readonly CurrencyCode?: string;
  readonly Duration?: number;
  readonly DurationUnits?: string;
  readonly End?: string;
  readonly FixedPrice?: unknown;
  readonly Name?: string;
  readonly OfferingDescription?: string;
  readonly OfferingId?: string;
  readonly OfferingType?: string;
  readonly Region?: string;
  readonly ReservationId?: string;
  readonly ResourceSpecification?: ReservationResourceSpecification;
  readonly Start?: string;
  readonly State?: string;
  readonly Tags?: {[key: string]: any};
  readonly UsagePrice?: unknown;
}

export interface DescribeScheduleRequest {
  readonly ChannelId: string;
  readonly MaxResults?: number;
  readonly NextToken?: string;
}

export interface DescribeScheduleResponse {
  readonly NextToken?: string;
  readonly ScheduleActions?: [];
}

export interface DvbNitSettings {
  readonly NetworkId: number;
  readonly NetworkName: string;
  readonly RepInterval?: number;
}

export interface DvbSdtSettings {
  readonly OutputSdt?: string;
  readonly RepInterval?: number;
  readonly ServiceName?: string;
  readonly ServiceProviderName?: string;
}

export interface DvbSubDestinationSettings {
  readonly Alignment?: string;
  readonly BackgroundColor?: string;
  readonly BackgroundOpacity?: number;
  readonly Font?: InputLocation;
  readonly FontColor?: string;
  readonly FontOpacity?: number;
  readonly FontResolution?: number;
  readonly FontSize?: string;
  readonly OutlineColor?: string;
  readonly OutlineSize?: number;
  readonly ShadowColor?: string;
  readonly ShadowOpacity?: number;
  readonly ShadowXOffset?: number;
  readonly ShadowYOffset?: number;
  readonly TeletextGridControl?: string;
  readonly XPosition?: number;
  readonly YPosition?: number;
}

export interface DvbSubSourceSettings {
  readonly OcrLanguage?: string;
  readonly Pid?: number;
}

export interface DvbTdtSettings {
  readonly RepInterval?: number;
}

export interface Eac3Settings {
  readonly AttenuationControl?: string;
  readonly Bitrate?: unknown;
  readonly BitstreamMode?: string;
  readonly CodingMode?: string;
  readonly DcFilter?: string;
  readonly Dialnorm?: number;
  readonly DrcLine?: string;
  readonly DrcRf?: string;
  readonly LfeControl?: string;
  readonly LfeFilter?: string;
  readonly LoRoCenterMixLevel?: unknown;
  readonly LoRoSurroundMixLevel?: unknown;
  readonly LtRtCenterMixLevel?: unknown;
  readonly LtRtSurroundMixLevel?: unknown;
  readonly MetadataControl?: string;
  readonly PassthroughControl?: string;
  readonly PhaseControl?: string;
  readonly StereoDownmix?: string;
  readonly SurroundExMode?: string;
  readonly SurroundMode?: string;
}

export interface EbuTtDDestinationSettings {
  readonly CopyrightHolder?: string;
  readonly FillLineGap?: string;
  readonly FontFamily?: string;
  readonly StyleControl?: string;
}

export interface EmbeddedDestinationSettings {
}

export interface EmbeddedPlusScte20DestinationSettings {
}

export interface EmbeddedSourceSettings {
  readonly Convert608To708?: string;
  readonly Scte20Detection?: string;
  readonly Source608ChannelNumber?: number;
  readonly Source608TrackNumber?: number;
}

export interface Empty {
}

export interface EncoderSettings {
  readonly AudioDescriptions: [];
  readonly AvailBlanking?: AvailBlanking;
  readonly AvailConfiguration?: AvailConfiguration;
  readonly BlackoutSlate?: BlackoutSlate;
  readonly CaptionDescriptions?: [];
  readonly FeatureActivations?: FeatureActivations;
  readonly GlobalConfiguration?: GlobalConfiguration;
  readonly MotionGraphicsConfiguration?: MotionGraphicsConfiguration;
  readonly NielsenConfiguration?: NielsenConfiguration;
  readonly OutputGroups: [];
  readonly TimecodeConfig: TimecodeConfig;
  readonly VideoDescriptions: [];
}

export interface FailoverCondition {
  readonly FailoverConditionSettings?: FailoverConditionSettings;
}

export interface FailoverConditionSettings {
  readonly AudioSilenceSettings?: AudioSilenceFailoverSettings;
  readonly InputLossSettings?: InputLossFailoverSettings;
  readonly VideoBlackSettings?: VideoBlackFailoverSettings;
}

export interface FeatureActivations {
  readonly InputPrepareScheduleActions?: string;
}

export interface FecOutputSettings {
  readonly ColumnDepth?: number;
  readonly IncludeFec?: string;
  readonly RowLength?: number;
}

export interface FixedModeScheduleActionStartSettings {
  readonly Time: string;
}

export interface Fmp4HlsSettings {
  readonly AudioRenditionSets?: string;
  readonly NielsenId3Behavior?: string;
  readonly TimedMetadataBehavior?: string;
}

export interface FollowModeScheduleActionStartSettings {
  readonly FollowPoint: string;
  readonly ReferenceActionName: string;
}

export interface ForbiddenException {
  readonly Message?: string;
}

export interface FrameCaptureCdnSettings {
  readonly FrameCaptureS3Settings?: FrameCaptureS3Settings;
}

export interface FrameCaptureGroupSettings {
  readonly Destination: OutputLocationRef;
  readonly FrameCaptureCdnSettings?: FrameCaptureCdnSettings;
}

export interface FrameCaptureHlsSettings {
}

export interface FrameCaptureOutputSettings {
  readonly NameModifier?: string;
}

export interface FrameCaptureS3Settings {
  readonly CannedAcl?: string;
}

export interface FrameCaptureSettings {
  readonly CaptureInterval?: number;
  readonly CaptureIntervalUnits?: string;
}

export interface GatewayTimeoutException {
  readonly Message?: string;
}

export interface GlobalConfiguration {
  readonly InitialAudioGain?: number;
  readonly InputEndAction?: string;
  readonly InputLossBehavior?: InputLossBehavior;
  readonly OutputLockingMode?: string;
  readonly OutputTimingSource?: string;
  readonly SupportLowFramerateInputs?: string;
}

export interface H264ColorSpaceSettings {
  readonly ColorSpacePassthroughSettings?: ColorSpacePassthroughSettings;
  readonly Rec601Settings?: Rec601Settings;
  readonly Rec709Settings?: Rec709Settings;
}

export interface H264FilterSettings {
  readonly TemporalFilterSettings?: TemporalFilterSettings;
}

export interface H264Settings {
  readonly AdaptiveQuantization?: string;
  readonly AfdSignaling?: string;
  readonly Bitrate?: number;
  readonly BufFillPct?: number;
  readonly BufSize?: number;
  readonly ColorMetadata?: string;
  readonly ColorSpaceSettings?: H264ColorSpaceSettings;
  readonly EntropyEncoding?: string;
  readonly FilterSettings?: H264FilterSettings;
  readonly FixedAfd?: string;
  readonly FlickerAq?: string;
  readonly ForceFieldPictures?: string;
  readonly FramerateControl?: string;
  readonly FramerateDenominator?: number;
  readonly FramerateNumerator?: number;
  readonly GopBReference?: string;
  readonly GopClosedCadence?: number;
  readonly GopNumBFrames?: number;
  readonly GopSize?: unknown;
  readonly GopSizeUnits?: string;
  readonly Level?: string;
  readonly LookAheadRateControl?: string;
  readonly MaxBitrate?: number;
  readonly MinIInterval?: number;
  readonly NumRefFrames?: number;
  readonly ParControl?: string;
  readonly ParDenominator?: number;
  readonly ParNumerator?: number;
  readonly Profile?: string;
  readonly QualityLevel?: string;
  readonly QvbrQualityLevel?: number;
  readonly RateControlMode?: string;
  readonly ScanType?: string;
  readonly SceneChangeDetect?: string;
  readonly Slices?: number;
  readonly Softness?: number;
  readonly SpatialAq?: string;
  readonly SubgopLength?: string;
  readonly Syntax?: string;
  readonly TemporalAq?: string;
  readonly TimecodeInsertion?: string;
}

export interface H265ColorSpaceSettings {
  readonly ColorSpacePassthroughSettings?: ColorSpacePassthroughSettings;
  readonly Hdr10Settings?: Hdr10Settings;
  readonly Rec601Settings?: Rec601Settings;
  readonly Rec709Settings?: Rec709Settings;
}

export interface H265FilterSettings {
  readonly TemporalFilterSettings?: TemporalFilterSettings;
}

export interface H265Settings {
  readonly AdaptiveQuantization?: string;
  readonly AfdSignaling?: string;
  readonly AlternativeTransferFunction?: string;
  readonly Bitrate?: number;
  readonly BufSize?: number;
  readonly ColorMetadata?: string;
  readonly ColorSpaceSettings?: H265ColorSpaceSettings;
  readonly FilterSettings?: H265FilterSettings;
  readonly FixedAfd?: string;
  readonly FlickerAq?: string;
  readonly FramerateDenominator: number;
  readonly FramerateNumerator: number;
  readonly GopClosedCadence?: number;
  readonly GopSize?: unknown;
  readonly GopSizeUnits?: string;
  readonly Level?: string;
  readonly LookAheadRateControl?: string;
  readonly MaxBitrate?: number;
  readonly MinIInterval?: number;
  readonly ParDenominator?: number;
  readonly ParNumerator?: number;
  readonly Profile?: string;
  readonly QvbrQualityLevel?: number;
  readonly RateControlMode?: string;
  readonly ScanType?: string;
  readonly SceneChangeDetect?: string;
  readonly Slices?: number;
  readonly Tier?: string;
  readonly TimecodeInsertion?: string;
}

export interface Hdr10Settings {
  readonly MaxCll?: number;
  readonly MaxFall?: number;
}

export interface HlsAkamaiSettings {
  readonly ConnectionRetryInterval?: number;
  readonly FilecacheDuration?: number;
  readonly HttpTransferMode?: string;
  readonly NumRetries?: number;
  readonly RestartDelay?: number;
  readonly Salt?: string;
  readonly Token?: string;
}

export interface HlsBasicPutSettings {
  readonly ConnectionRetryInterval?: number;
  readonly FilecacheDuration?: number;
  readonly NumRetries?: number;
  readonly RestartDelay?: number;
}

export interface HlsCdnSettings {
  readonly HlsAkamaiSettings?: HlsAkamaiSettings;
  readonly HlsBasicPutSettings?: HlsBasicPutSettings;
  readonly HlsMediaStoreSettings?: HlsMediaStoreSettings;
  readonly HlsS3Settings?: HlsS3Settings;
  readonly HlsWebdavSettings?: HlsWebdavSettings;
}

export interface HlsGroupSettings {
  readonly AdMarkers?: [];
  readonly BaseUrlContent?: string;
  readonly BaseUrlContent1?: string;
  readonly BaseUrlManifest?: string;
  readonly BaseUrlManifest1?: string;
  readonly CaptionLanguageMappings?: [];
  readonly CaptionLanguageSetting?: string;
  readonly ClientCache?: string;
  readonly CodecSpecification?: string;
  readonly ConstantIv?: string;
  readonly Destination: OutputLocationRef;
  readonly DirectoryStructure?: string;
  readonly DiscontinuityTags?: string;
  readonly EncryptionType?: string;
  readonly HlsCdnSettings?: HlsCdnSettings;
  readonly HlsId3SegmentTagging?: string;
  readonly IFrameOnlyPlaylists?: string;
  readonly IncompleteSegmentBehavior?: string;
  readonly IndexNSegments?: number;
  readonly InputLossAction?: string;
  readonly IvInManifest?: string;
  readonly IvSource?: string;
  readonly KeepSegments?: number;
  readonly KeyFormat?: string;
  readonly KeyFormatVersions?: string;
  readonly KeyProviderSettings?: KeyProviderSettings;
  readonly ManifestCompression?: string;
  readonly ManifestDurationFormat?: string;
  readonly MinSegmentLength?: number;
  readonly Mode?: string;
  readonly OutputSelection?: string;
  readonly ProgramDateTime?: string;
  readonly ProgramDateTimePeriod?: number;
  readonly RedundantManifest?: string;
  readonly SegmentLength?: number;
  readonly SegmentationMode?: string;
  readonly SegmentsPerSubdirectory?: number;
  readonly StreamInfResolution?: string;
  readonly TimedMetadataId3Frame?: string;
  readonly TimedMetadataId3Period?: number;
  readonly TimestampDeltaMilliseconds?: number;
  readonly TsFileMode?: string;
}

export interface HlsId3SegmentTaggingScheduleActionSettings {
  readonly Tag: string;
}

export interface HlsInputSettings {
  readonly Bandwidth?: number;
  readonly BufferSegments?: number;
  readonly Retries?: number;
  readonly RetryInterval?: number;
  readonly Scte35Source?: string;
}

export interface HlsMediaStoreSettings {
  readonly ConnectionRetryInterval?: number;
  readonly FilecacheDuration?: number;
  readonly MediaStoreStorageClass?: string;
  readonly NumRetries?: number;
  readonly RestartDelay?: number;
}

export interface HlsOutputSettings {
  readonly H265PackagingType?: string;
  readonly HlsSettings: HlsSettings;
  readonly NameModifier?: string;
  readonly SegmentModifier?: string;
}

export interface HlsS3Settings {
  readonly CannedAcl?: string;
}

export interface HlsSettings {
  readonly AudioOnlyHlsSettings?: AudioOnlyHlsSettings;
  readonly Fmp4HlsSettings?: Fmp4HlsSettings;
  readonly FrameCaptureHlsSettings?: FrameCaptureHlsSettings;
  readonly StandardHlsSettings?: StandardHlsSettings;
}

export interface HlsTimedMetadataScheduleActionSettings {
  readonly Id3: string;
}

export interface HlsWebdavSettings {
  readonly ConnectionRetryInterval?: number;
  readonly FilecacheDuration?: number;
  readonly HttpTransferMode?: string;
  readonly NumRetries?: number;
  readonly RestartDelay?: number;
}

export interface HtmlMotionGraphicsSettings {
}

export interface ImmediateModeScheduleActionStartSettings {
}

export interface Input {
  readonly Arn?: string;
  readonly AttachedChannels?: [];
  readonly Destinations?: [];
  readonly Id?: string;
  readonly InputClass?: string;
  readonly InputDevices?: [];
  readonly InputPartnerIds?: [];
  readonly InputSourceType?: string;
  readonly MediaConnectFlows?: [];
  readonly Name?: string;
  readonly RoleArn?: string;
  readonly SecurityGroups?: [];
  readonly Sources?: [];
  readonly State?: string;
  readonly Tags?: {[key: string]: any};
  readonly Type?: string;
}

export interface InputAttachment {
  readonly AutomaticInputFailoverSettings?: AutomaticInputFailoverSettings;
  readonly InputAttachmentName?: string;
  readonly InputId?: string;
  readonly InputSettings?: InputSettings;
}

export interface InputChannelLevel {
  readonly Gain: number;
  readonly InputChannel: number;
}

export interface InputClippingSettings {
  readonly InputTimecodeSource: string;
  readonly StartTimecode?: StartTimecode;
  readonly StopTimecode?: StopTimecode;
}

export interface InputDestination {
  readonly Ip?: string;
  readonly Port?: string;
  readonly Url?: string;
  readonly Vpc?: InputDestinationVpc;
}

export interface InputDestinationRequest {
  readonly StreamName?: string;
}

export interface InputDestinationVpc {
  readonly AvailabilityZone?: string;
  readonly NetworkInterfaceId?: string;
}

export interface InputDevice {
  readonly Arn?: string;
  readonly ConnectionState?: string;
  readonly DeviceSettingsSyncState?: string;
  readonly DeviceUpdateStatus?: string;
  readonly HdDeviceSettings?: InputDeviceHdSettings;
  readonly Id?: string;
  readonly MacAddress?: string;
  readonly Name?: string;
  readonly NetworkSettings?: InputDeviceNetworkSettings;
  readonly SerialNumber?: string;
  readonly Type?: string;
  readonly UhdDeviceSettings?: InputDeviceUhdSettings;
}

export interface InputDeviceConfigurableSettings {
  readonly ConfiguredInput?: string;
  readonly MaxBitrate?: number;
}

export interface InputDeviceConfigurationValidationError {
  readonly Message?: string;
  readonly ValidationErrors?: [];
}

export interface InputDeviceHdSettings {
  readonly ActiveInput?: string;
  readonly ConfiguredInput?: string;
  readonly DeviceState?: string;
  readonly Framerate?: unknown;
  readonly Height?: number;
  readonly MaxBitrate?: number;
  readonly ScanType?: string;
  readonly Width?: number;
}

export interface InputDeviceNetworkSettings {
  readonly DnsAddresses?: [];
  readonly Gateway?: string;
  readonly IpAddress?: string;
  readonly IpScheme?: string;
  readonly SubnetMask?: string;
}

export interface InputDeviceRequest {
  readonly Id?: string;
}

export interface InputDeviceSettings {
  readonly Id?: string;
}

export interface InputDeviceSummary {
  readonly Arn?: string;
  readonly ConnectionState?: string;
  readonly DeviceSettingsSyncState?: string;
  readonly DeviceUpdateStatus?: string;
  readonly HdDeviceSettings?: InputDeviceHdSettings;
  readonly Id?: string;
  readonly MacAddress?: string;
  readonly Name?: string;
  readonly NetworkSettings?: InputDeviceNetworkSettings;
  readonly SerialNumber?: string;
  readonly Type?: string;
  readonly UhdDeviceSettings?: InputDeviceUhdSettings;
}

export interface InputDeviceUhdSettings {
  readonly ActiveInput?: string;
  readonly ConfiguredInput?: string;
  readonly DeviceState?: string;
  readonly Framerate?: unknown;
  readonly Height?: number;
  readonly MaxBitrate?: number;
  readonly ScanType?: string;
  readonly Width?: number;
}

export interface InputLocation {
  readonly PasswordParam?: string;
  readonly Uri: string;
  readonly Username?: string;
}

export interface InputLossBehavior {
  readonly BlackFrameMsec?: number;
  readonly InputLossImageColor?: string;
  readonly InputLossImageSlate?: InputLocation;
  readonly InputLossImageType?: string;
  readonly RepeatFrameMsec?: number;
}

export interface InputLossFailoverSettings {
  readonly InputLossThresholdMsec?: number;
}

export interface InputPrepareScheduleActionSettings {
  readonly InputAttachmentNameReference?: string;
  readonly InputClippingSettings?: InputClippingSettings;
  readonly UrlPath?: [];
}

export interface InputSecurityGroup {
  readonly Arn?: string;
  readonly Id?: string;
  readonly Inputs?: [];
  readonly State?: string;
  readonly Tags?: {[key: string]: any};
  readonly WhitelistRules?: [];
}

export interface InputSecurityGroupWhitelistRequest {
  readonly Tags?: {[key: string]: any};
  readonly WhitelistRules?: [];
}

export interface InputSettings {
  readonly AudioSelectors?: [];
  readonly CaptionSelectors?: [];
  readonly DeblockFilter?: string;
  readonly DenoiseFilter?: string;
  readonly FilterStrength?: number;
  readonly InputFilter?: string;
  readonly NetworkInputSettings?: NetworkInputSettings;
  readonly Scte35Pid?: number;
  readonly Smpte2038DataPreference?: string;
  readonly SourceEndBehavior?: string;
  readonly VideoSelector?: VideoSelector;
}

export interface InputSource {
  readonly PasswordParam?: string;
  readonly Url?: string;
  readonly Username?: string;
}

export interface InputSourceRequest {
  readonly PasswordParam?: string;
  readonly Url?: string;
  readonly Username?: string;
}

export interface InputSpecification {
  readonly Codec?: string;
  readonly MaximumBitrate?: string;
  readonly Resolution?: string;
}

export interface InputSwitchScheduleActionSettings {
  readonly InputAttachmentNameReference: string;
  readonly InputClippingSettings?: InputClippingSettings;
  readonly UrlPath?: [];
}

export interface InputVpcRequest {
  readonly SecurityGroupIds?: [];
  readonly SubnetIds: [];
}

export interface InputWhitelistRule {
  readonly Cidr?: string;
}

export interface InputWhitelistRuleCidr {
  readonly Cidr?: string;
}

export interface InternalServerErrorException {
  readonly Message?: string;
}

export interface InternalServiceError {
  readonly Message?: string;
}

export interface InvalidRequest {
  readonly Message?: string;
}

export interface KeyProviderSettings {
  readonly StaticKeySettings?: StaticKeySettings;
}

export interface LimitExceeded {
  readonly Message?: string;
}

export interface ListChannelsRequest {
  readonly MaxResults?: number;
  readonly NextToken?: string;
}

export interface ListChannelsResponse {
  readonly Channels?: [];
  readonly NextToken?: string;
}

export interface ListChannelsResultModel {
  readonly Channels?: [];
  readonly NextToken?: string;
}

export interface ListInputDeviceTransfersRequest {
  readonly MaxResults?: number;
  readonly NextToken?: string;
  readonly TransferType: string;
}

export interface ListInputDeviceTransfersResponse {
  readonly InputDeviceTransfers?: [];
  readonly NextToken?: string;
}

export interface ListInputDeviceTransfersResultModel {
  readonly InputDeviceTransfers?: [];
  readonly NextToken?: string;
}

export interface ListInputDevicesRequest {
  readonly MaxResults?: number;
  readonly NextToken?: string;
}

export interface ListInputDevicesResponse {
  readonly InputDevices?: [];
  readonly NextToken?: string;
}

export interface ListInputDevicesResultModel {
  readonly InputDevices?: [];
  readonly NextToken?: string;
}

export interface ListInputSecurityGroupsRequest {
  readonly MaxResults?: number;
  readonly NextToken?: string;
}

export interface ListInputSecurityGroupsResponse {
  readonly InputSecurityGroups?: [];
  readonly NextToken?: string;
}

export interface ListInputSecurityGroupsResultModel {
  readonly InputSecurityGroups?: [];
  readonly NextToken?: string;
}

export interface ListInputsRequest {
  readonly MaxResults?: number;
  readonly NextToken?: string;
}

export interface ListInputsResponse {
  readonly Inputs?: [];
  readonly NextToken?: string;
}

export interface ListInputsResultModel {
  readonly Inputs?: [];
  readonly NextToken?: string;
}

export interface ListMultiplexProgramsRequest {
  readonly MaxResults?: number;
  readonly MultiplexId: string;
  readonly NextToken?: string;
}

export interface ListMultiplexProgramsResponse {
  readonly MultiplexPrograms?: [];
  readonly NextToken?: string;
}

export interface ListMultiplexProgramsResultModel {
  readonly MultiplexPrograms?: [];
  readonly NextToken?: string;
}

export interface ListMultiplexesRequest {
  readonly MaxResults?: number;
  readonly NextToken?: string;
}

export interface ListMultiplexesResponse {
  readonly Multiplexes?: [];
  readonly NextToken?: string;
}

export interface ListMultiplexesResultModel {
  readonly Multiplexes?: [];
  readonly NextToken?: string;
}

export interface ListOfferingsRequest {
  readonly ChannelClass?: string;
  readonly ChannelConfiguration?: string;
  readonly Codec?: string;
  readonly Duration?: string;
  readonly MaxResults?: number;
  readonly MaximumBitrate?: string;
  readonly MaximumFramerate?: string;
  readonly NextToken?: string;
  readonly Resolution?: string;
  readonly ResourceType?: string;
  readonly SpecialFeature?: string;
  readonly VideoQuality?: string;
}

export interface ListOfferingsResponse {
  readonly NextToken?: string;
  readonly Offerings?: [];
}

export interface ListOfferingsResultModel {
  readonly NextToken?: string;
  readonly Offerings?: [];
}

export interface ListReservationsRequest {
  readonly ChannelClass?: string;
  readonly Codec?: string;
  readonly MaxResults?: number;
  readonly MaximumBitrate?: string;
  readonly MaximumFramerate?: string;
  readonly NextToken?: string;
  readonly Resolution?: string;
  readonly ResourceType?: string;
  readonly SpecialFeature?: string;
  readonly VideoQuality?: string;
}

export interface ListReservationsResponse {
  readonly NextToken?: string;
  readonly Reservations?: [];
}

export interface ListReservationsResultModel {
  readonly NextToken?: string;
  readonly Reservations?: [];
}

export interface ListTagsForResourceRequest {
  readonly ResourceArn: string;
}

export interface ListTagsForResourceResponse {
  readonly Tags?: {[key: string]: any};
}

export interface M2tsSettings {
  readonly AbsentInputAudioBehavior?: string;
  readonly Arib?: string;
  readonly AribCaptionsPid?: string;
  readonly AribCaptionsPidControl?: string;
  readonly AudioBufferModel?: string;
  readonly AudioFramesPerPes?: number;
  readonly AudioPids?: string;
  readonly AudioStreamType?: string;
  readonly Bitrate?: number;
  readonly BufferModel?: string;
  readonly CcDescriptor?: string;
  readonly DvbNitSettings?: DvbNitSettings;
  readonly DvbSdtSettings?: DvbSdtSettings;
  readonly DvbSubPids?: string;
  readonly DvbTdtSettings?: DvbTdtSettings;
  readonly DvbTeletextPid?: string;
  readonly Ebif?: string;
  readonly EbpAudioInterval?: string;
  readonly EbpLookaheadMs?: number;
  readonly EbpPlacement?: string;
  readonly EcmPid?: string;
  readonly EsRateInPes?: string;
  readonly EtvPlatformPid?: string;
  readonly EtvSignalPid?: string;
  readonly FragmentTime?: unknown;
  readonly Klv?: string;
  readonly KlvDataPids?: string;
  readonly NielsenId3Behavior?: string;
  readonly NullPacketBitrate?: unknown;
  readonly PatInterval?: number;
  readonly PcrControl?: string;
  readonly PcrPeriod?: number;
  readonly PcrPid?: string;
  readonly PmtInterval?: number;
  readonly PmtPid?: string;
  readonly ProgramNum?: number;
  readonly RateMode?: string;
  readonly Scte27Pids?: string;
  readonly Scte35Control?: string;
  readonly Scte35Pid?: string;
  readonly SegmentationMarkers?: string;
  readonly SegmentationStyle?: string;
  readonly SegmentationTime?: unknown;
  readonly TimedMetadataBehavior?: string;
  readonly TimedMetadataPid?: string;
  readonly TransportStreamId?: number;
  readonly VideoPid?: string;
}

export interface M3u8Settings {
  readonly AudioFramesPerPes?: number;
  readonly AudioPids?: string;
  readonly EcmPid?: string;
  readonly NielsenId3Behavior?: string;
  readonly PatInterval?: number;
  readonly PcrControl?: string;
  readonly PcrPeriod?: number;
  readonly PcrPid?: string;
  readonly PmtInterval?: number;
  readonly PmtPid?: string;
  readonly ProgramNum?: number;
  readonly Scte35Behavior?: string;
  readonly Scte35Pid?: string;
  readonly TimedMetadataBehavior?: string;
  readonly TimedMetadataPid?: string;
  readonly TransportStreamId?: number;
  readonly VideoPid?: string;
}

export interface MediaConnectFlow {
  readonly FlowArn?: string;
}

export interface MediaConnectFlowRequest {
  readonly FlowArn?: string;
}

export interface MediaPackageGroupSettings {
  readonly Destination: OutputLocationRef;
}

export interface MediaPackageOutputDestinationSettings {
  readonly ChannelId?: string;
}

export interface MediaPackageOutputSettings {
}

export interface MotionGraphicsActivateScheduleActionSettings {
  readonly Duration?: number;
  readonly PasswordParam?: string;
  readonly Url?: string;
  readonly Username?: string;
}

export interface MotionGraphicsConfiguration {
  readonly MotionGraphicsInsertion?: string;
  readonly MotionGraphicsSettings: MotionGraphicsSettings;
}

export interface MotionGraphicsDeactivateScheduleActionSettings {
}

export interface MotionGraphicsSettings {
  readonly HtmlMotionGraphicsSettings?: HtmlMotionGraphicsSettings;
}

export interface Mp2Settings {
  readonly Bitrate?: unknown;
  readonly CodingMode?: string;
  readonly SampleRate?: unknown;
}

export interface Mpeg2FilterSettings {
  readonly TemporalFilterSettings?: TemporalFilterSettings;
}

export interface Mpeg2Settings {
  readonly AdaptiveQuantization?: string;
  readonly AfdSignaling?: string;
  readonly ColorMetadata?: string;
  readonly ColorSpace?: string;
  readonly DisplayAspectRatio?: string;
  readonly FilterSettings?: Mpeg2FilterSettings;
  readonly FixedAfd?: string;
  readonly FramerateDenominator: number;
  readonly FramerateNumerator: number;
  readonly GopClosedCadence?: number;
  readonly GopNumBFrames?: number;
  readonly GopSize?: unknown;
  readonly GopSizeUnits?: string;
  readonly ScanType?: string;
  readonly SubgopLength?: string;
  readonly TimecodeInsertion?: string;
}

export interface MsSmoothGroupSettings {
  readonly AcquisitionPointId?: string;
  readonly AudioOnlyTimecodeControl?: string;
  readonly CertificateMode?: string;
  readonly ConnectionRetryInterval?: number;
  readonly Destination: OutputLocationRef;
  readonly EventId?: string;
  readonly EventIdMode?: string;
  readonly EventStopBehavior?: string;
  readonly FilecacheDuration?: number;
  readonly FragmentLength?: number;
  readonly InputLossAction?: string;
  readonly NumRetries?: number;
  readonly RestartDelay?: number;
  readonly SegmentationMode?: string;
  readonly SendDelayMs?: number;
  readonly SparseTrackType?: string;
  readonly StreamManifestBehavior?: string;
  readonly TimestampOffset?: string;
  readonly TimestampOffsetMode?: string;
}

export interface MsSmoothOutputSettings {
  readonly H265PackagingType?: string;
  readonly NameModifier?: string;
}

export interface Multiplex {
  readonly Arn?: string;
  readonly AvailabilityZones?: [];
  readonly Destinations?: [];
  readonly Id?: string;
  readonly MultiplexSettings?: MultiplexSettings;
  readonly Name?: string;
  readonly PipelinesRunningCount?: number;
  readonly ProgramCount?: number;
  readonly State?: string;
  readonly Tags?: {[key: string]: any};
}

export interface MultiplexConfigurationValidationError {
  readonly Message?: string;
  readonly ValidationErrors?: [];
}

export interface MultiplexGroupSettings {
}

export interface MultiplexMediaConnectOutputDestinationSettings {
  readonly EntitlementArn?: string;
}

export interface MultiplexOutputDestination {
  readonly MediaConnectSettings?: MultiplexMediaConnectOutputDestinationSettings;
}

export interface MultiplexOutputSettings {
  readonly Destination: OutputLocationRef;
}

export interface MultiplexProgram {
  readonly ChannelId?: string;
  readonly MultiplexProgramSettings?: MultiplexProgramSettings;
  readonly PacketIdentifiersMap?: MultiplexProgramPacketIdentifiersMap;
  readonly PipelineDetails?: [];
  readonly ProgramName?: string;
}

export interface MultiplexProgramChannelDestinationSettings {
  readonly MultiplexId?: string;
  readonly ProgramName?: string;
}

export interface MultiplexProgramPacketIdentifiersMap {
  readonly AudioPids?: [];
  readonly DvbSubPids?: [];
  readonly DvbTeletextPid?: number;
  readonly EtvPlatformPid?: number;
  readonly EtvSignalPid?: number;
  readonly KlvDataPids?: [];
  readonly PcrPid?: number;
  readonly PmtPid?: number;
  readonly PrivateMetadataPid?: number;
  readonly Scte27Pids?: [];
  readonly Scte35Pid?: number;
  readonly TimedMetadataPid?: number;
  readonly VideoPid?: number;
}

export interface MultiplexProgramPipelineDetail {
  readonly ActiveChannelPipeline?: string;
  readonly PipelineId?: string;
}

export interface MultiplexProgramServiceDescriptor {
  readonly ProviderName: string;
  readonly ServiceName: string;
}

export interface MultiplexProgramSettings {
  readonly PreferredChannelPipeline?: string;
  readonly ProgramNumber: number;
  readonly ServiceDescriptor?: MultiplexProgramServiceDescriptor;
  readonly VideoSettings?: MultiplexVideoSettings;
}

export interface MultiplexProgramSummary {
  readonly ChannelId?: string;
  readonly ProgramName?: string;
}

export interface MultiplexSettings {
  readonly MaximumVideoBufferDelayMilliseconds?: number;
  readonly TransportStreamBitrate: number;
  readonly TransportStreamId: number;
  readonly TransportStreamReservedBitrate?: number;
}

export interface MultiplexSettingsSummary {
  readonly TransportStreamBitrate?: number;
}

export interface MultiplexStatmuxVideoSettings {
  readonly MaximumBitrate?: number;
  readonly MinimumBitrate?: number;
  readonly Priority?: number;
}

export interface MultiplexSummary {
  readonly Arn?: string;
  readonly AvailabilityZones?: [];
  readonly Id?: string;
  readonly MultiplexSettings?: MultiplexSettingsSummary;
  readonly Name?: string;
  readonly PipelinesRunningCount?: number;
  readonly ProgramCount?: number;
  readonly State?: string;
  readonly Tags?: {[key: string]: any};
}

export interface MultiplexVideoSettings {
  readonly ConstantBitrate?: number;
  readonly StatmuxSettings?: MultiplexStatmuxVideoSettings;
}

export interface NetworkInputSettings {
  readonly HlsInputSettings?: HlsInputSettings;
  readonly ServerValidation?: string;
}

export interface NielsenCBET {
  readonly CbetCheckDigitString: string;
  readonly CbetStepaside: string;
  readonly Csid: string;
}

export interface NielsenConfiguration {
  readonly DistributorId?: string;
  readonly NielsenPcmToId3Tagging?: string;
}

export interface NielsenNaesIiNw {
  readonly CheckDigitString: string;
  readonly Sid: unknown;
}

export interface NielsenWatermarksSettings {
  readonly NielsenCbetSettings?: NielsenCBET;
  readonly NielsenDistributionType?: string;
  readonly NielsenNaesIiNwSettings?: NielsenNaesIiNw;
}

export interface NotFoundException {
  readonly Message?: string;
}

export interface Offering {
  readonly Arn?: string;
  readonly CurrencyCode?: string;
  readonly Duration?: number;
  readonly DurationUnits?: string;
  readonly FixedPrice?: unknown;
  readonly OfferingDescription?: string;
  readonly OfferingId?: string;
  readonly OfferingType?: string;
  readonly Region?: string;
  readonly ResourceSpecification?: ReservationResourceSpecification;
  readonly UsagePrice?: unknown;
}

export interface Output {
  readonly AudioDescriptionNames?: [];
  readonly CaptionDescriptionNames?: [];
  readonly OutputName?: string;
  readonly OutputSettings: OutputSettings;
  readonly VideoDescriptionName?: string;
}

export interface OutputDestination {
  readonly Id?: string;
  readonly MediaPackageSettings?: [];
  readonly MultiplexSettings?: MultiplexProgramChannelDestinationSettings;
  readonly Settings?: [];
}

export interface OutputDestinationSettings {
  readonly PasswordParam?: string;
  readonly StreamName?: string;
  readonly Url?: string;
  readonly Username?: string;
}

export interface OutputGroup {
  readonly Name?: string;
  readonly OutputGroupSettings: OutputGroupSettings;
  readonly Outputs: [];
}

export interface OutputGroupSettings {
  readonly ArchiveGroupSettings?: ArchiveGroupSettings;
  readonly FrameCaptureGroupSettings?: FrameCaptureGroupSettings;
  readonly HlsGroupSettings?: HlsGroupSettings;
  readonly MediaPackageGroupSettings?: MediaPackageGroupSettings;
  readonly MsSmoothGroupSettings?: MsSmoothGroupSettings;
  readonly MultiplexGroupSettings?: MultiplexGroupSettings;
  readonly RtmpGroupSettings?: RtmpGroupSettings;
  readonly UdpGroupSettings?: UdpGroupSettings;
}

export interface OutputLocationRef {
  readonly DestinationRefId?: string;
}

export interface OutputSettings {
  readonly ArchiveOutputSettings?: ArchiveOutputSettings;
  readonly FrameCaptureOutputSettings?: FrameCaptureOutputSettings;
  readonly HlsOutputSettings?: HlsOutputSettings;
  readonly MediaPackageOutputSettings?: MediaPackageOutputSettings;
  readonly MsSmoothOutputSettings?: MsSmoothOutputSettings;
  readonly MultiplexOutputSettings?: MultiplexOutputSettings;
  readonly RtmpOutputSettings?: RtmpOutputSettings;
  readonly UdpOutputSettings?: UdpOutputSettings;
}

export interface PassThroughSettings {
}

export interface PauseStateScheduleActionSettings {
  readonly Pipelines?: [];
}

export interface PipelineDetail {
  readonly ActiveInputAttachmentName?: string;
  readonly ActiveInputSwitchActionName?: string;
  readonly ActiveMotionGraphicsActionName?: string;
  readonly ActiveMotionGraphicsUri?: string;
  readonly PipelineId?: string;
}

export interface PipelinePauseStateSettings {
  readonly PipelineId: string;
}

export interface PurchaseOffering {
  readonly Count: number;
  readonly Name?: string;
  readonly RequestId?: string;
  readonly Start?: string;
  readonly Tags?: {[key: string]: any};
}

export interface PurchaseOfferingRequest {
  readonly Count: number;
  readonly Name?: string;
  readonly OfferingId: string;
  readonly RequestId?: string;
  readonly Start?: string;
  readonly Tags?: {[key: string]: any};
}

export interface PurchaseOfferingResponse {
  readonly Reservation?: Reservation;
}

export interface PurchaseOfferingResultModel {
  readonly Reservation?: Reservation;
}

export interface RawSettings {
}

export interface Rec601Settings {
}

export interface Rec709Settings {
}

export interface RejectInputDeviceTransferRequest {
  readonly InputDeviceId: string;
}

export interface RejectInputDeviceTransferResponse {
}

export interface RemixSettings {
  readonly ChannelMappings: [];
  readonly ChannelsIn?: number;
  readonly ChannelsOut?: number;
}

export interface Reservation {
  readonly Arn?: string;
  readonly Count?: number;
  readonly CurrencyCode?: string;
  readonly Duration?: number;
  readonly DurationUnits?: string;
  readonly End?: string;
  readonly FixedPrice?: unknown;
  readonly Name?: string;
  readonly OfferingDescription?: string;
  readonly OfferingId?: string;
  readonly OfferingType?: string;
  readonly Region?: string;
  readonly ReservationId?: string;
  readonly ResourceSpecification?: ReservationResourceSpecification;
  readonly Start?: string;
  readonly State?: string;
  readonly Tags?: {[key: string]: any};
  readonly UsagePrice?: unknown;
}

export interface ReservationResourceSpecification {
  readonly ChannelClass?: string;
  readonly Codec?: string;
  readonly MaximumBitrate?: string;
  readonly MaximumFramerate?: string;
  readonly Resolution?: string;
  readonly ResourceType?: string;
  readonly SpecialFeature?: string;
  readonly VideoQuality?: string;
}

export interface ResourceConflict {
  readonly Message?: string;
}

export interface ResourceNotFound {
  readonly Message?: string;
}

export interface RtmpCaptionInfoDestinationSettings {
}

export interface RtmpGroupSettings {
  readonly AdMarkers?: [];
  readonly AuthenticationScheme?: string;
  readonly CacheFullBehavior?: string;
  readonly CacheLength?: number;
  readonly CaptionData?: string;
  readonly InputLossAction?: string;
  readonly RestartDelay?: number;
}

export interface RtmpOutputSettings {
  readonly CertificateMode?: string;
  readonly ConnectionRetryInterval?: number;
  readonly Destination: OutputLocationRef;
  readonly NumRetries?: number;
}

export interface ScheduleAction {
  readonly ActionName: string;
  readonly ScheduleActionSettings: ScheduleActionSettings;
  readonly ScheduleActionStartSettings: ScheduleActionStartSettings;
}

export interface ScheduleActionSettings {
  readonly HlsId3SegmentTaggingSettings?: HlsId3SegmentTaggingScheduleActionSettings;
  readonly HlsTimedMetadataSettings?: HlsTimedMetadataScheduleActionSettings;
  readonly InputPrepareSettings?: InputPrepareScheduleActionSettings;
  readonly InputSwitchSettings?: InputSwitchScheduleActionSettings;
  readonly MotionGraphicsImageActivateSettings?: MotionGraphicsActivateScheduleActionSettings;
  readonly MotionGraphicsImageDeactivateSettings?: MotionGraphicsDeactivateScheduleActionSettings;
  readonly PauseStateSettings?: PauseStateScheduleActionSettings;
  readonly Scte35ReturnToNetworkSettings?: Scte35ReturnToNetworkScheduleActionSettings;
  readonly Scte35SpliceInsertSettings?: Scte35SpliceInsertScheduleActionSettings;
  readonly Scte35TimeSignalSettings?: Scte35TimeSignalScheduleActionSettings;
  readonly StaticImageActivateSettings?: StaticImageActivateScheduleActionSettings;
  readonly StaticImageDeactivateSettings?: StaticImageDeactivateScheduleActionSettings;
}

export interface ScheduleActionStartSettings {
  readonly FixedModeScheduleActionStartSettings?: FixedModeScheduleActionStartSettings;
  readonly FollowModeScheduleActionStartSettings?: FollowModeScheduleActionStartSettings;
  readonly ImmediateModeScheduleActionStartSettings?: ImmediateModeScheduleActionStartSettings;
}

export interface ScheduleDeleteResultModel {
}

export interface ScheduleDescribeResultModel {
  readonly NextToken?: string;
  readonly ScheduleActions: [];
}

export interface Scte20PlusEmbeddedDestinationSettings {
}

export interface Scte20SourceSettings {
  readonly Convert608To708?: string;
  readonly Source608ChannelNumber?: number;
}

export interface Scte27DestinationSettings {
}

export interface Scte27SourceSettings {
  readonly OcrLanguage?: string;
  readonly Pid?: number;
}

export interface Scte35DeliveryRestrictions {
  readonly ArchiveAllowedFlag: string;
  readonly DeviceRestrictions: string;
  readonly NoRegionalBlackoutFlag: string;
  readonly WebDeliveryAllowedFlag: string;
}

export interface Scte35Descriptor {
  readonly Scte35DescriptorSettings: Scte35DescriptorSettings;
}

export interface Scte35DescriptorSettings {
  readonly SegmentationDescriptorScte35DescriptorSettings: Scte35SegmentationDescriptor;
}

export interface Scte35ReturnToNetworkScheduleActionSettings {
  readonly SpliceEventId: number;
}

export interface Scte35SegmentationDescriptor {
  readonly DeliveryRestrictions?: Scte35DeliveryRestrictions;
  readonly SegmentNum?: number;
  readonly SegmentationCancelIndicator: string;
  readonly SegmentationDuration?: number;
  readonly SegmentationEventId: number;
  readonly SegmentationTypeId?: number;
  readonly SegmentationUpid?: string;
  readonly SegmentationUpidType?: number;
  readonly SegmentsExpected?: number;
  readonly SubSegmentNum?: number;
  readonly SubSegmentsExpected?: number;
}

export interface Scte35SpliceInsert {
  readonly AdAvailOffset?: number;
  readonly NoRegionalBlackoutFlag?: string;
  readonly WebDeliveryAllowedFlag?: string;
}

export interface Scte35SpliceInsertScheduleActionSettings {
  readonly Duration?: number;
  readonly SpliceEventId: number;
}

export interface Scte35TimeSignalApos {
  readonly AdAvailOffset?: number;
  readonly NoRegionalBlackoutFlag?: string;
  readonly WebDeliveryAllowedFlag?: string;
}

export interface Scte35TimeSignalScheduleActionSettings {
  readonly Scte35Descriptors: [];
}

export interface SmpteTtDestinationSettings {
}

export interface StandardHlsSettings {
  readonly AudioRenditionSets?: string;
  readonly M3u8Settings: M3u8Settings;
}

export interface StartChannelRequest {
  readonly ChannelId: string;
}

export interface StartChannelResponse {
  readonly Arn?: string;
  readonly CdiInputSpecification?: CdiInputSpecification;
  readonly ChannelClass?: string;
  readonly Destinations?: [];
  readonly EgressEndpoints?: [];
  readonly EncoderSettings?: EncoderSettings;
  readonly Id?: string;
  readonly InputAttachments?: [];
  readonly InputSpecification?: InputSpecification;
  readonly LogLevel?: string;
  readonly Name?: string;
  readonly PipelineDetails?: [];
  readonly PipelinesRunningCount?: number;
  readonly RoleArn?: string;
  readonly State?: string;
  readonly Tags?: {[key: string]: any};
  readonly Vpc?: VpcOutputSettingsDescription;
}

export interface StartMultiplexRequest {
  readonly MultiplexId: string;
}

export interface StartMultiplexResponse {
  readonly Arn?: string;
  readonly AvailabilityZones?: [];
  readonly Destinations?: [];
  readonly Id?: string;
  readonly MultiplexSettings?: MultiplexSettings;
  readonly Name?: string;
  readonly PipelinesRunningCount?: number;
  readonly ProgramCount?: number;
  readonly State?: string;
  readonly Tags?: {[key: string]: any};
}

export interface StartTimecode {
  readonly Timecode?: string;
}

export interface StaticImageActivateScheduleActionSettings {
  readonly Duration?: number;
  readonly FadeIn?: number;
  readonly FadeOut?: number;
  readonly Height?: number;
  readonly Image: InputLocation;
  readonly ImageX?: number;
  readonly ImageY?: number;
  readonly Layer?: number;
  readonly Opacity?: number;
  readonly Width?: number;
}

export interface StaticImageDeactivateScheduleActionSettings {
  readonly FadeOut?: number;
  readonly Layer?: number;
}

export interface StaticKeySettings {
  readonly KeyProviderServer?: InputLocation;
  readonly StaticKeyValue: string;
}

export interface StopChannelRequest {
  readonly ChannelId: string;
}

export interface StopChannelResponse {
  readonly Arn?: string;
  readonly CdiInputSpecification?: CdiInputSpecification;
  readonly ChannelClass?: string;
  readonly Destinations?: [];
  readonly EgressEndpoints?: [];
  readonly EncoderSettings?: EncoderSettings;
  readonly Id?: string;
  readonly InputAttachments?: [];
  readonly InputSpecification?: InputSpecification;
  readonly LogLevel?: string;
  readonly Name?: string;
  readonly PipelineDetails?: [];
  readonly PipelinesRunningCount?: number;
  readonly RoleArn?: string;
  readonly State?: string;
  readonly Tags?: {[key: string]: any};
  readonly Vpc?: VpcOutputSettingsDescription;
}

export interface StopMultiplexRequest {
  readonly MultiplexId: string;
}

export interface StopMultiplexResponse {
  readonly Arn?: string;
  readonly AvailabilityZones?: [];
  readonly Destinations?: [];
  readonly Id?: string;
  readonly MultiplexSettings?: MultiplexSettings;
  readonly Name?: string;
  readonly PipelinesRunningCount?: number;
  readonly ProgramCount?: number;
  readonly State?: string;
  readonly Tags?: {[key: string]: any};
}

export interface StopTimecode {
  readonly LastFrameClippingBehavior?: string;
  readonly Timecode?: string;
}

export interface TagsModel {
  readonly Tags?: {[key: string]: any};
}

export interface TeletextDestinationSettings {
}

export interface TeletextSourceSettings {
  readonly OutputRectangle?: CaptionRectangle;
  readonly PageNumber?: string;
}

export interface TemporalFilterSettings {
  readonly PostFilterSharpening?: string;
  readonly Strength?: string;
}

export interface ThumbnailData {
  readonly Body?: string;
}

export interface TimecodeConfig {
  readonly Source: string;
  readonly SyncThreshold?: number;
}

export interface TooManyRequestsException {
  readonly Message?: string;
}

export interface TransferInputDevice {
  readonly TargetCustomerId?: string;
  readonly TargetRegion?: string;
  readonly TransferMessage?: string;
}

export interface TransferInputDeviceRequest {
  readonly InputDeviceId: string;
  readonly TargetCustomerId?: string;
  readonly TargetRegion?: string;
  readonly TransferMessage?: string;
}

export interface TransferInputDeviceResponse {
}

export interface TransferringInputDeviceSummary {
  readonly Id?: string;
  readonly Message?: string;
  readonly TargetCustomerId?: string;
  readonly TransferType?: string;
}

export interface TtmlDestinationSettings {
  readonly StyleControl?: string;
}

export interface UdpContainerSettings {
  readonly M2tsSettings?: M2tsSettings;
}

export interface UdpGroupSettings {
  readonly InputLossAction?: string;
  readonly TimedMetadataId3Frame?: string;
  readonly TimedMetadataId3Period?: number;
}

export interface UdpOutputSettings {
  readonly BufferMsec?: number;
  readonly ContainerSettings: UdpContainerSettings;
  readonly Destination: OutputLocationRef;
  readonly FecOutputSettings?: FecOutputSettings;
}

export interface UnprocessableEntityException {
  readonly Message?: string;
  readonly ValidationErrors?: [];
}

export interface UpdateChannel {
  readonly CdiInputSpecification?: CdiInputSpecification;
  readonly Destinations?: [];
  readonly EncoderSettings?: EncoderSettings;
  readonly InputAttachments?: [];
  readonly InputSpecification?: InputSpecification;
  readonly LogLevel?: string;
  readonly Name?: string;
  readonly RoleArn?: string;
}

export interface UpdateChannelClass {
  readonly ChannelClass: string;
  readonly Destinations?: [];
}

export interface UpdateChannelClassRequest {
  readonly ChannelClass: string;
  readonly ChannelId: string;
  readonly Destinations?: [];
}

export interface UpdateChannelClassResponse {
  readonly Channel?: Channel;
}

export interface UpdateChannelRequest {
  readonly CdiInputSpecification?: CdiInputSpecification;
  readonly ChannelId: string;
  readonly Destinations?: [];
  readonly EncoderSettings?: EncoderSettings;
  readonly InputAttachments?: [];
  readonly InputSpecification?: InputSpecification;
  readonly LogLevel?: string;
  readonly Name?: string;
  readonly RoleArn?: string;
}

export interface UpdateChannelResponse {
  readonly Channel?: Channel;
}

export interface UpdateChannelResultModel {
  readonly Channel?: Channel;
}

export interface UpdateInput {
  readonly Destinations?: [];
  readonly InputDevices?: [];
  readonly InputSecurityGroups?: [];
  readonly MediaConnectFlows?: [];
  readonly Name?: string;
  readonly RoleArn?: string;
  readonly Sources?: [];
}

export interface UpdateInputDevice {
  readonly HdDeviceSettings?: InputDeviceConfigurableSettings;
  readonly Name?: string;
  readonly UhdDeviceSettings?: InputDeviceConfigurableSettings;
}

export interface UpdateInputDeviceRequest {
  readonly HdDeviceSettings?: InputDeviceConfigurableSettings;
  readonly InputDeviceId: string;
  readonly Name?: string;
  readonly UhdDeviceSettings?: InputDeviceConfigurableSettings;
}

export interface UpdateInputDeviceResponse {
  readonly Arn?: string;
  readonly ConnectionState?: string;
  readonly DeviceSettingsSyncState?: string;
  readonly DeviceUpdateStatus?: string;
  readonly HdDeviceSettings?: InputDeviceHdSettings;
  readonly Id?: string;
  readonly MacAddress?: string;
  readonly Name?: string;
  readonly NetworkSettings?: InputDeviceNetworkSettings;
  readonly SerialNumber?: string;
  readonly Type?: string;
  readonly UhdDeviceSettings?: InputDeviceUhdSettings;
}

export interface UpdateInputRequest {
  readonly Destinations?: [];
  readonly InputDevices?: [];
  readonly InputId: string;
  readonly InputSecurityGroups?: [];
  readonly MediaConnectFlows?: [];
  readonly Name?: string;
  readonly RoleArn?: string;
  readonly Sources?: [];
}

export interface UpdateInputResponse {
  readonly Input?: Input;
}

export interface UpdateInputResultModel {
  readonly Input?: Input;
}

export interface UpdateInputSecurityGroupRequest {
  readonly InputSecurityGroupId: string;
  readonly Tags?: {[key: string]: any};
  readonly WhitelistRules?: [];
}

export interface UpdateInputSecurityGroupResponse {
  readonly SecurityGroup?: InputSecurityGroup;
}

export interface UpdateInputSecurityGroupResultModel {
  readonly SecurityGroup?: InputSecurityGroup;
}

export interface UpdateMultiplex {
  readonly MultiplexSettings?: MultiplexSettings;
  readonly Name?: string;
}

export interface UpdateMultiplexProgram {
  readonly MultiplexProgramSettings?: MultiplexProgramSettings;
}

export interface UpdateMultiplexProgramRequest {
  readonly MultiplexId: string;
  readonly MultiplexProgramSettings?: MultiplexProgramSettings;
  readonly ProgramName: string;
}

export interface UpdateMultiplexProgramResponse {
  readonly MultiplexProgram?: MultiplexProgram;
}

export interface UpdateMultiplexProgramResultModel {
  readonly MultiplexProgram?: MultiplexProgram;
}

export interface UpdateMultiplexRequest {
  readonly MultiplexId: string;
  readonly MultiplexSettings?: MultiplexSettings;
  readonly Name?: string;
}

export interface UpdateMultiplexResponse {
  readonly Multiplex?: Multiplex;
}

export interface UpdateMultiplexResultModel {
  readonly Multiplex?: Multiplex;
}

export interface UpdateReservation {
  readonly Name?: string;
}

export interface UpdateReservationRequest {
  readonly Name?: string;
  readonly ReservationId: string;
}

export interface UpdateReservationResponse {
  readonly Reservation?: Reservation;
}

export interface UpdateReservationResultModel {
  readonly Reservation?: Reservation;
}

export interface ValidationError {
  readonly ElementPath?: string;
  readonly ErrorMessage?: string;
}

export interface VideoBlackFailoverSettings {
  readonly BlackDetectThreshold?: unknown;
  readonly VideoBlackThresholdMsec?: number;
}

export interface VideoCodecSettings {
  readonly FrameCaptureSettings?: FrameCaptureSettings;
  readonly H264Settings?: H264Settings;
  readonly H265Settings?: H265Settings;
  readonly Mpeg2Settings?: Mpeg2Settings;
}

export interface VideoDescription {
  readonly CodecSettings?: VideoCodecSettings;
  readonly Height?: number;
  readonly Name: string;
  readonly RespondToAfd?: string;
  readonly ScalingBehavior?: string;
  readonly Sharpness?: number;
  readonly Width?: number;
}

export interface VideoSelector {
  readonly ColorSpace?: string;
  readonly ColorSpaceSettings?: VideoSelectorColorSpaceSettings;
  readonly ColorSpaceUsage?: string;
  readonly SelectorSettings?: VideoSelectorSettings;
}

export interface VideoSelectorColorSpaceSettings {
  readonly Hdr10Settings?: Hdr10Settings;
}

export interface VideoSelectorPid {
  readonly Pid?: number;
}

export interface VideoSelectorProgramId {
  readonly ProgramId?: number;
}

export interface VideoSelectorSettings {
  readonly VideoSelectorPid?: VideoSelectorPid;
  readonly VideoSelectorProgramId?: VideoSelectorProgramId;
}

export interface VpcOutputSettings {
  readonly PublicAddressAllocationIds?: [];
  readonly SecurityGroupIds?: [];
  readonly SubnetIds: [];
}

export interface VpcOutputSettingsDescription {
  readonly AvailabilityZones?: [];
  readonly NetworkInterfaceIds?: [];
  readonly SecurityGroupIds?: [];
  readonly SubnetIds?: [];
}

export interface WavSettings {
  readonly BitDepth?: unknown;
  readonly CodingMode?: string;
  readonly SampleRate?: unknown;
}

export interface WebvttDestinationSettings {
  readonly StyleControl?: string;
}


