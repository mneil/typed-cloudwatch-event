/**
 * STOP. This file is autogenerated. DO NOT EDIT by hand
 */
export interface CancelImageCreation {
  readonly imageBuildVersionArn: string;
  readonly clientToken: string;
}

export interface CreateComponent {
  readonly name: string;
  readonly semanticVersion: string;
  readonly description?: string;
  readonly changeDescription?: string;
  readonly platform: string;
  readonly supportedOsVersions?: [];
  readonly data?: string;
  readonly uri?: string;
  readonly kmsKeyId?: string;
  readonly tags?: {[key: string]: any};
  readonly clientToken: string;
}

export interface CreateContainerRecipe {
  readonly containerType: string;
  readonly name: string;
  readonly description?: string;
  readonly semanticVersion: string;
  readonly components: [];
  readonly instanceConfiguration?: InstanceConfiguration;
  readonly dockerfileTemplateData?: string;
  readonly dockerfileTemplateUri?: string;
  readonly platformOverride?: string;
  readonly imageOsVersionOverride?: string;
  readonly parentImage: string;
  readonly tags?: {[key: string]: any};
  readonly workingDirectory?: string;
  readonly targetRepository: TargetContainerRepository;
  readonly kmsKeyId?: string;
  readonly clientToken: string;
}

export interface CreateDistributionConfiguration {
  readonly name: string;
  readonly description?: string;
  readonly distributions: [];
  readonly tags?: {[key: string]: any};
  readonly clientToken: string;
}

export interface CreateImage {
  readonly imageRecipeArn?: string;
  readonly containerRecipeArn?: string;
  readonly distributionConfigurationArn?: string;
  readonly infrastructureConfigurationArn: string;
  readonly imageTestsConfiguration?: ImageTestsConfiguration;
  readonly enhancedImageMetadataEnabled?: boolean;
  readonly tags?: {[key: string]: any};
  readonly clientToken: string;
}

export interface CreateImagePipeline {
  readonly name: string;
  readonly description?: string;
  readonly imageRecipeArn?: string;
  readonly containerRecipeArn?: string;
  readonly infrastructureConfigurationArn: string;
  readonly distributionConfigurationArn?: string;
  readonly imageTestsConfiguration?: ImageTestsConfiguration;
  readonly enhancedImageMetadataEnabled?: boolean;
  readonly schedule?: Schedule;
  readonly status?: string;
  readonly tags?: {[key: string]: any};
  readonly clientToken: string;
}

export interface CreateImageRecipe {
  readonly name: string;
  readonly description?: string;
  readonly semanticVersion: string;
  readonly components: [];
  readonly parentImage: string;
  readonly blockDeviceMappings?: [];
  readonly tags?: {[key: string]: any};
  readonly workingDirectory?: string;
  readonly additionalInstanceConfiguration?: AdditionalInstanceConfiguration;
  readonly clientToken: string;
}

export interface CreateInfrastructureConfiguration {
  readonly name: string;
  readonly description?: string;
  readonly instanceTypes?: [];
  readonly instanceProfileName: string;
  readonly securityGroupIds?: [];
  readonly subnetId?: string;
  readonly logging?: Logging;
  readonly keyPair?: string;
  readonly terminateInstanceOnFailure?: boolean;
  readonly snsTopicArn?: string;
  readonly resourceTags?: {[key: string]: any};
  readonly instanceMetadataOptions?: InstanceMetadataOptions;
  readonly tags?: {[key: string]: any};
  readonly clientToken: string;
}

export interface DeleteComponent {
  readonly componentBuildVersionArn: string;
}

export interface DeleteContainerRecipe {
  readonly containerRecipeArn: string;
}

export interface DeleteDistributionConfiguration {
  readonly distributionConfigurationArn: string;
}

export interface DeleteImage {
  readonly imageBuildVersionArn: string;
}

export interface DeleteImagePipeline {
  readonly imagePipelineArn: string;
}

export interface DeleteImageRecipe {
  readonly imageRecipeArn: string;
}

export interface DeleteInfrastructureConfiguration {
  readonly infrastructureConfigurationArn: string;
}

export interface GetComponent {
  readonly componentBuildVersionArn: string;
}

export interface GetComponentPolicy {
  readonly componentArn: string;
}

export interface GetContainerRecipe {
  readonly containerRecipeArn: string;
}

export interface GetContainerRecipePolicy {
  readonly containerRecipeArn: string;
}

export interface GetDistributionConfiguration {
  readonly distributionConfigurationArn: string;
}

export interface GetImage {
  readonly imageBuildVersionArn: string;
}

export interface GetImagePipeline {
  readonly imagePipelineArn: string;
}

export interface GetImagePolicy {
  readonly imageArn: string;
}

export interface GetImageRecipe {
  readonly imageRecipeArn: string;
}

export interface GetImageRecipePolicy {
  readonly imageRecipeArn: string;
}

export interface GetInfrastructureConfiguration {
  readonly infrastructureConfigurationArn: string;
}

export interface ImportComponent {
  readonly name: string;
  readonly semanticVersion: string;
  readonly description?: string;
  readonly changeDescription?: string;
  readonly type: string;
  readonly format: string;
  readonly platform: string;
  readonly data?: string;
  readonly uri?: string;
  readonly kmsKeyId?: string;
  readonly tags?: {[key: string]: any};
  readonly clientToken: string;
}

export interface ListComponentBuildVersions {
  readonly componentVersionArn: string;
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface ListComponents {
  readonly owner?: string;
  readonly filters?: [];
  readonly byName?: boolean;
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface ListContainerRecipes {
  readonly owner?: string;
  readonly filters?: [];
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface ListDistributionConfigurations {
  readonly filters?: [];
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface ListImageBuildVersions {
  readonly imageVersionArn: string;
  readonly filters?: [];
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface ListImagePackages {
  readonly imageBuildVersionArn: string;
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface ListImagePipelineImages {
  readonly imagePipelineArn: string;
  readonly filters?: [];
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface ListImagePipelines {
  readonly filters?: [];
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface ListImageRecipes {
  readonly owner?: string;
  readonly filters?: [];
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface ListImages {
  readonly owner?: string;
  readonly filters?: [];
  readonly byName?: boolean;
  readonly maxResults?: number;
  readonly nextToken?: string;
  readonly includeDeprecated?: boolean;
}

export interface ListInfrastructureConfigurations {
  readonly filters?: [];
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface ListTagsForResource {
  readonly resourceArn: string;
}

export interface PutComponentPolicy {
  readonly componentArn: string;
  readonly policy: string;
}

export interface PutContainerRecipePolicy {
  readonly containerRecipeArn: string;
  readonly policy: string;
}

export interface PutImagePolicy {
  readonly imageArn: string;
  readonly policy: string;
}

export interface PutImageRecipePolicy {
  readonly imageRecipeArn: string;
  readonly policy: string;
}

export interface StartImagePipelineExecution {
  readonly imagePipelineArn: string;
  readonly clientToken: string;
}

export interface TagResource {
  readonly resourceArn: string;
  readonly tags: {[key: string]: any};
}

export interface UntagResource {
  readonly resourceArn: string;
  readonly tagKeys: [];
}

export interface UpdateDistributionConfiguration {
  readonly distributionConfigurationArn: string;
  readonly description?: string;
  readonly distributions: [];
  readonly clientToken: string;
}

export interface UpdateImagePipeline {
  readonly imagePipelineArn: string;
  readonly description?: string;
  readonly imageRecipeArn?: string;
  readonly containerRecipeArn?: string;
  readonly infrastructureConfigurationArn: string;
  readonly distributionConfigurationArn?: string;
  readonly imageTestsConfiguration?: ImageTestsConfiguration;
  readonly enhancedImageMetadataEnabled?: boolean;
  readonly schedule?: Schedule;
  readonly status?: string;
  readonly clientToken: string;
}

export interface UpdateInfrastructureConfiguration {
  readonly infrastructureConfigurationArn: string;
  readonly description?: string;
  readonly instanceTypes?: [];
  readonly instanceProfileName: string;
  readonly securityGroupIds?: [];
  readonly subnetId?: string;
  readonly logging?: Logging;
  readonly keyPair?: string;
  readonly terminateInstanceOnFailure?: boolean;
  readonly snsTopicArn?: string;
  readonly clientToken: string;
  readonly resourceTags?: {[key: string]: any};
  readonly instanceMetadataOptions?: InstanceMetadataOptions;
}

export interface AdditionalInstanceConfiguration {
  readonly systemsManagerAgent?: SystemsManagerAgent;
  readonly userDataOverride?: string;
}

export interface Ami {
  readonly region?: string;
  readonly image?: string;
  readonly name?: string;
  readonly description?: string;
  readonly state?: ImageState;
  readonly accountId?: string;
}

export interface AmiDistributionConfiguration {
  readonly name?: string;
  readonly description?: string;
  readonly targetAccountIds?: [];
  readonly amiTags?: {[key: string]: any};
  readonly kmsKeyId?: string;
  readonly launchPermission?: LaunchPermissionConfiguration;
}

export interface CallRateLimitExceededException {
  readonly message?: string;
}

export interface CancelImageCreationRequest {
  readonly imageBuildVersionArn: string;
  readonly clientToken: string;
}

export interface CancelImageCreationResponse {
  readonly requestId?: string;
  readonly clientToken?: string;
  readonly imageBuildVersionArn?: string;
}

export interface ClientException {
  readonly message?: string;
}

export interface Component {
  readonly arn?: string;
  readonly name?: string;
  readonly version?: string;
  readonly description?: string;
  readonly changeDescription?: string;
  readonly type?: string;
  readonly platform?: string;
  readonly supportedOsVersions?: [];
  readonly state?: ComponentState;
  readonly parameters?: [];
  readonly owner?: string;
  readonly data?: string;
  readonly kmsKeyId?: string;
  readonly encrypted?: boolean;
  readonly dateCreated?: string;
  readonly tags?: {[key: string]: any};
}

export interface ComponentConfiguration {
  readonly componentArn: string;
  readonly parameters?: [];
}

export interface ComponentParameter {
  readonly name: string;
  readonly value: [];
}

export interface ComponentParameterDetail {
  readonly name: string;
  readonly type: string;
  readonly defaultValue?: [];
  readonly description?: string;
}

export interface ComponentState {
  readonly status?: string;
  readonly reason?: string;
}

export interface ComponentSummary {
  readonly arn?: string;
  readonly name?: string;
  readonly version?: string;
  readonly platform?: string;
  readonly supportedOsVersions?: [];
  readonly state?: ComponentState;
  readonly type?: string;
  readonly owner?: string;
  readonly description?: string;
  readonly changeDescription?: string;
  readonly dateCreated?: string;
  readonly tags?: {[key: string]: any};
}

export interface ComponentVersion {
  readonly arn?: string;
  readonly name?: string;
  readonly version?: string;
  readonly description?: string;
  readonly platform?: string;
  readonly supportedOsVersions?: [];
  readonly type?: string;
  readonly owner?: string;
  readonly dateCreated?: string;
}

export interface Container {
  readonly region?: string;
  readonly imageUris?: [];
}

export interface ContainerDistributionConfiguration {
  readonly description?: string;
  readonly containerTags?: [];
  readonly targetRepository: TargetContainerRepository;
}

export interface ContainerRecipe {
  readonly arn?: string;
  readonly containerType?: string;
  readonly name?: string;
  readonly description?: string;
  readonly platform?: string;
  readonly owner?: string;
  readonly version?: string;
  readonly components?: [];
  readonly instanceConfiguration?: InstanceConfiguration;
  readonly dockerfileTemplateData?: string;
  readonly kmsKeyId?: string;
  readonly encrypted?: boolean;
  readonly parentImage?: string;
  readonly dateCreated?: string;
  readonly tags?: {[key: string]: any};
  readonly workingDirectory?: string;
  readonly targetRepository?: TargetContainerRepository;
}

export interface ContainerRecipeSummary {
  readonly arn?: string;
  readonly containerType?: string;
  readonly name?: string;
  readonly platform?: string;
  readonly owner?: string;
  readonly parentImage?: string;
  readonly dateCreated?: string;
  readonly tags?: {[key: string]: any};
}

export interface CreateComponentRequest {
  readonly name: string;
  readonly semanticVersion: string;
  readonly description?: string;
  readonly changeDescription?: string;
  readonly platform: string;
  readonly supportedOsVersions?: [];
  readonly data?: string;
  readonly uri?: string;
  readonly kmsKeyId?: string;
  readonly tags?: {[key: string]: any};
  readonly clientToken: string;
}

export interface CreateComponentResponse {
  readonly requestId?: string;
  readonly clientToken?: string;
  readonly componentBuildVersionArn?: string;
}

export interface CreateContainerRecipeRequest {
  readonly containerType: string;
  readonly name: string;
  readonly description?: string;
  readonly semanticVersion: string;
  readonly components: [];
  readonly instanceConfiguration?: InstanceConfiguration;
  readonly dockerfileTemplateData?: string;
  readonly dockerfileTemplateUri?: string;
  readonly platformOverride?: string;
  readonly imageOsVersionOverride?: string;
  readonly parentImage: string;
  readonly tags?: {[key: string]: any};
  readonly workingDirectory?: string;
  readonly targetRepository: TargetContainerRepository;
  readonly kmsKeyId?: string;
  readonly clientToken: string;
}

export interface CreateContainerRecipeResponse {
  readonly requestId?: string;
  readonly clientToken?: string;
  readonly containerRecipeArn?: string;
}

export interface CreateDistributionConfigurationRequest {
  readonly name: string;
  readonly description?: string;
  readonly distributions: [];
  readonly tags?: {[key: string]: any};
  readonly clientToken: string;
}

export interface CreateDistributionConfigurationResponse {
  readonly requestId?: string;
  readonly clientToken?: string;
  readonly distributionConfigurationArn?: string;
}

export interface CreateImagePipelineRequest {
  readonly name: string;
  readonly description?: string;
  readonly imageRecipeArn?: string;
  readonly containerRecipeArn?: string;
  readonly infrastructureConfigurationArn: string;
  readonly distributionConfigurationArn?: string;
  readonly imageTestsConfiguration?: ImageTestsConfiguration;
  readonly enhancedImageMetadataEnabled?: boolean;
  readonly schedule?: Schedule;
  readonly status?: string;
  readonly tags?: {[key: string]: any};
  readonly clientToken: string;
}

export interface CreateImagePipelineResponse {
  readonly requestId?: string;
  readonly clientToken?: string;
  readonly imagePipelineArn?: string;
}

export interface CreateImageRecipeRequest {
  readonly name: string;
  readonly description?: string;
  readonly semanticVersion: string;
  readonly components: [];
  readonly parentImage: string;
  readonly blockDeviceMappings?: [];
  readonly tags?: {[key: string]: any};
  readonly workingDirectory?: string;
  readonly additionalInstanceConfiguration?: AdditionalInstanceConfiguration;
  readonly clientToken: string;
}

export interface CreateImageRecipeResponse {
  readonly requestId?: string;
  readonly clientToken?: string;
  readonly imageRecipeArn?: string;
}

export interface CreateImageRequest {
  readonly imageRecipeArn?: string;
  readonly containerRecipeArn?: string;
  readonly distributionConfigurationArn?: string;
  readonly infrastructureConfigurationArn: string;
  readonly imageTestsConfiguration?: ImageTestsConfiguration;
  readonly enhancedImageMetadataEnabled?: boolean;
  readonly tags?: {[key: string]: any};
  readonly clientToken: string;
}

export interface CreateImageResponse {
  readonly requestId?: string;
  readonly clientToken?: string;
  readonly imageBuildVersionArn?: string;
}

export interface CreateInfrastructureConfigurationRequest {
  readonly name: string;
  readonly description?: string;
  readonly instanceTypes?: [];
  readonly instanceProfileName: string;
  readonly securityGroupIds?: [];
  readonly subnetId?: string;
  readonly logging?: Logging;
  readonly keyPair?: string;
  readonly terminateInstanceOnFailure?: boolean;
  readonly snsTopicArn?: string;
  readonly resourceTags?: {[key: string]: any};
  readonly instanceMetadataOptions?: InstanceMetadataOptions;
  readonly tags?: {[key: string]: any};
  readonly clientToken: string;
}

export interface CreateInfrastructureConfigurationResponse {
  readonly requestId?: string;
  readonly clientToken?: string;
  readonly infrastructureConfigurationArn?: string;
}

export interface DeleteComponentRequest {
  readonly componentBuildVersionArn: string;
}

export interface DeleteComponentResponse {
  readonly requestId?: string;
  readonly componentBuildVersionArn?: string;
}

export interface DeleteContainerRecipeRequest {
  readonly containerRecipeArn: string;
}

export interface DeleteContainerRecipeResponse {
  readonly requestId?: string;
  readonly containerRecipeArn?: string;
}

export interface DeleteDistributionConfigurationRequest {
  readonly distributionConfigurationArn: string;
}

export interface DeleteDistributionConfigurationResponse {
  readonly requestId?: string;
  readonly distributionConfigurationArn?: string;
}

export interface DeleteImagePipelineRequest {
  readonly imagePipelineArn: string;
}

export interface DeleteImagePipelineResponse {
  readonly requestId?: string;
  readonly imagePipelineArn?: string;
}

export interface DeleteImageRecipeRequest {
  readonly imageRecipeArn: string;
}

export interface DeleteImageRecipeResponse {
  readonly requestId?: string;
  readonly imageRecipeArn?: string;
}

export interface DeleteImageRequest {
  readonly imageBuildVersionArn: string;
}

export interface DeleteImageResponse {
  readonly requestId?: string;
  readonly imageBuildVersionArn?: string;
}

export interface DeleteInfrastructureConfigurationRequest {
  readonly infrastructureConfigurationArn: string;
}

export interface DeleteInfrastructureConfigurationResponse {
  readonly requestId?: string;
  readonly infrastructureConfigurationArn?: string;
}

export interface Distribution {
  readonly region: string;
  readonly amiDistributionConfiguration?: AmiDistributionConfiguration;
  readonly containerDistributionConfiguration?: ContainerDistributionConfiguration;
  readonly licenseConfigurationArns?: [];
  readonly launchTemplateConfigurations?: [];
}

export interface DistributionConfiguration {
  readonly arn?: string;
  readonly name?: string;
  readonly description?: string;
  readonly distributions?: [];
  readonly timeoutMinutes: number;
  readonly dateCreated?: string;
  readonly dateUpdated?: string;
  readonly tags?: {[key: string]: any};
}

export interface DistributionConfigurationSummary {
  readonly arn?: string;
  readonly name?: string;
  readonly description?: string;
  readonly dateCreated?: string;
  readonly dateUpdated?: string;
  readonly tags?: {[key: string]: any};
  readonly regions?: [];
}

export interface EbsInstanceBlockDeviceSpecification {
  readonly encrypted?: boolean;
  readonly deleteOnTermination?: boolean;
  readonly iops?: number;
  readonly kmsKeyId?: string;
  readonly snapshotId?: string;
  readonly volumeSize?: number;
  readonly volumeType?: string;
  readonly throughput?: number;
}

export interface Filter {
  readonly name?: string;
  readonly values?: [];
}

export interface ForbiddenException {
  readonly message?: string;
}

export interface GetComponentPolicyRequest {
  readonly componentArn: string;
}

export interface GetComponentPolicyResponse {
  readonly requestId?: string;
  readonly policy?: string;
}

export interface GetComponentRequest {
  readonly componentBuildVersionArn: string;
}

export interface GetComponentResponse {
  readonly requestId?: string;
  readonly component?: Component;
}

export interface GetContainerRecipePolicyRequest {
  readonly containerRecipeArn: string;
}

export interface GetContainerRecipePolicyResponse {
  readonly requestId?: string;
  readonly policy?: string;
}

export interface GetContainerRecipeRequest {
  readonly containerRecipeArn: string;
}

export interface GetContainerRecipeResponse {
  readonly requestId?: string;
  readonly containerRecipe?: ContainerRecipe;
}

export interface GetDistributionConfigurationRequest {
  readonly distributionConfigurationArn: string;
}

export interface GetDistributionConfigurationResponse {
  readonly requestId?: string;
  readonly distributionConfiguration?: DistributionConfiguration;
}

export interface GetImagePipelineRequest {
  readonly imagePipelineArn: string;
}

export interface GetImagePipelineResponse {
  readonly requestId?: string;
  readonly imagePipeline?: ImagePipeline;
}

export interface GetImagePolicyRequest {
  readonly imageArn: string;
}

export interface GetImagePolicyResponse {
  readonly requestId?: string;
  readonly policy?: string;
}

export interface GetImageRecipePolicyRequest {
  readonly imageRecipeArn: string;
}

export interface GetImageRecipePolicyResponse {
  readonly requestId?: string;
  readonly policy?: string;
}

export interface GetImageRecipeRequest {
  readonly imageRecipeArn: string;
}

export interface GetImageRecipeResponse {
  readonly requestId?: string;
  readonly imageRecipe?: ImageRecipe;
}

export interface GetImageRequest {
  readonly imageBuildVersionArn: string;
}

export interface GetImageResponse {
  readonly requestId?: string;
  readonly image?: Image;
}

export interface GetInfrastructureConfigurationRequest {
  readonly infrastructureConfigurationArn: string;
}

export interface GetInfrastructureConfigurationResponse {
  readonly requestId?: string;
  readonly infrastructureConfiguration?: InfrastructureConfiguration;
}

export interface IdempotentParameterMismatchException {
  readonly message?: string;
}

export interface Image {
  readonly arn?: string;
  readonly type?: string;
  readonly name?: string;
  readonly version?: string;
  readonly platform?: string;
  readonly enhancedImageMetadataEnabled?: boolean;
  readonly osVersion?: string;
  readonly state?: ImageState;
  readonly imageRecipe?: ImageRecipe;
  readonly containerRecipe?: ContainerRecipe;
  readonly sourcePipelineName?: string;
  readonly sourcePipelineArn?: string;
  readonly infrastructureConfiguration?: InfrastructureConfiguration;
  readonly distributionConfiguration?: DistributionConfiguration;
  readonly imageTestsConfiguration?: ImageTestsConfiguration;
  readonly dateCreated?: string;
  readonly outputResources?: OutputResources;
  readonly tags?: {[key: string]: any};
}

export interface ImagePackage {
  readonly packageName?: string;
  readonly packageVersion?: string;
}

export interface ImagePipeline {
  readonly arn?: string;
  readonly name?: string;
  readonly description?: string;
  readonly platform?: string;
  readonly enhancedImageMetadataEnabled?: boolean;
  readonly imageRecipeArn?: string;
  readonly containerRecipeArn?: string;
  readonly infrastructureConfigurationArn?: string;
  readonly distributionConfigurationArn?: string;
  readonly imageTestsConfiguration?: ImageTestsConfiguration;
  readonly schedule?: Schedule;
  readonly status?: string;
  readonly dateCreated?: string;
  readonly dateUpdated?: string;
  readonly dateLastRun?: string;
  readonly dateNextRun?: string;
  readonly tags?: {[key: string]: any};
}

export interface ImageRecipe {
  readonly arn?: string;
  readonly type?: string;
  readonly name?: string;
  readonly description?: string;
  readonly platform?: string;
  readonly owner?: string;
  readonly version?: string;
  readonly components?: [];
  readonly parentImage?: string;
  readonly blockDeviceMappings?: [];
  readonly dateCreated?: string;
  readonly tags?: {[key: string]: any};
  readonly workingDirectory?: string;
  readonly additionalInstanceConfiguration?: AdditionalInstanceConfiguration;
}

export interface ImageRecipeSummary {
  readonly arn?: string;
  readonly name?: string;
  readonly platform?: string;
  readonly owner?: string;
  readonly parentImage?: string;
  readonly dateCreated?: string;
  readonly tags?: {[key: string]: any};
}

export interface ImageState {
  readonly status?: string;
  readonly reason?: string;
}

export interface ImageSummary {
  readonly arn?: string;
  readonly name?: string;
  readonly type?: string;
  readonly version?: string;
  readonly platform?: string;
  readonly osVersion?: string;
  readonly state?: ImageState;
  readonly owner?: string;
  readonly dateCreated?: string;
  readonly outputResources?: OutputResources;
  readonly tags?: {[key: string]: any};
}

export interface ImageTestsConfiguration {
  readonly imageTestsEnabled?: boolean;
  readonly timeoutMinutes?: number;
}

export interface ImageVersion {
  readonly arn?: string;
  readonly name?: string;
  readonly type?: string;
  readonly version?: string;
  readonly platform?: string;
  readonly osVersion?: string;
  readonly owner?: string;
  readonly dateCreated?: string;
}

export interface ImportComponentRequest {
  readonly name: string;
  readonly semanticVersion: string;
  readonly description?: string;
  readonly changeDescription?: string;
  readonly type: string;
  readonly format: string;
  readonly platform: string;
  readonly data?: string;
  readonly uri?: string;
  readonly kmsKeyId?: string;
  readonly tags?: {[key: string]: any};
  readonly clientToken: string;
}

export interface ImportComponentResponse {
  readonly requestId?: string;
  readonly clientToken?: string;
  readonly componentBuildVersionArn?: string;
}

export interface InfrastructureConfiguration {
  readonly arn?: string;
  readonly name?: string;
  readonly description?: string;
  readonly instanceTypes?: [];
  readonly instanceProfileName?: string;
  readonly securityGroupIds?: [];
  readonly subnetId?: string;
  readonly logging?: Logging;
  readonly keyPair?: string;
  readonly terminateInstanceOnFailure?: boolean;
  readonly snsTopicArn?: string;
  readonly dateCreated?: string;
  readonly dateUpdated?: string;
  readonly resourceTags?: {[key: string]: any};
  readonly instanceMetadataOptions?: InstanceMetadataOptions;
  readonly tags?: {[key: string]: any};
}

export interface InfrastructureConfigurationSummary {
  readonly arn?: string;
  readonly name?: string;
  readonly description?: string;
  readonly dateCreated?: string;
  readonly dateUpdated?: string;
  readonly resourceTags?: {[key: string]: any};
  readonly tags?: {[key: string]: any};
  readonly instanceTypes?: [];
  readonly instanceProfileName?: string;
}

export interface InstanceBlockDeviceMapping {
  readonly deviceName?: string;
  readonly ebs?: EbsInstanceBlockDeviceSpecification;
  readonly virtualName?: string;
  readonly noDevice?: string;
}

export interface InstanceConfiguration {
  readonly image?: string;
  readonly blockDeviceMappings?: [];
}

export interface InstanceMetadataOptions {
  readonly httpTokens?: string;
  readonly httpPutResponseHopLimit?: number;
}

export interface InvalidPaginationTokenException {
  readonly message?: string;
}

export interface InvalidParameterCombinationException {
  readonly message?: string;
}

export interface InvalidParameterException {
  readonly message?: string;
}

export interface InvalidParameterValueException {
  readonly message?: string;
}

export interface InvalidRequestException {
  readonly message?: string;
}

export interface InvalidVersionNumberException {
  readonly message?: string;
}

export interface LaunchPermissionConfiguration {
  readonly userIds?: [];
  readonly userGroups?: [];
  readonly organizationArns?: [];
  readonly organizationalUnitArns?: [];
}

export interface LaunchTemplateConfiguration {
  readonly launchTemplateId: string;
  readonly accountId?: string;
  readonly setDefaultVersion?: boolean;
}

export interface ListComponentBuildVersionsRequest {
  readonly componentVersionArn: string;
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface ListComponentBuildVersionsResponse {
  readonly requestId?: string;
  readonly componentSummaryList?: [];
  readonly nextToken?: string;
}

export interface ListComponentsRequest {
  readonly owner?: string;
  readonly filters?: [];
  readonly byName?: boolean;
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface ListComponentsResponse {
  readonly requestId?: string;
  readonly componentVersionList?: [];
  readonly nextToken?: string;
}

export interface ListContainerRecipesRequest {
  readonly owner?: string;
  readonly filters?: [];
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface ListContainerRecipesResponse {
  readonly requestId?: string;
  readonly containerRecipeSummaryList?: [];
  readonly nextToken?: string;
}

export interface ListDistributionConfigurationsRequest {
  readonly filters?: [];
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface ListDistributionConfigurationsResponse {
  readonly requestId?: string;
  readonly distributionConfigurationSummaryList?: [];
  readonly nextToken?: string;
}

export interface ListImageBuildVersionsRequest {
  readonly imageVersionArn: string;
  readonly filters?: [];
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface ListImageBuildVersionsResponse {
  readonly requestId?: string;
  readonly imageSummaryList?: [];
  readonly nextToken?: string;
}

export interface ListImagePackagesRequest {
  readonly imageBuildVersionArn: string;
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface ListImagePackagesResponse {
  readonly requestId?: string;
  readonly imagePackageList?: [];
  readonly nextToken?: string;
}

export interface ListImagePipelineImagesRequest {
  readonly imagePipelineArn: string;
  readonly filters?: [];
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface ListImagePipelineImagesResponse {
  readonly requestId?: string;
  readonly imageSummaryList?: [];
  readonly nextToken?: string;
}

export interface ListImagePipelinesRequest {
  readonly filters?: [];
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface ListImagePipelinesResponse {
  readonly requestId?: string;
  readonly imagePipelineList?: [];
  readonly nextToken?: string;
}

export interface ListImageRecipesRequest {
  readonly owner?: string;
  readonly filters?: [];
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface ListImageRecipesResponse {
  readonly requestId?: string;
  readonly imageRecipeSummaryList?: [];
  readonly nextToken?: string;
}

export interface ListImagesRequest {
  readonly owner?: string;
  readonly filters?: [];
  readonly byName?: boolean;
  readonly maxResults?: number;
  readonly nextToken?: string;
  readonly includeDeprecated?: boolean;
}

export interface ListImagesResponse {
  readonly requestId?: string;
  readonly imageVersionList?: [];
  readonly nextToken?: string;
}

export interface ListInfrastructureConfigurationsRequest {
  readonly filters?: [];
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface ListInfrastructureConfigurationsResponse {
  readonly requestId?: string;
  readonly infrastructureConfigurationSummaryList?: [];
  readonly nextToken?: string;
}

export interface ListTagsForResourceRequest {
  readonly resourceArn: string;
}

export interface ListTagsForResourceResponse {
  readonly tags?: {[key: string]: any};
}

export interface Logging {
  readonly s3Logs?: S3Logs;
}

export interface OutputResources {
  readonly amis?: [];
  readonly containers?: [];
}

export interface PutComponentPolicyRequest {
  readonly componentArn: string;
  readonly policy: string;
}

export interface PutComponentPolicyResponse {
  readonly requestId?: string;
  readonly componentArn?: string;
}

export interface PutContainerRecipePolicyRequest {
  readonly containerRecipeArn: string;
  readonly policy: string;
}

export interface PutContainerRecipePolicyResponse {
  readonly requestId?: string;
  readonly containerRecipeArn?: string;
}

export interface PutImagePolicyRequest {
  readonly imageArn: string;
  readonly policy: string;
}

export interface PutImagePolicyResponse {
  readonly requestId?: string;
  readonly imageArn?: string;
}

export interface PutImageRecipePolicyRequest {
  readonly imageRecipeArn: string;
  readonly policy: string;
}

export interface PutImageRecipePolicyResponse {
  readonly requestId?: string;
  readonly imageRecipeArn?: string;
}

export interface ResourceAlreadyExistsException {
  readonly message?: string;
}

export interface ResourceDependencyException {
  readonly message?: string;
}

export interface ResourceInUseException {
  readonly message?: string;
}

export interface ResourceNotFoundException {
  readonly message?: string;
}

export interface S3Logs {
  readonly s3BucketName?: string;
  readonly s3KeyPrefix?: string;
}

export interface Schedule {
  readonly scheduleExpression?: string;
  readonly timezone?: string;
  readonly pipelineExecutionStartCondition?: string;
}

export interface ServiceException {
  readonly message?: string;
}

export interface ServiceQuotaExceededException {
  readonly message?: string;
}

export interface ServiceUnavailableException {
  readonly message?: string;
}

export interface StartImagePipelineExecutionRequest {
  readonly imagePipelineArn: string;
  readonly clientToken: string;
}

export interface StartImagePipelineExecutionResponse {
  readonly requestId?: string;
  readonly clientToken?: string;
  readonly imageBuildVersionArn?: string;
}

export interface SystemsManagerAgent {
  readonly uninstallAfterBuild?: boolean;
}

export interface TagResourceRequest {
  readonly resourceArn: string;
  readonly tags: {[key: string]: any};
}

export interface TagResourceResponse {
}

export interface TargetContainerRepository {
  readonly service: string;
  readonly repositoryName: string;
}

export interface UntagResourceRequest {
  readonly resourceArn: string;
  readonly tagKeys: [];
}

export interface UntagResourceResponse {
}

export interface UpdateDistributionConfigurationRequest {
  readonly distributionConfigurationArn: string;
  readonly description?: string;
  readonly distributions: [];
  readonly clientToken: string;
}

export interface UpdateDistributionConfigurationResponse {
  readonly requestId?: string;
  readonly clientToken?: string;
  readonly distributionConfigurationArn?: string;
}

export interface UpdateImagePipelineRequest {
  readonly imagePipelineArn: string;
  readonly description?: string;
  readonly imageRecipeArn?: string;
  readonly containerRecipeArn?: string;
  readonly infrastructureConfigurationArn: string;
  readonly distributionConfigurationArn?: string;
  readonly imageTestsConfiguration?: ImageTestsConfiguration;
  readonly enhancedImageMetadataEnabled?: boolean;
  readonly schedule?: Schedule;
  readonly status?: string;
  readonly clientToken: string;
}

export interface UpdateImagePipelineResponse {
  readonly requestId?: string;
  readonly clientToken?: string;
  readonly imagePipelineArn?: string;
}

export interface UpdateInfrastructureConfigurationRequest {
  readonly infrastructureConfigurationArn: string;
  readonly description?: string;
  readonly instanceTypes?: [];
  readonly instanceProfileName: string;
  readonly securityGroupIds?: [];
  readonly subnetId?: string;
  readonly logging?: Logging;
  readonly keyPair?: string;
  readonly terminateInstanceOnFailure?: boolean;
  readonly snsTopicArn?: string;
  readonly clientToken: string;
  readonly resourceTags?: {[key: string]: any};
  readonly instanceMetadataOptions?: InstanceMetadataOptions;
}

export interface UpdateInfrastructureConfigurationResponse {
  readonly requestId?: string;
  readonly clientToken?: string;
  readonly infrastructureConfigurationArn?: string;
}


