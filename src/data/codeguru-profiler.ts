/**
 * STOP. This file is autogenerated. DO NOT EDIT by hand
 */
export interface AddNotificationChannels {
  readonly channels: [];
  readonly profilingGroupName: string;
}

export interface BatchGetFrameMetricData {
  readonly endTime?: Date;
  readonly frameMetrics?: [];
  readonly period?: string;
  readonly profilingGroupName: string;
  readonly startTime?: Date;
  readonly targetResolution?: string;
}

export interface ConfigureAgent {
  readonly fleetInstanceId?: string;
  readonly metadata?: {[key: string]: any};
  readonly profilingGroupName: string;
}

export interface CreateProfilingGroup {
  readonly agentOrchestrationConfig?: AgentOrchestrationConfig;
  readonly clientToken: string;
  readonly computePlatform?: string;
  readonly profilingGroupName: string;
  readonly tags?: {[key: string]: any};
}

export interface DeleteProfilingGroup {
  readonly profilingGroupName: string;
}

export interface DescribeProfilingGroup {
  readonly profilingGroupName: string;
}

export interface GetFindingsReportAccountSummary {
  readonly dailyReportsOnly?: boolean;
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface GetNotificationConfiguration {
  readonly profilingGroupName: string;
}

export interface GetPolicy {
  readonly profilingGroupName: string;
}

export interface GetProfile {
  readonly accept?: string;
  readonly endTime?: Date;
  readonly maxDepth?: number;
  readonly period?: string;
  readonly profilingGroupName: string;
  readonly startTime?: Date;
}

export interface GetRecommendations {
  readonly endTime: Date;
  readonly locale?: string;
  readonly profilingGroupName: string;
  readonly startTime: Date;
}

export interface ListFindingsReports {
  readonly dailyReportsOnly?: boolean;
  readonly endTime: Date;
  readonly maxResults?: number;
  readonly nextToken?: string;
  readonly profilingGroupName: string;
  readonly startTime: Date;
}

export interface ListProfileTimes {
  readonly endTime: Date;
  readonly maxResults?: number;
  readonly nextToken?: string;
  readonly orderBy?: string;
  readonly period: string;
  readonly profilingGroupName: string;
  readonly startTime: Date;
}

export interface ListProfilingGroups {
  readonly includeDescription?: boolean;
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface ListTagsForResource {
  readonly resourceArn: string;
}

export interface PostAgentProfile {
  readonly agentProfile: unknown;
  readonly contentType: string;
  readonly profileToken?: string;
  readonly profilingGroupName: string;
}

export interface PutPermission {
  readonly actionGroup: string;
  readonly principals: [];
  readonly profilingGroupName: string;
  readonly revisionId?: string;
}

export interface RemoveNotificationChannel {
  readonly channelId: string;
  readonly profilingGroupName: string;
}

export interface RemovePermission {
  readonly actionGroup: string;
  readonly profilingGroupName: string;
  readonly revisionId: string;
}

export interface SubmitFeedback {
  readonly anomalyInstanceId: string;
  readonly comment?: string;
  readonly profilingGroupName: string;
  readonly type: string;
}

export interface TagResource {
  readonly resourceArn: string;
  readonly tags: {[key: string]: any};
}

export interface UntagResource {
  readonly resourceArn: string;
  readonly tagKeys: [];
}

export interface UpdateProfilingGroup {
  readonly agentOrchestrationConfig: AgentOrchestrationConfig;
  readonly profilingGroupName: string;
}

export interface AddNotificationChannelsRequest {
  readonly channels: [];
  readonly profilingGroupName: string;
}

export interface AddNotificationChannelsResponse {
  readonly notificationConfiguration?: NotificationConfiguration;
}

export interface AgentConfiguration {
  readonly agentParameters?: {[key: string]: any};
  readonly periodInSeconds: number;
  readonly shouldProfile: boolean;
}

export interface AgentOrchestrationConfig {
  readonly profilingEnabled: boolean;
}

export interface AggregatedProfileTime {
  readonly period?: string;
  readonly start?: Date;
}

export interface Anomaly {
  readonly instances: [];
  readonly metric: Metric;
  readonly reason: string;
}

export interface AnomalyInstance {
  readonly endTime?: Date;
  readonly id: string;
  readonly startTime: Date;
  readonly userFeedback?: UserFeedback;
}

export interface BatchGetFrameMetricDataRequest {
  readonly endTime?: Date;
  readonly frameMetrics?: [];
  readonly period?: string;
  readonly profilingGroupName: string;
  readonly startTime?: Date;
  readonly targetResolution?: string;
}

export interface BatchGetFrameMetricDataResponse {
  readonly endTime: Date;
  readonly endTimes: [];
  readonly frameMetricData: [];
  readonly resolution: string;
  readonly startTime: Date;
  readonly unprocessedEndTimes: {[key: string]: any};
}

export interface Channel {
  readonly eventPublishers: [];
  readonly id?: string;
  readonly uri: string;
}

export interface ConfigureAgentRequest {
  readonly fleetInstanceId?: string;
  readonly metadata?: {[key: string]: any};
  readonly profilingGroupName: string;
}

export interface ConfigureAgentResponse {
  readonly configuration: AgentConfiguration;
}

export interface ConflictException {
  readonly message: string;
}

export interface CreateProfilingGroupRequest {
  readonly agentOrchestrationConfig?: AgentOrchestrationConfig;
  readonly clientToken: string;
  readonly computePlatform?: string;
  readonly profilingGroupName: string;
  readonly tags?: {[key: string]: any};
}

export interface CreateProfilingGroupResponse {
  readonly profilingGroup: ProfilingGroupDescription;
}

export interface DeleteProfilingGroupRequest {
  readonly profilingGroupName: string;
}

export interface DeleteProfilingGroupResponse {
}

export interface DescribeProfilingGroupRequest {
  readonly profilingGroupName: string;
}

export interface DescribeProfilingGroupResponse {
  readonly profilingGroup: ProfilingGroupDescription;
}

export interface FindingsReportSummary {
  readonly id?: string;
  readonly profileEndTime?: Date;
  readonly profileStartTime?: Date;
  readonly profilingGroupName?: string;
  readonly totalNumberOfFindings?: number;
}

export interface FrameMetric {
  readonly frameName: string;
  readonly threadStates: [];
  readonly type: string;
}

export interface FrameMetricDatum {
  readonly frameMetric: FrameMetric;
  readonly values: [];
}

export interface GetFindingsReportAccountSummaryRequest {
  readonly dailyReportsOnly?: boolean;
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface GetFindingsReportAccountSummaryResponse {
  readonly nextToken?: string;
  readonly reportSummaries: [];
}

export interface GetNotificationConfigurationRequest {
  readonly profilingGroupName: string;
}

export interface GetNotificationConfigurationResponse {
  readonly notificationConfiguration: NotificationConfiguration;
}

export interface GetPolicyRequest {
  readonly profilingGroupName: string;
}

export interface GetPolicyResponse {
  readonly policy: string;
  readonly revisionId: string;
}

export interface GetProfileRequest {
  readonly accept?: string;
  readonly endTime?: Date;
  readonly maxDepth?: number;
  readonly period?: string;
  readonly profilingGroupName: string;
  readonly startTime?: Date;
}

export interface GetProfileResponse {
  readonly contentEncoding?: string;
  readonly contentType: string;
  readonly profile: unknown;
}

export interface GetRecommendationsRequest {
  readonly endTime: Date;
  readonly locale?: string;
  readonly profilingGroupName: string;
  readonly startTime: Date;
}

export interface GetRecommendationsResponse {
  readonly anomalies: [];
  readonly profileEndTime: Date;
  readonly profileStartTime: Date;
  readonly profilingGroupName: string;
  readonly recommendations: [];
}

export interface InternalServerException {
  readonly message: string;
}

export interface ListFindingsReportsRequest {
  readonly dailyReportsOnly?: boolean;
  readonly endTime: Date;
  readonly maxResults?: number;
  readonly nextToken?: string;
  readonly profilingGroupName: string;
  readonly startTime: Date;
}

export interface ListFindingsReportsResponse {
  readonly findingsReportSummaries: [];
  readonly nextToken?: string;
}

export interface ListProfileTimesRequest {
  readonly endTime: Date;
  readonly maxResults?: number;
  readonly nextToken?: string;
  readonly orderBy?: string;
  readonly period: string;
  readonly profilingGroupName: string;
  readonly startTime: Date;
}

export interface ListProfileTimesResponse {
  readonly nextToken?: string;
  readonly profileTimes: [];
}

export interface ListProfilingGroupsRequest {
  readonly includeDescription?: boolean;
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface ListProfilingGroupsResponse {
  readonly nextToken?: string;
  readonly profilingGroupNames: [];
  readonly profilingGroups?: [];
}

export interface ListTagsForResourceRequest {
  readonly resourceArn: string;
}

export interface ListTagsForResourceResponse {
  readonly tags?: {[key: string]: any};
}

export interface Match {
  readonly frameAddress?: string;
  readonly targetFramesIndex?: number;
  readonly thresholdBreachValue?: unknown;
}

export interface Metric {
  readonly frameName: string;
  readonly threadStates: [];
  readonly type: string;
}

export interface NotificationConfiguration {
  readonly channels?: [];
}

export interface Pattern {
  readonly countersToAggregate?: [];
  readonly description?: string;
  readonly id?: string;
  readonly name?: string;
  readonly resolutionSteps?: string;
  readonly targetFrames?: [];
  readonly thresholdPercent?: unknown;
}

export interface PostAgentProfileRequest {
  readonly agentProfile: unknown;
  readonly contentType: string;
  readonly profileToken?: string;
  readonly profilingGroupName: string;
}

export interface PostAgentProfileResponse {
}

export interface ProfileTime {
  readonly start?: Date;
}

export interface ProfilingGroupDescription {
  readonly agentOrchestrationConfig?: AgentOrchestrationConfig;
  readonly arn?: string;
  readonly computePlatform?: string;
  readonly createdAt?: Date;
  readonly name?: string;
  readonly profilingStatus?: ProfilingStatus;
  readonly tags?: {[key: string]: any};
  readonly updatedAt?: Date;
}

export interface ProfilingStatus {
  readonly latestAgentOrchestratedAt?: Date;
  readonly latestAgentProfileReportedAt?: Date;
  readonly latestAggregatedProfile?: AggregatedProfileTime;
}

export interface PutPermissionRequest {
  readonly actionGroup: string;
  readonly principals: [];
  readonly profilingGroupName: string;
  readonly revisionId?: string;
}

export interface PutPermissionResponse {
  readonly policy: string;
  readonly revisionId: string;
}

export interface Recommendation {
  readonly allMatchesCount: number;
  readonly allMatchesSum: unknown;
  readonly endTime: Date;
  readonly pattern: Pattern;
  readonly startTime: Date;
  readonly topMatches: [];
}

export interface RemoveNotificationChannelRequest {
  readonly channelId: string;
  readonly profilingGroupName: string;
}

export interface RemoveNotificationChannelResponse {
  readonly notificationConfiguration?: NotificationConfiguration;
}

export interface RemovePermissionRequest {
  readonly actionGroup: string;
  readonly profilingGroupName: string;
  readonly revisionId: string;
}

export interface RemovePermissionResponse {
  readonly policy: string;
  readonly revisionId: string;
}

export interface ResourceNotFoundException {
  readonly message: string;
}

export interface ServiceQuotaExceededException {
  readonly message: string;
}

export interface SubmitFeedbackRequest {
  readonly anomalyInstanceId: string;
  readonly comment?: string;
  readonly profilingGroupName: string;
  readonly type: string;
}

export interface SubmitFeedbackResponse {
}

export interface TagResourceRequest {
  readonly resourceArn: string;
  readonly tags: {[key: string]: any};
}

export interface TagResourceResponse {
}

export interface ThrottlingException {
  readonly message: string;
}

export interface TimestampStructure {
  readonly value: Date;
}

export interface UntagResourceRequest {
  readonly resourceArn: string;
  readonly tagKeys: [];
}

export interface UntagResourceResponse {
}

export interface UpdateProfilingGroupRequest {
  readonly agentOrchestrationConfig: AgentOrchestrationConfig;
  readonly profilingGroupName: string;
}

export interface UpdateProfilingGroupResponse {
  readonly profilingGroup: ProfilingGroupDescription;
}

export interface UserFeedback {
  readonly type: string;
}

export interface ValidationException {
  readonly message: string;
}


