/**
 * STOP. This file is autogenerated. DO NOT EDIT by hand
 */
export interface AddNotificationChannels {
  readonly channels: [];
  readonly profilingGroupName: string;
}
export interface BatchGetFrameMetricData {
  readonly endTime: Date;
  readonly frameMetrics: [];
  readonly period: string;
  readonly profilingGroupName: string;
  readonly startTime: Date;
  readonly targetResolution: string;
}
export interface ConfigureAgent {
  readonly fleetInstanceId: string;
  readonly metadata: {[key: string]: any};
  readonly profilingGroupName: string;
}
export interface CreateProfilingGroup {
  readonly agentOrchestrationConfig: AgentOrchestrationConfig;
  readonly clientToken: string;
  readonly computePlatform: string;
  readonly profilingGroupName: string;
  readonly tags: {[key: string]: any};
}
export interface DeleteProfilingGroup {
  readonly profilingGroupName: string;
}
export interface DescribeProfilingGroup {
  readonly profilingGroupName: string;
}
export interface GetFindingsReportAccountSummary {
  readonly dailyReportsOnly: boolean;
  readonly maxResults: number;
  readonly nextToken: string;
}
export interface GetNotificationConfiguration {
  readonly profilingGroupName: string;
}
export interface GetPolicy {
  readonly profilingGroupName: string;
}
export interface GetProfile {
  readonly accept: string;
  readonly endTime: Date;
  readonly maxDepth: number;
  readonly period: string;
  readonly profilingGroupName: string;
  readonly startTime: Date;
}
export interface GetRecommendations {
  readonly endTime: Date;
  readonly locale: string;
  readonly profilingGroupName: string;
  readonly startTime: Date;
}
export interface ListFindingsReports {
  readonly dailyReportsOnly: boolean;
  readonly endTime: Date;
  readonly maxResults: number;
  readonly nextToken: string;
  readonly profilingGroupName: string;
  readonly startTime: Date;
}
export interface ListProfileTimes {
  readonly endTime: Date;
  readonly maxResults: number;
  readonly nextToken: string;
  readonly orderBy: string;
  readonly period: string;
  readonly profilingGroupName: string;
  readonly startTime: Date;
}
export interface ListProfilingGroups {
  readonly includeDescription: boolean;
  readonly maxResults: number;
  readonly nextToken: string;
}
export interface ListTagsForResource {
  readonly resourceArn: string;
}
export interface PostAgentProfile {
  readonly agentProfile: unknown;
  readonly contentType: string;
  readonly profileToken: string;
  readonly profilingGroupName: string;
}
export interface PutPermission {
  readonly actionGroup: string;
  readonly principals: [];
  readonly profilingGroupName: string;
  readonly revisionId: string;
}
export interface RemoveNotificationChannel {
  readonly channelId: string;
  readonly profilingGroupName: string;
}
export interface RemovePermission {
  readonly actionGroup: string;
  readonly profilingGroupName: string;
  readonly revisionId: string;
}
export interface SubmitFeedback {
  readonly anomalyInstanceId: string;
  readonly comment: string;
  readonly profilingGroupName: string;
  readonly type: string;
}
export interface TagResource {
  readonly resourceArn: string;
  readonly tags: {[key: string]: any};
}
export interface UntagResource {
  readonly resourceArn: string;
  readonly tagKeys: [];
}
export interface UpdateProfilingGroup {
  readonly agentOrchestrationConfig: AgentOrchestrationConfig;
  readonly profilingGroupName: string;
}



interface AddNotificationChannelsRequest {
  readonly channels: [];
  readonly profilingGroupName: string;
}

interface AddNotificationChannelsResponse {
  readonly notificationConfiguration: NotificationConfiguration;
}

interface AgentConfiguration {
  readonly agentParameters: {[key: string]: any};
  readonly periodInSeconds: number;
  readonly shouldProfile: boolean;
}

interface AgentOrchestrationConfig {
  readonly profilingEnabled: boolean;
}

interface AggregatedProfileTime {
  readonly period: string;
  readonly start: Date;
}

interface Anomaly {
  readonly instances: [];
  readonly metric: Metric;
  readonly reason: string;
}

interface AnomalyInstance {
  readonly endTime: Date;
  readonly id: string;
  readonly startTime: Date;
  readonly userFeedback: UserFeedback;
}

interface BatchGetFrameMetricDataRequest {
  readonly endTime: Date;
  readonly frameMetrics: [];
  readonly period: string;
  readonly profilingGroupName: string;
  readonly startTime: Date;
  readonly targetResolution: string;
}

interface BatchGetFrameMetricDataResponse {
  readonly endTime: Date;
  readonly endTimes: [];
  readonly frameMetricData: [];
  readonly resolution: string;
  readonly startTime: Date;
  readonly unprocessedEndTimes: {[key: string]: any};
}

interface Channel {
  readonly eventPublishers: [];
  readonly id: string;
  readonly uri: string;
}

interface ConfigureAgentRequest {
  readonly fleetInstanceId: string;
  readonly metadata: {[key: string]: any};
  readonly profilingGroupName: string;
}

interface ConfigureAgentResponse {
  readonly configuration: AgentConfiguration;
}

interface ConflictException {
  readonly message: string;
}

interface CreateProfilingGroupRequest {
  readonly agentOrchestrationConfig: AgentOrchestrationConfig;
  readonly clientToken: string;
  readonly computePlatform: string;
  readonly profilingGroupName: string;
  readonly tags: {[key: string]: any};
}

interface CreateProfilingGroupResponse {
  readonly profilingGroup: ProfilingGroupDescription;
}

interface DeleteProfilingGroupRequest {
  readonly profilingGroupName: string;
}

interface DeleteProfilingGroupResponse {
}

interface DescribeProfilingGroupRequest {
  readonly profilingGroupName: string;
}

interface DescribeProfilingGroupResponse {
  readonly profilingGroup: ProfilingGroupDescription;
}

interface FindingsReportSummary {
  readonly id: string;
  readonly profileEndTime: Date;
  readonly profileStartTime: Date;
  readonly profilingGroupName: string;
  readonly totalNumberOfFindings: number;
}

interface FrameMetric {
  readonly frameName: string;
  readonly threadStates: [];
  readonly type: string;
}

interface FrameMetricDatum {
  readonly frameMetric: FrameMetric;
  readonly values: [];
}

interface GetFindingsReportAccountSummaryRequest {
  readonly dailyReportsOnly: boolean;
  readonly maxResults: number;
  readonly nextToken: string;
}

interface GetFindingsReportAccountSummaryResponse {
  readonly nextToken: string;
  readonly reportSummaries: [];
}

interface GetNotificationConfigurationRequest {
  readonly profilingGroupName: string;
}

interface GetNotificationConfigurationResponse {
  readonly notificationConfiguration: NotificationConfiguration;
}

interface GetPolicyRequest {
  readonly profilingGroupName: string;
}

interface GetPolicyResponse {
  readonly policy: string;
  readonly revisionId: string;
}

interface GetProfileRequest {
  readonly accept: string;
  readonly endTime: Date;
  readonly maxDepth: number;
  readonly period: string;
  readonly profilingGroupName: string;
  readonly startTime: Date;
}

interface GetProfileResponse {
  readonly contentEncoding: string;
  readonly contentType: string;
  readonly profile: unknown;
}

interface GetRecommendationsRequest {
  readonly endTime: Date;
  readonly locale: string;
  readonly profilingGroupName: string;
  readonly startTime: Date;
}

interface GetRecommendationsResponse {
  readonly anomalies: [];
  readonly profileEndTime: Date;
  readonly profileStartTime: Date;
  readonly profilingGroupName: string;
  readonly recommendations: [];
}

interface InternalServerException {
  readonly message: string;
}

interface ListFindingsReportsRequest {
  readonly dailyReportsOnly: boolean;
  readonly endTime: Date;
  readonly maxResults: number;
  readonly nextToken: string;
  readonly profilingGroupName: string;
  readonly startTime: Date;
}

interface ListFindingsReportsResponse {
  readonly findingsReportSummaries: [];
  readonly nextToken: string;
}

interface ListProfileTimesRequest {
  readonly endTime: Date;
  readonly maxResults: number;
  readonly nextToken: string;
  readonly orderBy: string;
  readonly period: string;
  readonly profilingGroupName: string;
  readonly startTime: Date;
}

interface ListProfileTimesResponse {
  readonly nextToken: string;
  readonly profileTimes: [];
}

interface ListProfilingGroupsRequest {
  readonly includeDescription: boolean;
  readonly maxResults: number;
  readonly nextToken: string;
}

interface ListProfilingGroupsResponse {
  readonly nextToken: string;
  readonly profilingGroupNames: [];
  readonly profilingGroups: [];
}

interface ListTagsForResourceRequest {
  readonly resourceArn: string;
}

interface ListTagsForResourceResponse {
  readonly tags: {[key: string]: any};
}

interface Match {
  readonly frameAddress: string;
  readonly targetFramesIndex: number;
  readonly thresholdBreachValue: unknown;
}

interface Metric {
  readonly frameName: string;
  readonly threadStates: [];
  readonly type: string;
}

interface NotificationConfiguration {
  readonly channels: [];
}

interface Pattern {
  readonly countersToAggregate: [];
  readonly description: string;
  readonly id: string;
  readonly name: string;
  readonly resolutionSteps: string;
  readonly targetFrames: [];
  readonly thresholdPercent: unknown;
}

interface PostAgentProfileRequest {
  readonly agentProfile: unknown;
  readonly contentType: string;
  readonly profileToken: string;
  readonly profilingGroupName: string;
}

interface PostAgentProfileResponse {
}

interface ProfileTime {
  readonly start: Date;
}

interface ProfilingGroupDescription {
  readonly agentOrchestrationConfig: AgentOrchestrationConfig;
  readonly arn: string;
  readonly computePlatform: string;
  readonly createdAt: Date;
  readonly name: string;
  readonly profilingStatus: ProfilingStatus;
  readonly tags: {[key: string]: any};
  readonly updatedAt: Date;
}

interface ProfilingStatus {
  readonly latestAgentOrchestratedAt: Date;
  readonly latestAgentProfileReportedAt: Date;
  readonly latestAggregatedProfile: AggregatedProfileTime;
}

interface PutPermissionRequest {
  readonly actionGroup: string;
  readonly principals: [];
  readonly profilingGroupName: string;
  readonly revisionId: string;
}

interface PutPermissionResponse {
  readonly policy: string;
  readonly revisionId: string;
}

interface Recommendation {
  readonly allMatchesCount: number;
  readonly allMatchesSum: unknown;
  readonly endTime: Date;
  readonly pattern: Pattern;
  readonly startTime: Date;
  readonly topMatches: [];
}

interface RemoveNotificationChannelRequest {
  readonly channelId: string;
  readonly profilingGroupName: string;
}

interface RemoveNotificationChannelResponse {
  readonly notificationConfiguration: NotificationConfiguration;
}

interface RemovePermissionRequest {
  readonly actionGroup: string;
  readonly profilingGroupName: string;
  readonly revisionId: string;
}

interface RemovePermissionResponse {
  readonly policy: string;
  readonly revisionId: string;
}

interface ResourceNotFoundException {
  readonly message: string;
}

interface ServiceQuotaExceededException {
  readonly message: string;
}

interface SubmitFeedbackRequest {
  readonly anomalyInstanceId: string;
  readonly comment: string;
  readonly profilingGroupName: string;
  readonly type: string;
}

interface SubmitFeedbackResponse {
}

interface TagResourceRequest {
  readonly resourceArn: string;
  readonly tags: {[key: string]: any};
}

interface TagResourceResponse {
}

interface ThrottlingException {
  readonly message: string;
}

interface TimestampStructure {
  readonly value: Date;
}

interface UntagResourceRequest {
  readonly resourceArn: string;
  readonly tagKeys: [];
}

interface UntagResourceResponse {
}

interface UpdateProfilingGroupRequest {
  readonly agentOrchestrationConfig: AgentOrchestrationConfig;
  readonly profilingGroupName: string;
}

interface UpdateProfilingGroupResponse {
  readonly profilingGroup: ProfilingGroupDescription;
}

interface UserFeedback {
  readonly type: string;
}

interface ValidationException {
  readonly message: string;
}

