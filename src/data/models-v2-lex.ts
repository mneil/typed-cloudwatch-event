/**
 * STOP. This file is autogenerated. DO NOT EDIT by hand
 */
export interface BuildBotLocale {
  readonly botId: string;
  readonly botVersion: string;
  readonly localeId: string;
}
export interface CreateBot {
  readonly botName: string;
  readonly description?: string;
  readonly roleArn: string;
  readonly dataPrivacy: DataPrivacy;
  readonly idleSessionTTLInSeconds: number;
  readonly botTags?: {[key: string]: any};
  readonly testBotAliasTags?: {[key: string]: any};
}
export interface CreateBotAlias {
  readonly botAliasName: string;
  readonly description?: string;
  readonly botVersion?: string;
  readonly botAliasLocaleSettings?: {[key: string]: any};
  readonly conversationLogSettings?: ConversationLogSettings;
  readonly sentimentAnalysisSettings?: SentimentAnalysisSettings;
  readonly botId: string;
  readonly tags?: {[key: string]: any};
}
export interface CreateBotLocale {
  readonly botId: string;
  readonly botVersion: string;
  readonly localeId: string;
  readonly description?: string;
  readonly nluIntentConfidenceThreshold: unknown;
  readonly voiceSettings?: VoiceSettings;
}
export interface CreateBotVersion {
  readonly botId: string;
  readonly description?: string;
  readonly botVersionLocaleSpecification: {[key: string]: any};
}
export interface CreateExport {
  readonly resourceSpecification: ExportResourceSpecification;
  readonly fileFormat: string;
  readonly filePassword?: string;
}
export interface CreateIntent {
  readonly intentName: string;
  readonly description?: string;
  readonly parentIntentSignature?: string;
  readonly sampleUtterances?: [];
  readonly dialogCodeHook?: DialogCodeHookSettings;
  readonly fulfillmentCodeHook?: FulfillmentCodeHookSettings;
  readonly intentConfirmationSetting?: IntentConfirmationSetting;
  readonly intentClosingSetting?: IntentClosingSetting;
  readonly inputContexts?: [];
  readonly outputContexts?: [];
  readonly kendraConfiguration?: KendraConfiguration;
  readonly botId: string;
  readonly botVersion: string;
  readonly localeId: string;
}
export interface CreateResourcePolicy {
  readonly resourceArn: string;
  readonly policy: string;
}
export interface CreateResourcePolicyStatement {
  readonly resourceArn: string;
  readonly statementId: string;
  readonly effect: string;
  readonly principal: [];
  readonly action: [];
  readonly condition?: {[key: string]: any};
  readonly expectedRevisionId?: string;
}
export interface CreateSlot {
  readonly slotName: string;
  readonly description?: string;
  readonly slotTypeId: string;
  readonly valueElicitationSetting: SlotValueElicitationSetting;
  readonly obfuscationSetting?: ObfuscationSetting;
  readonly botId: string;
  readonly botVersion: string;
  readonly localeId: string;
  readonly intentId: string;
  readonly multipleValuesSetting?: MultipleValuesSetting;
}
export interface CreateSlotType {
  readonly slotTypeName: string;
  readonly description?: string;
  readonly slotTypeValues?: [];
  readonly valueSelectionSetting?: SlotValueSelectionSetting;
  readonly parentSlotTypeSignature?: string;
  readonly botId: string;
  readonly botVersion: string;
  readonly localeId: string;
  readonly externalSourceSetting?: ExternalSourceSetting;
}
export interface CreateUploadUrl {
}
export interface DeleteBot {
  readonly botId: string;
  readonly skipResourceInUseCheck?: boolean;
}
export interface DeleteBotAlias {
  readonly botAliasId: string;
  readonly botId: string;
  readonly skipResourceInUseCheck?: boolean;
}
export interface DeleteBotLocale {
  readonly botId: string;
  readonly botVersion: string;
  readonly localeId: string;
}
export interface DeleteBotVersion {
  readonly botId: string;
  readonly botVersion: string;
  readonly skipResourceInUseCheck?: boolean;
}
export interface DeleteExport {
  readonly exportId: string;
}
export interface DeleteImport {
  readonly importId: string;
}
export interface DeleteIntent {
  readonly intentId: string;
  readonly botId: string;
  readonly botVersion: string;
  readonly localeId: string;
}
export interface DeleteResourcePolicy {
  readonly resourceArn: string;
  readonly expectedRevisionId?: string;
}
export interface DeleteResourcePolicyStatement {
  readonly resourceArn: string;
  readonly statementId: string;
  readonly expectedRevisionId?: string;
}
export interface DeleteSlot {
  readonly slotId: string;
  readonly botId: string;
  readonly botVersion: string;
  readonly localeId: string;
  readonly intentId: string;
}
export interface DeleteSlotType {
  readonly slotTypeId: string;
  readonly botId: string;
  readonly botVersion: string;
  readonly localeId: string;
  readonly skipResourceInUseCheck?: boolean;
}
export interface DeleteUtterances {
  readonly botId: string;
  readonly localeId?: string;
  readonly sessionId?: string;
}
export interface DescribeBot {
  readonly botId: string;
}
export interface DescribeBotAlias {
  readonly botAliasId: string;
  readonly botId: string;
}
export interface DescribeBotLocale {
  readonly botId: string;
  readonly botVersion: string;
  readonly localeId: string;
}
export interface DescribeBotRecommendation {
  readonly botId: string;
  readonly botVersion: string;
  readonly localeId: string;
  readonly botRecommendationId: string;
}
export interface DescribeBotVersion {
  readonly botId: string;
  readonly botVersion: string;
}
export interface DescribeExport {
  readonly exportId: string;
}
export interface DescribeImport {
  readonly importId: string;
}
export interface DescribeIntent {
  readonly intentId: string;
  readonly botId: string;
  readonly botVersion: string;
  readonly localeId: string;
}
export interface DescribeResourcePolicy {
  readonly resourceArn: string;
}
export interface DescribeSlot {
  readonly slotId: string;
  readonly botId: string;
  readonly botVersion: string;
  readonly localeId: string;
  readonly intentId: string;
}
export interface DescribeSlotType {
  readonly slotTypeId: string;
  readonly botId: string;
  readonly botVersion: string;
  readonly localeId: string;
}
export interface ListAggregatedUtterances {
  readonly botId: string;
  readonly botAliasId?: string;
  readonly botVersion?: string;
  readonly localeId: string;
  readonly aggregationDuration: UtteranceAggregationDuration;
  readonly sortBy?: AggregatedUtterancesSortBy;
  readonly filters?: [];
  readonly maxResults?: number;
  readonly nextToken?: string;
}
export interface ListBotAliases {
  readonly botId: string;
  readonly maxResults?: number;
  readonly nextToken?: string;
}
export interface ListBotLocales {
  readonly botId: string;
  readonly botVersion: string;
  readonly sortBy?: BotLocaleSortBy;
  readonly filters?: [];
  readonly maxResults?: number;
  readonly nextToken?: string;
}
export interface ListBotRecommendations {
  readonly botId: string;
  readonly botVersion: string;
  readonly localeId: string;
  readonly maxResults?: number;
  readonly nextToken?: string;
}
export interface ListBotVersions {
  readonly botId: string;
  readonly sortBy?: BotVersionSortBy;
  readonly maxResults?: number;
  readonly nextToken?: string;
}
export interface ListBots {
  readonly sortBy?: BotSortBy;
  readonly filters?: [];
  readonly maxResults?: number;
  readonly nextToken?: string;
}
export interface ListBuiltInIntents {
  readonly localeId: string;
  readonly sortBy?: BuiltInIntentSortBy;
  readonly maxResults?: number;
  readonly nextToken?: string;
}
export interface ListBuiltInSlotTypes {
  readonly localeId: string;
  readonly sortBy?: BuiltInSlotTypeSortBy;
  readonly maxResults?: number;
  readonly nextToken?: string;
}
export interface ListExports {
  readonly botId?: string;
  readonly botVersion?: string;
  readonly sortBy?: ExportSortBy;
  readonly filters?: [];
  readonly maxResults?: number;
  readonly nextToken?: string;
}
export interface ListImports {
  readonly botId?: string;
  readonly botVersion?: string;
  readonly sortBy?: ImportSortBy;
  readonly filters?: [];
  readonly maxResults?: number;
  readonly nextToken?: string;
}
export interface ListIntents {
  readonly botId: string;
  readonly botVersion: string;
  readonly localeId: string;
  readonly sortBy?: IntentSortBy;
  readonly filters?: [];
  readonly maxResults?: number;
  readonly nextToken?: string;
}
export interface ListRecommendedIntents {
  readonly botId: string;
  readonly botVersion: string;
  readonly localeId: string;
  readonly botRecommendationId: string;
  readonly nextToken?: string;
  readonly maxResults?: number;
}
export interface ListSlotTypes {
  readonly botId: string;
  readonly botVersion: string;
  readonly localeId: string;
  readonly sortBy?: SlotTypeSortBy;
  readonly filters?: [];
  readonly maxResults?: number;
  readonly nextToken?: string;
}
export interface ListSlots {
  readonly botId: string;
  readonly botVersion: string;
  readonly localeId: string;
  readonly intentId: string;
  readonly sortBy?: SlotSortBy;
  readonly filters?: [];
  readonly maxResults?: number;
  readonly nextToken?: string;
}
export interface ListTagsForResource {
  readonly resourceARN: string;
}
export interface SearchAssociatedTranscripts {
  readonly botId: string;
  readonly botVersion: string;
  readonly localeId: string;
  readonly botRecommendationId: string;
  readonly searchOrder?: string;
  readonly filters: [];
  readonly maxResults?: number;
  readonly nextIndex?: number;
}
export interface StartBotRecommendation {
  readonly botId: string;
  readonly botVersion: string;
  readonly localeId: string;
  readonly transcriptSourceSetting: TranscriptSourceSetting;
  readonly encryptionSetting?: EncryptionSetting;
}
export interface StartImport {
  readonly importId: string;
  readonly resourceSpecification: ImportResourceSpecification;
  readonly mergeStrategy: string;
  readonly filePassword?: string;
}
export interface TagResource {
  readonly resourceARN: string;
  readonly tags: {[key: string]: any};
}
export interface UntagResource {
  readonly resourceARN: string;
  readonly tagKeys: [];
}
export interface UpdateBot {
  readonly botId: string;
  readonly botName: string;
  readonly description?: string;
  readonly roleArn: string;
  readonly dataPrivacy: DataPrivacy;
  readonly idleSessionTTLInSeconds: number;
}
export interface UpdateBotAlias {
  readonly botAliasId: string;
  readonly botAliasName: string;
  readonly description?: string;
  readonly botVersion?: string;
  readonly botAliasLocaleSettings?: {[key: string]: any};
  readonly conversationLogSettings?: ConversationLogSettings;
  readonly sentimentAnalysisSettings?: SentimentAnalysisSettings;
  readonly botId: string;
}
export interface UpdateBotLocale {
  readonly botId: string;
  readonly botVersion: string;
  readonly localeId: string;
  readonly description?: string;
  readonly nluIntentConfidenceThreshold: unknown;
  readonly voiceSettings?: VoiceSettings;
}
export interface UpdateBotRecommendation {
  readonly botId: string;
  readonly botVersion: string;
  readonly localeId: string;
  readonly botRecommendationId: string;
  readonly encryptionSetting: EncryptionSetting;
}
export interface UpdateExport {
  readonly exportId: string;
  readonly filePassword?: string;
}
export interface UpdateIntent {
  readonly intentId: string;
  readonly intentName: string;
  readonly description?: string;
  readonly parentIntentSignature?: string;
  readonly sampleUtterances?: [];
  readonly dialogCodeHook?: DialogCodeHookSettings;
  readonly fulfillmentCodeHook?: FulfillmentCodeHookSettings;
  readonly slotPriorities?: [];
  readonly intentConfirmationSetting?: IntentConfirmationSetting;
  readonly intentClosingSetting?: IntentClosingSetting;
  readonly inputContexts?: [];
  readonly outputContexts?: [];
  readonly kendraConfiguration?: KendraConfiguration;
  readonly botId: string;
  readonly botVersion: string;
  readonly localeId: string;
}
export interface UpdateResourcePolicy {
  readonly resourceArn: string;
  readonly policy: string;
  readonly expectedRevisionId?: string;
}
export interface UpdateSlot {
  readonly slotId: string;
  readonly slotName: string;
  readonly description?: string;
  readonly slotTypeId: string;
  readonly valueElicitationSetting: SlotValueElicitationSetting;
  readonly obfuscationSetting?: ObfuscationSetting;
  readonly botId: string;
  readonly botVersion: string;
  readonly localeId: string;
  readonly intentId: string;
  readonly multipleValuesSetting?: MultipleValuesSetting;
}
export interface UpdateSlotType {
  readonly slotTypeId: string;
  readonly slotTypeName: string;
  readonly description?: string;
  readonly slotTypeValues?: [];
  readonly valueSelectionSetting?: SlotValueSelectionSetting;
  readonly parentSlotTypeSignature?: string;
  readonly botId: string;
  readonly botVersion: string;
  readonly localeId: string;
  readonly externalSourceSetting?: ExternalSourceSetting;
}



interface AggregatedUtterancesFilter {
  readonly name: string;
  readonly values: [];
  readonly operator: string;
}

interface AggregatedUtterancesSortBy {
  readonly attribute: string;
  readonly order: string;
}

interface AggregatedUtterancesSummary {
  readonly utterance: string;
  readonly hitCount: number;
  readonly missedCount: number;
  readonly utteranceFirstRecordedInAggregationDuration: Date;
  readonly utteranceLastRecordedInAggregationDuration: Date;
  readonly containsDataFromDeletedResources: boolean;
}

interface AssociatedTranscript {
  readonly transcript: string;
}

interface AssociatedTranscriptFilter {
  readonly name: string;
  readonly values: [];
}

interface AudioLogDestination {
  readonly s3Bucket: S3BucketLogDestination;
}

interface AudioLogSetting {
  readonly enabled: boolean;
  readonly destination: AudioLogDestination;
}

interface BotAliasHistoryEvent {
  readonly botVersion: string;
  readonly startDate: Date;
  readonly endDate: Date;
}

interface BotAliasLocaleSettings {
  readonly enabled: boolean;
  readonly codeHookSpecification: CodeHookSpecification;
}

interface BotAliasSummary {
  readonly botAliasId: string;
  readonly botAliasName: string;
  readonly description: string;
  readonly botVersion: string;
  readonly botAliasStatus: string;
  readonly creationDateTime: Date;
  readonly lastUpdatedDateTime: Date;
}

interface BotExportSpecification {
  readonly botId: string;
  readonly botVersion: string;
}

interface BotFilter {
  readonly name: string;
  readonly values: [];
  readonly operator: string;
}

interface BotImportSpecification {
  readonly botName: string;
  readonly roleArn: string;
  readonly dataPrivacy: DataPrivacy;
  readonly idleSessionTTLInSeconds: number;
  readonly botTags: {[key: string]: any};
  readonly testBotAliasTags: {[key: string]: any};
}

interface BotLocaleExportSpecification {
  readonly botId: string;
  readonly botVersion: string;
  readonly localeId: string;
}

interface BotLocaleFilter {
  readonly name: string;
  readonly values: [];
  readonly operator: string;
}

interface BotLocaleHistoryEvent {
  readonly event: string;
  readonly eventDate: Date;
}

interface BotLocaleImportSpecification {
  readonly botId: string;
  readonly botVersion: string;
  readonly localeId: string;
  readonly nluIntentConfidenceThreshold: unknown;
  readonly voiceSettings: VoiceSettings;
}

interface BotLocaleSortBy {
  readonly attribute: string;
  readonly order: string;
}

interface BotLocaleSummary {
  readonly localeId: string;
  readonly localeName: string;
  readonly description: string;
  readonly botLocaleStatus: string;
  readonly lastUpdatedDateTime: Date;
  readonly lastBuildSubmittedDateTime: Date;
}

interface BotRecommendationResultStatistics {
  readonly intents: IntentStatistics;
  readonly slotTypes: SlotTypeStatistics;
}

interface BotRecommendationResults {
  readonly botLocaleExportUrl: string;
  readonly associatedTranscriptsUrl: string;
  readonly statistics: BotRecommendationResultStatistics;
}

interface BotRecommendationSummary {
  readonly botRecommendationStatus: string;
  readonly botRecommendationId: string;
  readonly creationDateTime: Date;
  readonly lastUpdatedDateTime: Date;
}

interface BotSortBy {
  readonly attribute: string;
  readonly order: string;
}

interface BotSummary {
  readonly botId: string;
  readonly botName: string;
  readonly description: string;
  readonly botStatus: string;
  readonly latestBotVersion: string;
  readonly lastUpdatedDateTime: Date;
}

interface BotVersionLocaleDetails {
  readonly sourceBotVersion: string;
}

interface BotVersionSortBy {
  readonly attribute: string;
  readonly order: string;
}

interface BotVersionSummary {
  readonly botName: string;
  readonly botVersion: string;
  readonly description: string;
  readonly botStatus: string;
  readonly creationDateTime: Date;
}

interface BuildBotLocaleRequest {
  readonly botId: string;
  readonly botVersion: string;
  readonly localeId: string;
}

interface BuildBotLocaleResponse {
  readonly botId: string;
  readonly botVersion: string;
  readonly localeId: string;
  readonly botLocaleStatus: string;
  readonly lastBuildSubmittedDateTime: Date;
}

interface BuiltInIntentSortBy {
  readonly attribute: string;
  readonly order: string;
}

interface BuiltInIntentSummary {
  readonly intentSignature: string;
  readonly description: string;
}

interface BuiltInSlotTypeSortBy {
  readonly attribute: string;
  readonly order: string;
}

interface BuiltInSlotTypeSummary {
  readonly slotTypeSignature: string;
  readonly description: string;
}

interface Button {
  readonly text: string;
  readonly value: string;
}

interface CloudWatchLogGroupLogDestination {
  readonly cloudWatchLogGroupArn: string;
  readonly logPrefix: string;
}

interface CodeHookSpecification {
  readonly lambdaCodeHook: LambdaCodeHook;
}

interface ConflictException {
  readonly message: string;
}

interface ConversationLogSettings {
  readonly textLogSettings: [];
  readonly audioLogSettings: [];
}

interface CreateBotAliasRequest {
  readonly botAliasName: string;
  readonly description: string;
  readonly botVersion: string;
  readonly botAliasLocaleSettings: {[key: string]: any};
  readonly conversationLogSettings: ConversationLogSettings;
  readonly sentimentAnalysisSettings: SentimentAnalysisSettings;
  readonly botId: string;
  readonly tags: {[key: string]: any};
}

interface CreateBotAliasResponse {
  readonly botAliasId: string;
  readonly botAliasName: string;
  readonly description: string;
  readonly botVersion: string;
  readonly botAliasLocaleSettings: {[key: string]: any};
  readonly conversationLogSettings: ConversationLogSettings;
  readonly sentimentAnalysisSettings: SentimentAnalysisSettings;
  readonly botAliasStatus: string;
  readonly botId: string;
  readonly creationDateTime: Date;
  readonly tags: {[key: string]: any};
}

interface CreateBotLocaleRequest {
  readonly botId: string;
  readonly botVersion: string;
  readonly localeId: string;
  readonly description: string;
  readonly nluIntentConfidenceThreshold: unknown;
  readonly voiceSettings: VoiceSettings;
}

interface CreateBotLocaleResponse {
  readonly botId: string;
  readonly botVersion: string;
  readonly localeName: string;
  readonly localeId: string;
  readonly description: string;
  readonly nluIntentConfidenceThreshold: unknown;
  readonly voiceSettings: VoiceSettings;
  readonly botLocaleStatus: string;
  readonly creationDateTime: Date;
}

interface CreateBotRequest {
  readonly botName: string;
  readonly description: string;
  readonly roleArn: string;
  readonly dataPrivacy: DataPrivacy;
  readonly idleSessionTTLInSeconds: number;
  readonly botTags: {[key: string]: any};
  readonly testBotAliasTags: {[key: string]: any};
}

interface CreateBotResponse {
  readonly botId: string;
  readonly botName: string;
  readonly description: string;
  readonly roleArn: string;
  readonly dataPrivacy: DataPrivacy;
  readonly idleSessionTTLInSeconds: number;
  readonly botStatus: string;
  readonly creationDateTime: Date;
  readonly botTags: {[key: string]: any};
  readonly testBotAliasTags: {[key: string]: any};
}

interface CreateBotVersionRequest {
  readonly botId: string;
  readonly description: string;
  readonly botVersionLocaleSpecification: {[key: string]: any};
}

interface CreateBotVersionResponse {
  readonly botId: string;
  readonly description: string;
  readonly botVersion: string;
  readonly botVersionLocaleSpecification: {[key: string]: any};
  readonly botStatus: string;
  readonly creationDateTime: Date;
}

interface CreateExportRequest {
  readonly resourceSpecification: ExportResourceSpecification;
  readonly fileFormat: string;
  readonly filePassword: string;
}

interface CreateExportResponse {
  readonly exportId: string;
  readonly resourceSpecification: ExportResourceSpecification;
  readonly fileFormat: string;
  readonly exportStatus: string;
  readonly creationDateTime: Date;
}

interface CreateIntentRequest {
  readonly intentName: string;
  readonly description: string;
  readonly parentIntentSignature: string;
  readonly sampleUtterances: [];
  readonly dialogCodeHook: DialogCodeHookSettings;
  readonly fulfillmentCodeHook: FulfillmentCodeHookSettings;
  readonly intentConfirmationSetting: IntentConfirmationSetting;
  readonly intentClosingSetting: IntentClosingSetting;
  readonly inputContexts: [];
  readonly outputContexts: [];
  readonly kendraConfiguration: KendraConfiguration;
  readonly botId: string;
  readonly botVersion: string;
  readonly localeId: string;
}

interface CreateIntentResponse {
  readonly intentId: string;
  readonly intentName: string;
  readonly description: string;
  readonly parentIntentSignature: string;
  readonly sampleUtterances: [];
  readonly dialogCodeHook: DialogCodeHookSettings;
  readonly fulfillmentCodeHook: FulfillmentCodeHookSettings;
  readonly intentConfirmationSetting: IntentConfirmationSetting;
  readonly intentClosingSetting: IntentClosingSetting;
  readonly inputContexts: [];
  readonly outputContexts: [];
  readonly kendraConfiguration: KendraConfiguration;
  readonly botId: string;
  readonly botVersion: string;
  readonly localeId: string;
  readonly creationDateTime: Date;
}

interface CreateResourcePolicyRequest {
  readonly resourceArn: string;
  readonly policy: string;
}

interface CreateResourcePolicyResponse {
  readonly resourceArn: string;
  readonly revisionId: string;
}

interface CreateResourcePolicyStatementRequest {
  readonly resourceArn: string;
  readonly statementId: string;
  readonly effect: string;
  readonly principal: [];
  readonly action: [];
  readonly condition: {[key: string]: any};
  readonly expectedRevisionId: string;
}

interface CreateResourcePolicyStatementResponse {
  readonly resourceArn: string;
  readonly revisionId: string;
}

interface CreateSlotRequest {
  readonly slotName: string;
  readonly description: string;
  readonly slotTypeId: string;
  readonly valueElicitationSetting: SlotValueElicitationSetting;
  readonly obfuscationSetting: ObfuscationSetting;
  readonly botId: string;
  readonly botVersion: string;
  readonly localeId: string;
  readonly intentId: string;
  readonly multipleValuesSetting: MultipleValuesSetting;
}

interface CreateSlotResponse {
  readonly slotId: string;
  readonly slotName: string;
  readonly description: string;
  readonly slotTypeId: string;
  readonly valueElicitationSetting: SlotValueElicitationSetting;
  readonly obfuscationSetting: ObfuscationSetting;
  readonly botId: string;
  readonly botVersion: string;
  readonly localeId: string;
  readonly intentId: string;
  readonly creationDateTime: Date;
  readonly multipleValuesSetting: MultipleValuesSetting;
}

interface CreateSlotTypeRequest {
  readonly slotTypeName: string;
  readonly description: string;
  readonly slotTypeValues: [];
  readonly valueSelectionSetting: SlotValueSelectionSetting;
  readonly parentSlotTypeSignature: string;
  readonly botId: string;
  readonly botVersion: string;
  readonly localeId: string;
  readonly externalSourceSetting: ExternalSourceSetting;
}

interface CreateSlotTypeResponse {
  readonly slotTypeId: string;
  readonly slotTypeName: string;
  readonly description: string;
  readonly slotTypeValues: [];
  readonly valueSelectionSetting: SlotValueSelectionSetting;
  readonly parentSlotTypeSignature: string;
  readonly botId: string;
  readonly botVersion: string;
  readonly localeId: string;
  readonly creationDateTime: Date;
  readonly externalSourceSetting: ExternalSourceSetting;
}

interface CreateUploadUrlRequest {
}

interface CreateUploadUrlResponse {
  readonly importId: string;
  readonly uploadUrl: string;
}

interface CustomPayload {
  readonly value: string;
}

interface DataPrivacy {
  readonly childDirected: boolean;
}

interface DateRangeFilter {
  readonly startDateTime: Date;
  readonly endDateTime: Date;
}

interface DeleteBotAliasRequest {
  readonly botAliasId: string;
  readonly botId: string;
  readonly skipResourceInUseCheck: boolean;
}

interface DeleteBotAliasResponse {
  readonly botAliasId: string;
  readonly botId: string;
  readonly botAliasStatus: string;
}

interface DeleteBotLocaleRequest {
  readonly botId: string;
  readonly botVersion: string;
  readonly localeId: string;
}

interface DeleteBotLocaleResponse {
  readonly botId: string;
  readonly botVersion: string;
  readonly localeId: string;
  readonly botLocaleStatus: string;
}

interface DeleteBotRequest {
  readonly botId: string;
  readonly skipResourceInUseCheck: boolean;
}

interface DeleteBotResponse {
  readonly botId: string;
  readonly botStatus: string;
}

interface DeleteBotVersionRequest {
  readonly botId: string;
  readonly botVersion: string;
  readonly skipResourceInUseCheck: boolean;
}

interface DeleteBotVersionResponse {
  readonly botId: string;
  readonly botVersion: string;
  readonly botStatus: string;
}

interface DeleteExportRequest {
  readonly exportId: string;
}

interface DeleteExportResponse {
  readonly exportId: string;
  readonly exportStatus: string;
}

interface DeleteImportRequest {
  readonly importId: string;
}

interface DeleteImportResponse {
  readonly importId: string;
  readonly importStatus: string;
}

interface DeleteIntentRequest {
  readonly intentId: string;
  readonly botId: string;
  readonly botVersion: string;
  readonly localeId: string;
}

interface DeleteResourcePolicyRequest {
  readonly resourceArn: string;
  readonly expectedRevisionId: string;
}

interface DeleteResourcePolicyResponse {
  readonly resourceArn: string;
  readonly revisionId: string;
}

interface DeleteResourcePolicyStatementRequest {
  readonly resourceArn: string;
  readonly statementId: string;
  readonly expectedRevisionId: string;
}

interface DeleteResourcePolicyStatementResponse {
  readonly resourceArn: string;
  readonly revisionId: string;
}

interface DeleteSlotRequest {
  readonly slotId: string;
  readonly botId: string;
  readonly botVersion: string;
  readonly localeId: string;
  readonly intentId: string;
}

interface DeleteSlotTypeRequest {
  readonly slotTypeId: string;
  readonly botId: string;
  readonly botVersion: string;
  readonly localeId: string;
  readonly skipResourceInUseCheck: boolean;
}

interface DeleteUtterancesRequest {
  readonly botId: string;
  readonly localeId: string;
  readonly sessionId: string;
}

interface DeleteUtterancesResponse {
}

interface DescribeBotAliasRequest {
  readonly botAliasId: string;
  readonly botId: string;
}

interface DescribeBotAliasResponse {
  readonly botAliasId: string;
  readonly botAliasName: string;
  readonly description: string;
  readonly botVersion: string;
  readonly botAliasLocaleSettings: {[key: string]: any};
  readonly conversationLogSettings: ConversationLogSettings;
  readonly sentimentAnalysisSettings: SentimentAnalysisSettings;
  readonly botAliasHistoryEvents: [];
  readonly botAliasStatus: string;
  readonly botId: string;
  readonly creationDateTime: Date;
  readonly lastUpdatedDateTime: Date;
}

interface DescribeBotLocaleRequest {
  readonly botId: string;
  readonly botVersion: string;
  readonly localeId: string;
}

interface DescribeBotLocaleResponse {
  readonly botId: string;
  readonly botVersion: string;
  readonly localeId: string;
  readonly localeName: string;
  readonly description: string;
  readonly nluIntentConfidenceThreshold: unknown;
  readonly voiceSettings: VoiceSettings;
  readonly intentsCount: number;
  readonly slotTypesCount: number;
  readonly botLocaleStatus: string;
  readonly failureReasons: [];
  readonly creationDateTime: Date;
  readonly lastUpdatedDateTime: Date;
  readonly lastBuildSubmittedDateTime: Date;
  readonly botLocaleHistoryEvents: [];
  readonly recommendedActions: [];
}

interface DescribeBotRecommendationRequest {
  readonly botId: string;
  readonly botVersion: string;
  readonly localeId: string;
  readonly botRecommendationId: string;
}

interface DescribeBotRecommendationResponse {
  readonly botId: string;
  readonly botVersion: string;
  readonly localeId: string;
  readonly botRecommendationStatus: string;
  readonly botRecommendationId: string;
  readonly failureReasons: [];
  readonly creationDateTime: Date;
  readonly lastUpdatedDateTime: Date;
  readonly transcriptSourceSetting: TranscriptSourceSetting;
  readonly encryptionSetting: EncryptionSetting;
  readonly botRecommendationResults: BotRecommendationResults;
}

interface DescribeBotRequest {
  readonly botId: string;
}

interface DescribeBotResponse {
  readonly botId: string;
  readonly botName: string;
  readonly description: string;
  readonly roleArn: string;
  readonly dataPrivacy: DataPrivacy;
  readonly idleSessionTTLInSeconds: number;
  readonly botStatus: string;
  readonly creationDateTime: Date;
  readonly lastUpdatedDateTime: Date;
}

interface DescribeBotVersionRequest {
  readonly botId: string;
  readonly botVersion: string;
}

interface DescribeBotVersionResponse {
  readonly botId: string;
  readonly botName: string;
  readonly botVersion: string;
  readonly description: string;
  readonly roleArn: string;
  readonly dataPrivacy: DataPrivacy;
  readonly idleSessionTTLInSeconds: number;
  readonly botStatus: string;
  readonly failureReasons: [];
  readonly creationDateTime: Date;
}

interface DescribeExportRequest {
  readonly exportId: string;
}

interface DescribeExportResponse {
  readonly exportId: string;
  readonly resourceSpecification: ExportResourceSpecification;
  readonly fileFormat: string;
  readonly exportStatus: string;
  readonly failureReasons: [];
  readonly downloadUrl: string;
  readonly creationDateTime: Date;
  readonly lastUpdatedDateTime: Date;
}

interface DescribeImportRequest {
  readonly importId: string;
}

interface DescribeImportResponse {
  readonly importId: string;
  readonly resourceSpecification: ImportResourceSpecification;
  readonly importedResourceId: string;
  readonly importedResourceName: string;
  readonly mergeStrategy: string;
  readonly importStatus: string;
  readonly failureReasons: [];
  readonly creationDateTime: Date;
  readonly lastUpdatedDateTime: Date;
}

interface DescribeIntentRequest {
  readonly intentId: string;
  readonly botId: string;
  readonly botVersion: string;
  readonly localeId: string;
}

interface DescribeIntentResponse {
  readonly intentId: string;
  readonly intentName: string;
  readonly description: string;
  readonly parentIntentSignature: string;
  readonly sampleUtterances: [];
  readonly dialogCodeHook: DialogCodeHookSettings;
  readonly fulfillmentCodeHook: FulfillmentCodeHookSettings;
  readonly slotPriorities: [];
  readonly intentConfirmationSetting: IntentConfirmationSetting;
  readonly intentClosingSetting: IntentClosingSetting;
  readonly inputContexts: [];
  readonly outputContexts: [];
  readonly kendraConfiguration: KendraConfiguration;
  readonly botId: string;
  readonly botVersion: string;
  readonly localeId: string;
  readonly creationDateTime: Date;
  readonly lastUpdatedDateTime: Date;
}

interface DescribeResourcePolicyRequest {
  readonly resourceArn: string;
}

interface DescribeResourcePolicyResponse {
  readonly resourceArn: string;
  readonly policy: string;
  readonly revisionId: string;
}

interface DescribeSlotRequest {
  readonly slotId: string;
  readonly botId: string;
  readonly botVersion: string;
  readonly localeId: string;
  readonly intentId: string;
}

interface DescribeSlotResponse {
  readonly slotId: string;
  readonly slotName: string;
  readonly description: string;
  readonly slotTypeId: string;
  readonly valueElicitationSetting: SlotValueElicitationSetting;
  readonly obfuscationSetting: ObfuscationSetting;
  readonly botId: string;
  readonly botVersion: string;
  readonly localeId: string;
  readonly intentId: string;
  readonly creationDateTime: Date;
  readonly lastUpdatedDateTime: Date;
  readonly multipleValuesSetting: MultipleValuesSetting;
}

interface DescribeSlotTypeRequest {
  readonly slotTypeId: string;
  readonly botId: string;
  readonly botVersion: string;
  readonly localeId: string;
}

interface DescribeSlotTypeResponse {
  readonly slotTypeId: string;
  readonly slotTypeName: string;
  readonly description: string;
  readonly slotTypeValues: [];
  readonly valueSelectionSetting: SlotValueSelectionSetting;
  readonly parentSlotTypeSignature: string;
  readonly botId: string;
  readonly botVersion: string;
  readonly localeId: string;
  readonly creationDateTime: Date;
  readonly lastUpdatedDateTime: Date;
  readonly externalSourceSetting: ExternalSourceSetting;
}

interface DialogCodeHookSettings {
  readonly enabled: boolean;
}

interface EncryptionSetting {
  readonly kmsKeyArn: string;
  readonly botLocaleExportPassword: string;
  readonly associatedTranscriptsPassword: string;
}

interface ExportFilter {
  readonly name: string;
  readonly values: [];
  readonly operator: string;
}

interface ExportResourceSpecification {
  readonly botExportSpecification: BotExportSpecification;
  readonly botLocaleExportSpecification: BotLocaleExportSpecification;
}

interface ExportSortBy {
  readonly attribute: string;
  readonly order: string;
}

interface ExportSummary {
  readonly exportId: string;
  readonly resourceSpecification: ExportResourceSpecification;
  readonly fileFormat: string;
  readonly exportStatus: string;
  readonly creationDateTime: Date;
  readonly lastUpdatedDateTime: Date;
}

interface ExternalSourceSetting {
  readonly grammarSlotTypeSetting: GrammarSlotTypeSetting;
}

interface FulfillmentCodeHookSettings {
  readonly enabled: boolean;
  readonly postFulfillmentStatusSpecification: PostFulfillmentStatusSpecification;
  readonly fulfillmentUpdatesSpecification: FulfillmentUpdatesSpecification;
}

interface FulfillmentStartResponseSpecification {
  readonly delayInSeconds: number;
  readonly messageGroups: [];
  readonly allowInterrupt: boolean;
}

interface FulfillmentUpdateResponseSpecification {
  readonly frequencyInSeconds: number;
  readonly messageGroups: [];
  readonly allowInterrupt: boolean;
}

interface FulfillmentUpdatesSpecification {
  readonly active: boolean;
  readonly startResponse: FulfillmentStartResponseSpecification;
  readonly updateResponse: FulfillmentUpdateResponseSpecification;
  readonly timeoutInSeconds: number;
}

interface GrammarSlotTypeSetting {
  readonly source: GrammarSlotTypeSource;
}

interface GrammarSlotTypeSource {
  readonly s3BucketName: string;
  readonly s3ObjectKey: string;
  readonly kmsKeyArn: string;
}

interface ImageResponseCard {
  readonly title: string;
  readonly subtitle: string;
  readonly imageUrl: string;
  readonly buttons: [];
}

interface ImportFilter {
  readonly name: string;
  readonly values: [];
  readonly operator: string;
}

interface ImportResourceSpecification {
  readonly botImportSpecification: BotImportSpecification;
  readonly botLocaleImportSpecification: BotLocaleImportSpecification;
}

interface ImportSortBy {
  readonly attribute: string;
  readonly order: string;
}

interface ImportSummary {
  readonly importId: string;
  readonly importedResourceId: string;
  readonly importedResourceName: string;
  readonly importStatus: string;
  readonly mergeStrategy: string;
  readonly creationDateTime: Date;
  readonly lastUpdatedDateTime: Date;
}

interface InputContext {
  readonly name: string;
}

interface IntentClosingSetting {
  readonly closingResponse: ResponseSpecification;
  readonly active: boolean;
}

interface IntentConfirmationSetting {
  readonly promptSpecification: PromptSpecification;
  readonly declinationResponse: ResponseSpecification;
  readonly active: boolean;
}

interface IntentFilter {
  readonly name: string;
  readonly values: [];
  readonly operator: string;
}

interface IntentSortBy {
  readonly attribute: string;
  readonly order: string;
}

interface IntentStatistics {
  readonly discoveredIntentCount: number;
}

interface IntentSummary {
  readonly intentId: string;
  readonly intentName: string;
  readonly description: string;
  readonly parentIntentSignature: string;
  readonly inputContexts: [];
  readonly outputContexts: [];
  readonly lastUpdatedDateTime: Date;
}

interface InternalServerException {
  readonly message: string;
}

interface KendraConfiguration {
  readonly kendraIndex: string;
  readonly queryFilterStringEnabled: boolean;
  readonly queryFilterString: string;
}

interface LambdaCodeHook {
  readonly lambdaARN: string;
  readonly codeHookInterfaceVersion: string;
}

interface LexTranscriptFilter {
  readonly dateRangeFilter: DateRangeFilter;
}

interface ListAggregatedUtterancesRequest {
  readonly botId: string;
  readonly botAliasId: string;
  readonly botVersion: string;
  readonly localeId: string;
  readonly aggregationDuration: UtteranceAggregationDuration;
  readonly sortBy: AggregatedUtterancesSortBy;
  readonly filters: [];
  readonly maxResults: number;
  readonly nextToken: string;
}

interface ListAggregatedUtterancesResponse {
  readonly botId: string;
  readonly botAliasId: string;
  readonly botVersion: string;
  readonly localeId: string;
  readonly aggregationDuration: UtteranceAggregationDuration;
  readonly aggregationWindowStartTime: Date;
  readonly aggregationWindowEndTime: Date;
  readonly aggregationLastRefreshedDateTime: Date;
  readonly aggregatedUtterancesSummaries: [];
  readonly nextToken: string;
}

interface ListBotAliasesRequest {
  readonly botId: string;
  readonly maxResults: number;
  readonly nextToken: string;
}

interface ListBotAliasesResponse {
  readonly botAliasSummaries: [];
  readonly nextToken: string;
  readonly botId: string;
}

interface ListBotLocalesRequest {
  readonly botId: string;
  readonly botVersion: string;
  readonly sortBy: BotLocaleSortBy;
  readonly filters: [];
  readonly maxResults: number;
  readonly nextToken: string;
}

interface ListBotLocalesResponse {
  readonly botId: string;
  readonly botVersion: string;
  readonly nextToken: string;
  readonly botLocaleSummaries: [];
}

interface ListBotRecommendationsRequest {
  readonly botId: string;
  readonly botVersion: string;
  readonly localeId: string;
  readonly maxResults: number;
  readonly nextToken: string;
}

interface ListBotRecommendationsResponse {
  readonly botId: string;
  readonly botVersion: string;
  readonly localeId: string;
  readonly botRecommendationSummaries: [];
  readonly nextToken: string;
}

interface ListBotVersionsRequest {
  readonly botId: string;
  readonly sortBy: BotVersionSortBy;
  readonly maxResults: number;
  readonly nextToken: string;
}

interface ListBotVersionsResponse {
  readonly botId: string;
  readonly botVersionSummaries: [];
  readonly nextToken: string;
}

interface ListBotsRequest {
  readonly sortBy: BotSortBy;
  readonly filters: [];
  readonly maxResults: number;
  readonly nextToken: string;
}

interface ListBotsResponse {
  readonly botSummaries: [];
  readonly nextToken: string;
}

interface ListBuiltInIntentsRequest {
  readonly localeId: string;
  readonly sortBy: BuiltInIntentSortBy;
  readonly maxResults: number;
  readonly nextToken: string;
}

interface ListBuiltInIntentsResponse {
  readonly builtInIntentSummaries: [];
  readonly nextToken: string;
  readonly localeId: string;
}

interface ListBuiltInSlotTypesRequest {
  readonly localeId: string;
  readonly sortBy: BuiltInSlotTypeSortBy;
  readonly maxResults: number;
  readonly nextToken: string;
}

interface ListBuiltInSlotTypesResponse {
  readonly builtInSlotTypeSummaries: [];
  readonly nextToken: string;
  readonly localeId: string;
}

interface ListExportsRequest {
  readonly botId: string;
  readonly botVersion: string;
  readonly sortBy: ExportSortBy;
  readonly filters: [];
  readonly maxResults: number;
  readonly nextToken: string;
}

interface ListExportsResponse {
  readonly botId: string;
  readonly botVersion: string;
  readonly exportSummaries: [];
  readonly nextToken: string;
}

interface ListImportsRequest {
  readonly botId: string;
  readonly botVersion: string;
  readonly sortBy: ImportSortBy;
  readonly filters: [];
  readonly maxResults: number;
  readonly nextToken: string;
}

interface ListImportsResponse {
  readonly botId: string;
  readonly botVersion: string;
  readonly importSummaries: [];
  readonly nextToken: string;
}

interface ListIntentsRequest {
  readonly botId: string;
  readonly botVersion: string;
  readonly localeId: string;
  readonly sortBy: IntentSortBy;
  readonly filters: [];
  readonly maxResults: number;
  readonly nextToken: string;
}

interface ListIntentsResponse {
  readonly botId: string;
  readonly botVersion: string;
  readonly localeId: string;
  readonly intentSummaries: [];
  readonly nextToken: string;
}

interface ListRecommendedIntentsRequest {
  readonly botId: string;
  readonly botVersion: string;
  readonly localeId: string;
  readonly botRecommendationId: string;
  readonly nextToken: string;
  readonly maxResults: number;
}

interface ListRecommendedIntentsResponse {
  readonly botId: string;
  readonly botVersion: string;
  readonly localeId: string;
  readonly botRecommendationId: string;
  readonly summaryList: [];
  readonly nextToken: string;
}

interface ListSlotTypesRequest {
  readonly botId: string;
  readonly botVersion: string;
  readonly localeId: string;
  readonly sortBy: SlotTypeSortBy;
  readonly filters: [];
  readonly maxResults: number;
  readonly nextToken: string;
}

interface ListSlotTypesResponse {
  readonly botId: string;
  readonly botVersion: string;
  readonly localeId: string;
  readonly slotTypeSummaries: [];
  readonly nextToken: string;
}

interface ListSlotsRequest {
  readonly botId: string;
  readonly botVersion: string;
  readonly localeId: string;
  readonly intentId: string;
  readonly sortBy: SlotSortBy;
  readonly filters: [];
  readonly maxResults: number;
  readonly nextToken: string;
}

interface ListSlotsResponse {
  readonly botId: string;
  readonly botVersion: string;
  readonly localeId: string;
  readonly intentId: string;
  readonly slotSummaries: [];
  readonly nextToken: string;
}

interface ListTagsForResourceRequest {
  readonly resourceARN: string;
}

interface ListTagsForResourceResponse {
  readonly tags: {[key: string]: any};
}

interface Message {
  readonly plainTextMessage: PlainTextMessage;
  readonly customPayload: CustomPayload;
  readonly ssmlMessage: SSMLMessage;
  readonly imageResponseCard: ImageResponseCard;
}

interface MessageGroup {
  readonly message: Message;
  readonly variations: [];
}

interface MultipleValuesSetting {
  readonly allowMultipleValues: boolean;
}

interface ObfuscationSetting {
  readonly obfuscationSettingType: string;
}

interface OutputContext {
  readonly name: string;
  readonly timeToLiveInSeconds: number;
  readonly turnsToLive: number;
}

interface PathFormat {
  readonly objectPrefixes: [];
}

interface PlainTextMessage {
  readonly value: string;
}

interface PostFulfillmentStatusSpecification {
  readonly successResponse: ResponseSpecification;
  readonly failureResponse: ResponseSpecification;
  readonly timeoutResponse: ResponseSpecification;
}

interface PreconditionFailedException {
  readonly message: string;
}

interface Principal {
  readonly service: string;
  readonly arn: string;
}

interface PromptSpecification {
  readonly messageGroups: [];
  readonly maxRetries: number;
  readonly allowInterrupt: boolean;
}

interface RecommendedIntentSummary {
  readonly intentId: string;
  readonly intentName: string;
  readonly sampleUtterancesCount: number;
}

interface RelativeAggregationDuration {
  readonly timeDimension: string;
  readonly timeValue: number;
}

interface ResourceNotFoundException {
  readonly message: string;
}

interface ResponseSpecification {
  readonly messageGroups: [];
  readonly allowInterrupt: boolean;
}

interface S3BucketLogDestination {
  readonly kmsKeyArn: string;
  readonly s3BucketArn: string;
  readonly logPrefix: string;
}

interface S3BucketTranscriptSource {
  readonly s3BucketName: string;
  readonly pathFormat: PathFormat;
  readonly transcriptFormat: string;
  readonly transcriptFilter: TranscriptFilter;
  readonly kmsKeyArn: string;
}

interface SSMLMessage {
  readonly value: string;
}

interface SampleUtterance {
  readonly utterance: string;
}

interface SampleValue {
  readonly value: string;
}

interface SearchAssociatedTranscriptsRequest {
  readonly botId: string;
  readonly botVersion: string;
  readonly localeId: string;
  readonly botRecommendationId: string;
  readonly searchOrder: string;
  readonly filters: [];
  readonly maxResults: number;
  readonly nextIndex: number;
}

interface SearchAssociatedTranscriptsResponse {
  readonly botId: string;
  readonly botVersion: string;
  readonly localeId: string;
  readonly botRecommendationId: string;
  readonly nextIndex: number;
  readonly associatedTranscripts: [];
  readonly totalResults: number;
}

interface SentimentAnalysisSettings {
  readonly detectSentiment: boolean;
}

interface ServiceQuotaExceededException {
  readonly message: string;
}

interface SlotDefaultValue {
  readonly defaultValue: string;
}

interface SlotDefaultValueSpecification {
  readonly defaultValueList: [];
}

interface SlotFilter {
  readonly name: string;
  readonly values: [];
  readonly operator: string;
}

interface SlotPriority {
  readonly priority: number;
  readonly slotId: string;
}

interface SlotSortBy {
  readonly attribute: string;
  readonly order: string;
}

interface SlotSummary {
  readonly slotId: string;
  readonly slotName: string;
  readonly description: string;
  readonly slotConstraint: string;
  readonly slotTypeId: string;
  readonly valueElicitationPromptSpecification: PromptSpecification;
  readonly lastUpdatedDateTime: Date;
}

interface SlotTypeFilter {
  readonly name: string;
  readonly values: [];
  readonly operator: string;
}

interface SlotTypeSortBy {
  readonly attribute: string;
  readonly order: string;
}

interface SlotTypeStatistics {
  readonly discoveredSlotTypeCount: number;
}

interface SlotTypeSummary {
  readonly slotTypeId: string;
  readonly slotTypeName: string;
  readonly description: string;
  readonly parentSlotTypeSignature: string;
  readonly lastUpdatedDateTime: Date;
  readonly slotTypeCategory: string;
}

interface SlotTypeValue {
  readonly sampleValue: SampleValue;
  readonly synonyms: [];
}

interface SlotValueElicitationSetting {
  readonly defaultValueSpecification: SlotDefaultValueSpecification;
  readonly slotConstraint: string;
  readonly promptSpecification: PromptSpecification;
  readonly sampleUtterances: [];
  readonly waitAndContinueSpecification: WaitAndContinueSpecification;
}

interface SlotValueRegexFilter {
  readonly pattern: string;
}

interface SlotValueSelectionSetting {
  readonly resolutionStrategy: string;
  readonly regexFilter: SlotValueRegexFilter;
}

interface StartBotRecommendationRequest {
  readonly botId: string;
  readonly botVersion: string;
  readonly localeId: string;
  readonly transcriptSourceSetting: TranscriptSourceSetting;
  readonly encryptionSetting: EncryptionSetting;
}

interface StartBotRecommendationResponse {
  readonly botId: string;
  readonly botVersion: string;
  readonly localeId: string;
  readonly botRecommendationStatus: string;
  readonly botRecommendationId: string;
  readonly creationDateTime: Date;
  readonly transcriptSourceSetting: TranscriptSourceSetting;
  readonly encryptionSetting: EncryptionSetting;
}

interface StartImportRequest {
  readonly importId: string;
  readonly resourceSpecification: ImportResourceSpecification;
  readonly mergeStrategy: string;
  readonly filePassword: string;
}

interface StartImportResponse {
  readonly importId: string;
  readonly resourceSpecification: ImportResourceSpecification;
  readonly mergeStrategy: string;
  readonly importStatus: string;
  readonly creationDateTime: Date;
}

interface StillWaitingResponseSpecification {
  readonly messageGroups: [];
  readonly frequencyInSeconds: number;
  readonly timeoutInSeconds: number;
  readonly allowInterrupt: boolean;
}

interface TagResourceRequest {
  readonly resourceARN: string;
  readonly tags: {[key: string]: any};
}

interface TagResourceResponse {
}

interface TextLogDestination {
  readonly cloudWatch: CloudWatchLogGroupLogDestination;
}

interface TextLogSetting {
  readonly enabled: boolean;
  readonly destination: TextLogDestination;
}

interface ThrottlingException {
  readonly retryAfterSeconds: number;
  readonly message: string;
}

interface TranscriptFilter {
  readonly lexTranscriptFilter: LexTranscriptFilter;
}

interface TranscriptSourceSetting {
  readonly s3BucketTranscriptSource: S3BucketTranscriptSource;
}

interface UntagResourceRequest {
  readonly resourceARN: string;
  readonly tagKeys: [];
}

interface UntagResourceResponse {
}

interface UpdateBotAliasRequest {
  readonly botAliasId: string;
  readonly botAliasName: string;
  readonly description: string;
  readonly botVersion: string;
  readonly botAliasLocaleSettings: {[key: string]: any};
  readonly conversationLogSettings: ConversationLogSettings;
  readonly sentimentAnalysisSettings: SentimentAnalysisSettings;
  readonly botId: string;
}

interface UpdateBotAliasResponse {
  readonly botAliasId: string;
  readonly botAliasName: string;
  readonly description: string;
  readonly botVersion: string;
  readonly botAliasLocaleSettings: {[key: string]: any};
  readonly conversationLogSettings: ConversationLogSettings;
  readonly sentimentAnalysisSettings: SentimentAnalysisSettings;
  readonly botAliasStatus: string;
  readonly botId: string;
  readonly creationDateTime: Date;
  readonly lastUpdatedDateTime: Date;
}

interface UpdateBotLocaleRequest {
  readonly botId: string;
  readonly botVersion: string;
  readonly localeId: string;
  readonly description: string;
  readonly nluIntentConfidenceThreshold: unknown;
  readonly voiceSettings: VoiceSettings;
}

interface UpdateBotLocaleResponse {
  readonly botId: string;
  readonly botVersion: string;
  readonly localeId: string;
  readonly localeName: string;
  readonly description: string;
  readonly nluIntentConfidenceThreshold: unknown;
  readonly voiceSettings: VoiceSettings;
  readonly botLocaleStatus: string;
  readonly failureReasons: [];
  readonly creationDateTime: Date;
  readonly lastUpdatedDateTime: Date;
  readonly recommendedActions: [];
}

interface UpdateBotRecommendationRequest {
  readonly botId: string;
  readonly botVersion: string;
  readonly localeId: string;
  readonly botRecommendationId: string;
  readonly encryptionSetting: EncryptionSetting;
}

interface UpdateBotRecommendationResponse {
  readonly botId: string;
  readonly botVersion: string;
  readonly localeId: string;
  readonly botRecommendationStatus: string;
  readonly botRecommendationId: string;
  readonly creationDateTime: Date;
  readonly lastUpdatedDateTime: Date;
  readonly transcriptSourceSetting: TranscriptSourceSetting;
  readonly encryptionSetting: EncryptionSetting;
}

interface UpdateBotRequest {
  readonly botId: string;
  readonly botName: string;
  readonly description: string;
  readonly roleArn: string;
  readonly dataPrivacy: DataPrivacy;
  readonly idleSessionTTLInSeconds: number;
}

interface UpdateBotResponse {
  readonly botId: string;
  readonly botName: string;
  readonly description: string;
  readonly roleArn: string;
  readonly dataPrivacy: DataPrivacy;
  readonly idleSessionTTLInSeconds: number;
  readonly botStatus: string;
  readonly creationDateTime: Date;
  readonly lastUpdatedDateTime: Date;
}

interface UpdateExportRequest {
  readonly exportId: string;
  readonly filePassword: string;
}

interface UpdateExportResponse {
  readonly exportId: string;
  readonly resourceSpecification: ExportResourceSpecification;
  readonly fileFormat: string;
  readonly exportStatus: string;
  readonly creationDateTime: Date;
  readonly lastUpdatedDateTime: Date;
}

interface UpdateIntentRequest {
  readonly intentId: string;
  readonly intentName: string;
  readonly description: string;
  readonly parentIntentSignature: string;
  readonly sampleUtterances: [];
  readonly dialogCodeHook: DialogCodeHookSettings;
  readonly fulfillmentCodeHook: FulfillmentCodeHookSettings;
  readonly slotPriorities: [];
  readonly intentConfirmationSetting: IntentConfirmationSetting;
  readonly intentClosingSetting: IntentClosingSetting;
  readonly inputContexts: [];
  readonly outputContexts: [];
  readonly kendraConfiguration: KendraConfiguration;
  readonly botId: string;
  readonly botVersion: string;
  readonly localeId: string;
}

interface UpdateIntentResponse {
  readonly intentId: string;
  readonly intentName: string;
  readonly description: string;
  readonly parentIntentSignature: string;
  readonly sampleUtterances: [];
  readonly dialogCodeHook: DialogCodeHookSettings;
  readonly fulfillmentCodeHook: FulfillmentCodeHookSettings;
  readonly slotPriorities: [];
  readonly intentConfirmationSetting: IntentConfirmationSetting;
  readonly intentClosingSetting: IntentClosingSetting;
  readonly inputContexts: [];
  readonly outputContexts: [];
  readonly kendraConfiguration: KendraConfiguration;
  readonly botId: string;
  readonly botVersion: string;
  readonly localeId: string;
  readonly creationDateTime: Date;
  readonly lastUpdatedDateTime: Date;
}

interface UpdateResourcePolicyRequest {
  readonly resourceArn: string;
  readonly policy: string;
  readonly expectedRevisionId: string;
}

interface UpdateResourcePolicyResponse {
  readonly resourceArn: string;
  readonly revisionId: string;
}

interface UpdateSlotRequest {
  readonly slotId: string;
  readonly slotName: string;
  readonly description: string;
  readonly slotTypeId: string;
  readonly valueElicitationSetting: SlotValueElicitationSetting;
  readonly obfuscationSetting: ObfuscationSetting;
  readonly botId: string;
  readonly botVersion: string;
  readonly localeId: string;
  readonly intentId: string;
  readonly multipleValuesSetting: MultipleValuesSetting;
}

interface UpdateSlotResponse {
  readonly slotId: string;
  readonly slotName: string;
  readonly description: string;
  readonly slotTypeId: string;
  readonly valueElicitationSetting: SlotValueElicitationSetting;
  readonly obfuscationSetting: ObfuscationSetting;
  readonly botId: string;
  readonly botVersion: string;
  readonly localeId: string;
  readonly intentId: string;
  readonly creationDateTime: Date;
  readonly lastUpdatedDateTime: Date;
  readonly multipleValuesSetting: MultipleValuesSetting;
}

interface UpdateSlotTypeRequest {
  readonly slotTypeId: string;
  readonly slotTypeName: string;
  readonly description: string;
  readonly slotTypeValues: [];
  readonly valueSelectionSetting: SlotValueSelectionSetting;
  readonly parentSlotTypeSignature: string;
  readonly botId: string;
  readonly botVersion: string;
  readonly localeId: string;
  readonly externalSourceSetting: ExternalSourceSetting;
}

interface UpdateSlotTypeResponse {
  readonly slotTypeId: string;
  readonly slotTypeName: string;
  readonly description: string;
  readonly slotTypeValues: [];
  readonly valueSelectionSetting: SlotValueSelectionSetting;
  readonly parentSlotTypeSignature: string;
  readonly botId: string;
  readonly botVersion: string;
  readonly localeId: string;
  readonly creationDateTime: Date;
  readonly lastUpdatedDateTime: Date;
  readonly externalSourceSetting: ExternalSourceSetting;
}

interface UtteranceAggregationDuration {
  readonly relativeAggregationDuration: RelativeAggregationDuration;
}

interface ValidationException {
  readonly message: string;
}

interface VoiceSettings {
  readonly voiceId: string;
  readonly engine: string;
}

interface WaitAndContinueSpecification {
  readonly waitingResponse: ResponseSpecification;
  readonly continueResponse: ResponseSpecification;
  readonly stillWaitingResponse: StillWaitingResponseSpecification;
  readonly active: boolean;
}

