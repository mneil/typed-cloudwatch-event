/**
 * STOP. This file is autogenerated. DO NOT EDIT by hand
 */
export interface CloseTunnel {
  readonly tunnelId: string;
  readonly delete: boolean;
}
export interface DescribeTunnel {
  readonly tunnelId: string;
}
export interface ListTagsForResource {
  readonly resourceArn: string;
}
export interface ListTunnels {
  readonly thingName: string;
  readonly maxResults: number;
  readonly nextToken: string;
}
export interface OpenTunnel {
  readonly description: string;
  readonly tags: [];
  readonly destinationConfig: DestinationConfig;
  readonly timeoutConfig: TimeoutConfig;
}
export interface TagResource {
  readonly resourceArn: string;
  readonly tags: [];
}
export interface UntagResource {
  readonly resourceArn: string;
  readonly tagKeys: [];
}



interface CloseTunnelRequest {
  readonly tunnelId: string;
  readonly delete: boolean;
}

interface CloseTunnelResponse {
}

interface ConnectionState {
  readonly status: string;
  readonly lastUpdatedAt: Date;
}

interface DescribeTunnelRequest {
  readonly tunnelId: string;
}

interface DescribeTunnelResponse {
  readonly tunnel: Tunnel;
}

interface DestinationConfig {
  readonly thingName: string;
  readonly services: [];
}

interface LimitExceededException {
  readonly message: string;
}

interface ListTagsForResourceRequest {
  readonly resourceArn: string;
}

interface ListTagsForResourceResponse {
  readonly tags: [];
}

interface ListTunnelsRequest {
  readonly thingName: string;
  readonly maxResults: number;
  readonly nextToken: string;
}

interface ListTunnelsResponse {
  readonly tunnelSummaries: [];
  readonly nextToken: string;
}

interface OpenTunnelRequest {
  readonly description: string;
  readonly tags: [];
  readonly destinationConfig: DestinationConfig;
  readonly timeoutConfig: TimeoutConfig;
}

interface OpenTunnelResponse {
  readonly tunnelId: string;
  readonly tunnelArn: string;
  readonly sourceAccessToken: string;
  readonly destinationAccessToken: string;
}

interface ResourceNotFoundException {
  readonly message: string;
}

interface Tag {
  readonly key: string;
  readonly value: string;
}

interface TagResourceRequest {
  readonly resourceArn: string;
  readonly tags: [];
}

interface TagResourceResponse {
}

interface TimeoutConfig {
  readonly maxLifetimeTimeoutMinutes: number;
}

interface Tunnel {
  readonly tunnelId: string;
  readonly tunnelArn: string;
  readonly status: string;
  readonly sourceConnectionState: ConnectionState;
  readonly destinationConnectionState: ConnectionState;
  readonly description: string;
  readonly destinationConfig: DestinationConfig;
  readonly timeoutConfig: TimeoutConfig;
  readonly tags: [];
  readonly createdAt: Date;
  readonly lastUpdatedAt: Date;
}

interface TunnelSummary {
  readonly tunnelId: string;
  readonly tunnelArn: string;
  readonly status: string;
  readonly description: string;
  readonly createdAt: Date;
  readonly lastUpdatedAt: Date;
}

interface UntagResourceRequest {
  readonly resourceArn: string;
  readonly tagKeys: [];
}

interface UntagResourceResponse {
}

