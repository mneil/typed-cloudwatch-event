/**
 * STOP. This file is autogenerated. DO NOT EDIT by hand
 */
export interface CancelJob {
  readonly jobArn: string;
}
export interface CancelQuantumTask {
  readonly clientToken: string;
  readonly quantumTaskArn: string;
}
export interface CreateJob {
  readonly algorithmSpecification: AlgorithmSpecification;
  readonly checkpointConfig?: JobCheckpointConfig;
  readonly clientToken: string;
  readonly deviceConfig: DeviceConfig;
  readonly hyperParameters?: {[key: string]: any};
  readonly inputDataConfig?: [];
  readonly instanceConfig: InstanceConfig;
  readonly jobName: string;
  readonly outputDataConfig: JobOutputDataConfig;
  readonly roleArn: string;
  readonly stoppingCondition?: JobStoppingCondition;
  readonly tags?: {[key: string]: any};
}
export interface CreateQuantumTask {
  readonly action: string;
  readonly clientToken: string;
  readonly deviceArn: string;
  readonly deviceParameters?: string;
  readonly jobToken?: string;
  readonly outputS3Bucket: string;
  readonly outputS3KeyPrefix: string;
  readonly shots: number;
  readonly tags?: {[key: string]: any};
}
export interface GetDevice {
  readonly deviceArn: string;
}
export interface GetJob {
  readonly jobArn: string;
}
export interface GetQuantumTask {
  readonly quantumTaskArn: string;
}
export interface ListTagsForResource {
  readonly resourceArn: string;
}
export interface SearchDevices {
  readonly filters: [];
  readonly maxResults?: number;
  readonly nextToken?: string;
}
export interface SearchJobs {
  readonly filters: [];
  readonly maxResults?: number;
  readonly nextToken?: string;
}
export interface SearchQuantumTasks {
  readonly filters: [];
  readonly maxResults?: number;
  readonly nextToken?: string;
}
export interface TagResource {
  readonly resourceArn: string;
  readonly tags: {[key: string]: any};
}
export interface UntagResource {
  readonly resourceArn: string;
  readonly tagKeys: [];
}



interface AccessDeniedException {
  readonly message: string;
}

interface AlgorithmSpecification {
  readonly containerImage: ContainerImage;
  readonly scriptModeConfig: ScriptModeConfig;
}

interface CancelJobRequest {
  readonly jobArn: string;
}

interface CancelJobResponse {
  readonly cancellationStatus: string;
  readonly jobArn: string;
}

interface CancelQuantumTaskRequest {
  readonly clientToken: string;
  readonly quantumTaskArn: string;
}

interface CancelQuantumTaskResponse {
  readonly cancellationStatus: string;
  readonly quantumTaskArn: string;
}

interface ConflictException {
  readonly message: string;
}

interface ContainerImage {
  readonly uri: string;
}

interface CreateJobRequest {
  readonly algorithmSpecification: AlgorithmSpecification;
  readonly checkpointConfig: JobCheckpointConfig;
  readonly clientToken: string;
  readonly deviceConfig: DeviceConfig;
  readonly hyperParameters: {[key: string]: any};
  readonly inputDataConfig: [];
  readonly instanceConfig: InstanceConfig;
  readonly jobName: string;
  readonly outputDataConfig: JobOutputDataConfig;
  readonly roleArn: string;
  readonly stoppingCondition: JobStoppingCondition;
  readonly tags: {[key: string]: any};
}

interface CreateJobResponse {
  readonly jobArn: string;
}

interface CreateQuantumTaskRequest {
  readonly action: string;
  readonly clientToken: string;
  readonly deviceArn: string;
  readonly deviceParameters: string;
  readonly jobToken: string;
  readonly outputS3Bucket: string;
  readonly outputS3KeyPrefix: string;
  readonly shots: number;
  readonly tags: {[key: string]: any};
}

interface CreateQuantumTaskResponse {
  readonly quantumTaskArn: string;
}

interface DataSource {
  readonly s3DataSource: S3DataSource;
}

interface DeviceConfig {
  readonly device: string;
}

interface DeviceOfflineException {
  readonly message: string;
}

interface DeviceRetiredException {
  readonly message: string;
}

interface DeviceSummary {
  readonly deviceArn: string;
  readonly deviceName: string;
  readonly deviceStatus: string;
  readonly deviceType: string;
  readonly providerName: string;
}

interface GetDeviceRequest {
  readonly deviceArn: string;
}

interface GetDeviceResponse {
  readonly deviceArn: string;
  readonly deviceCapabilities: string;
  readonly deviceName: string;
  readonly deviceStatus: string;
  readonly deviceType: string;
  readonly providerName: string;
}

interface GetJobRequest {
  readonly jobArn: string;
}

interface GetJobResponse {
  readonly algorithmSpecification: AlgorithmSpecification;
  readonly billableDuration: number;
  readonly checkpointConfig: JobCheckpointConfig;
  readonly createdAt: Date;
  readonly deviceConfig: DeviceConfig;
  readonly endedAt: Date;
  readonly events: [];
  readonly failureReason: string;
  readonly hyperParameters: {[key: string]: any};
  readonly inputDataConfig: [];
  readonly instanceConfig: InstanceConfig;
  readonly jobArn: string;
  readonly jobName: string;
  readonly outputDataConfig: JobOutputDataConfig;
  readonly roleArn: string;
  readonly startedAt: Date;
  readonly status: string;
  readonly stoppingCondition: JobStoppingCondition;
  readonly tags: {[key: string]: any};
}

interface GetQuantumTaskRequest {
  readonly quantumTaskArn: string;
}

interface GetQuantumTaskResponse {
  readonly createdAt: Date;
  readonly deviceArn: string;
  readonly deviceParameters: string;
  readonly endedAt: Date;
  readonly failureReason: string;
  readonly jobArn: string;
  readonly outputS3Bucket: string;
  readonly outputS3Directory: string;
  readonly quantumTaskArn: string;
  readonly shots: number;
  readonly status: string;
  readonly tags: {[key: string]: any};
}

interface InputFileConfig {
  readonly channelName: string;
  readonly contentType: string;
  readonly dataSource: DataSource;
}

interface InstanceConfig {
  readonly instanceType: string;
  readonly volumeSizeInGb: number;
}

interface InternalServiceException {
  readonly message: string;
}

interface JobCheckpointConfig {
  readonly localPath: string;
  readonly s3Uri: string;
}

interface JobEventDetails {
  readonly eventType: string;
  readonly message: string;
  readonly timeOfEvent: Date;
}

interface JobOutputDataConfig {
  readonly kmsKeyId: string;
  readonly s3Path: string;
}

interface JobStoppingCondition {
  readonly maxRuntimeInSeconds: number;
}

interface JobSummary {
  readonly createdAt: Date;
  readonly device: string;
  readonly endedAt: Date;
  readonly jobArn: string;
  readonly jobName: string;
  readonly startedAt: Date;
  readonly status: string;
  readonly tags: {[key: string]: any};
}

interface ListTagsForResourceRequest {
  readonly resourceArn: string;
}

interface ListTagsForResourceResponse {
  readonly tags: {[key: string]: any};
}

interface QuantumTaskSummary {
  readonly createdAt: Date;
  readonly deviceArn: string;
  readonly endedAt: Date;
  readonly outputS3Bucket: string;
  readonly outputS3Directory: string;
  readonly quantumTaskArn: string;
  readonly shots: number;
  readonly status: string;
  readonly tags: {[key: string]: any};
}

interface ResourceNotFoundException {
  readonly message: string;
}

interface S3DataSource {
  readonly s3Uri: string;
}

interface ScriptModeConfig {
  readonly compressionType: string;
  readonly entryPoint: string;
  readonly s3Uri: string;
}

interface SearchDevicesFilter {
  readonly name: string;
  readonly values: [];
}

interface SearchDevicesRequest {
  readonly filters: [];
  readonly maxResults: number;
  readonly nextToken: string;
}

interface SearchDevicesResponse {
  readonly devices: [];
  readonly nextToken: string;
}

interface SearchJobsFilter {
  readonly name: string;
  readonly operator: string;
  readonly values: [];
}

interface SearchJobsRequest {
  readonly filters: [];
  readonly maxResults: number;
  readonly nextToken: string;
}

interface SearchJobsResponse {
  readonly jobs: [];
  readonly nextToken: string;
}

interface SearchQuantumTasksFilter {
  readonly name: string;
  readonly operator: string;
  readonly values: [];
}

interface SearchQuantumTasksRequest {
  readonly filters: [];
  readonly maxResults: number;
  readonly nextToken: string;
}

interface SearchQuantumTasksResponse {
  readonly nextToken: string;
  readonly quantumTasks: [];
}

interface ServiceQuotaExceededException {
  readonly message: string;
}

interface TagResourceRequest {
  readonly resourceArn: string;
  readonly tags: {[key: string]: any};
}

interface TagResourceResponse {
}

interface ThrottlingException {
  readonly message: string;
}

interface UntagResourceRequest {
  readonly resourceArn: string;
  readonly tagKeys: [];
}

interface UntagResourceResponse {
}

interface ValidationException {
  readonly message: string;
}

