/**
 * STOP. This file is autogenerated. DO NOT EDIT by hand
 */
export interface AssociateBrowserSettings {
  readonly browserSettingsArn: string;
  readonly portalArn: string;
}

export interface AssociateNetworkSettings {
  readonly networkSettingsArn: string;
  readonly portalArn: string;
}

export interface AssociateTrustStore {
  readonly portalArn: string;
  readonly trustStoreArn: string;
}

export interface AssociateUserSettings {
  readonly portalArn: string;
  readonly userSettingsArn: string;
}

export interface CreateBrowserSettings {
  readonly additionalEncryptionContext?: {[key: string]: any};
  readonly browserPolicy: string;
  readonly clientToken?: string;
  readonly customerManagedKey?: string;
  readonly tags?: [];
}

export interface CreateIdentityProvider {
  readonly clientToken?: string;
  readonly identityProviderDetails: {[key: string]: any};
  readonly identityProviderName: string;
  readonly identityProviderType: string;
  readonly portalArn: string;
}

export interface CreateNetworkSettings {
  readonly clientToken?: string;
  readonly securityGroupIds: [];
  readonly subnetIds: [];
  readonly tags?: [];
  readonly vpcId: string;
}

export interface CreatePortal {
  readonly additionalEncryptionContext?: {[key: string]: any};
  readonly clientToken?: string;
  readonly customerManagedKey?: string;
  readonly displayName?: string;
  readonly tags?: [];
}

export interface CreateTrustStore {
  readonly certificateList: [];
  readonly clientToken?: string;
  readonly tags?: [];
}

export interface CreateUserSettings {
  readonly clientToken?: string;
  readonly copyAllowed: string;
  readonly downloadAllowed: string;
  readonly pasteAllowed: string;
  readonly printAllowed: string;
  readonly tags?: [];
  readonly uploadAllowed: string;
}

export interface DeleteBrowserSettings {
  readonly browserSettingsArn: string;
}

export interface DeleteIdentityProvider {
  readonly identityProviderArn: string;
}

export interface DeleteNetworkSettings {
  readonly networkSettingsArn: string;
}

export interface DeletePortal {
  readonly portalArn: string;
}

export interface DeleteTrustStore {
  readonly trustStoreArn: string;
}

export interface DeleteUserSettings {
  readonly userSettingsArn: string;
}

export interface DisassociateBrowserSettings {
  readonly portalArn: string;
}

export interface DisassociateNetworkSettings {
  readonly portalArn: string;
}

export interface DisassociateTrustStore {
  readonly portalArn: string;
}

export interface DisassociateUserSettings {
  readonly portalArn: string;
}

export interface GetBrowserSettings {
  readonly browserSettingsArn: string;
}

export interface GetIdentityProvider {
  readonly identityProviderArn: string;
}

export interface GetNetworkSettings {
  readonly networkSettingsArn: string;
}

export interface GetPortal {
  readonly portalArn: string;
}

export interface GetPortalServiceProviderMetadata {
  readonly portalArn: string;
}

export interface GetTrustStore {
  readonly trustStoreArn: string;
}

export interface GetTrustStoreCertificate {
  readonly thumbprint: string;
  readonly trustStoreArn: string;
}

export interface GetUserSettings {
  readonly userSettingsArn: string;
}

export interface ListBrowserSettings {
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface ListIdentityProviders {
  readonly maxResults?: number;
  readonly nextToken?: string;
  readonly portalArn: string;
}

export interface ListNetworkSettings {
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface ListPortals {
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface ListTagsForResource {
  readonly resourceArn: string;
}

export interface ListTrustStoreCertificates {
  readonly maxResults?: number;
  readonly nextToken?: string;
  readonly trustStoreArn: string;
}

export interface ListTrustStores {
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface ListUserSettings {
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface TagResource {
  readonly clientToken?: string;
  readonly resourceArn: string;
  readonly tags: [];
}

export interface UntagResource {
  readonly resourceArn: string;
  readonly tagKeys: [];
}

export interface UpdateBrowserSettings {
  readonly browserPolicy?: string;
  readonly browserSettingsArn: string;
  readonly clientToken?: string;
}

export interface UpdateIdentityProvider {
  readonly clientToken?: string;
  readonly identityProviderArn: string;
  readonly identityProviderDetails?: {[key: string]: any};
  readonly identityProviderName?: string;
  readonly identityProviderType?: string;
}

export interface UpdateNetworkSettings {
  readonly clientToken?: string;
  readonly networkSettingsArn: string;
  readonly securityGroupIds?: [];
  readonly subnetIds?: [];
  readonly vpcId?: string;
}

export interface UpdatePortal {
  readonly displayName?: string;
  readonly portalArn: string;
}

export interface UpdateTrustStore {
  readonly certificatesToAdd?: [];
  readonly certificatesToDelete?: [];
  readonly clientToken?: string;
  readonly trustStoreArn: string;
}

export interface UpdateUserSettings {
  readonly clientToken?: string;
  readonly copyAllowed?: string;
  readonly downloadAllowed?: string;
  readonly pasteAllowed?: string;
  readonly printAllowed?: string;
  readonly uploadAllowed?: string;
  readonly userSettingsArn: string;
}

export interface AccessDeniedException {
  readonly message?: string;
}

export interface AssociateBrowserSettingsRequest {
  readonly browserSettingsArn: string;
  readonly portalArn: string;
}

export interface AssociateBrowserSettingsResponse {
  readonly browserSettingsArn: string;
  readonly portalArn: string;
}

export interface AssociateNetworkSettingsRequest {
  readonly networkSettingsArn: string;
  readonly portalArn: string;
}

export interface AssociateNetworkSettingsResponse {
  readonly networkSettingsArn: string;
  readonly portalArn: string;
}

export interface AssociateTrustStoreRequest {
  readonly portalArn: string;
  readonly trustStoreArn: string;
}

export interface AssociateTrustStoreResponse {
  readonly portalArn: string;
  readonly trustStoreArn: string;
}

export interface AssociateUserSettingsRequest {
  readonly portalArn: string;
  readonly userSettingsArn: string;
}

export interface AssociateUserSettingsResponse {
  readonly portalArn: string;
  readonly userSettingsArn: string;
}

export interface BrowserSettings {
  readonly associatedPortalArns?: [];
  readonly browserPolicy?: string;
  readonly browserSettingsArn: string;
}

export interface BrowserSettingsSummary {
  readonly browserSettingsArn?: string;
}

export interface Certificate {
  readonly body?: unknown;
  readonly issuer?: string;
  readonly notValidAfter?: Date;
  readonly notValidBefore?: Date;
  readonly subject?: string;
  readonly thumbprint?: string;
}

export interface CertificateSummary {
  readonly issuer?: string;
  readonly notValidAfter?: Date;
  readonly notValidBefore?: Date;
  readonly subject?: string;
  readonly thumbprint?: string;
}

export interface ConflictException {
  readonly message?: string;
  readonly resourceId?: string;
  readonly resourceType?: string;
}

export interface CreateBrowserSettingsRequest {
  readonly additionalEncryptionContext?: {[key: string]: any};
  readonly browserPolicy: string;
  readonly clientToken?: string;
  readonly customerManagedKey?: string;
  readonly tags?: [];
}

export interface CreateBrowserSettingsResponse {
  readonly browserSettingsArn: string;
}

export interface CreateIdentityProviderRequest {
  readonly clientToken?: string;
  readonly identityProviderDetails: {[key: string]: any};
  readonly identityProviderName: string;
  readonly identityProviderType: string;
  readonly portalArn: string;
}

export interface CreateIdentityProviderResponse {
  readonly identityProviderArn: string;
}

export interface CreateNetworkSettingsRequest {
  readonly clientToken?: string;
  readonly securityGroupIds: [];
  readonly subnetIds: [];
  readonly tags?: [];
  readonly vpcId: string;
}

export interface CreateNetworkSettingsResponse {
  readonly networkSettingsArn: string;
}

export interface CreatePortalRequest {
  readonly additionalEncryptionContext?: {[key: string]: any};
  readonly clientToken?: string;
  readonly customerManagedKey?: string;
  readonly displayName?: string;
  readonly tags?: [];
}

export interface CreatePortalResponse {
  readonly portalArn: string;
  readonly portalEndpoint: string;
}

export interface CreateTrustStoreRequest {
  readonly certificateList: [];
  readonly clientToken?: string;
  readonly tags?: [];
}

export interface CreateTrustStoreResponse {
  readonly trustStoreArn: string;
}

export interface CreateUserSettingsRequest {
  readonly clientToken?: string;
  readonly copyAllowed: string;
  readonly downloadAllowed: string;
  readonly pasteAllowed: string;
  readonly printAllowed: string;
  readonly tags?: [];
  readonly uploadAllowed: string;
}

export interface CreateUserSettingsResponse {
  readonly userSettingsArn: string;
}

export interface DeleteBrowserSettingsRequest {
  readonly browserSettingsArn: string;
}

export interface DeleteBrowserSettingsResponse {
}

export interface DeleteIdentityProviderRequest {
  readonly identityProviderArn: string;
}

export interface DeleteIdentityProviderResponse {
}

export interface DeleteNetworkSettingsRequest {
  readonly networkSettingsArn: string;
}

export interface DeleteNetworkSettingsResponse {
}

export interface DeletePortalRequest {
  readonly portalArn: string;
}

export interface DeletePortalResponse {
}

export interface DeleteTrustStoreRequest {
  readonly trustStoreArn: string;
}

export interface DeleteTrustStoreResponse {
}

export interface DeleteUserSettingsRequest {
  readonly userSettingsArn: string;
}

export interface DeleteUserSettingsResponse {
}

export interface DisassociateBrowserSettingsRequest {
  readonly portalArn: string;
}

export interface DisassociateBrowserSettingsResponse {
}

export interface DisassociateNetworkSettingsRequest {
  readonly portalArn: string;
}

export interface DisassociateNetworkSettingsResponse {
}

export interface DisassociateTrustStoreRequest {
  readonly portalArn: string;
}

export interface DisassociateTrustStoreResponse {
}

export interface DisassociateUserSettingsRequest {
  readonly portalArn: string;
}

export interface DisassociateUserSettingsResponse {
}

export interface GetBrowserSettingsRequest {
  readonly browserSettingsArn: string;
}

export interface GetBrowserSettingsResponse {
  readonly browserSettings?: BrowserSettings;
}

export interface GetIdentityProviderRequest {
  readonly identityProviderArn: string;
}

export interface GetIdentityProviderResponse {
  readonly identityProvider?: IdentityProvider;
}

export interface GetNetworkSettingsRequest {
  readonly networkSettingsArn: string;
}

export interface GetNetworkSettingsResponse {
  readonly networkSettings?: NetworkSettings;
}

export interface GetPortalRequest {
  readonly portalArn: string;
}

export interface GetPortalResponse {
  readonly portal?: Portal;
}

export interface GetPortalServiceProviderMetadataRequest {
  readonly portalArn: string;
}

export interface GetPortalServiceProviderMetadataResponse {
  readonly portalArn: string;
  readonly serviceProviderSamlMetadata?: string;
}

export interface GetTrustStoreCertificateRequest {
  readonly thumbprint: string;
  readonly trustStoreArn: string;
}

export interface GetTrustStoreCertificateResponse {
  readonly certificate?: Certificate;
  readonly trustStoreArn?: string;
}

export interface GetTrustStoreRequest {
  readonly trustStoreArn: string;
}

export interface GetTrustStoreResponse {
  readonly trustStore?: TrustStore;
}

export interface GetUserSettingsRequest {
  readonly userSettingsArn: string;
}

export interface GetUserSettingsResponse {
  readonly userSettings?: UserSettings;
}

export interface IdentityProvider {
  readonly identityProviderArn: string;
  readonly identityProviderDetails?: {[key: string]: any};
  readonly identityProviderName?: string;
  readonly identityProviderType?: string;
}

export interface IdentityProviderSummary {
  readonly identityProviderArn?: string;
  readonly identityProviderName?: string;
  readonly identityProviderType?: string;
}

export interface InternalServerException {
  readonly message?: string;
  readonly retryAfterSeconds?: number;
}

export interface ListBrowserSettingsRequest {
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface ListBrowserSettingsResponse {
  readonly browserSettings?: [];
  readonly nextToken?: string;
}

export interface ListIdentityProvidersRequest {
  readonly maxResults?: number;
  readonly nextToken?: string;
  readonly portalArn: string;
}

export interface ListIdentityProvidersResponse {
  readonly identityProviders?: [];
  readonly nextToken?: string;
}

export interface ListNetworkSettingsRequest {
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface ListNetworkSettingsResponse {
  readonly networkSettings?: [];
  readonly nextToken?: string;
}

export interface ListPortalsRequest {
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface ListPortalsResponse {
  readonly nextToken?: string;
  readonly portals?: [];
}

export interface ListTagsForResourceRequest {
  readonly resourceArn: string;
}

export interface ListTagsForResourceResponse {
  readonly tags?: [];
}

export interface ListTrustStoreCertificatesRequest {
  readonly maxResults?: number;
  readonly nextToken?: string;
  readonly trustStoreArn: string;
}

export interface ListTrustStoreCertificatesResponse {
  readonly certificateList?: [];
  readonly nextToken?: string;
  readonly trustStoreArn?: string;
}

export interface ListTrustStoresRequest {
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface ListTrustStoresResponse {
  readonly nextToken?: string;
  readonly trustStores?: [];
}

export interface ListUserSettingsRequest {
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface ListUserSettingsResponse {
  readonly nextToken?: string;
  readonly userSettings?: [];
}

export interface NetworkSettings {
  readonly associatedPortalArns?: [];
  readonly networkSettingsArn: string;
  readonly securityGroupIds?: [];
  readonly subnetIds?: [];
  readonly vpcId?: string;
}

export interface NetworkSettingsSummary {
  readonly networkSettingsArn?: string;
  readonly vpcId?: string;
}

export interface Portal {
  readonly browserSettingsArn?: string;
  readonly browserType?: string;
  readonly creationDate?: Date;
  readonly displayName?: string;
  readonly networkSettingsArn?: string;
  readonly portalArn?: string;
  readonly portalEndpoint?: string;
  readonly portalStatus?: string;
  readonly rendererType?: string;
  readonly statusReason?: string;
  readonly trustStoreArn?: string;
  readonly userSettingsArn?: string;
}

export interface PortalSummary {
  readonly browserSettingsArn?: string;
  readonly browserType?: string;
  readonly creationDate?: Date;
  readonly displayName?: string;
  readonly networkSettingsArn?: string;
  readonly portalArn?: string;
  readonly portalEndpoint?: string;
  readonly portalStatus?: string;
  readonly rendererType?: string;
  readonly trustStoreArn?: string;
  readonly userSettingsArn?: string;
}

export interface ResourceNotFoundException {
  readonly message?: string;
  readonly resourceId?: string;
  readonly resourceType?: string;
}

export interface ServiceQuotaExceededException {
  readonly message?: string;
  readonly quotaCode?: string;
  readonly resourceId?: string;
  readonly resourceType?: string;
  readonly serviceCode?: string;
}

export interface Tag {
  readonly Key: string;
  readonly Value: string;
}

export interface TagResourceRequest {
  readonly clientToken?: string;
  readonly resourceArn: string;
  readonly tags: [];
}

export interface TagResourceResponse {
}

export interface ThrottlingException {
  readonly message?: string;
  readonly quotaCode?: string;
  readonly retryAfterSeconds?: number;
  readonly serviceCode?: string;
}

export interface TooManyTagsException {
  readonly message?: string;
  readonly resourceName?: string;
}

export interface TrustStore {
  readonly associatedPortalArns?: [];
  readonly trustStoreArn?: string;
}

export interface TrustStoreSummary {
  readonly trustStoreArn?: string;
}

export interface UntagResourceRequest {
  readonly resourceArn: string;
  readonly tagKeys: [];
}

export interface UntagResourceResponse {
}

export interface UpdateBrowserSettingsRequest {
  readonly browserPolicy?: string;
  readonly browserSettingsArn: string;
  readonly clientToken?: string;
}

export interface UpdateBrowserSettingsResponse {
  readonly browserSettings: BrowserSettings;
}

export interface UpdateIdentityProviderRequest {
  readonly clientToken?: string;
  readonly identityProviderArn: string;
  readonly identityProviderDetails?: {[key: string]: any};
  readonly identityProviderName?: string;
  readonly identityProviderType?: string;
}

export interface UpdateIdentityProviderResponse {
  readonly identityProvider: IdentityProvider;
}

export interface UpdateNetworkSettingsRequest {
  readonly clientToken?: string;
  readonly networkSettingsArn: string;
  readonly securityGroupIds?: [];
  readonly subnetIds?: [];
  readonly vpcId?: string;
}

export interface UpdateNetworkSettingsResponse {
  readonly networkSettings: NetworkSettings;
}

export interface UpdatePortalRequest {
  readonly displayName?: string;
  readonly portalArn: string;
}

export interface UpdatePortalResponse {
  readonly portal?: Portal;
}

export interface UpdateTrustStoreRequest {
  readonly certificatesToAdd?: [];
  readonly certificatesToDelete?: [];
  readonly clientToken?: string;
  readonly trustStoreArn: string;
}

export interface UpdateTrustStoreResponse {
  readonly trustStoreArn: string;
}

export interface UpdateUserSettingsRequest {
  readonly clientToken?: string;
  readonly copyAllowed?: string;
  readonly downloadAllowed?: string;
  readonly pasteAllowed?: string;
  readonly printAllowed?: string;
  readonly uploadAllowed?: string;
  readonly userSettingsArn: string;
}

export interface UpdateUserSettingsResponse {
  readonly userSettings: UserSettings;
}

export interface UserSettings {
  readonly associatedPortalArns?: [];
  readonly copyAllowed?: string;
  readonly downloadAllowed?: string;
  readonly pasteAllowed?: string;
  readonly printAllowed?: string;
  readonly uploadAllowed?: string;
  readonly userSettingsArn: string;
}

export interface UserSettingsSummary {
  readonly copyAllowed?: string;
  readonly downloadAllowed?: string;
  readonly pasteAllowed?: string;
  readonly printAllowed?: string;
  readonly uploadAllowed?: string;
  readonly userSettingsArn?: string;
}

export interface ValidationException {
  readonly fieldList?: [];
  readonly message?: string;
  readonly reason?: string;
}

export interface ValidationExceptionField {
  readonly message: string;
  readonly name: string;
}


