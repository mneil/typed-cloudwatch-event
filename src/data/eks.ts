/**
 * STOP. This file is autogenerated. DO NOT EDIT by hand
 */
export interface AssociateEncryptionConfig {
  readonly clusterName: string;
  readonly encryptionConfig: [];
  readonly clientRequestToken: string;
}
export interface AssociateIdentityProviderConfig {
  readonly clusterName: string;
  readonly oidc: OidcIdentityProviderConfigRequest;
  readonly tags: {[key: string]: any};
  readonly clientRequestToken: string;
}
export interface CreateAddon {
  readonly clusterName: string;
  readonly addonName: string;
  readonly addonVersion: string;
  readonly serviceAccountRoleArn: string;
  readonly resolveConflicts: string;
  readonly clientRequestToken: string;
  readonly tags: {[key: string]: any};
}
export interface CreateCluster {
  readonly name: string;
  readonly version: string;
  readonly roleArn: string;
  readonly resourcesVpcConfig: VpcConfigRequest;
  readonly kubernetesNetworkConfig: KubernetesNetworkConfigRequest;
  readonly logging: Logging;
  readonly clientRequestToken: string;
  readonly tags: {[key: string]: any};
  readonly encryptionConfig: [];
}
export interface CreateFargateProfile {
  readonly fargateProfileName: string;
  readonly clusterName: string;
  readonly podExecutionRoleArn: string;
  readonly subnets: [];
  readonly selectors: [];
  readonly clientRequestToken: string;
  readonly tags: {[key: string]: any};
}
export interface CreateNodegroup {
  readonly clusterName: string;
  readonly nodegroupName: string;
  readonly scalingConfig: NodegroupScalingConfig;
  readonly diskSize: number;
  readonly subnets: [];
  readonly instanceTypes: [];
  readonly amiType: string;
  readonly remoteAccess: RemoteAccessConfig;
  readonly nodeRole: string;
  readonly labels: {[key: string]: any};
  readonly taints: [];
  readonly tags: {[key: string]: any};
  readonly clientRequestToken: string;
  readonly launchTemplate: LaunchTemplateSpecification;
  readonly updateConfig: NodegroupUpdateConfig;
  readonly capacityType: string;
  readonly version: string;
  readonly releaseVersion: string;
}
export interface DeleteAddon {
  readonly clusterName: string;
  readonly addonName: string;
  readonly preserve: boolean;
}
export interface DeleteCluster {
  readonly name: string;
}
export interface DeleteFargateProfile {
  readonly clusterName: string;
  readonly fargateProfileName: string;
}
export interface DeleteNodegroup {
  readonly clusterName: string;
  readonly nodegroupName: string;
}
export interface DeregisterCluster {
  readonly name: string;
}
export interface DescribeAddon {
  readonly clusterName: string;
  readonly addonName: string;
}
export interface DescribeAddonVersions {
  readonly kubernetesVersion: string;
  readonly maxResults: number;
  readonly nextToken: string;
  readonly addonName: string;
}
export interface DescribeCluster {
  readonly name: string;
}
export interface DescribeFargateProfile {
  readonly clusterName: string;
  readonly fargateProfileName: string;
}
export interface DescribeIdentityProviderConfig {
  readonly clusterName: string;
  readonly identityProviderConfig: IdentityProviderConfig;
}
export interface DescribeNodegroup {
  readonly clusterName: string;
  readonly nodegroupName: string;
}
export interface DescribeUpdate {
  readonly name: string;
  readonly updateId: string;
  readonly nodegroupName: string;
  readonly addonName: string;
}
export interface DisassociateIdentityProviderConfig {
  readonly clusterName: string;
  readonly identityProviderConfig: IdentityProviderConfig;
  readonly clientRequestToken: string;
}
export interface ListAddons {
  readonly clusterName: string;
  readonly maxResults: number;
  readonly nextToken: string;
}
export interface ListClusters {
  readonly maxResults: number;
  readonly nextToken: string;
  readonly include: [];
}
export interface ListFargateProfiles {
  readonly clusterName: string;
  readonly maxResults: number;
  readonly nextToken: string;
}
export interface ListIdentityProviderConfigs {
  readonly clusterName: string;
  readonly maxResults: number;
  readonly nextToken: string;
}
export interface ListNodegroups {
  readonly clusterName: string;
  readonly maxResults: number;
  readonly nextToken: string;
}
export interface ListTagsForResource {
  readonly resourceArn: string;
}
export interface ListUpdates {
  readonly name: string;
  readonly nodegroupName: string;
  readonly addonName: string;
  readonly nextToken: string;
  readonly maxResults: number;
}
export interface RegisterCluster {
  readonly name: string;
  readonly connectorConfig: ConnectorConfigRequest;
  readonly clientRequestToken: string;
  readonly tags: {[key: string]: any};
}
export interface TagResource {
  readonly resourceArn: string;
  readonly tags: {[key: string]: any};
}
export interface UntagResource {
  readonly resourceArn: string;
  readonly tagKeys: [];
}
export interface UpdateAddon {
  readonly clusterName: string;
  readonly addonName: string;
  readonly addonVersion: string;
  readonly serviceAccountRoleArn: string;
  readonly resolveConflicts: string;
  readonly clientRequestToken: string;
}
export interface UpdateClusterConfig {
  readonly name: string;
  readonly resourcesVpcConfig: VpcConfigRequest;
  readonly logging: Logging;
  readonly clientRequestToken: string;
}
export interface UpdateClusterVersion {
  readonly name: string;
  readonly version: string;
  readonly clientRequestToken: string;
}
export interface UpdateNodegroupConfig {
  readonly clusterName: string;
  readonly nodegroupName: string;
  readonly labels: UpdateLabelsPayload;
  readonly taints: UpdateTaintsPayload;
  readonly scalingConfig: NodegroupScalingConfig;
  readonly updateConfig: NodegroupUpdateConfig;
  readonly clientRequestToken: string;
}
export interface UpdateNodegroupVersion {
  readonly clusterName: string;
  readonly nodegroupName: string;
  readonly version: string;
  readonly releaseVersion: string;
  readonly launchTemplate: LaunchTemplateSpecification;
  readonly force: boolean;
  readonly clientRequestToken: string;
}



interface AccessDeniedException {
  readonly message: string;
}

interface Addon {
  readonly addonName: string;
  readonly clusterName: string;
  readonly status: string;
  readonly addonVersion: string;
  readonly health: AddonHealth;
  readonly addonArn: string;
  readonly createdAt: Date;
  readonly modifiedAt: Date;
  readonly serviceAccountRoleArn: string;
  readonly tags: {[key: string]: any};
}

interface AddonHealth {
  readonly issues: [];
}

interface AddonInfo {
  readonly addonName: string;
  readonly type: string;
  readonly addonVersions: [];
}

interface AddonIssue {
  readonly code: string;
  readonly message: string;
  readonly resourceIds: [];
}

interface AddonVersionInfo {
  readonly addonVersion: string;
  readonly architecture: [];
  readonly compatibilities: [];
}

interface AssociateEncryptionConfigRequest {
  readonly clusterName: string;
  readonly encryptionConfig: [];
  readonly clientRequestToken: string;
}

interface AssociateEncryptionConfigResponse {
  readonly update: Update;
}

interface AssociateIdentityProviderConfigRequest {
  readonly clusterName: string;
  readonly oidc: OidcIdentityProviderConfigRequest;
  readonly tags: {[key: string]: any};
  readonly clientRequestToken: string;
}

interface AssociateIdentityProviderConfigResponse {
  readonly update: Update;
  readonly tags: {[key: string]: any};
}

interface AutoScalingGroup {
  readonly name: string;
}

interface BadRequestException {
  readonly message: string;
}

interface Certificate {
  readonly data: string;
}

interface ClientException {
  readonly clusterName: string;
  readonly nodegroupName: string;
  readonly addonName: string;
  readonly message: string;
}

interface Cluster {
  readonly name: string;
  readonly arn: string;
  readonly createdAt: Date;
  readonly version: string;
  readonly endpoint: string;
  readonly roleArn: string;
  readonly resourcesVpcConfig: VpcConfigResponse;
  readonly kubernetesNetworkConfig: KubernetesNetworkConfigResponse;
  readonly logging: Logging;
  readonly identity: Identity;
  readonly status: string;
  readonly certificateAuthority: Certificate;
  readonly clientRequestToken: string;
  readonly platformVersion: string;
  readonly tags: {[key: string]: any};
  readonly encryptionConfig: [];
  readonly connectorConfig: ConnectorConfigResponse;
}

interface Compatibility {
  readonly clusterVersion: string;
  readonly platformVersions: [];
  readonly defaultVersion: boolean;
}

interface ConnectorConfigRequest {
  readonly roleArn: string;
  readonly provider: string;
}

interface ConnectorConfigResponse {
  readonly activationId: string;
  readonly activationCode: string;
  readonly activationExpiry: Date;
  readonly provider: string;
  readonly roleArn: string;
}

interface CreateAddonRequest {
  readonly clusterName: string;
  readonly addonName: string;
  readonly addonVersion: string;
  readonly serviceAccountRoleArn: string;
  readonly resolveConflicts: string;
  readonly clientRequestToken: string;
  readonly tags: {[key: string]: any};
}

interface CreateAddonResponse {
  readonly addon: Addon;
}

interface CreateClusterRequest {
  readonly name: string;
  readonly version: string;
  readonly roleArn: string;
  readonly resourcesVpcConfig: VpcConfigRequest;
  readonly kubernetesNetworkConfig: KubernetesNetworkConfigRequest;
  readonly logging: Logging;
  readonly clientRequestToken: string;
  readonly tags: {[key: string]: any};
  readonly encryptionConfig: [];
}

interface CreateClusterResponse {
  readonly cluster: Cluster;
}

interface CreateFargateProfileRequest {
  readonly fargateProfileName: string;
  readonly clusterName: string;
  readonly podExecutionRoleArn: string;
  readonly subnets: [];
  readonly selectors: [];
  readonly clientRequestToken: string;
  readonly tags: {[key: string]: any};
}

interface CreateFargateProfileResponse {
  readonly fargateProfile: FargateProfile;
}

interface CreateNodegroupRequest {
  readonly clusterName: string;
  readonly nodegroupName: string;
  readonly scalingConfig: NodegroupScalingConfig;
  readonly diskSize: number;
  readonly subnets: [];
  readonly instanceTypes: [];
  readonly amiType: string;
  readonly remoteAccess: RemoteAccessConfig;
  readonly nodeRole: string;
  readonly labels: {[key: string]: any};
  readonly taints: [];
  readonly tags: {[key: string]: any};
  readonly clientRequestToken: string;
  readonly launchTemplate: LaunchTemplateSpecification;
  readonly updateConfig: NodegroupUpdateConfig;
  readonly capacityType: string;
  readonly version: string;
  readonly releaseVersion: string;
}

interface CreateNodegroupResponse {
  readonly nodegroup: Nodegroup;
}

interface DeleteAddonRequest {
  readonly clusterName: string;
  readonly addonName: string;
  readonly preserve: boolean;
}

interface DeleteAddonResponse {
  readonly addon: Addon;
}

interface DeleteClusterRequest {
  readonly name: string;
}

interface DeleteClusterResponse {
  readonly cluster: Cluster;
}

interface DeleteFargateProfileRequest {
  readonly clusterName: string;
  readonly fargateProfileName: string;
}

interface DeleteFargateProfileResponse {
  readonly fargateProfile: FargateProfile;
}

interface DeleteNodegroupRequest {
  readonly clusterName: string;
  readonly nodegroupName: string;
}

interface DeleteNodegroupResponse {
  readonly nodegroup: Nodegroup;
}

interface DeregisterClusterRequest {
  readonly name: string;
}

interface DeregisterClusterResponse {
  readonly cluster: Cluster;
}

interface DescribeAddonRequest {
  readonly clusterName: string;
  readonly addonName: string;
}

interface DescribeAddonResponse {
  readonly addon: Addon;
}

interface DescribeAddonVersionsRequest {
  readonly kubernetesVersion: string;
  readonly maxResults: number;
  readonly nextToken: string;
  readonly addonName: string;
}

interface DescribeAddonVersionsResponse {
  readonly addons: [];
  readonly nextToken: string;
}

interface DescribeClusterRequest {
  readonly name: string;
}

interface DescribeClusterResponse {
  readonly cluster: Cluster;
}

interface DescribeFargateProfileRequest {
  readonly clusterName: string;
  readonly fargateProfileName: string;
}

interface DescribeFargateProfileResponse {
  readonly fargateProfile: FargateProfile;
}

interface DescribeIdentityProviderConfigRequest {
  readonly clusterName: string;
  readonly identityProviderConfig: IdentityProviderConfig;
}

interface DescribeIdentityProviderConfigResponse {
  readonly identityProviderConfig: IdentityProviderConfigResponse;
}

interface DescribeNodegroupRequest {
  readonly clusterName: string;
  readonly nodegroupName: string;
}

interface DescribeNodegroupResponse {
  readonly nodegroup: Nodegroup;
}

interface DescribeUpdateRequest {
  readonly name: string;
  readonly updateId: string;
  readonly nodegroupName: string;
  readonly addonName: string;
}

interface DescribeUpdateResponse {
  readonly update: Update;
}

interface DisassociateIdentityProviderConfigRequest {
  readonly clusterName: string;
  readonly identityProviderConfig: IdentityProviderConfig;
  readonly clientRequestToken: string;
}

interface DisassociateIdentityProviderConfigResponse {
  readonly update: Update;
}

interface EncryptionConfig {
  readonly resources: [];
  readonly provider: Provider;
}

interface ErrorDetail {
  readonly errorCode: string;
  readonly errorMessage: string;
  readonly resourceIds: [];
}

interface FargateProfile {
  readonly fargateProfileName: string;
  readonly fargateProfileArn: string;
  readonly clusterName: string;
  readonly createdAt: Date;
  readonly podExecutionRoleArn: string;
  readonly subnets: [];
  readonly selectors: [];
  readonly status: string;
  readonly tags: {[key: string]: any};
}

interface FargateProfileSelector {
  readonly namespace: string;
  readonly labels: {[key: string]: any};
}

interface Identity {
  readonly oidc: OIDC;
}

interface IdentityProviderConfig {
  readonly type: string;
  readonly name: string;
}

interface IdentityProviderConfigResponse {
  readonly oidc: OidcIdentityProviderConfig;
}

interface InvalidParameterException {
  readonly clusterName: string;
  readonly nodegroupName: string;
  readonly fargateProfileName: string;
  readonly addonName: string;
  readonly message: string;
}

interface InvalidRequestException {
  readonly clusterName: string;
  readonly nodegroupName: string;
  readonly addonName: string;
  readonly message: string;
}

interface Issue {
  readonly code: string;
  readonly message: string;
  readonly resourceIds: [];
}

interface KubernetesNetworkConfigRequest {
  readonly serviceIpv4Cidr: string;
}

interface KubernetesNetworkConfigResponse {
  readonly serviceIpv4Cidr: string;
}

interface LaunchTemplateSpecification {
  readonly name: string;
  readonly version: string;
  readonly id: string;
}

interface ListAddonsRequest {
  readonly clusterName: string;
  readonly maxResults: number;
  readonly nextToken: string;
}

interface ListAddonsResponse {
  readonly addons: [];
  readonly nextToken: string;
}

interface ListClustersRequest {
  readonly maxResults: number;
  readonly nextToken: string;
  readonly include: [];
}

interface ListClustersResponse {
  readonly clusters: [];
  readonly nextToken: string;
}

interface ListFargateProfilesRequest {
  readonly clusterName: string;
  readonly maxResults: number;
  readonly nextToken: string;
}

interface ListFargateProfilesResponse {
  readonly fargateProfileNames: [];
  readonly nextToken: string;
}

interface ListIdentityProviderConfigsRequest {
  readonly clusterName: string;
  readonly maxResults: number;
  readonly nextToken: string;
}

interface ListIdentityProviderConfigsResponse {
  readonly identityProviderConfigs: [];
  readonly nextToken: string;
}

interface ListNodegroupsRequest {
  readonly clusterName: string;
  readonly maxResults: number;
  readonly nextToken: string;
}

interface ListNodegroupsResponse {
  readonly nodegroups: [];
  readonly nextToken: string;
}

interface ListTagsForResourceRequest {
  readonly resourceArn: string;
}

interface ListTagsForResourceResponse {
  readonly tags: {[key: string]: any};
}

interface ListUpdatesRequest {
  readonly name: string;
  readonly nodegroupName: string;
  readonly addonName: string;
  readonly nextToken: string;
  readonly maxResults: number;
}

interface ListUpdatesResponse {
  readonly updateIds: [];
  readonly nextToken: string;
}

interface LogSetup {
  readonly types: [];
  readonly enabled: boolean;
}

interface Logging {
  readonly clusterLogging: [];
}

interface Nodegroup {
  readonly nodegroupName: string;
  readonly nodegroupArn: string;
  readonly clusterName: string;
  readonly version: string;
  readonly releaseVersion: string;
  readonly createdAt: Date;
  readonly modifiedAt: Date;
  readonly status: string;
  readonly capacityType: string;
  readonly scalingConfig: NodegroupScalingConfig;
  readonly instanceTypes: [];
  readonly subnets: [];
  readonly remoteAccess: RemoteAccessConfig;
  readonly amiType: string;
  readonly nodeRole: string;
  readonly labels: {[key: string]: any};
  readonly taints: [];
  readonly resources: NodegroupResources;
  readonly diskSize: number;
  readonly health: NodegroupHealth;
  readonly updateConfig: NodegroupUpdateConfig;
  readonly launchTemplate: LaunchTemplateSpecification;
  readonly tags: {[key: string]: any};
}

interface NodegroupHealth {
  readonly issues: [];
}

interface NodegroupResources {
  readonly autoScalingGroups: [];
  readonly remoteAccessSecurityGroup: string;
}

interface NodegroupScalingConfig {
  readonly minSize: number;
  readonly maxSize: number;
  readonly desiredSize: number;
}

interface NodegroupUpdateConfig {
  readonly maxUnavailable: number;
  readonly maxUnavailablePercentage: number;
}

interface NotFoundException {
  readonly message: string;
}

interface OIDC {
  readonly issuer: string;
}

interface OidcIdentityProviderConfig {
  readonly identityProviderConfigName: string;
  readonly identityProviderConfigArn: string;
  readonly clusterName: string;
  readonly issuerUrl: string;
  readonly clientId: string;
  readonly usernameClaim: string;
  readonly usernamePrefix: string;
  readonly groupsClaim: string;
  readonly groupsPrefix: string;
  readonly requiredClaims: {[key: string]: any};
  readonly tags: {[key: string]: any};
  readonly status: string;
}

interface OidcIdentityProviderConfigRequest {
  readonly identityProviderConfigName: string;
  readonly issuerUrl: string;
  readonly clientId: string;
  readonly usernameClaim: string;
  readonly usernamePrefix: string;
  readonly groupsClaim: string;
  readonly groupsPrefix: string;
  readonly requiredClaims: {[key: string]: any};
}

interface Provider {
  readonly keyArn: string;
}

interface RegisterClusterRequest {
  readonly name: string;
  readonly connectorConfig: ConnectorConfigRequest;
  readonly clientRequestToken: string;
  readonly tags: {[key: string]: any};
}

interface RegisterClusterResponse {
  readonly cluster: Cluster;
}

interface RemoteAccessConfig {
  readonly ec2SshKey: string;
  readonly sourceSecurityGroups: [];
}

interface ResourceInUseException {
  readonly clusterName: string;
  readonly nodegroupName: string;
  readonly addonName: string;
  readonly message: string;
}

interface ResourceLimitExceededException {
  readonly clusterName: string;
  readonly nodegroupName: string;
  readonly message: string;
}

interface ResourceNotFoundException {
  readonly clusterName: string;
  readonly nodegroupName: string;
  readonly fargateProfileName: string;
  readonly addonName: string;
  readonly message: string;
}

interface ResourcePropagationDelayException {
  readonly message: string;
}

interface ServerException {
  readonly clusterName: string;
  readonly nodegroupName: string;
  readonly addonName: string;
  readonly message: string;
}

interface ServiceUnavailableException {
  readonly message: string;
}

interface TagResourceRequest {
  readonly resourceArn: string;
  readonly tags: {[key: string]: any};
}

interface TagResourceResponse {
}

interface Taint {
  readonly key: string;
  readonly value: string;
  readonly effect: string;
}

interface UnsupportedAvailabilityZoneException {
  readonly message: string;
  readonly clusterName: string;
  readonly nodegroupName: string;
  readonly validZones: [];
}

interface UntagResourceRequest {
  readonly resourceArn: string;
  readonly tagKeys: [];
}

interface UntagResourceResponse {
}

interface Update {
  readonly id: string;
  readonly status: string;
  readonly type: string;
  readonly params: [];
  readonly createdAt: Date;
  readonly errors: [];
}

interface UpdateAddonRequest {
  readonly clusterName: string;
  readonly addonName: string;
  readonly addonVersion: string;
  readonly serviceAccountRoleArn: string;
  readonly resolveConflicts: string;
  readonly clientRequestToken: string;
}

interface UpdateAddonResponse {
  readonly update: Update;
}

interface UpdateClusterConfigRequest {
  readonly name: string;
  readonly resourcesVpcConfig: VpcConfigRequest;
  readonly logging: Logging;
  readonly clientRequestToken: string;
}

interface UpdateClusterConfigResponse {
  readonly update: Update;
}

interface UpdateClusterVersionRequest {
  readonly name: string;
  readonly version: string;
  readonly clientRequestToken: string;
}

interface UpdateClusterVersionResponse {
  readonly update: Update;
}

interface UpdateLabelsPayload {
  readonly addOrUpdateLabels: {[key: string]: any};
  readonly removeLabels: [];
}

interface UpdateNodegroupConfigRequest {
  readonly clusterName: string;
  readonly nodegroupName: string;
  readonly labels: UpdateLabelsPayload;
  readonly taints: UpdateTaintsPayload;
  readonly scalingConfig: NodegroupScalingConfig;
  readonly updateConfig: NodegroupUpdateConfig;
  readonly clientRequestToken: string;
}

interface UpdateNodegroupConfigResponse {
  readonly update: Update;
}

interface UpdateNodegroupVersionRequest {
  readonly clusterName: string;
  readonly nodegroupName: string;
  readonly version: string;
  readonly releaseVersion: string;
  readonly launchTemplate: LaunchTemplateSpecification;
  readonly force: boolean;
  readonly clientRequestToken: string;
}

interface UpdateNodegroupVersionResponse {
  readonly update: Update;
}

interface UpdateParam {
  readonly type: string;
  readonly value: string;
}

interface UpdateTaintsPayload {
  readonly addOrUpdateTaints: [];
  readonly removeTaints: [];
}

interface VpcConfigRequest {
  readonly subnetIds: [];
  readonly securityGroupIds: [];
  readonly endpointPublicAccess: boolean;
  readonly endpointPrivateAccess: boolean;
  readonly publicAccessCidrs: [];
}

interface VpcConfigResponse {
  readonly subnetIds: [];
  readonly securityGroupIds: [];
  readonly clusterSecurityGroupId: string;
  readonly vpcId: string;
  readonly endpointPublicAccess: boolean;
  readonly endpointPrivateAccess: boolean;
  readonly publicAccessCidrs: [];
}

