/**
 * STOP. This file is autogenerated. DO NOT EDIT by hand
 */
export interface CreateChangeset {
  readonly clientToken?: string;
  readonly datasetId: string;
  readonly changeType: string;
  readonly sourceParams: {[key: string]: any};
  readonly formatParams: {[key: string]: any};
}
export interface CreateDataView {
  readonly clientToken?: string;
  readonly datasetId: string;
  readonly autoUpdate?: boolean;
  readonly sortColumns?: [];
  readonly partitionColumns?: [];
  readonly asOfTimestamp?: number;
  readonly destinationTypeParams: DataViewDestinationTypeParams;
}
export interface CreateDataset {
  readonly clientToken?: string;
  readonly datasetTitle: string;
  readonly kind: string;
  readonly datasetDescription: string;
  readonly ownerInfo?: DatasetOwnerInfo;
  readonly permissionGroupParams: PermissionGroupParams;
  readonly alias: string;
  readonly schemaDefinition?: SchemaUnion;
}
export interface DeleteDataset {
  readonly clientToken?: string;
  readonly datasetId: string;
}
export interface GetChangeset {
  readonly datasetId: string;
  readonly changesetId: string;
}
export interface GetDataView {
  readonly dataViewId: string;
  readonly datasetId: string;
}
export interface GetDataset {
  readonly datasetId: string;
}
export interface GetProgrammaticAccessCredentials {
  readonly durationInMinutes?: number;
  readonly environmentId: string;
}
export interface GetWorkingLocation {
  readonly locationType?: string;
}
export interface ListChangesets {
  readonly datasetId: string;
  readonly maxResults?: number;
  readonly nextToken?: string;
}
export interface ListDataViews {
  readonly datasetId: string;
  readonly nextToken?: string;
  readonly maxResults?: number;
}
export interface ListDatasets {
  readonly nextToken?: string;
  readonly maxResults?: number;
}
export interface UpdateChangeset {
  readonly clientToken?: string;
  readonly datasetId: string;
  readonly changesetId: string;
  readonly sourceParams: {[key: string]: any};
  readonly formatParams: {[key: string]: any};
}
export interface UpdateDataset {
  readonly clientToken?: string;
  readonly datasetId: string;
  readonly datasetTitle: string;
  readonly kind: string;
  readonly datasetDescription?: string;
  readonly alias: string;
  readonly schemaDefinition?: SchemaUnion;
}



interface AccessDeniedException {
  readonly message: string;
}

interface ChangesetErrorInfo {
  readonly errorMessage: string;
  readonly errorCategory: string;
}

interface ChangesetSummary {
  readonly changesetId: string;
  readonly changesetArn: string;
  readonly datasetId: string;
  readonly changeType: string;
  readonly sourceParams: {[key: string]: any};
  readonly formatParams: {[key: string]: any};
  readonly createTime: number;
  readonly status: string;
  readonly errorInfo: ChangesetErrorInfo;
  readonly activeUntilTimestamp: number;
  readonly updatesChangesetId: string;
  readonly updatedByChangesetId: string;
}

interface ColumnDefinition {
  readonly dataType: string;
  readonly columnName: string;
  readonly columnDescription: string;
}

interface ConflictException {
  readonly message: string;
}

interface CreateChangesetRequest {
  readonly clientToken: string;
  readonly datasetId: string;
  readonly changeType: string;
  readonly sourceParams: {[key: string]: any};
  readonly formatParams: {[key: string]: any};
}

interface CreateChangesetResponse {
  readonly datasetId: string;
  readonly changesetId: string;
}

interface CreateDataViewRequest {
  readonly clientToken: string;
  readonly datasetId: string;
  readonly autoUpdate: boolean;
  readonly sortColumns: [];
  readonly partitionColumns: [];
  readonly asOfTimestamp: number;
  readonly destinationTypeParams: DataViewDestinationTypeParams;
}

interface CreateDataViewResponse {
  readonly datasetId: string;
  readonly dataViewId: string;
}

interface CreateDatasetRequest {
  readonly clientToken: string;
  readonly datasetTitle: string;
  readonly kind: string;
  readonly datasetDescription: string;
  readonly ownerInfo: DatasetOwnerInfo;
  readonly permissionGroupParams: PermissionGroupParams;
  readonly alias: string;
  readonly schemaDefinition: SchemaUnion;
}

interface CreateDatasetResponse {
  readonly datasetId: string;
}

interface Credentials {
  readonly accessKeyId: string;
  readonly secretAccessKey: string;
  readonly sessionToken: string;
}

interface DataViewDestinationTypeParams {
  readonly destinationType: string;
}

interface DataViewErrorInfo {
  readonly errorMessage: string;
  readonly errorCategory: string;
}

interface DataViewSummary {
  readonly dataViewId: string;
  readonly dataViewArn: string;
  readonly datasetId: string;
  readonly asOfTimestamp: number;
  readonly partitionColumns: [];
  readonly sortColumns: [];
  readonly status: string;
  readonly errorInfo: DataViewErrorInfo;
  readonly destinationTypeProperties: DataViewDestinationTypeParams;
  readonly autoUpdate: boolean;
  readonly createTime: number;
  readonly lastModifiedTime: number;
}

interface Dataset {
  readonly datasetId: string;
  readonly datasetArn: string;
  readonly datasetTitle: string;
  readonly kind: string;
  readonly datasetDescription: string;
  readonly ownerInfo: DatasetOwnerInfo;
  readonly createTime: number;
  readonly lastModifiedTime: number;
  readonly schemaDefinition: SchemaUnion;
  readonly alias: string;
}

interface DatasetOwnerInfo {
  readonly name: string;
  readonly phoneNumber: string;
  readonly email: string;
}

interface DeleteDatasetRequest {
  readonly clientToken: string;
  readonly datasetId: string;
}

interface DeleteDatasetResponse {
  readonly datasetId: string;
}

interface GetChangesetRequest {
  readonly datasetId: string;
  readonly changesetId: string;
}

interface GetChangesetResponse {
  readonly changesetId: string;
  readonly changesetArn: string;
  readonly datasetId: string;
  readonly changeType: string;
  readonly sourceParams: {[key: string]: any};
  readonly formatParams: {[key: string]: any};
  readonly createTime: number;
  readonly status: string;
  readonly errorInfo: ChangesetErrorInfo;
  readonly activeUntilTimestamp: number;
  readonly updatesChangesetId: string;
  readonly updatedByChangesetId: string;
}

interface GetDataViewRequest {
  readonly dataViewId: string;
  readonly datasetId: string;
}

interface GetDataViewResponse {
  readonly autoUpdate: boolean;
  readonly partitionColumns: [];
  readonly datasetId: string;
  readonly asOfTimestamp: number;
  readonly errorInfo: DataViewErrorInfo;
  readonly lastModifiedTime: number;
  readonly createTime: number;
  readonly sortColumns: [];
  readonly dataViewId: string;
  readonly dataViewArn: string;
  readonly destinationTypeParams: DataViewDestinationTypeParams;
  readonly status: string;
}

interface GetDatasetRequest {
  readonly datasetId: string;
}

interface GetDatasetResponse {
  readonly datasetId: string;
  readonly datasetArn: string;
  readonly datasetTitle: string;
  readonly kind: string;
  readonly datasetDescription: string;
  readonly createTime: number;
  readonly lastModifiedTime: number;
  readonly schemaDefinition: SchemaUnion;
  readonly alias: string;
  readonly status: string;
}

interface GetProgrammaticAccessCredentialsRequest {
  readonly durationInMinutes: number;
  readonly environmentId: string;
}

interface GetProgrammaticAccessCredentialsResponse {
  readonly credentials: Credentials;
  readonly durationInMinutes: number;
}

interface GetWorkingLocationRequest {
  readonly locationType: string;
}

interface GetWorkingLocationResponse {
  readonly s3Uri: string;
  readonly s3Path: string;
  readonly s3Bucket: string;
}

interface InternalServerException {
  readonly message: string;
}

interface LimitExceededException {
  readonly message: string;
}

interface ListChangesetsRequest {
  readonly datasetId: string;
  readonly maxResults: number;
  readonly nextToken: string;
}

interface ListChangesetsResponse {
  readonly changesets: [];
  readonly nextToken: string;
}

interface ListDataViewsRequest {
  readonly datasetId: string;
  readonly nextToken: string;
  readonly maxResults: number;
}

interface ListDataViewsResponse {
  readonly nextToken: string;
  readonly dataViews: [];
}

interface ListDatasetsRequest {
  readonly nextToken: string;
  readonly maxResults: number;
}

interface ListDatasetsResponse {
  readonly datasets: [];
  readonly nextToken: string;
}

interface PermissionGroupParams {
  readonly permissionGroupId: string;
  readonly datasetPermissions: [];
}

interface ResourceNotFoundException {
  readonly message: string;
}

interface ResourcePermission {
  readonly permission: string;
}

interface SchemaDefinition {
  readonly columns: [];
  readonly primaryKeyColumns: [];
}

interface SchemaUnion {
  readonly tabularSchemaConfig: SchemaDefinition;
}

interface ThrottlingException {
}

interface UpdateChangesetRequest {
  readonly clientToken: string;
  readonly datasetId: string;
  readonly changesetId: string;
  readonly sourceParams: {[key: string]: any};
  readonly formatParams: {[key: string]: any};
}

interface UpdateChangesetResponse {
  readonly changesetId: string;
  readonly datasetId: string;
}

interface UpdateDatasetRequest {
  readonly clientToken: string;
  readonly datasetId: string;
  readonly datasetTitle: string;
  readonly kind: string;
  readonly datasetDescription: string;
  readonly alias: string;
  readonly schemaDefinition: SchemaUnion;
}

interface UpdateDatasetResponse {
  readonly datasetId: string;
}

interface ValidationException {
  readonly message: string;
}

