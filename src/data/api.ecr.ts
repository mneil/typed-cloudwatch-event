/**
 * STOP. This file is autogenerated. DO NOT EDIT by hand
 */
export interface BatchCheckLayerAvailability {
  readonly registryId?: string;
  readonly repositoryName: string;
  readonly layerDigests: [];
}

export interface BatchDeleteImage {
  readonly registryId?: string;
  readonly repositoryName: string;
  readonly imageIds: [];
}

export interface BatchGetImage {
  readonly registryId?: string;
  readonly repositoryName: string;
  readonly imageIds: [];
  readonly acceptedMediaTypes?: [];
}

export interface BatchGetRepositoryScanningConfiguration {
  readonly repositoryNames: [];
}

export interface CompleteLayerUpload {
  readonly registryId?: string;
  readonly repositoryName: string;
  readonly uploadId: string;
  readonly layerDigests: [];
}

export interface CreatePullThroughCacheRule {
  readonly ecrRepositoryPrefix: string;
  readonly upstreamRegistryUrl: string;
  readonly registryId?: string;
}

export interface CreateRepository {
  readonly registryId?: string;
  readonly repositoryName: string;
  readonly tags?: [];
  readonly imageTagMutability?: string;
  readonly imageScanningConfiguration?: ImageScanningConfiguration;
  readonly encryptionConfiguration?: EncryptionConfiguration;
}

export interface DeleteLifecyclePolicy {
  readonly registryId?: string;
  readonly repositoryName: string;
}

export interface DeletePullThroughCacheRule {
  readonly ecrRepositoryPrefix: string;
  readonly registryId?: string;
}

export interface DeleteRegistryPolicy {
}

export interface DeleteRepository {
  readonly registryId?: string;
  readonly repositoryName: string;
  readonly force?: boolean;
}

export interface DeleteRepositoryPolicy {
  readonly registryId?: string;
  readonly repositoryName: string;
}

export interface DescribeImageReplicationStatus {
  readonly repositoryName: string;
  readonly imageId: ImageIdentifier;
  readonly registryId?: string;
}

export interface DescribeImageScanFindings {
  readonly registryId?: string;
  readonly repositoryName: string;
  readonly imageId: ImageIdentifier;
  readonly nextToken?: string;
  readonly maxResults?: number;
}

export interface DescribeImages {
  readonly registryId?: string;
  readonly repositoryName: string;
  readonly imageIds?: [];
  readonly nextToken?: string;
  readonly maxResults?: number;
  readonly filter?: DescribeImagesFilter;
}

export interface DescribePullThroughCacheRules {
  readonly registryId?: string;
  readonly ecrRepositoryPrefixes?: [];
  readonly nextToken?: string;
  readonly maxResults?: number;
}

export interface DescribeRegistry {
}

export interface DescribeRepositories {
  readonly registryId?: string;
  readonly repositoryNames?: [];
  readonly nextToken?: string;
  readonly maxResults?: number;
}

export interface GetAuthorizationToken {
  readonly registryIds?: [];
}

export interface GetDownloadUrlForLayer {
  readonly registryId?: string;
  readonly repositoryName: string;
  readonly layerDigest: string;
}

export interface GetLifecyclePolicy {
  readonly registryId?: string;
  readonly repositoryName: string;
}

export interface GetLifecyclePolicyPreview {
  readonly registryId?: string;
  readonly repositoryName: string;
  readonly imageIds?: [];
  readonly nextToken?: string;
  readonly maxResults?: number;
  readonly filter?: LifecyclePolicyPreviewFilter;
}

export interface GetRegistryPolicy {
}

export interface GetRegistryScanningConfiguration {
}

export interface GetRepositoryPolicy {
  readonly registryId?: string;
  readonly repositoryName: string;
}

export interface InitiateLayerUpload {
  readonly registryId?: string;
  readonly repositoryName: string;
}

export interface ListImages {
  readonly registryId?: string;
  readonly repositoryName: string;
  readonly nextToken?: string;
  readonly maxResults?: number;
  readonly filter?: ListImagesFilter;
}

export interface ListTagsForResource {
  readonly resourceArn: string;
}

export interface PutImage {
  readonly registryId?: string;
  readonly repositoryName: string;
  readonly imageManifest: string;
  readonly imageManifestMediaType?: string;
  readonly imageTag?: string;
  readonly imageDigest?: string;
}

export interface PutImageScanningConfiguration {
  readonly registryId?: string;
  readonly repositoryName: string;
  readonly imageScanningConfiguration: ImageScanningConfiguration;
}

export interface PutImageTagMutability {
  readonly registryId?: string;
  readonly repositoryName: string;
  readonly imageTagMutability: string;
}

export interface PutLifecyclePolicy {
  readonly registryId?: string;
  readonly repositoryName: string;
  readonly lifecyclePolicyText: string;
}

export interface PutRegistryPolicy {
  readonly policyText: string;
}

export interface PutRegistryScanningConfiguration {
  readonly scanType?: string;
  readonly rules?: [];
}

export interface PutReplicationConfiguration {
  readonly replicationConfiguration: ReplicationConfiguration;
}

export interface SetRepositoryPolicy {
  readonly registryId?: string;
  readonly repositoryName: string;
  readonly policyText: string;
  readonly force?: boolean;
}

export interface StartImageScan {
  readonly registryId?: string;
  readonly repositoryName: string;
  readonly imageId: ImageIdentifier;
}

export interface StartLifecyclePolicyPreview {
  readonly registryId?: string;
  readonly repositoryName: string;
  readonly lifecyclePolicyText?: string;
}

export interface TagResource {
  readonly resourceArn: string;
  readonly tags: [];
}

export interface UntagResource {
  readonly resourceArn: string;
  readonly tagKeys: [];
}

export interface UploadLayerPart {
  readonly registryId?: string;
  readonly repositoryName: string;
  readonly uploadId: string;
  readonly partFirstByte: number;
  readonly partLastByte: number;
  readonly layerPartBlob: unknown;
}

export interface Attribute {
  readonly key: string;
  readonly value?: string;
}

export interface AuthorizationData {
  readonly authorizationToken?: string;
  readonly expiresAt?: Date;
  readonly proxyEndpoint?: string;
}

export interface AwsEcrContainerImageDetails {
  readonly architecture?: string;
  readonly author?: string;
  readonly imageHash?: string;
  readonly imageTags?: [];
  readonly platform?: string;
  readonly pushedAt?: Date;
  readonly registry?: string;
  readonly repositoryName?: string;
}

export interface BatchCheckLayerAvailabilityRequest {
  readonly registryId?: string;
  readonly repositoryName: string;
  readonly layerDigests: [];
}

export interface BatchCheckLayerAvailabilityResponse {
  readonly layers?: [];
  readonly failures?: [];
}

export interface BatchDeleteImageRequest {
  readonly registryId?: string;
  readonly repositoryName: string;
  readonly imageIds: [];
}

export interface BatchDeleteImageResponse {
  readonly imageIds?: [];
  readonly failures?: [];
}

export interface BatchGetImageRequest {
  readonly registryId?: string;
  readonly repositoryName: string;
  readonly imageIds: [];
  readonly acceptedMediaTypes?: [];
}

export interface BatchGetImageResponse {
  readonly images?: [];
  readonly failures?: [];
}

export interface BatchGetRepositoryScanningConfigurationRequest {
  readonly repositoryNames: [];
}

export interface BatchGetRepositoryScanningConfigurationResponse {
  readonly scanningConfigurations?: [];
  readonly failures?: [];
}

export interface CompleteLayerUploadRequest {
  readonly registryId?: string;
  readonly repositoryName: string;
  readonly uploadId: string;
  readonly layerDigests: [];
}

export interface CompleteLayerUploadResponse {
  readonly registryId?: string;
  readonly repositoryName?: string;
  readonly uploadId?: string;
  readonly layerDigest?: string;
}

export interface CreatePullThroughCacheRuleRequest {
  readonly ecrRepositoryPrefix: string;
  readonly upstreamRegistryUrl: string;
  readonly registryId?: string;
}

export interface CreatePullThroughCacheRuleResponse {
  readonly ecrRepositoryPrefix?: string;
  readonly upstreamRegistryUrl?: string;
  readonly createdAt?: Date;
  readonly registryId?: string;
}

export interface CreateRepositoryRequest {
  readonly registryId?: string;
  readonly repositoryName: string;
  readonly tags?: [];
  readonly imageTagMutability?: string;
  readonly imageScanningConfiguration?: ImageScanningConfiguration;
  readonly encryptionConfiguration?: EncryptionConfiguration;
}

export interface CreateRepositoryResponse {
  readonly repository?: Repository;
}

export interface CvssScore {
  readonly baseScore?: unknown;
  readonly scoringVector?: string;
  readonly source?: string;
  readonly version?: string;
}

export interface CvssScoreAdjustment {
  readonly metric?: string;
  readonly reason?: string;
}

export interface CvssScoreDetails {
  readonly adjustments?: [];
  readonly score?: unknown;
  readonly scoreSource?: string;
  readonly scoringVector?: string;
  readonly version?: string;
}

export interface DeleteLifecyclePolicyRequest {
  readonly registryId?: string;
  readonly repositoryName: string;
}

export interface DeleteLifecyclePolicyResponse {
  readonly registryId?: string;
  readonly repositoryName?: string;
  readonly lifecyclePolicyText?: string;
  readonly lastEvaluatedAt?: Date;
}

export interface DeletePullThroughCacheRuleRequest {
  readonly ecrRepositoryPrefix: string;
  readonly registryId?: string;
}

export interface DeletePullThroughCacheRuleResponse {
  readonly ecrRepositoryPrefix?: string;
  readonly upstreamRegistryUrl?: string;
  readonly createdAt?: Date;
  readonly registryId?: string;
}

export interface DeleteRegistryPolicyRequest {
}

export interface DeleteRegistryPolicyResponse {
  readonly registryId?: string;
  readonly policyText?: string;
}

export interface DeleteRepositoryPolicyRequest {
  readonly registryId?: string;
  readonly repositoryName: string;
}

export interface DeleteRepositoryPolicyResponse {
  readonly registryId?: string;
  readonly repositoryName?: string;
  readonly policyText?: string;
}

export interface DeleteRepositoryRequest {
  readonly registryId?: string;
  readonly repositoryName: string;
  readonly force?: boolean;
}

export interface DeleteRepositoryResponse {
  readonly repository?: Repository;
}

export interface DescribeImageReplicationStatusRequest {
  readonly repositoryName: string;
  readonly imageId: ImageIdentifier;
  readonly registryId?: string;
}

export interface DescribeImageReplicationStatusResponse {
  readonly repositoryName?: string;
  readonly imageId?: ImageIdentifier;
  readonly replicationStatuses?: [];
}

export interface DescribeImageScanFindingsRequest {
  readonly registryId?: string;
  readonly repositoryName: string;
  readonly imageId: ImageIdentifier;
  readonly nextToken?: string;
  readonly maxResults?: number;
}

export interface DescribeImageScanFindingsResponse {
  readonly registryId?: string;
  readonly repositoryName?: string;
  readonly imageId?: ImageIdentifier;
  readonly imageScanStatus?: ImageScanStatus;
  readonly imageScanFindings?: ImageScanFindings;
  readonly nextToken?: string;
}

export interface DescribeImagesFilter {
  readonly tagStatus?: string;
}

export interface DescribeImagesRequest {
  readonly registryId?: string;
  readonly repositoryName: string;
  readonly imageIds?: [];
  readonly nextToken?: string;
  readonly maxResults?: number;
  readonly filter?: DescribeImagesFilter;
}

export interface DescribeImagesResponse {
  readonly imageDetails?: [];
  readonly nextToken?: string;
}

export interface DescribePullThroughCacheRulesRequest {
  readonly registryId?: string;
  readonly ecrRepositoryPrefixes?: [];
  readonly nextToken?: string;
  readonly maxResults?: number;
}

export interface DescribePullThroughCacheRulesResponse {
  readonly pullThroughCacheRules?: [];
  readonly nextToken?: string;
}

export interface DescribeRegistryRequest {
}

export interface DescribeRegistryResponse {
  readonly registryId?: string;
  readonly replicationConfiguration?: ReplicationConfiguration;
}

export interface DescribeRepositoriesRequest {
  readonly registryId?: string;
  readonly repositoryNames?: [];
  readonly nextToken?: string;
  readonly maxResults?: number;
}

export interface DescribeRepositoriesResponse {
  readonly repositories?: [];
  readonly nextToken?: string;
}

export interface EmptyUploadException {
  readonly message?: string;
}

export interface EncryptionConfiguration {
  readonly encryptionType: string;
  readonly kmsKey?: string;
}

export interface EnhancedImageScanFinding {
  readonly awsAccountId?: string;
  readonly description?: string;
  readonly findingArn?: string;
  readonly firstObservedAt?: Date;
  readonly lastObservedAt?: Date;
  readonly packageVulnerabilityDetails?: PackageVulnerabilityDetails;
  readonly remediation?: Remediation;
  readonly resources?: [];
  readonly score?: unknown;
  readonly scoreDetails?: ScoreDetails;
  readonly severity?: string;
  readonly status?: string;
  readonly title?: string;
  readonly type?: string;
  readonly updatedAt?: Date;
}

export interface GetAuthorizationTokenRequest {
  readonly registryIds?: [];
}

export interface GetAuthorizationTokenResponse {
  readonly authorizationData?: [];
}

export interface GetDownloadUrlForLayerRequest {
  readonly registryId?: string;
  readonly repositoryName: string;
  readonly layerDigest: string;
}

export interface GetDownloadUrlForLayerResponse {
  readonly downloadUrl?: string;
  readonly layerDigest?: string;
}

export interface GetLifecyclePolicyPreviewRequest {
  readonly registryId?: string;
  readonly repositoryName: string;
  readonly imageIds?: [];
  readonly nextToken?: string;
  readonly maxResults?: number;
  readonly filter?: LifecyclePolicyPreviewFilter;
}

export interface GetLifecyclePolicyPreviewResponse {
  readonly registryId?: string;
  readonly repositoryName?: string;
  readonly lifecyclePolicyText?: string;
  readonly status?: string;
  readonly nextToken?: string;
  readonly previewResults?: [];
  readonly summary?: LifecyclePolicyPreviewSummary;
}

export interface GetLifecyclePolicyRequest {
  readonly registryId?: string;
  readonly repositoryName: string;
}

export interface GetLifecyclePolicyResponse {
  readonly registryId?: string;
  readonly repositoryName?: string;
  readonly lifecyclePolicyText?: string;
  readonly lastEvaluatedAt?: Date;
}

export interface GetRegistryPolicyRequest {
}

export interface GetRegistryPolicyResponse {
  readonly registryId?: string;
  readonly policyText?: string;
}

export interface GetRegistryScanningConfigurationRequest {
}

export interface GetRegistryScanningConfigurationResponse {
  readonly registryId?: string;
  readonly scanningConfiguration?: RegistryScanningConfiguration;
}

export interface GetRepositoryPolicyRequest {
  readonly registryId?: string;
  readonly repositoryName: string;
}

export interface GetRepositoryPolicyResponse {
  readonly registryId?: string;
  readonly repositoryName?: string;
  readonly policyText?: string;
}

export interface Image {
  readonly registryId?: string;
  readonly repositoryName?: string;
  readonly imageId?: ImageIdentifier;
  readonly imageManifest?: string;
  readonly imageManifestMediaType?: string;
}

export interface ImageAlreadyExistsException {
  readonly message?: string;
}

export interface ImageDetail {
  readonly registryId?: string;
  readonly repositoryName?: string;
  readonly imageDigest?: string;
  readonly imageTags?: [];
  readonly imageSizeInBytes?: number;
  readonly imagePushedAt?: Date;
  readonly imageScanStatus?: ImageScanStatus;
  readonly imageScanFindingsSummary?: ImageScanFindingsSummary;
  readonly imageManifestMediaType?: string;
  readonly artifactMediaType?: string;
}

export interface ImageDigestDoesNotMatchException {
  readonly message?: string;
}

export interface ImageFailure {
  readonly imageId?: ImageIdentifier;
  readonly failureCode?: string;
  readonly failureReason?: string;
}

export interface ImageIdentifier {
  readonly imageDigest?: string;
  readonly imageTag?: string;
}

export interface ImageNotFoundException {
  readonly message?: string;
}

export interface ImageReplicationStatus {
  readonly region?: string;
  readonly registryId?: string;
  readonly status?: string;
  readonly failureCode?: string;
}

export interface ImageScanFinding {
  readonly name?: string;
  readonly description?: string;
  readonly uri?: string;
  readonly severity?: string;
  readonly attributes?: [];
}

export interface ImageScanFindings {
  readonly imageScanCompletedAt?: Date;
  readonly vulnerabilitySourceUpdatedAt?: Date;
  readonly findingSeverityCounts?: {[key: string]: any};
  readonly findings?: [];
  readonly enhancedFindings?: [];
}

export interface ImageScanFindingsSummary {
  readonly imageScanCompletedAt?: Date;
  readonly vulnerabilitySourceUpdatedAt?: Date;
  readonly findingSeverityCounts?: {[key: string]: any};
}

export interface ImageScanStatus {
  readonly status?: string;
  readonly description?: string;
}

export interface ImageScanningConfiguration {
  readonly scanOnPush?: boolean;
}

export interface ImageTagAlreadyExistsException {
  readonly message?: string;
}

export interface InitiateLayerUploadRequest {
  readonly registryId?: string;
  readonly repositoryName: string;
}

export interface InitiateLayerUploadResponse {
  readonly uploadId?: string;
  readonly partSize?: number;
}

export interface InvalidLayerException {
  readonly message?: string;
}

export interface InvalidLayerPartException {
  readonly registryId?: string;
  readonly repositoryName?: string;
  readonly uploadId?: string;
  readonly lastValidByteReceived?: number;
  readonly message?: string;
}

export interface InvalidParameterException {
  readonly message?: string;
}

export interface InvalidTagParameterException {
  readonly message?: string;
}

export interface KmsException {
  readonly message?: string;
  readonly kmsError?: string;
}

export interface Layer {
  readonly layerDigest?: string;
  readonly layerAvailability?: string;
  readonly layerSize?: number;
  readonly mediaType?: string;
}

export interface LayerAlreadyExistsException {
  readonly message?: string;
}

export interface LayerFailure {
  readonly layerDigest?: string;
  readonly failureCode?: string;
  readonly failureReason?: string;
}

export interface LayerInaccessibleException {
  readonly message?: string;
}

export interface LayerPartTooSmallException {
  readonly message?: string;
}

export interface LayersNotFoundException {
  readonly message?: string;
}

export interface LifecyclePolicyNotFoundException {
  readonly message?: string;
}

export interface LifecyclePolicyPreviewFilter {
  readonly tagStatus?: string;
}

export interface LifecyclePolicyPreviewInProgressException {
  readonly message?: string;
}

export interface LifecyclePolicyPreviewNotFoundException {
  readonly message?: string;
}

export interface LifecyclePolicyPreviewResult {
  readonly imageTags?: [];
  readonly imageDigest?: string;
  readonly imagePushedAt?: Date;
  readonly action?: LifecyclePolicyRuleAction;
  readonly appliedRulePriority?: number;
}

export interface LifecyclePolicyPreviewSummary {
  readonly expiringImageTotalCount?: number;
}

export interface LifecyclePolicyRuleAction {
  readonly type?: string;
}

export interface LimitExceededException {
  readonly message?: string;
}

export interface ListImagesFilter {
  readonly tagStatus?: string;
}

export interface ListImagesRequest {
  readonly registryId?: string;
  readonly repositoryName: string;
  readonly nextToken?: string;
  readonly maxResults?: number;
  readonly filter?: ListImagesFilter;
}

export interface ListImagesResponse {
  readonly imageIds?: [];
  readonly nextToken?: string;
}

export interface ListTagsForResourceRequest {
  readonly resourceArn: string;
}

export interface ListTagsForResourceResponse {
  readonly tags?: [];
}

export interface PackageVulnerabilityDetails {
  readonly cvss?: [];
  readonly referenceUrls?: [];
  readonly relatedVulnerabilities?: [];
  readonly source?: string;
  readonly sourceUrl?: string;
  readonly vendorCreatedAt?: Date;
  readonly vendorSeverity?: string;
  readonly vendorUpdatedAt?: Date;
  readonly vulnerabilityId?: string;
  readonly vulnerablePackages?: [];
}

export interface PullThroughCacheRule {
  readonly ecrRepositoryPrefix?: string;
  readonly upstreamRegistryUrl?: string;
  readonly createdAt?: Date;
  readonly registryId?: string;
}

export interface PullThroughCacheRuleAlreadyExistsException {
  readonly message?: string;
}

export interface PullThroughCacheRuleNotFoundException {
  readonly message?: string;
}

export interface PutImageRequest {
  readonly registryId?: string;
  readonly repositoryName: string;
  readonly imageManifest: string;
  readonly imageManifestMediaType?: string;
  readonly imageTag?: string;
  readonly imageDigest?: string;
}

export interface PutImageResponse {
  readonly image?: Image;
}

export interface PutImageScanningConfigurationRequest {
  readonly registryId?: string;
  readonly repositoryName: string;
  readonly imageScanningConfiguration: ImageScanningConfiguration;
}

export interface PutImageScanningConfigurationResponse {
  readonly registryId?: string;
  readonly repositoryName?: string;
  readonly imageScanningConfiguration?: ImageScanningConfiguration;
}

export interface PutImageTagMutabilityRequest {
  readonly registryId?: string;
  readonly repositoryName: string;
  readonly imageTagMutability: string;
}

export interface PutImageTagMutabilityResponse {
  readonly registryId?: string;
  readonly repositoryName?: string;
  readonly imageTagMutability?: string;
}

export interface PutLifecyclePolicyRequest {
  readonly registryId?: string;
  readonly repositoryName: string;
  readonly lifecyclePolicyText: string;
}

export interface PutLifecyclePolicyResponse {
  readonly registryId?: string;
  readonly repositoryName?: string;
  readonly lifecyclePolicyText?: string;
}

export interface PutRegistryPolicyRequest {
  readonly policyText: string;
}

export interface PutRegistryPolicyResponse {
  readonly registryId?: string;
  readonly policyText?: string;
}

export interface PutRegistryScanningConfigurationRequest {
  readonly scanType?: string;
  readonly rules?: [];
}

export interface PutRegistryScanningConfigurationResponse {
  readonly registryScanningConfiguration?: RegistryScanningConfiguration;
}

export interface PutReplicationConfigurationRequest {
  readonly replicationConfiguration: ReplicationConfiguration;
}

export interface PutReplicationConfigurationResponse {
  readonly replicationConfiguration?: ReplicationConfiguration;
}

export interface Recommendation {
  readonly url?: string;
  readonly text?: string;
}

export interface ReferencedImagesNotFoundException {
  readonly message?: string;
}

export interface RegistryPolicyNotFoundException {
  readonly message?: string;
}

export interface RegistryScanningConfiguration {
  readonly scanType?: string;
  readonly rules?: [];
}

export interface RegistryScanningRule {
  readonly scanFrequency: string;
  readonly repositoryFilters: [];
}

export interface Remediation {
  readonly recommendation?: Recommendation;
}

export interface ReplicationConfiguration {
  readonly rules: [];
}

export interface ReplicationDestination {
  readonly region: string;
  readonly registryId: string;
}

export interface ReplicationRule {
  readonly destinations: [];
  readonly repositoryFilters?: [];
}

export interface Repository {
  readonly repositoryArn?: string;
  readonly registryId?: string;
  readonly repositoryName?: string;
  readonly repositoryUri?: string;
  readonly createdAt?: Date;
  readonly imageTagMutability?: string;
  readonly imageScanningConfiguration?: ImageScanningConfiguration;
  readonly encryptionConfiguration?: EncryptionConfiguration;
}

export interface RepositoryAlreadyExistsException {
  readonly message?: string;
}

export interface RepositoryFilter {
  readonly filter: string;
  readonly filterType: string;
}

export interface RepositoryNotEmptyException {
  readonly message?: string;
}

export interface RepositoryNotFoundException {
  readonly message?: string;
}

export interface RepositoryPolicyNotFoundException {
  readonly message?: string;
}

export interface RepositoryScanningConfiguration {
  readonly repositoryArn?: string;
  readonly repositoryName?: string;
  readonly scanOnPush?: boolean;
  readonly scanFrequency?: string;
  readonly appliedScanFilters?: [];
}

export interface RepositoryScanningConfigurationFailure {
  readonly repositoryName?: string;
  readonly failureCode?: string;
  readonly failureReason?: string;
}

export interface Resource {
  readonly details?: ResourceDetails;
  readonly id?: string;
  readonly tags?: {[key: string]: any};
  readonly type?: string;
}

export interface ResourceDetails {
  readonly awsEcrContainerImage?: AwsEcrContainerImageDetails;
}

export interface ScanNotFoundException {
  readonly message?: string;
}

export interface ScanningRepositoryFilter {
  readonly filter: string;
  readonly filterType: string;
}

export interface ScoreDetails {
  readonly cvss?: CvssScoreDetails;
}

export interface ServerException {
  readonly message?: string;
}

export interface SetRepositoryPolicyRequest {
  readonly registryId?: string;
  readonly repositoryName: string;
  readonly policyText: string;
  readonly force?: boolean;
}

export interface SetRepositoryPolicyResponse {
  readonly registryId?: string;
  readonly repositoryName?: string;
  readonly policyText?: string;
}

export interface StartImageScanRequest {
  readonly registryId?: string;
  readonly repositoryName: string;
  readonly imageId: ImageIdentifier;
}

export interface StartImageScanResponse {
  readonly registryId?: string;
  readonly repositoryName?: string;
  readonly imageId?: ImageIdentifier;
  readonly imageScanStatus?: ImageScanStatus;
}

export interface StartLifecyclePolicyPreviewRequest {
  readonly registryId?: string;
  readonly repositoryName: string;
  readonly lifecyclePolicyText?: string;
}

export interface StartLifecyclePolicyPreviewResponse {
  readonly registryId?: string;
  readonly repositoryName?: string;
  readonly lifecyclePolicyText?: string;
  readonly status?: string;
}

export interface Tag {
  readonly Key?: string;
  readonly Value?: string;
}

export interface TagResourceRequest {
  readonly resourceArn: string;
  readonly tags: [];
}

export interface TagResourceResponse {
}

export interface TooManyTagsException {
  readonly message?: string;
}

export interface UnsupportedImageTypeException {
  readonly message?: string;
}

export interface UnsupportedUpstreamRegistryException {
  readonly message?: string;
}

export interface UntagResourceRequest {
  readonly resourceArn: string;
  readonly tagKeys: [];
}

export interface UntagResourceResponse {
}

export interface UploadLayerPartRequest {
  readonly registryId?: string;
  readonly repositoryName: string;
  readonly uploadId: string;
  readonly partFirstByte: number;
  readonly partLastByte: number;
  readonly layerPartBlob: unknown;
}

export interface UploadLayerPartResponse {
  readonly registryId?: string;
  readonly repositoryName?: string;
  readonly uploadId?: string;
  readonly lastByteReceived?: number;
}

export interface UploadNotFoundException {
  readonly message?: string;
}

export interface ValidationException {
  readonly message?: string;
}

export interface VulnerablePackage {
  readonly arch?: string;
  readonly epoch?: number;
  readonly filePath?: string;
  readonly name?: string;
  readonly packageManager?: string;
  readonly release?: string;
  readonly sourceLayerHash?: string;
  readonly version?: string;
}


