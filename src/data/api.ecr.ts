/**
 * STOP. This file is autogenerated. DO NOT EDIT by hand
 */
export interface BatchCheckLayerAvailability {
  readonly registryId: string;
  readonly repositoryName: string;
  readonly layerDigests: [];
}
export interface BatchDeleteImage {
  readonly registryId: string;
  readonly repositoryName: string;
  readonly imageIds: [];
}
export interface BatchGetImage {
  readonly registryId: string;
  readonly repositoryName: string;
  readonly imageIds: [];
  readonly acceptedMediaTypes: [];
}
export interface BatchGetRepositoryScanningConfiguration {
  readonly repositoryNames: [];
}
export interface CompleteLayerUpload {
  readonly registryId: string;
  readonly repositoryName: string;
  readonly uploadId: string;
  readonly layerDigests: [];
}
export interface CreatePullThroughCacheRule {
  readonly ecrRepositoryPrefix: string;
  readonly upstreamRegistryUrl: string;
  readonly registryId: string;
}
export interface CreateRepository {
  readonly registryId: string;
  readonly repositoryName: string;
  readonly tags: [];
  readonly imageTagMutability: string;
  readonly imageScanningConfiguration: ImageScanningConfiguration;
  readonly encryptionConfiguration: EncryptionConfiguration;
}
export interface DeleteLifecyclePolicy {
  readonly registryId: string;
  readonly repositoryName: string;
}
export interface DeletePullThroughCacheRule {
  readonly ecrRepositoryPrefix: string;
  readonly registryId: string;
}
export interface DeleteRegistryPolicy {
}
export interface DeleteRepository {
  readonly registryId: string;
  readonly repositoryName: string;
  readonly force: boolean;
}
export interface DeleteRepositoryPolicy {
  readonly registryId: string;
  readonly repositoryName: string;
}
export interface DescribeImageReplicationStatus {
  readonly repositoryName: string;
  readonly imageId: ImageIdentifier;
  readonly registryId: string;
}
export interface DescribeImageScanFindings {
  readonly registryId: string;
  readonly repositoryName: string;
  readonly imageId: ImageIdentifier;
  readonly nextToken: string;
  readonly maxResults: number;
}
export interface DescribeImages {
  readonly registryId: string;
  readonly repositoryName: string;
  readonly imageIds: [];
  readonly nextToken: string;
  readonly maxResults: number;
  readonly filter: DescribeImagesFilter;
}
export interface DescribePullThroughCacheRules {
  readonly registryId: string;
  readonly ecrRepositoryPrefixes: [];
  readonly nextToken: string;
  readonly maxResults: number;
}
export interface DescribeRegistry {
}
export interface DescribeRepositories {
  readonly registryId: string;
  readonly repositoryNames: [];
  readonly nextToken: string;
  readonly maxResults: number;
}
export interface GetAuthorizationToken {
  readonly registryIds: [];
}
export interface GetDownloadUrlForLayer {
  readonly registryId: string;
  readonly repositoryName: string;
  readonly layerDigest: string;
}
export interface GetLifecyclePolicy {
  readonly registryId: string;
  readonly repositoryName: string;
}
export interface GetLifecyclePolicyPreview {
  readonly registryId: string;
  readonly repositoryName: string;
  readonly imageIds: [];
  readonly nextToken: string;
  readonly maxResults: number;
  readonly filter: LifecyclePolicyPreviewFilter;
}
export interface GetRegistryPolicy {
}
export interface GetRegistryScanningConfiguration {
}
export interface GetRepositoryPolicy {
  readonly registryId: string;
  readonly repositoryName: string;
}
export interface InitiateLayerUpload {
  readonly registryId: string;
  readonly repositoryName: string;
}
export interface ListImages {
  readonly registryId: string;
  readonly repositoryName: string;
  readonly nextToken: string;
  readonly maxResults: number;
  readonly filter: ListImagesFilter;
}
export interface ListTagsForResource {
  readonly resourceArn: string;
}
export interface PutImage {
  readonly registryId: string;
  readonly repositoryName: string;
  readonly imageManifest: string;
  readonly imageManifestMediaType: string;
  readonly imageTag: string;
  readonly imageDigest: string;
}
export interface PutImageScanningConfiguration {
  readonly registryId: string;
  readonly repositoryName: string;
  readonly imageScanningConfiguration: ImageScanningConfiguration;
}
export interface PutImageTagMutability {
  readonly registryId: string;
  readonly repositoryName: string;
  readonly imageTagMutability: string;
}
export interface PutLifecyclePolicy {
  readonly registryId: string;
  readonly repositoryName: string;
  readonly lifecyclePolicyText: string;
}
export interface PutRegistryPolicy {
  readonly policyText: string;
}
export interface PutRegistryScanningConfiguration {
  readonly scanType: string;
  readonly rules: [];
}
export interface PutReplicationConfiguration {
  readonly replicationConfiguration: ReplicationConfiguration;
}
export interface SetRepositoryPolicy {
  readonly registryId: string;
  readonly repositoryName: string;
  readonly policyText: string;
  readonly force: boolean;
}
export interface StartImageScan {
  readonly registryId: string;
  readonly repositoryName: string;
  readonly imageId: ImageIdentifier;
}
export interface StartLifecyclePolicyPreview {
  readonly registryId: string;
  readonly repositoryName: string;
  readonly lifecyclePolicyText: string;
}
export interface TagResource {
  readonly resourceArn: string;
  readonly tags: [];
}
export interface UntagResource {
  readonly resourceArn: string;
  readonly tagKeys: [];
}
export interface UploadLayerPart {
  readonly registryId: string;
  readonly repositoryName: string;
  readonly uploadId: string;
  readonly partFirstByte: number;
  readonly partLastByte: number;
  readonly layerPartBlob: unknown;
}



interface Attribute {
  readonly key: string;
  readonly value: string;
}

interface AuthorizationData {
  readonly authorizationToken: string;
  readonly expiresAt: Date;
  readonly proxyEndpoint: string;
}

interface AwsEcrContainerImageDetails {
  readonly architecture: string;
  readonly author: string;
  readonly imageHash: string;
  readonly imageTags: [];
  readonly platform: string;
  readonly pushedAt: Date;
  readonly registry: string;
  readonly repositoryName: string;
}

interface BatchCheckLayerAvailabilityRequest {
  readonly registryId: string;
  readonly repositoryName: string;
  readonly layerDigests: [];
}

interface BatchCheckLayerAvailabilityResponse {
  readonly layers: [];
  readonly failures: [];
}

interface BatchDeleteImageRequest {
  readonly registryId: string;
  readonly repositoryName: string;
  readonly imageIds: [];
}

interface BatchDeleteImageResponse {
  readonly imageIds: [];
  readonly failures: [];
}

interface BatchGetImageRequest {
  readonly registryId: string;
  readonly repositoryName: string;
  readonly imageIds: [];
  readonly acceptedMediaTypes: [];
}

interface BatchGetImageResponse {
  readonly images: [];
  readonly failures: [];
}

interface BatchGetRepositoryScanningConfigurationRequest {
  readonly repositoryNames: [];
}

interface BatchGetRepositoryScanningConfigurationResponse {
  readonly scanningConfigurations: [];
  readonly failures: [];
}

interface CompleteLayerUploadRequest {
  readonly registryId: string;
  readonly repositoryName: string;
  readonly uploadId: string;
  readonly layerDigests: [];
}

interface CompleteLayerUploadResponse {
  readonly registryId: string;
  readonly repositoryName: string;
  readonly uploadId: string;
  readonly layerDigest: string;
}

interface CreatePullThroughCacheRuleRequest {
  readonly ecrRepositoryPrefix: string;
  readonly upstreamRegistryUrl: string;
  readonly registryId: string;
}

interface CreatePullThroughCacheRuleResponse {
  readonly ecrRepositoryPrefix: string;
  readonly upstreamRegistryUrl: string;
  readonly createdAt: Date;
  readonly registryId: string;
}

interface CreateRepositoryRequest {
  readonly registryId: string;
  readonly repositoryName: string;
  readonly tags: [];
  readonly imageTagMutability: string;
  readonly imageScanningConfiguration: ImageScanningConfiguration;
  readonly encryptionConfiguration: EncryptionConfiguration;
}

interface CreateRepositoryResponse {
  readonly repository: Repository;
}

interface CvssScore {
  readonly baseScore: unknown;
  readonly scoringVector: string;
  readonly source: string;
  readonly version: string;
}

interface CvssScoreAdjustment {
  readonly metric: string;
  readonly reason: string;
}

interface CvssScoreDetails {
  readonly adjustments: [];
  readonly score: unknown;
  readonly scoreSource: string;
  readonly scoringVector: string;
  readonly version: string;
}

interface DeleteLifecyclePolicyRequest {
  readonly registryId: string;
  readonly repositoryName: string;
}

interface DeleteLifecyclePolicyResponse {
  readonly registryId: string;
  readonly repositoryName: string;
  readonly lifecyclePolicyText: string;
  readonly lastEvaluatedAt: Date;
}

interface DeletePullThroughCacheRuleRequest {
  readonly ecrRepositoryPrefix: string;
  readonly registryId: string;
}

interface DeletePullThroughCacheRuleResponse {
  readonly ecrRepositoryPrefix: string;
  readonly upstreamRegistryUrl: string;
  readonly createdAt: Date;
  readonly registryId: string;
}

interface DeleteRegistryPolicyRequest {
}

interface DeleteRegistryPolicyResponse {
  readonly registryId: string;
  readonly policyText: string;
}

interface DeleteRepositoryPolicyRequest {
  readonly registryId: string;
  readonly repositoryName: string;
}

interface DeleteRepositoryPolicyResponse {
  readonly registryId: string;
  readonly repositoryName: string;
  readonly policyText: string;
}

interface DeleteRepositoryRequest {
  readonly registryId: string;
  readonly repositoryName: string;
  readonly force: boolean;
}

interface DeleteRepositoryResponse {
  readonly repository: Repository;
}

interface DescribeImageReplicationStatusRequest {
  readonly repositoryName: string;
  readonly imageId: ImageIdentifier;
  readonly registryId: string;
}

interface DescribeImageReplicationStatusResponse {
  readonly repositoryName: string;
  readonly imageId: ImageIdentifier;
  readonly replicationStatuses: [];
}

interface DescribeImageScanFindingsRequest {
  readonly registryId: string;
  readonly repositoryName: string;
  readonly imageId: ImageIdentifier;
  readonly nextToken: string;
  readonly maxResults: number;
}

interface DescribeImageScanFindingsResponse {
  readonly registryId: string;
  readonly repositoryName: string;
  readonly imageId: ImageIdentifier;
  readonly imageScanStatus: ImageScanStatus;
  readonly imageScanFindings: ImageScanFindings;
  readonly nextToken: string;
}

interface DescribeImagesFilter {
  readonly tagStatus: string;
}

interface DescribeImagesRequest {
  readonly registryId: string;
  readonly repositoryName: string;
  readonly imageIds: [];
  readonly nextToken: string;
  readonly maxResults: number;
  readonly filter: DescribeImagesFilter;
}

interface DescribeImagesResponse {
  readonly imageDetails: [];
  readonly nextToken: string;
}

interface DescribePullThroughCacheRulesRequest {
  readonly registryId: string;
  readonly ecrRepositoryPrefixes: [];
  readonly nextToken: string;
  readonly maxResults: number;
}

interface DescribePullThroughCacheRulesResponse {
  readonly pullThroughCacheRules: [];
  readonly nextToken: string;
}

interface DescribeRegistryRequest {
}

interface DescribeRegistryResponse {
  readonly registryId: string;
  readonly replicationConfiguration: ReplicationConfiguration;
}

interface DescribeRepositoriesRequest {
  readonly registryId: string;
  readonly repositoryNames: [];
  readonly nextToken: string;
  readonly maxResults: number;
}

interface DescribeRepositoriesResponse {
  readonly repositories: [];
  readonly nextToken: string;
}

interface EmptyUploadException {
  readonly message: string;
}

interface EncryptionConfiguration {
  readonly encryptionType: string;
  readonly kmsKey: string;
}

interface EnhancedImageScanFinding {
  readonly awsAccountId: string;
  readonly description: string;
  readonly findingArn: string;
  readonly firstObservedAt: Date;
  readonly lastObservedAt: Date;
  readonly packageVulnerabilityDetails: PackageVulnerabilityDetails;
  readonly remediation: Remediation;
  readonly resources: [];
  readonly score: unknown;
  readonly scoreDetails: ScoreDetails;
  readonly severity: string;
  readonly status: string;
  readonly title: string;
  readonly type: string;
  readonly updatedAt: Date;
}

interface GetAuthorizationTokenRequest {
  readonly registryIds: [];
}

interface GetAuthorizationTokenResponse {
  readonly authorizationData: [];
}

interface GetDownloadUrlForLayerRequest {
  readonly registryId: string;
  readonly repositoryName: string;
  readonly layerDigest: string;
}

interface GetDownloadUrlForLayerResponse {
  readonly downloadUrl: string;
  readonly layerDigest: string;
}

interface GetLifecyclePolicyPreviewRequest {
  readonly registryId: string;
  readonly repositoryName: string;
  readonly imageIds: [];
  readonly nextToken: string;
  readonly maxResults: number;
  readonly filter: LifecyclePolicyPreviewFilter;
}

interface GetLifecyclePolicyPreviewResponse {
  readonly registryId: string;
  readonly repositoryName: string;
  readonly lifecyclePolicyText: string;
  readonly status: string;
  readonly nextToken: string;
  readonly previewResults: [];
  readonly summary: LifecyclePolicyPreviewSummary;
}

interface GetLifecyclePolicyRequest {
  readonly registryId: string;
  readonly repositoryName: string;
}

interface GetLifecyclePolicyResponse {
  readonly registryId: string;
  readonly repositoryName: string;
  readonly lifecyclePolicyText: string;
  readonly lastEvaluatedAt: Date;
}

interface GetRegistryPolicyRequest {
}

interface GetRegistryPolicyResponse {
  readonly registryId: string;
  readonly policyText: string;
}

interface GetRegistryScanningConfigurationRequest {
}

interface GetRegistryScanningConfigurationResponse {
  readonly registryId: string;
  readonly scanningConfiguration: RegistryScanningConfiguration;
}

interface GetRepositoryPolicyRequest {
  readonly registryId: string;
  readonly repositoryName: string;
}

interface GetRepositoryPolicyResponse {
  readonly registryId: string;
  readonly repositoryName: string;
  readonly policyText: string;
}

interface Image {
  readonly registryId: string;
  readonly repositoryName: string;
  readonly imageId: ImageIdentifier;
  readonly imageManifest: string;
  readonly imageManifestMediaType: string;
}

interface ImageAlreadyExistsException {
  readonly message: string;
}

interface ImageDetail {
  readonly registryId: string;
  readonly repositoryName: string;
  readonly imageDigest: string;
  readonly imageTags: [];
  readonly imageSizeInBytes: number;
  readonly imagePushedAt: Date;
  readonly imageScanStatus: ImageScanStatus;
  readonly imageScanFindingsSummary: ImageScanFindingsSummary;
  readonly imageManifestMediaType: string;
  readonly artifactMediaType: string;
}

interface ImageDigestDoesNotMatchException {
  readonly message: string;
}

interface ImageFailure {
  readonly imageId: ImageIdentifier;
  readonly failureCode: string;
  readonly failureReason: string;
}

interface ImageIdentifier {
  readonly imageDigest: string;
  readonly imageTag: string;
}

interface ImageNotFoundException {
  readonly message: string;
}

interface ImageReplicationStatus {
  readonly region: string;
  readonly registryId: string;
  readonly status: string;
  readonly failureCode: string;
}

interface ImageScanFinding {
  readonly name: string;
  readonly description: string;
  readonly uri: string;
  readonly severity: string;
  readonly attributes: [];
}

interface ImageScanFindings {
  readonly imageScanCompletedAt: Date;
  readonly vulnerabilitySourceUpdatedAt: Date;
  readonly findingSeverityCounts: {[key: string]: any};
  readonly findings: [];
  readonly enhancedFindings: [];
}

interface ImageScanFindingsSummary {
  readonly imageScanCompletedAt: Date;
  readonly vulnerabilitySourceUpdatedAt: Date;
  readonly findingSeverityCounts: {[key: string]: any};
}

interface ImageScanStatus {
  readonly status: string;
  readonly description: string;
}

interface ImageScanningConfiguration {
  readonly scanOnPush: boolean;
}

interface ImageTagAlreadyExistsException {
  readonly message: string;
}

interface InitiateLayerUploadRequest {
  readonly registryId: string;
  readonly repositoryName: string;
}

interface InitiateLayerUploadResponse {
  readonly uploadId: string;
  readonly partSize: number;
}

interface InvalidLayerException {
  readonly message: string;
}

interface InvalidLayerPartException {
  readonly registryId: string;
  readonly repositoryName: string;
  readonly uploadId: string;
  readonly lastValidByteReceived: number;
  readonly message: string;
}

interface InvalidParameterException {
  readonly message: string;
}

interface InvalidTagParameterException {
  readonly message: string;
}

interface KmsException {
  readonly message: string;
  readonly kmsError: string;
}

interface Layer {
  readonly layerDigest: string;
  readonly layerAvailability: string;
  readonly layerSize: number;
  readonly mediaType: string;
}

interface LayerAlreadyExistsException {
  readonly message: string;
}

interface LayerFailure {
  readonly layerDigest: string;
  readonly failureCode: string;
  readonly failureReason: string;
}

interface LayerInaccessibleException {
  readonly message: string;
}

interface LayerPartTooSmallException {
  readonly message: string;
}

interface LayersNotFoundException {
  readonly message: string;
}

interface LifecyclePolicyNotFoundException {
  readonly message: string;
}

interface LifecyclePolicyPreviewFilter {
  readonly tagStatus: string;
}

interface LifecyclePolicyPreviewInProgressException {
  readonly message: string;
}

interface LifecyclePolicyPreviewNotFoundException {
  readonly message: string;
}

interface LifecyclePolicyPreviewResult {
  readonly imageTags: [];
  readonly imageDigest: string;
  readonly imagePushedAt: Date;
  readonly action: LifecyclePolicyRuleAction;
  readonly appliedRulePriority: number;
}

interface LifecyclePolicyPreviewSummary {
  readonly expiringImageTotalCount: number;
}

interface LifecyclePolicyRuleAction {
  readonly type: string;
}

interface LimitExceededException {
  readonly message: string;
}

interface ListImagesFilter {
  readonly tagStatus: string;
}

interface ListImagesRequest {
  readonly registryId: string;
  readonly repositoryName: string;
  readonly nextToken: string;
  readonly maxResults: number;
  readonly filter: ListImagesFilter;
}

interface ListImagesResponse {
  readonly imageIds: [];
  readonly nextToken: string;
}

interface ListTagsForResourceRequest {
  readonly resourceArn: string;
}

interface ListTagsForResourceResponse {
  readonly tags: [];
}

interface PackageVulnerabilityDetails {
  readonly cvss: [];
  readonly referenceUrls: [];
  readonly relatedVulnerabilities: [];
  readonly source: string;
  readonly sourceUrl: string;
  readonly vendorCreatedAt: Date;
  readonly vendorSeverity: string;
  readonly vendorUpdatedAt: Date;
  readonly vulnerabilityId: string;
  readonly vulnerablePackages: [];
}

interface PullThroughCacheRule {
  readonly ecrRepositoryPrefix: string;
  readonly upstreamRegistryUrl: string;
  readonly createdAt: Date;
  readonly registryId: string;
}

interface PullThroughCacheRuleAlreadyExistsException {
  readonly message: string;
}

interface PullThroughCacheRuleNotFoundException {
  readonly message: string;
}

interface PutImageRequest {
  readonly registryId: string;
  readonly repositoryName: string;
  readonly imageManifest: string;
  readonly imageManifestMediaType: string;
  readonly imageTag: string;
  readonly imageDigest: string;
}

interface PutImageResponse {
  readonly image: Image;
}

interface PutImageScanningConfigurationRequest {
  readonly registryId: string;
  readonly repositoryName: string;
  readonly imageScanningConfiguration: ImageScanningConfiguration;
}

interface PutImageScanningConfigurationResponse {
  readonly registryId: string;
  readonly repositoryName: string;
  readonly imageScanningConfiguration: ImageScanningConfiguration;
}

interface PutImageTagMutabilityRequest {
  readonly registryId: string;
  readonly repositoryName: string;
  readonly imageTagMutability: string;
}

interface PutImageTagMutabilityResponse {
  readonly registryId: string;
  readonly repositoryName: string;
  readonly imageTagMutability: string;
}

interface PutLifecyclePolicyRequest {
  readonly registryId: string;
  readonly repositoryName: string;
  readonly lifecyclePolicyText: string;
}

interface PutLifecyclePolicyResponse {
  readonly registryId: string;
  readonly repositoryName: string;
  readonly lifecyclePolicyText: string;
}

interface PutRegistryPolicyRequest {
  readonly policyText: string;
}

interface PutRegistryPolicyResponse {
  readonly registryId: string;
  readonly policyText: string;
}

interface PutRegistryScanningConfigurationRequest {
  readonly scanType: string;
  readonly rules: [];
}

interface PutRegistryScanningConfigurationResponse {
  readonly registryScanningConfiguration: RegistryScanningConfiguration;
}

interface PutReplicationConfigurationRequest {
  readonly replicationConfiguration: ReplicationConfiguration;
}

interface PutReplicationConfigurationResponse {
  readonly replicationConfiguration: ReplicationConfiguration;
}

interface Recommendation {
  readonly url: string;
  readonly text: string;
}

interface ReferencedImagesNotFoundException {
  readonly message: string;
}

interface RegistryPolicyNotFoundException {
  readonly message: string;
}

interface RegistryScanningConfiguration {
  readonly scanType: string;
  readonly rules: [];
}

interface RegistryScanningRule {
  readonly scanFrequency: string;
  readonly repositoryFilters: [];
}

interface Remediation {
  readonly recommendation: Recommendation;
}

interface ReplicationConfiguration {
  readonly rules: [];
}

interface ReplicationDestination {
  readonly region: string;
  readonly registryId: string;
}

interface ReplicationRule {
  readonly destinations: [];
  readonly repositoryFilters: [];
}

interface Repository {
  readonly repositoryArn: string;
  readonly registryId: string;
  readonly repositoryName: string;
  readonly repositoryUri: string;
  readonly createdAt: Date;
  readonly imageTagMutability: string;
  readonly imageScanningConfiguration: ImageScanningConfiguration;
  readonly encryptionConfiguration: EncryptionConfiguration;
}

interface RepositoryAlreadyExistsException {
  readonly message: string;
}

interface RepositoryFilter {
  readonly filter: string;
  readonly filterType: string;
}

interface RepositoryNotEmptyException {
  readonly message: string;
}

interface RepositoryNotFoundException {
  readonly message: string;
}

interface RepositoryPolicyNotFoundException {
  readonly message: string;
}

interface RepositoryScanningConfiguration {
  readonly repositoryArn: string;
  readonly repositoryName: string;
  readonly scanOnPush: boolean;
  readonly scanFrequency: string;
  readonly appliedScanFilters: [];
}

interface RepositoryScanningConfigurationFailure {
  readonly repositoryName: string;
  readonly failureCode: string;
  readonly failureReason: string;
}

interface Resource {
  readonly details: ResourceDetails;
  readonly id: string;
  readonly tags: {[key: string]: any};
  readonly type: string;
}

interface ResourceDetails {
  readonly awsEcrContainerImage: AwsEcrContainerImageDetails;
}

interface ScanNotFoundException {
  readonly message: string;
}

interface ScanningRepositoryFilter {
  readonly filter: string;
  readonly filterType: string;
}

interface ScoreDetails {
  readonly cvss: CvssScoreDetails;
}

interface ServerException {
  readonly message: string;
}

interface SetRepositoryPolicyRequest {
  readonly registryId: string;
  readonly repositoryName: string;
  readonly policyText: string;
  readonly force: boolean;
}

interface SetRepositoryPolicyResponse {
  readonly registryId: string;
  readonly repositoryName: string;
  readonly policyText: string;
}

interface StartImageScanRequest {
  readonly registryId: string;
  readonly repositoryName: string;
  readonly imageId: ImageIdentifier;
}

interface StartImageScanResponse {
  readonly registryId: string;
  readonly repositoryName: string;
  readonly imageId: ImageIdentifier;
  readonly imageScanStatus: ImageScanStatus;
}

interface StartLifecyclePolicyPreviewRequest {
  readonly registryId: string;
  readonly repositoryName: string;
  readonly lifecyclePolicyText: string;
}

interface StartLifecyclePolicyPreviewResponse {
  readonly registryId: string;
  readonly repositoryName: string;
  readonly lifecyclePolicyText: string;
  readonly status: string;
}

interface Tag {
  readonly Key: string;
  readonly Value: string;
}

interface TagResourceRequest {
  readonly resourceArn: string;
  readonly tags: [];
}

interface TagResourceResponse {
}

interface TooManyTagsException {
  readonly message: string;
}

interface UnsupportedImageTypeException {
  readonly message: string;
}

interface UnsupportedUpstreamRegistryException {
  readonly message: string;
}

interface UntagResourceRequest {
  readonly resourceArn: string;
  readonly tagKeys: [];
}

interface UntagResourceResponse {
}

interface UploadLayerPartRequest {
  readonly registryId: string;
  readonly repositoryName: string;
  readonly uploadId: string;
  readonly partFirstByte: number;
  readonly partLastByte: number;
  readonly layerPartBlob: unknown;
}

interface UploadLayerPartResponse {
  readonly registryId: string;
  readonly repositoryName: string;
  readonly uploadId: string;
  readonly lastByteReceived: number;
}

interface UploadNotFoundException {
  readonly message: string;
}

interface ValidationException {
  readonly message: string;
}

interface VulnerablePackage {
  readonly arch: string;
  readonly epoch: number;
  readonly filePath: string;
  readonly name: string;
  readonly packageManager: string;
  readonly release: string;
  readonly sourceLayerHash: string;
  readonly version: string;
}

