/**
 * STOP. This file is autogenerated. DO NOT EDIT by hand
 */
export interface CreateConnectorProfile {
  readonly connectorProfileName: string;
  readonly kmsArn: string;
  readonly connectorType: string;
  readonly connectionMode: string;
  readonly connectorProfileConfig: ConnectorProfileConfig;
}
export interface CreateFlow {
  readonly flowName: string;
  readonly description: string;
  readonly kmsArn: string;
  readonly triggerConfig: TriggerConfig;
  readonly sourceFlowConfig: SourceFlowConfig;
  readonly destinationFlowConfigList: [];
  readonly tasks: [];
  readonly tags: {[key: string]: any};
}
export interface DeleteConnectorProfile {
  readonly connectorProfileName: string;
  readonly forceDelete: boolean;
}
export interface DeleteFlow {
  readonly flowName: string;
  readonly forceDelete: boolean;
}
export interface DescribeConnectorEntity {
  readonly connectorEntityName: string;
  readonly connectorType: string;
  readonly connectorProfileName: string;
}
export interface DescribeConnectorProfiles {
  readonly connectorProfileNames: [];
  readonly connectorType: string;
  readonly maxResults: number;
  readonly nextToken: string;
}
export interface DescribeConnectors {
  readonly connectorTypes: [];
  readonly nextToken: string;
}
export interface DescribeFlow {
  readonly flowName: string;
}
export interface DescribeFlowExecutionRecords {
  readonly flowName: string;
  readonly maxResults: number;
  readonly nextToken: string;
}
export interface ListConnectorEntities {
  readonly connectorProfileName: string;
  readonly connectorType: string;
  readonly entitiesPath: string;
}
export interface ListFlows {
  readonly maxResults: number;
  readonly nextToken: string;
}
export interface ListTagsForResource {
  readonly resourceArn: string;
}
export interface StartFlow {
  readonly flowName: string;
}
export interface StopFlow {
  readonly flowName: string;
}
export interface TagResource {
  readonly resourceArn: string;
  readonly tags: {[key: string]: any};
}
export interface UntagResource {
  readonly resourceArn: string;
  readonly tagKeys: [];
}
export interface UpdateConnectorProfile {
  readonly connectorProfileName: string;
  readonly connectionMode: string;
  readonly connectorProfileConfig: ConnectorProfileConfig;
}
export interface UpdateFlow {
  readonly flowName: string;
  readonly description: string;
  readonly triggerConfig: TriggerConfig;
  readonly sourceFlowConfig: SourceFlowConfig;
  readonly destinationFlowConfigList: [];
  readonly tasks: [];
}



interface AggregationConfig {
  readonly aggregationType: string;
}

interface AmplitudeConnectorProfileCredentials {
  readonly apiKey: string;
  readonly secretKey: string;
}

interface AmplitudeConnectorProfileProperties {
}

interface AmplitudeMetadata {
}

interface AmplitudeSourceProperties {
  readonly object: string;
}

interface BasicAuthCredentials {
  readonly username: string;
  readonly password: string;
}

interface ConflictException {
  readonly message: string;
}

interface ConnectorAuthenticationException {
  readonly message: string;
}

interface ConnectorConfiguration {
  readonly canUseAsSource: boolean;
  readonly canUseAsDestination: boolean;
  readonly supportedDestinationConnectors: [];
  readonly supportedSchedulingFrequencies: [];
  readonly isPrivateLinkEnabled: boolean;
  readonly isPrivateLinkEndpointUrlRequired: boolean;
  readonly supportedTriggerTypes: [];
  readonly connectorMetadata: ConnectorMetadata;
}

interface ConnectorEntity {
  readonly name: string;
  readonly label: string;
  readonly hasNestedEntities: boolean;
}

interface ConnectorEntityField {
  readonly identifier: string;
  readonly label: string;
  readonly supportedFieldTypeDetails: SupportedFieldTypeDetails;
  readonly description: string;
  readonly sourceProperties: SourceFieldProperties;
  readonly destinationProperties: DestinationFieldProperties;
}

interface ConnectorMetadata {
  readonly Amplitude: AmplitudeMetadata;
  readonly Datadog: DatadogMetadata;
  readonly Dynatrace: DynatraceMetadata;
  readonly GoogleAnalytics: GoogleAnalyticsMetadata;
  readonly InforNexus: InforNexusMetadata;
  readonly Marketo: MarketoMetadata;
  readonly Redshift: RedshiftMetadata;
  readonly S3: S3Metadata;
  readonly Salesforce: SalesforceMetadata;
  readonly ServiceNow: ServiceNowMetadata;
  readonly Singular: SingularMetadata;
  readonly Slack: SlackMetadata;
  readonly Snowflake: SnowflakeMetadata;
  readonly Trendmicro: TrendmicroMetadata;
  readonly Veeva: VeevaMetadata;
  readonly Zendesk: ZendeskMetadata;
  readonly EventBridge: EventBridgeMetadata;
  readonly Upsolver: UpsolverMetadata;
  readonly CustomerProfiles: CustomerProfilesMetadata;
  readonly Honeycode: HoneycodeMetadata;
  readonly SAPOData: SAPODataMetadata;
}

interface ConnectorOAuthRequest {
  readonly authCode: string;
  readonly redirectUri: string;
}

interface ConnectorOperator {
  readonly Amplitude: string;
  readonly Datadog: string;
  readonly Dynatrace: string;
  readonly GoogleAnalytics: string;
  readonly InforNexus: string;
  readonly Marketo: string;
  readonly S3: string;
  readonly Salesforce: string;
  readonly ServiceNow: string;
  readonly Singular: string;
  readonly Slack: string;
  readonly Trendmicro: string;
  readonly Veeva: string;
  readonly Zendesk: string;
  readonly SAPOData: string;
}

interface ConnectorProfile {
  readonly connectorProfileArn: string;
  readonly connectorProfileName: string;
  readonly connectorType: string;
  readonly connectionMode: string;
  readonly credentialsArn: string;
  readonly connectorProfileProperties: ConnectorProfileProperties;
  readonly createdAt: Date;
  readonly lastUpdatedAt: Date;
  readonly privateConnectionProvisioningState: PrivateConnectionProvisioningState;
}

interface ConnectorProfileConfig {
  readonly connectorProfileProperties: ConnectorProfileProperties;
  readonly connectorProfileCredentials: ConnectorProfileCredentials;
}

interface ConnectorProfileCredentials {
  readonly Amplitude: AmplitudeConnectorProfileCredentials;
  readonly Datadog: DatadogConnectorProfileCredentials;
  readonly Dynatrace: DynatraceConnectorProfileCredentials;
  readonly GoogleAnalytics: GoogleAnalyticsConnectorProfileCredentials;
  readonly Honeycode: HoneycodeConnectorProfileCredentials;
  readonly InforNexus: InforNexusConnectorProfileCredentials;
  readonly Marketo: MarketoConnectorProfileCredentials;
  readonly Redshift: RedshiftConnectorProfileCredentials;
  readonly Salesforce: SalesforceConnectorProfileCredentials;
  readonly ServiceNow: ServiceNowConnectorProfileCredentials;
  readonly Singular: SingularConnectorProfileCredentials;
  readonly Slack: SlackConnectorProfileCredentials;
  readonly Snowflake: SnowflakeConnectorProfileCredentials;
  readonly Trendmicro: TrendmicroConnectorProfileCredentials;
  readonly Veeva: VeevaConnectorProfileCredentials;
  readonly Zendesk: ZendeskConnectorProfileCredentials;
  readonly SAPOData: SAPODataConnectorProfileCredentials;
}

interface ConnectorProfileProperties {
  readonly Amplitude: AmplitudeConnectorProfileProperties;
  readonly Datadog: DatadogConnectorProfileProperties;
  readonly Dynatrace: DynatraceConnectorProfileProperties;
  readonly GoogleAnalytics: GoogleAnalyticsConnectorProfileProperties;
  readonly Honeycode: HoneycodeConnectorProfileProperties;
  readonly InforNexus: InforNexusConnectorProfileProperties;
  readonly Marketo: MarketoConnectorProfileProperties;
  readonly Redshift: RedshiftConnectorProfileProperties;
  readonly Salesforce: SalesforceConnectorProfileProperties;
  readonly ServiceNow: ServiceNowConnectorProfileProperties;
  readonly Singular: SingularConnectorProfileProperties;
  readonly Slack: SlackConnectorProfileProperties;
  readonly Snowflake: SnowflakeConnectorProfileProperties;
  readonly Trendmicro: TrendmicroConnectorProfileProperties;
  readonly Veeva: VeevaConnectorProfileProperties;
  readonly Zendesk: ZendeskConnectorProfileProperties;
  readonly SAPOData: SAPODataConnectorProfileProperties;
}

interface ConnectorServerException {
  readonly message: string;
}

interface CreateConnectorProfileRequest {
  readonly connectorProfileName: string;
  readonly kmsArn: string;
  readonly connectorType: string;
  readonly connectionMode: string;
  readonly connectorProfileConfig: ConnectorProfileConfig;
}

interface CreateConnectorProfileResponse {
  readonly connectorProfileArn: string;
}

interface CreateFlowRequest {
  readonly flowName: string;
  readonly description: string;
  readonly kmsArn: string;
  readonly triggerConfig: TriggerConfig;
  readonly sourceFlowConfig: SourceFlowConfig;
  readonly destinationFlowConfigList: [];
  readonly tasks: [];
  readonly tags: {[key: string]: any};
}

interface CreateFlowResponse {
  readonly flowArn: string;
  readonly flowStatus: string;
}

interface CustomerProfilesDestinationProperties {
  readonly domainName: string;
  readonly objectTypeName: string;
}

interface CustomerProfilesMetadata {
}

interface DatadogConnectorProfileCredentials {
  readonly apiKey: string;
  readonly applicationKey: string;
}

interface DatadogConnectorProfileProperties {
  readonly instanceUrl: string;
}

interface DatadogMetadata {
}

interface DatadogSourceProperties {
  readonly object: string;
}

interface DeleteConnectorProfileRequest {
  readonly connectorProfileName: string;
  readonly forceDelete: boolean;
}

interface DeleteConnectorProfileResponse {
}

interface DeleteFlowRequest {
  readonly flowName: string;
  readonly forceDelete: boolean;
}

interface DeleteFlowResponse {
}

interface DescribeConnectorEntityRequest {
  readonly connectorEntityName: string;
  readonly connectorType: string;
  readonly connectorProfileName: string;
}

interface DescribeConnectorEntityResponse {
  readonly connectorEntityFields: [];
}

interface DescribeConnectorProfilesRequest {
  readonly connectorProfileNames: [];
  readonly connectorType: string;
  readonly maxResults: number;
  readonly nextToken: string;
}

interface DescribeConnectorProfilesResponse {
  readonly connectorProfileDetails: [];
  readonly nextToken: string;
}

interface DescribeConnectorsRequest {
  readonly connectorTypes: [];
  readonly nextToken: string;
}

interface DescribeConnectorsResponse {
  readonly connectorConfigurations: {[key: string]: any};
  readonly nextToken: string;
}

interface DescribeFlowExecutionRecordsRequest {
  readonly flowName: string;
  readonly maxResults: number;
  readonly nextToken: string;
}

interface DescribeFlowExecutionRecordsResponse {
  readonly flowExecutions: [];
  readonly nextToken: string;
}

interface DescribeFlowRequest {
  readonly flowName: string;
}

interface DescribeFlowResponse {
  readonly flowArn: string;
  readonly description: string;
  readonly flowName: string;
  readonly kmsArn: string;
  readonly flowStatus: string;
  readonly flowStatusMessage: string;
  readonly sourceFlowConfig: SourceFlowConfig;
  readonly destinationFlowConfigList: [];
  readonly lastRunExecutionDetails: ExecutionDetails;
  readonly triggerConfig: TriggerConfig;
  readonly tasks: [];
  readonly createdAt: Date;
  readonly lastUpdatedAt: Date;
  readonly createdBy: string;
  readonly lastUpdatedBy: string;
  readonly tags: {[key: string]: any};
}

interface DestinationConnectorProperties {
  readonly Redshift: RedshiftDestinationProperties;
  readonly S3: S3DestinationProperties;
  readonly Salesforce: SalesforceDestinationProperties;
  readonly Snowflake: SnowflakeDestinationProperties;
  readonly EventBridge: EventBridgeDestinationProperties;
  readonly LookoutMetrics: LookoutMetricsDestinationProperties;
  readonly Upsolver: UpsolverDestinationProperties;
  readonly Honeycode: HoneycodeDestinationProperties;
  readonly CustomerProfiles: CustomerProfilesDestinationProperties;
  readonly Zendesk: ZendeskDestinationProperties;
}

interface DestinationFieldProperties {
  readonly isCreatable: boolean;
  readonly isNullable: boolean;
  readonly isUpsertable: boolean;
  readonly isUpdatable: boolean;
  readonly supportedWriteOperations: [];
}

interface DestinationFlowConfig {
  readonly connectorType: string;
  readonly connectorProfileName: string;
  readonly destinationConnectorProperties: DestinationConnectorProperties;
}

interface DynatraceConnectorProfileCredentials {
  readonly apiToken: string;
}

interface DynatraceConnectorProfileProperties {
  readonly instanceUrl: string;
}

interface DynatraceMetadata {
}

interface DynatraceSourceProperties {
  readonly object: string;
}

interface ErrorHandlingConfig {
  readonly failOnFirstDestinationError: boolean;
  readonly bucketPrefix: string;
  readonly bucketName: string;
}

interface ErrorInfo {
  readonly putFailuresCount: number;
  readonly executionMessage: string;
}

interface EventBridgeDestinationProperties {
  readonly object: string;
  readonly errorHandlingConfig: ErrorHandlingConfig;
}

interface EventBridgeMetadata {
}

interface ExecutionDetails {
  readonly mostRecentExecutionMessage: string;
  readonly mostRecentExecutionTime: Date;
  readonly mostRecentExecutionStatus: string;
}

interface ExecutionRecord {
  readonly executionId: string;
  readonly executionStatus: string;
  readonly executionResult: ExecutionResult;
  readonly startedAt: Date;
  readonly lastUpdatedAt: Date;
  readonly dataPullStartTime: Date;
  readonly dataPullEndTime: Date;
}

interface ExecutionResult {
  readonly errorInfo: ErrorInfo;
  readonly bytesProcessed: number;
  readonly bytesWritten: number;
  readonly recordsProcessed: number;
}

interface FieldTypeDetails {
  readonly fieldType: string;
  readonly filterOperators: [];
  readonly supportedValues: [];
}

interface FlowDefinition {
  readonly flowArn: string;
  readonly description: string;
  readonly flowName: string;
  readonly flowStatus: string;
  readonly sourceConnectorType: string;
  readonly destinationConnectorType: string;
  readonly triggerType: string;
  readonly createdAt: Date;
  readonly lastUpdatedAt: Date;
  readonly createdBy: string;
  readonly lastUpdatedBy: string;
  readonly tags: {[key: string]: any};
  readonly lastRunExecutionDetails: ExecutionDetails;
}

interface GoogleAnalyticsConnectorProfileCredentials {
  readonly clientId: string;
  readonly clientSecret: string;
  readonly accessToken: string;
  readonly refreshToken: string;
  readonly oAuthRequest: ConnectorOAuthRequest;
}

interface GoogleAnalyticsConnectorProfileProperties {
}

interface GoogleAnalyticsMetadata {
  readonly oAuthScopes: [];
}

interface GoogleAnalyticsSourceProperties {
  readonly object: string;
}

interface HoneycodeConnectorProfileCredentials {
  readonly accessToken: string;
  readonly refreshToken: string;
  readonly oAuthRequest: ConnectorOAuthRequest;
}

interface HoneycodeConnectorProfileProperties {
}

interface HoneycodeDestinationProperties {
  readonly object: string;
  readonly errorHandlingConfig: ErrorHandlingConfig;
}

interface HoneycodeMetadata {
  readonly oAuthScopes: [];
}

interface IncrementalPullConfig {
  readonly datetimeTypeFieldName: string;
}

interface InforNexusConnectorProfileCredentials {
  readonly accessKeyId: string;
  readonly userId: string;
  readonly secretAccessKey: string;
  readonly datakey: string;
}

interface InforNexusConnectorProfileProperties {
  readonly instanceUrl: string;
}

interface InforNexusMetadata {
}

interface InforNexusSourceProperties {
  readonly object: string;
}

interface InternalServerException {
  readonly message: string;
}

interface ListConnectorEntitiesRequest {
  readonly connectorProfileName: string;
  readonly connectorType: string;
  readonly entitiesPath: string;
}

interface ListConnectorEntitiesResponse {
  readonly connectorEntityMap: {[key: string]: any};
}

interface ListFlowsRequest {
  readonly maxResults: number;
  readonly nextToken: string;
}

interface ListFlowsResponse {
  readonly flows: [];
  readonly nextToken: string;
}

interface ListTagsForResourceRequest {
  readonly resourceArn: string;
}

interface ListTagsForResourceResponse {
  readonly tags: {[key: string]: any};
}

interface LookoutMetricsDestinationProperties {
}

interface MarketoConnectorProfileCredentials {
  readonly clientId: string;
  readonly clientSecret: string;
  readonly accessToken: string;
  readonly oAuthRequest: ConnectorOAuthRequest;
}

interface MarketoConnectorProfileProperties {
  readonly instanceUrl: string;
}

interface MarketoMetadata {
}

interface MarketoSourceProperties {
  readonly object: string;
}

interface OAuthCredentials {
  readonly clientId: string;
  readonly clientSecret: string;
  readonly accessToken: string;
  readonly refreshToken: string;
  readonly oAuthRequest: ConnectorOAuthRequest;
}

interface OAuthProperties {
  readonly tokenUrl: string;
  readonly authCodeUrl: string;
  readonly oAuthScopes: [];
}

interface PrefixConfig {
  readonly prefixType: string;
  readonly prefixFormat: string;
}

interface PrivateConnectionProvisioningState {
  readonly status: string;
  readonly failureMessage: string;
  readonly failureCause: string;
}

interface RedshiftConnectorProfileCredentials {
  readonly username: string;
  readonly password: string;
}

interface RedshiftConnectorProfileProperties {
  readonly databaseUrl: string;
  readonly bucketName: string;
  readonly bucketPrefix: string;
  readonly roleArn: string;
}

interface RedshiftDestinationProperties {
  readonly object: string;
  readonly intermediateBucketName: string;
  readonly bucketPrefix: string;
  readonly errorHandlingConfig: ErrorHandlingConfig;
}

interface RedshiftMetadata {
}

interface ResourceNotFoundException {
  readonly message: string;
}

interface S3DestinationProperties {
  readonly bucketName: string;
  readonly bucketPrefix: string;
  readonly s3OutputFormatConfig: S3OutputFormatConfig;
}

interface S3InputFormatConfig {
  readonly s3InputFileType: string;
}

interface S3Metadata {
}

interface S3OutputFormatConfig {
  readonly fileType: string;
  readonly prefixConfig: PrefixConfig;
  readonly aggregationConfig: AggregationConfig;
}

interface S3SourceProperties {
  readonly bucketName: string;
  readonly bucketPrefix: string;
  readonly s3InputFormatConfig: S3InputFormatConfig;
}

interface SAPODataConnectorProfileCredentials {
  readonly basicAuthCredentials: BasicAuthCredentials;
  readonly oAuthCredentials: OAuthCredentials;
}

interface SAPODataConnectorProfileProperties {
  readonly applicationHostUrl: string;
  readonly applicationServicePath: string;
  readonly portNumber: number;
  readonly clientNumber: string;
  readonly logonLanguage: string;
  readonly privateLinkServiceName: string;
  readonly oAuthProperties: OAuthProperties;
}

interface SAPODataMetadata {
}

interface SAPODataSourceProperties {
  readonly objectPath: string;
}

interface SalesforceConnectorProfileCredentials {
  readonly accessToken: string;
  readonly refreshToken: string;
  readonly oAuthRequest: ConnectorOAuthRequest;
  readonly clientCredentialsArn: string;
}

interface SalesforceConnectorProfileProperties {
  readonly instanceUrl: string;
  readonly isSandboxEnvironment: boolean;
}

interface SalesforceDestinationProperties {
  readonly object: string;
  readonly idFieldNames: [];
  readonly errorHandlingConfig: ErrorHandlingConfig;
  readonly writeOperationType: string;
}

interface SalesforceMetadata {
  readonly oAuthScopes: [];
}

interface SalesforceSourceProperties {
  readonly object: string;
  readonly enableDynamicFieldUpdate: boolean;
  readonly includeDeletedRecords: boolean;
}

interface ScheduledTriggerProperties {
  readonly scheduleExpression: string;
  readonly dataPullMode: string;
  readonly scheduleStartTime: Date;
  readonly scheduleEndTime: Date;
  readonly timezone: string;
  readonly scheduleOffset: number;
  readonly firstExecutionFrom: Date;
}

interface ServiceNowConnectorProfileCredentials {
  readonly username: string;
  readonly password: string;
}

interface ServiceNowConnectorProfileProperties {
  readonly instanceUrl: string;
}

interface ServiceNowMetadata {
}

interface ServiceNowSourceProperties {
  readonly object: string;
}

interface ServiceQuotaExceededException {
  readonly message: string;
}

interface SingularConnectorProfileCredentials {
  readonly apiKey: string;
}

interface SingularConnectorProfileProperties {
}

interface SingularMetadata {
}

interface SingularSourceProperties {
  readonly object: string;
}

interface SlackConnectorProfileCredentials {
  readonly clientId: string;
  readonly clientSecret: string;
  readonly accessToken: string;
  readonly oAuthRequest: ConnectorOAuthRequest;
}

interface SlackConnectorProfileProperties {
  readonly instanceUrl: string;
}

interface SlackMetadata {
  readonly oAuthScopes: [];
}

interface SlackSourceProperties {
  readonly object: string;
}

interface SnowflakeConnectorProfileCredentials {
  readonly username: string;
  readonly password: string;
}

interface SnowflakeConnectorProfileProperties {
  readonly warehouse: string;
  readonly stage: string;
  readonly bucketName: string;
  readonly bucketPrefix: string;
  readonly privateLinkServiceName: string;
  readonly accountName: string;
  readonly region: string;
}

interface SnowflakeDestinationProperties {
  readonly object: string;
  readonly intermediateBucketName: string;
  readonly bucketPrefix: string;
  readonly errorHandlingConfig: ErrorHandlingConfig;
}

interface SnowflakeMetadata {
  readonly supportedRegions: [];
}

interface SourceConnectorProperties {
  readonly Amplitude: AmplitudeSourceProperties;
  readonly Datadog: DatadogSourceProperties;
  readonly Dynatrace: DynatraceSourceProperties;
  readonly GoogleAnalytics: GoogleAnalyticsSourceProperties;
  readonly InforNexus: InforNexusSourceProperties;
  readonly Marketo: MarketoSourceProperties;
  readonly S3: S3SourceProperties;
  readonly Salesforce: SalesforceSourceProperties;
  readonly ServiceNow: ServiceNowSourceProperties;
  readonly Singular: SingularSourceProperties;
  readonly Slack: SlackSourceProperties;
  readonly Trendmicro: TrendmicroSourceProperties;
  readonly Veeva: VeevaSourceProperties;
  readonly Zendesk: ZendeskSourceProperties;
  readonly SAPOData: SAPODataSourceProperties;
}

interface SourceFieldProperties {
  readonly isRetrievable: boolean;
  readonly isQueryable: boolean;
}

interface SourceFlowConfig {
  readonly connectorType: string;
  readonly connectorProfileName: string;
  readonly sourceConnectorProperties: SourceConnectorProperties;
  readonly incrementalPullConfig: IncrementalPullConfig;
}

interface StartFlowRequest {
  readonly flowName: string;
}

interface StartFlowResponse {
  readonly flowArn: string;
  readonly flowStatus: string;
  readonly executionId: string;
}

interface StopFlowRequest {
  readonly flowName: string;
}

interface StopFlowResponse {
  readonly flowArn: string;
  readonly flowStatus: string;
}

interface SupportedFieldTypeDetails {
  readonly v1: FieldTypeDetails;
}

interface TagResourceRequest {
  readonly resourceArn: string;
  readonly tags: {[key: string]: any};
}

interface TagResourceResponse {
}

interface Task {
  readonly sourceFields: [];
  readonly connectorOperator: ConnectorOperator;
  readonly destinationField: string;
  readonly taskType: string;
  readonly taskProperties: {[key: string]: any};
}

interface TrendmicroConnectorProfileCredentials {
  readonly apiSecretKey: string;
}

interface TrendmicroConnectorProfileProperties {
}

interface TrendmicroMetadata {
}

interface TrendmicroSourceProperties {
  readonly object: string;
}

interface TriggerConfig {
  readonly triggerType: string;
  readonly triggerProperties: TriggerProperties;
}

interface TriggerProperties {
  readonly Scheduled: ScheduledTriggerProperties;
}

interface UnsupportedOperationException {
  readonly message: string;
}

interface UntagResourceRequest {
  readonly resourceArn: string;
  readonly tagKeys: [];
}

interface UntagResourceResponse {
}

interface UpdateConnectorProfileRequest {
  readonly connectorProfileName: string;
  readonly connectionMode: string;
  readonly connectorProfileConfig: ConnectorProfileConfig;
}

interface UpdateConnectorProfileResponse {
  readonly connectorProfileArn: string;
}

interface UpdateFlowRequest {
  readonly flowName: string;
  readonly description: string;
  readonly triggerConfig: TriggerConfig;
  readonly sourceFlowConfig: SourceFlowConfig;
  readonly destinationFlowConfigList: [];
  readonly tasks: [];
}

interface UpdateFlowResponse {
  readonly flowStatus: string;
}

interface UpsolverDestinationProperties {
  readonly bucketName: string;
  readonly bucketPrefix: string;
  readonly s3OutputFormatConfig: UpsolverS3OutputFormatConfig;
}

interface UpsolverMetadata {
}

interface UpsolverS3OutputFormatConfig {
  readonly fileType: string;
  readonly prefixConfig: PrefixConfig;
  readonly aggregationConfig: AggregationConfig;
}

interface ValidationException {
  readonly message: string;
}

interface VeevaConnectorProfileCredentials {
  readonly username: string;
  readonly password: string;
}

interface VeevaConnectorProfileProperties {
  readonly instanceUrl: string;
}

interface VeevaMetadata {
}

interface VeevaSourceProperties {
  readonly object: string;
  readonly documentType: string;
  readonly includeSourceFiles: boolean;
  readonly includeRenditions: boolean;
  readonly includeAllVersions: boolean;
}

interface ZendeskConnectorProfileCredentials {
  readonly clientId: string;
  readonly clientSecret: string;
  readonly accessToken: string;
  readonly oAuthRequest: ConnectorOAuthRequest;
}

interface ZendeskConnectorProfileProperties {
  readonly instanceUrl: string;
}

interface ZendeskDestinationProperties {
  readonly object: string;
  readonly idFieldNames: [];
  readonly errorHandlingConfig: ErrorHandlingConfig;
  readonly writeOperationType: string;
}

interface ZendeskMetadata {
  readonly oAuthScopes: [];
}

interface ZendeskSourceProperties {
  readonly object: string;
}

