/**
 * STOP. This file is autogenerated. DO NOT EDIT by hand
 */
export interface BatchCheckLayerAvailability {
  readonly registryId: string;
  readonly repositoryName: string;
  readonly layerDigests: [];
}
export interface BatchDeleteImage {
  readonly registryId: string;
  readonly repositoryName: string;
  readonly imageIds: [];
}
export interface CompleteLayerUpload {
  readonly registryId: string;
  readonly repositoryName: string;
  readonly uploadId: string;
  readonly layerDigests: [];
}
export interface CreateRepository {
  readonly repositoryName: string;
  readonly catalogData: RepositoryCatalogDataInput;
  readonly tags: [];
}
export interface DeleteRepository {
  readonly registryId: string;
  readonly repositoryName: string;
  readonly force: boolean;
}
export interface DeleteRepositoryPolicy {
  readonly registryId: string;
  readonly repositoryName: string;
}
export interface DescribeImageTags {
  readonly registryId: string;
  readonly repositoryName: string;
  readonly nextToken: string;
  readonly maxResults: number;
}
export interface DescribeImages {
  readonly registryId: string;
  readonly repositoryName: string;
  readonly imageIds: [];
  readonly nextToken: string;
  readonly maxResults: number;
}
export interface DescribeRegistries {
  readonly nextToken: string;
  readonly maxResults: number;
}
export interface DescribeRepositories {
  readonly registryId: string;
  readonly repositoryNames: [];
  readonly nextToken: string;
  readonly maxResults: number;
}
export interface GetAuthorizationToken {
}
export interface GetRegistryCatalogData {
}
export interface GetRepositoryCatalogData {
  readonly registryId: string;
  readonly repositoryName: string;
}
export interface GetRepositoryPolicy {
  readonly registryId: string;
  readonly repositoryName: string;
}
export interface InitiateLayerUpload {
  readonly registryId: string;
  readonly repositoryName: string;
}
export interface ListTagsForResource {
  readonly resourceArn: string;
}
export interface PutImage {
  readonly registryId: string;
  readonly repositoryName: string;
  readonly imageManifest: string;
  readonly imageManifestMediaType: string;
  readonly imageTag: string;
  readonly imageDigest: string;
}
export interface PutRegistryCatalogData {
  readonly displayName: string;
}
export interface PutRepositoryCatalogData {
  readonly registryId: string;
  readonly repositoryName: string;
  readonly catalogData: RepositoryCatalogDataInput;
}
export interface SetRepositoryPolicy {
  readonly registryId: string;
  readonly repositoryName: string;
  readonly policyText: string;
  readonly force: boolean;
}
export interface TagResource {
  readonly resourceArn: string;
  readonly tags: [];
}
export interface UntagResource {
  readonly resourceArn: string;
  readonly tagKeys: [];
}
export interface UploadLayerPart {
  readonly registryId: string;
  readonly repositoryName: string;
  readonly uploadId: string;
  readonly partFirstByte: number;
  readonly partLastByte: number;
  readonly layerPartBlob: unknown;
}



interface AuthorizationData {
  readonly authorizationToken: string;
  readonly expiresAt: Date;
}

interface BatchCheckLayerAvailabilityRequest {
  readonly registryId: string;
  readonly repositoryName: string;
  readonly layerDigests: [];
}

interface BatchCheckLayerAvailabilityResponse {
  readonly layers: [];
  readonly failures: [];
}

interface BatchDeleteImageRequest {
  readonly registryId: string;
  readonly repositoryName: string;
  readonly imageIds: [];
}

interface BatchDeleteImageResponse {
  readonly imageIds: [];
  readonly failures: [];
}

interface CompleteLayerUploadRequest {
  readonly registryId: string;
  readonly repositoryName: string;
  readonly uploadId: string;
  readonly layerDigests: [];
}

interface CompleteLayerUploadResponse {
  readonly registryId: string;
  readonly repositoryName: string;
  readonly uploadId: string;
  readonly layerDigest: string;
}

interface CreateRepositoryRequest {
  readonly repositoryName: string;
  readonly catalogData: RepositoryCatalogDataInput;
  readonly tags: [];
}

interface CreateRepositoryResponse {
  readonly repository: Repository;
  readonly catalogData: RepositoryCatalogData;
}

interface DeleteRepositoryPolicyRequest {
  readonly registryId: string;
  readonly repositoryName: string;
}

interface DeleteRepositoryPolicyResponse {
  readonly registryId: string;
  readonly repositoryName: string;
  readonly policyText: string;
}

interface DeleteRepositoryRequest {
  readonly registryId: string;
  readonly repositoryName: string;
  readonly force: boolean;
}

interface DeleteRepositoryResponse {
  readonly repository: Repository;
}

interface DescribeImageTagsRequest {
  readonly registryId: string;
  readonly repositoryName: string;
  readonly nextToken: string;
  readonly maxResults: number;
}

interface DescribeImageTagsResponse {
  readonly imageTagDetails: [];
  readonly nextToken: string;
}

interface DescribeImagesRequest {
  readonly registryId: string;
  readonly repositoryName: string;
  readonly imageIds: [];
  readonly nextToken: string;
  readonly maxResults: number;
}

interface DescribeImagesResponse {
  readonly imageDetails: [];
  readonly nextToken: string;
}

interface DescribeRegistriesRequest {
  readonly nextToken: string;
  readonly maxResults: number;
}

interface DescribeRegistriesResponse {
  readonly registries: [];
  readonly nextToken: string;
}

interface DescribeRepositoriesRequest {
  readonly registryId: string;
  readonly repositoryNames: [];
  readonly nextToken: string;
  readonly maxResults: number;
}

interface DescribeRepositoriesResponse {
  readonly repositories: [];
  readonly nextToken: string;
}

interface EmptyUploadException {
  readonly message: string;
}

interface GetAuthorizationTokenRequest {
}

interface GetAuthorizationTokenResponse {
  readonly authorizationData: AuthorizationData;
}

interface GetRegistryCatalogDataRequest {
}

interface GetRegistryCatalogDataResponse {
  readonly registryCatalogData: RegistryCatalogData;
}

interface GetRepositoryCatalogDataRequest {
  readonly registryId: string;
  readonly repositoryName: string;
}

interface GetRepositoryCatalogDataResponse {
  readonly catalogData: RepositoryCatalogData;
}

interface GetRepositoryPolicyRequest {
  readonly registryId: string;
  readonly repositoryName: string;
}

interface GetRepositoryPolicyResponse {
  readonly registryId: string;
  readonly repositoryName: string;
  readonly policyText: string;
}

interface Image {
  readonly registryId: string;
  readonly repositoryName: string;
  readonly imageId: ImageIdentifier;
  readonly imageManifest: string;
  readonly imageManifestMediaType: string;
}

interface ImageAlreadyExistsException {
  readonly message: string;
}

interface ImageDetail {
  readonly registryId: string;
  readonly repositoryName: string;
  readonly imageDigest: string;
  readonly imageTags: [];
  readonly imageSizeInBytes: number;
  readonly imagePushedAt: Date;
  readonly imageManifestMediaType: string;
  readonly artifactMediaType: string;
}

interface ImageDigestDoesNotMatchException {
  readonly message: string;
}

interface ImageFailure {
  readonly imageId: ImageIdentifier;
  readonly failureCode: string;
  readonly failureReason: string;
}

interface ImageIdentifier {
  readonly imageDigest: string;
  readonly imageTag: string;
}

interface ImageNotFoundException {
  readonly message: string;
}

interface ImageTagAlreadyExistsException {
  readonly message: string;
}

interface ImageTagDetail {
  readonly imageTag: string;
  readonly createdAt: Date;
  readonly imageDetail: ReferencedImageDetail;
}

interface InitiateLayerUploadRequest {
  readonly registryId: string;
  readonly repositoryName: string;
}

interface InitiateLayerUploadResponse {
  readonly uploadId: string;
  readonly partSize: number;
}

interface InvalidLayerException {
  readonly message: string;
}

interface InvalidLayerPartException {
  readonly registryId: string;
  readonly repositoryName: string;
  readonly uploadId: string;
  readonly lastValidByteReceived: number;
  readonly message: string;
}

interface InvalidParameterException {
  readonly message: string;
}

interface InvalidTagParameterException {
  readonly message: string;
}

interface Layer {
  readonly layerDigest: string;
  readonly layerAvailability: string;
  readonly layerSize: number;
  readonly mediaType: string;
}

interface LayerAlreadyExistsException {
  readonly message: string;
}

interface LayerFailure {
  readonly layerDigest: string;
  readonly failureCode: string;
  readonly failureReason: string;
}

interface LayerPartTooSmallException {
  readonly message: string;
}

interface LayersNotFoundException {
  readonly message: string;
}

interface LimitExceededException {
  readonly message: string;
}

interface ListTagsForResourceRequest {
  readonly resourceArn: string;
}

interface ListTagsForResourceResponse {
  readonly tags: [];
}

interface PutImageRequest {
  readonly registryId: string;
  readonly repositoryName: string;
  readonly imageManifest: string;
  readonly imageManifestMediaType: string;
  readonly imageTag: string;
  readonly imageDigest: string;
}

interface PutImageResponse {
  readonly image: Image;
}

interface PutRegistryCatalogDataRequest {
  readonly displayName: string;
}

interface PutRegistryCatalogDataResponse {
  readonly registryCatalogData: RegistryCatalogData;
}

interface PutRepositoryCatalogDataRequest {
  readonly registryId: string;
  readonly repositoryName: string;
  readonly catalogData: RepositoryCatalogDataInput;
}

interface PutRepositoryCatalogDataResponse {
  readonly catalogData: RepositoryCatalogData;
}

interface ReferencedImageDetail {
  readonly imageDigest: string;
  readonly imageSizeInBytes: number;
  readonly imagePushedAt: Date;
  readonly imageManifestMediaType: string;
  readonly artifactMediaType: string;
}

interface ReferencedImagesNotFoundException {
  readonly message: string;
}

interface Registry {
  readonly registryId: string;
  readonly registryArn: string;
  readonly registryUri: string;
  readonly verified: boolean;
  readonly aliases: [];
}

interface RegistryAlias {
  readonly name: string;
  readonly status: string;
  readonly primaryRegistryAlias: boolean;
  readonly defaultRegistryAlias: boolean;
}

interface RegistryCatalogData {
  readonly displayName: string;
}

interface RegistryNotFoundException {
  readonly message: string;
}

interface Repository {
  readonly repositoryArn: string;
  readonly registryId: string;
  readonly repositoryName: string;
  readonly repositoryUri: string;
  readonly createdAt: Date;
}

interface RepositoryAlreadyExistsException {
  readonly message: string;
}

interface RepositoryCatalogData {
  readonly description: string;
  readonly architectures: [];
  readonly operatingSystems: [];
  readonly logoUrl: string;
  readonly aboutText: string;
  readonly usageText: string;
  readonly marketplaceCertified: boolean;
}

interface RepositoryCatalogDataInput {
  readonly description: string;
  readonly architectures: [];
  readonly operatingSystems: [];
  readonly logoImageBlob: unknown;
  readonly aboutText: string;
  readonly usageText: string;
}

interface RepositoryNotEmptyException {
  readonly message: string;
}

interface RepositoryNotFoundException {
  readonly message: string;
}

interface RepositoryPolicyNotFoundException {
  readonly message: string;
}

interface ServerException {
  readonly message: string;
}

interface SetRepositoryPolicyRequest {
  readonly registryId: string;
  readonly repositoryName: string;
  readonly policyText: string;
  readonly force: boolean;
}

interface SetRepositoryPolicyResponse {
  readonly registryId: string;
  readonly repositoryName: string;
  readonly policyText: string;
}

interface Tag {
  readonly Key: string;
  readonly Value: string;
}

interface TagResourceRequest {
  readonly resourceArn: string;
  readonly tags: [];
}

interface TagResourceResponse {
}

interface TooManyTagsException {
  readonly message: string;
}

interface UnsupportedCommandException {
  readonly message: string;
}

interface UntagResourceRequest {
  readonly resourceArn: string;
  readonly tagKeys: [];
}

interface UntagResourceResponse {
}

interface UploadLayerPartRequest {
  readonly registryId: string;
  readonly repositoryName: string;
  readonly uploadId: string;
  readonly partFirstByte: number;
  readonly partLastByte: number;
  readonly layerPartBlob: unknown;
}

interface UploadLayerPartResponse {
  readonly registryId: string;
  readonly repositoryName: string;
  readonly uploadId: string;
  readonly lastByteReceived: number;
}

interface UploadNotFoundException {
  readonly message: string;
}

