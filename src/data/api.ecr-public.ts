/**
 * STOP. This file is autogenerated. DO NOT EDIT by hand
 */
export interface BatchCheckLayerAvailability {
  readonly registryId?: string;
  readonly repositoryName: string;
  readonly layerDigests: [];
}

export interface BatchDeleteImage {
  readonly registryId?: string;
  readonly repositoryName: string;
  readonly imageIds: [];
}

export interface CompleteLayerUpload {
  readonly registryId?: string;
  readonly repositoryName: string;
  readonly uploadId: string;
  readonly layerDigests: [];
}

export interface CreateRepository {
  readonly repositoryName: string;
  readonly catalogData?: RepositoryCatalogDataInput;
  readonly tags?: [];
}

export interface DeleteRepository {
  readonly registryId?: string;
  readonly repositoryName: string;
  readonly force?: boolean;
}

export interface DeleteRepositoryPolicy {
  readonly registryId?: string;
  readonly repositoryName: string;
}

export interface DescribeImageTags {
  readonly registryId?: string;
  readonly repositoryName: string;
  readonly nextToken?: string;
  readonly maxResults?: number;
}

export interface DescribeImages {
  readonly registryId?: string;
  readonly repositoryName: string;
  readonly imageIds?: [];
  readonly nextToken?: string;
  readonly maxResults?: number;
}

export interface DescribeRegistries {
  readonly nextToken?: string;
  readonly maxResults?: number;
}

export interface DescribeRepositories {
  readonly registryId?: string;
  readonly repositoryNames?: [];
  readonly nextToken?: string;
  readonly maxResults?: number;
}

export interface GetAuthorizationToken {
}

export interface GetRegistryCatalogData {
}

export interface GetRepositoryCatalogData {
  readonly registryId?: string;
  readonly repositoryName: string;
}

export interface GetRepositoryPolicy {
  readonly registryId?: string;
  readonly repositoryName: string;
}

export interface InitiateLayerUpload {
  readonly registryId?: string;
  readonly repositoryName: string;
}

export interface ListTagsForResource {
  readonly resourceArn: string;
}

export interface PutImage {
  readonly registryId?: string;
  readonly repositoryName: string;
  readonly imageManifest: string;
  readonly imageManifestMediaType?: string;
  readonly imageTag?: string;
  readonly imageDigest?: string;
}

export interface PutRegistryCatalogData {
  readonly displayName?: string;
}

export interface PutRepositoryCatalogData {
  readonly registryId?: string;
  readonly repositoryName: string;
  readonly catalogData: RepositoryCatalogDataInput;
}

export interface SetRepositoryPolicy {
  readonly registryId?: string;
  readonly repositoryName: string;
  readonly policyText: string;
  readonly force?: boolean;
}

export interface TagResource {
  readonly resourceArn: string;
  readonly tags: [];
}

export interface UntagResource {
  readonly resourceArn: string;
  readonly tagKeys: [];
}

export interface UploadLayerPart {
  readonly registryId?: string;
  readonly repositoryName: string;
  readonly uploadId: string;
  readonly partFirstByte: number;
  readonly partLastByte: number;
  readonly layerPartBlob: unknown;
}

export interface AuthorizationData {
  readonly authorizationToken?: string;
  readonly expiresAt?: Date;
}

export interface BatchCheckLayerAvailabilityRequest {
  readonly registryId?: string;
  readonly repositoryName: string;
  readonly layerDigests: [];
}

export interface BatchCheckLayerAvailabilityResponse {
  readonly layers?: [];
  readonly failures?: [];
}

export interface BatchDeleteImageRequest {
  readonly registryId?: string;
  readonly repositoryName: string;
  readonly imageIds: [];
}

export interface BatchDeleteImageResponse {
  readonly imageIds?: [];
  readonly failures?: [];
}

export interface CompleteLayerUploadRequest {
  readonly registryId?: string;
  readonly repositoryName: string;
  readonly uploadId: string;
  readonly layerDigests: [];
}

export interface CompleteLayerUploadResponse {
  readonly registryId?: string;
  readonly repositoryName?: string;
  readonly uploadId?: string;
  readonly layerDigest?: string;
}

export interface CreateRepositoryRequest {
  readonly repositoryName: string;
  readonly catalogData?: RepositoryCatalogDataInput;
  readonly tags?: [];
}

export interface CreateRepositoryResponse {
  readonly repository?: Repository;
  readonly catalogData?: RepositoryCatalogData;
}

export interface DeleteRepositoryPolicyRequest {
  readonly registryId?: string;
  readonly repositoryName: string;
}

export interface DeleteRepositoryPolicyResponse {
  readonly registryId?: string;
  readonly repositoryName?: string;
  readonly policyText?: string;
}

export interface DeleteRepositoryRequest {
  readonly registryId?: string;
  readonly repositoryName: string;
  readonly force?: boolean;
}

export interface DeleteRepositoryResponse {
  readonly repository?: Repository;
}

export interface DescribeImageTagsRequest {
  readonly registryId?: string;
  readonly repositoryName: string;
  readonly nextToken?: string;
  readonly maxResults?: number;
}

export interface DescribeImageTagsResponse {
  readonly imageTagDetails?: [];
  readonly nextToken?: string;
}

export interface DescribeImagesRequest {
  readonly registryId?: string;
  readonly repositoryName: string;
  readonly imageIds?: [];
  readonly nextToken?: string;
  readonly maxResults?: number;
}

export interface DescribeImagesResponse {
  readonly imageDetails?: [];
  readonly nextToken?: string;
}

export interface DescribeRegistriesRequest {
  readonly nextToken?: string;
  readonly maxResults?: number;
}

export interface DescribeRegistriesResponse {
  readonly registries: [];
  readonly nextToken?: string;
}

export interface DescribeRepositoriesRequest {
  readonly registryId?: string;
  readonly repositoryNames?: [];
  readonly nextToken?: string;
  readonly maxResults?: number;
}

export interface DescribeRepositoriesResponse {
  readonly repositories?: [];
  readonly nextToken?: string;
}

export interface EmptyUploadException {
  readonly message?: string;
}

export interface GetAuthorizationTokenRequest {
}

export interface GetAuthorizationTokenResponse {
  readonly authorizationData?: AuthorizationData;
}

export interface GetRegistryCatalogDataRequest {
}

export interface GetRegistryCatalogDataResponse {
  readonly registryCatalogData: RegistryCatalogData;
}

export interface GetRepositoryCatalogDataRequest {
  readonly registryId?: string;
  readonly repositoryName: string;
}

export interface GetRepositoryCatalogDataResponse {
  readonly catalogData?: RepositoryCatalogData;
}

export interface GetRepositoryPolicyRequest {
  readonly registryId?: string;
  readonly repositoryName: string;
}

export interface GetRepositoryPolicyResponse {
  readonly registryId?: string;
  readonly repositoryName?: string;
  readonly policyText?: string;
}

export interface Image {
  readonly registryId?: string;
  readonly repositoryName?: string;
  readonly imageId?: ImageIdentifier;
  readonly imageManifest?: string;
  readonly imageManifestMediaType?: string;
}

export interface ImageAlreadyExistsException {
  readonly message?: string;
}

export interface ImageDetail {
  readonly registryId?: string;
  readonly repositoryName?: string;
  readonly imageDigest?: string;
  readonly imageTags?: [];
  readonly imageSizeInBytes?: number;
  readonly imagePushedAt?: Date;
  readonly imageManifestMediaType?: string;
  readonly artifactMediaType?: string;
}

export interface ImageDigestDoesNotMatchException {
  readonly message?: string;
}

export interface ImageFailure {
  readonly imageId?: ImageIdentifier;
  readonly failureCode?: string;
  readonly failureReason?: string;
}

export interface ImageIdentifier {
  readonly imageDigest?: string;
  readonly imageTag?: string;
}

export interface ImageNotFoundException {
  readonly message?: string;
}

export interface ImageTagAlreadyExistsException {
  readonly message?: string;
}

export interface ImageTagDetail {
  readonly imageTag?: string;
  readonly createdAt?: Date;
  readonly imageDetail?: ReferencedImageDetail;
}

export interface InitiateLayerUploadRequest {
  readonly registryId?: string;
  readonly repositoryName: string;
}

export interface InitiateLayerUploadResponse {
  readonly uploadId?: string;
  readonly partSize?: number;
}

export interface InvalidLayerException {
  readonly message?: string;
}

export interface InvalidLayerPartException {
  readonly registryId?: string;
  readonly repositoryName?: string;
  readonly uploadId?: string;
  readonly lastValidByteReceived?: number;
  readonly message?: string;
}

export interface InvalidParameterException {
  readonly message?: string;
}

export interface InvalidTagParameterException {
  readonly message?: string;
}

export interface Layer {
  readonly layerDigest?: string;
  readonly layerAvailability?: string;
  readonly layerSize?: number;
  readonly mediaType?: string;
}

export interface LayerAlreadyExistsException {
  readonly message?: string;
}

export interface LayerFailure {
  readonly layerDigest?: string;
  readonly failureCode?: string;
  readonly failureReason?: string;
}

export interface LayerPartTooSmallException {
  readonly message?: string;
}

export interface LayersNotFoundException {
  readonly message?: string;
}

export interface LimitExceededException {
  readonly message?: string;
}

export interface ListTagsForResourceRequest {
  readonly resourceArn: string;
}

export interface ListTagsForResourceResponse {
  readonly tags?: [];
}

export interface PutImageRequest {
  readonly registryId?: string;
  readonly repositoryName: string;
  readonly imageManifest: string;
  readonly imageManifestMediaType?: string;
  readonly imageTag?: string;
  readonly imageDigest?: string;
}

export interface PutImageResponse {
  readonly image?: Image;
}

export interface PutRegistryCatalogDataRequest {
  readonly displayName?: string;
}

export interface PutRegistryCatalogDataResponse {
  readonly registryCatalogData: RegistryCatalogData;
}

export interface PutRepositoryCatalogDataRequest {
  readonly registryId?: string;
  readonly repositoryName: string;
  readonly catalogData: RepositoryCatalogDataInput;
}

export interface PutRepositoryCatalogDataResponse {
  readonly catalogData?: RepositoryCatalogData;
}

export interface ReferencedImageDetail {
  readonly imageDigest?: string;
  readonly imageSizeInBytes?: number;
  readonly imagePushedAt?: Date;
  readonly imageManifestMediaType?: string;
  readonly artifactMediaType?: string;
}

export interface ReferencedImagesNotFoundException {
  readonly message?: string;
}

export interface Registry {
  readonly registryId: string;
  readonly registryArn: string;
  readonly registryUri: string;
  readonly verified: boolean;
  readonly aliases: [];
}

export interface RegistryAlias {
  readonly name: string;
  readonly status: string;
  readonly primaryRegistryAlias: boolean;
  readonly defaultRegistryAlias: boolean;
}

export interface RegistryCatalogData {
  readonly displayName?: string;
}

export interface RegistryNotFoundException {
  readonly message?: string;
}

export interface Repository {
  readonly repositoryArn?: string;
  readonly registryId?: string;
  readonly repositoryName?: string;
  readonly repositoryUri?: string;
  readonly createdAt?: Date;
}

export interface RepositoryAlreadyExistsException {
  readonly message?: string;
}

export interface RepositoryCatalogData {
  readonly description?: string;
  readonly architectures?: [];
  readonly operatingSystems?: [];
  readonly logoUrl?: string;
  readonly aboutText?: string;
  readonly usageText?: string;
  readonly marketplaceCertified?: boolean;
}

export interface RepositoryCatalogDataInput {
  readonly description?: string;
  readonly architectures?: [];
  readonly operatingSystems?: [];
  readonly logoImageBlob?: unknown;
  readonly aboutText?: string;
  readonly usageText?: string;
}

export interface RepositoryNotEmptyException {
  readonly message?: string;
}

export interface RepositoryNotFoundException {
  readonly message?: string;
}

export interface RepositoryPolicyNotFoundException {
  readonly message?: string;
}

export interface ServerException {
  readonly message?: string;
}

export interface SetRepositoryPolicyRequest {
  readonly registryId?: string;
  readonly repositoryName: string;
  readonly policyText: string;
  readonly force?: boolean;
}

export interface SetRepositoryPolicyResponse {
  readonly registryId?: string;
  readonly repositoryName?: string;
  readonly policyText?: string;
}

export interface Tag {
  readonly Key?: string;
  readonly Value?: string;
}

export interface TagResourceRequest {
  readonly resourceArn: string;
  readonly tags: [];
}

export interface TagResourceResponse {
}

export interface TooManyTagsException {
  readonly message?: string;
}

export interface UnsupportedCommandException {
  readonly message?: string;
}

export interface UntagResourceRequest {
  readonly resourceArn: string;
  readonly tagKeys: [];
}

export interface UntagResourceResponse {
}

export interface UploadLayerPartRequest {
  readonly registryId?: string;
  readonly repositoryName: string;
  readonly uploadId: string;
  readonly partFirstByte: number;
  readonly partLastByte: number;
  readonly layerPartBlob: unknown;
}

export interface UploadLayerPartResponse {
  readonly registryId?: string;
  readonly repositoryName?: string;
  readonly uploadId?: string;
  readonly lastByteReceived?: number;
}

export interface UploadNotFoundException {
  readonly message?: string;
}


