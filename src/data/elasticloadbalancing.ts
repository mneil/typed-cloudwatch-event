/**
 * STOP. This file is autogenerated. DO NOT EDIT by hand
 */
export interface AddListenerCertificates {
  readonly ListenerArn: string;
  readonly Certificates: [];
}
export interface AddTags {
  readonly ResourceArns: [];
  readonly Tags: [];
}
export interface CreateListener {
  readonly LoadBalancerArn: string;
  readonly Protocol: string;
  readonly Port: number;
  readonly SslPolicy: string;
  readonly Certificates: [];
  readonly DefaultActions: [];
  readonly AlpnPolicy: [];
  readonly Tags: [];
}
export interface CreateLoadBalancer {
  readonly Name: string;
  readonly Subnets: [];
  readonly SubnetMappings: [];
  readonly SecurityGroups: [];
  readonly Scheme: string;
  readonly Tags: [];
  readonly Type: string;
  readonly IpAddressType: string;
  readonly CustomerOwnedIpv4Pool: string;
}
export interface CreateRule {
  readonly ListenerArn: string;
  readonly Conditions: [];
  readonly Priority: number;
  readonly Actions: [];
  readonly Tags: [];
}
export interface CreateTargetGroup {
  readonly Name: string;
  readonly Protocol: string;
  readonly ProtocolVersion: string;
  readonly Port: number;
  readonly VpcId: string;
  readonly HealthCheckProtocol: string;
  readonly HealthCheckPort: string;
  readonly HealthCheckEnabled: boolean;
  readonly HealthCheckPath: string;
  readonly HealthCheckIntervalSeconds: number;
  readonly HealthCheckTimeoutSeconds: number;
  readonly HealthyThresholdCount: number;
  readonly UnhealthyThresholdCount: number;
  readonly Matcher: Matcher;
  readonly TargetType: string;
  readonly Tags: [];
  readonly IpAddressType: string;
}
export interface DeleteListener {
  readonly ListenerArn: string;
}
export interface DeleteLoadBalancer {
  readonly LoadBalancerArn: string;
}
export interface DeleteRule {
  readonly RuleArn: string;
}
export interface DeleteTargetGroup {
  readonly TargetGroupArn: string;
}
export interface DeregisterTargets {
  readonly TargetGroupArn: string;
  readonly Targets: [];
}
export interface DescribeAccountLimits {
  readonly Marker: string;
  readonly PageSize: number;
}
export interface DescribeListenerCertificates {
  readonly ListenerArn: string;
  readonly Marker: string;
  readonly PageSize: number;
}
export interface DescribeListeners {
  readonly LoadBalancerArn: string;
  readonly ListenerArns: [];
  readonly Marker: string;
  readonly PageSize: number;
}
export interface DescribeLoadBalancerAttributes {
  readonly LoadBalancerArn: string;
}
export interface DescribeLoadBalancers {
  readonly LoadBalancerArns: [];
  readonly Names: [];
  readonly Marker: string;
  readonly PageSize: number;
}
export interface DescribeRules {
  readonly ListenerArn: string;
  readonly RuleArns: [];
  readonly Marker: string;
  readonly PageSize: number;
}
export interface DescribeSSLPolicies {
  readonly Names: [];
  readonly Marker: string;
  readonly PageSize: number;
  readonly LoadBalancerType: string;
}
export interface DescribeTags {
  readonly ResourceArns: [];
}
export interface DescribeTargetGroupAttributes {
  readonly TargetGroupArn: string;
}
export interface DescribeTargetGroups {
  readonly LoadBalancerArn: string;
  readonly TargetGroupArns: [];
  readonly Names: [];
  readonly Marker: string;
  readonly PageSize: number;
}
export interface DescribeTargetHealth {
  readonly TargetGroupArn: string;
  readonly Targets: [];
}
export interface ModifyListener {
  readonly ListenerArn: string;
  readonly Port: number;
  readonly Protocol: string;
  readonly SslPolicy: string;
  readonly Certificates: [];
  readonly DefaultActions: [];
  readonly AlpnPolicy: [];
}
export interface ModifyLoadBalancerAttributes {
  readonly LoadBalancerArn: string;
  readonly Attributes: [];
}
export interface ModifyRule {
  readonly RuleArn: string;
  readonly Conditions: [];
  readonly Actions: [];
}
export interface ModifyTargetGroup {
  readonly TargetGroupArn: string;
  readonly HealthCheckProtocol: string;
  readonly HealthCheckPort: string;
  readonly HealthCheckPath: string;
  readonly HealthCheckEnabled: boolean;
  readonly HealthCheckIntervalSeconds: number;
  readonly HealthCheckTimeoutSeconds: number;
  readonly HealthyThresholdCount: number;
  readonly UnhealthyThresholdCount: number;
  readonly Matcher: Matcher;
}
export interface ModifyTargetGroupAttributes {
  readonly TargetGroupArn: string;
  readonly Attributes: [];
}
export interface RegisterTargets {
  readonly TargetGroupArn: string;
  readonly Targets: [];
}
export interface RemoveListenerCertificates {
  readonly ListenerArn: string;
  readonly Certificates: [];
}
export interface RemoveTags {
  readonly ResourceArns: [];
  readonly TagKeys: [];
}
export interface SetIpAddressType {
  readonly LoadBalancerArn: string;
  readonly IpAddressType: string;
}
export interface SetRulePriorities {
  readonly RulePriorities: [];
}
export interface SetSecurityGroups {
  readonly LoadBalancerArn: string;
  readonly SecurityGroups: [];
}
export interface SetSubnets {
  readonly LoadBalancerArn: string;
  readonly Subnets: [];
  readonly SubnetMappings: [];
  readonly IpAddressType: string;
}



interface ALPNPolicyNotSupportedException {
}

interface Action {
  readonly Type: string;
  readonly TargetGroupArn: string;
  readonly AuthenticateOidcConfig: AuthenticateOidcActionConfig;
  readonly AuthenticateCognitoConfig: AuthenticateCognitoActionConfig;
  readonly Order: number;
  readonly RedirectConfig: RedirectActionConfig;
  readonly FixedResponseConfig: FixedResponseActionConfig;
  readonly ForwardConfig: ForwardActionConfig;
}

interface AddListenerCertificatesInput {
  readonly ListenerArn: string;
  readonly Certificates: [];
}

interface AddListenerCertificatesOutput {
  readonly Certificates: [];
}

interface AddTagsInput {
  readonly ResourceArns: [];
  readonly Tags: [];
}

interface AddTagsOutput {
}

interface AllocationIdNotFoundException {
}

interface AuthenticateCognitoActionConfig {
  readonly UserPoolArn: string;
  readonly UserPoolClientId: string;
  readonly UserPoolDomain: string;
  readonly SessionCookieName: string;
  readonly Scope: string;
  readonly SessionTimeout: number;
  readonly AuthenticationRequestExtraParams: {[key: string]: any};
  readonly OnUnauthenticatedRequest: string;
}

interface AuthenticateOidcActionConfig {
  readonly Issuer: string;
  readonly AuthorizationEndpoint: string;
  readonly TokenEndpoint: string;
  readonly UserInfoEndpoint: string;
  readonly ClientId: string;
  readonly ClientSecret: string;
  readonly SessionCookieName: string;
  readonly Scope: string;
  readonly SessionTimeout: number;
  readonly AuthenticationRequestExtraParams: {[key: string]: any};
  readonly OnUnauthenticatedRequest: string;
  readonly UseExistingClientSecret: boolean;
}

interface AvailabilityZone {
  readonly ZoneName: string;
  readonly SubnetId: string;
  readonly OutpostId: string;
  readonly LoadBalancerAddresses: [];
}

interface AvailabilityZoneNotSupportedException {
}

interface Certificate {
  readonly CertificateArn: string;
  readonly IsDefault: boolean;
}

interface CertificateNotFoundException {
}

interface Cipher {
  readonly Name: string;
  readonly Priority: number;
}

interface CreateListenerInput {
  readonly LoadBalancerArn: string;
  readonly Protocol: string;
  readonly Port: number;
  readonly SslPolicy: string;
  readonly Certificates: [];
  readonly DefaultActions: [];
  readonly AlpnPolicy: [];
  readonly Tags: [];
}

interface CreateListenerOutput {
  readonly Listeners: [];
}

interface CreateLoadBalancerInput {
  readonly Name: string;
  readonly Subnets: [];
  readonly SubnetMappings: [];
  readonly SecurityGroups: [];
  readonly Scheme: string;
  readonly Tags: [];
  readonly Type: string;
  readonly IpAddressType: string;
  readonly CustomerOwnedIpv4Pool: string;
}

interface CreateLoadBalancerOutput {
  readonly LoadBalancers: [];
}

interface CreateRuleInput {
  readonly ListenerArn: string;
  readonly Conditions: [];
  readonly Priority: number;
  readonly Actions: [];
  readonly Tags: [];
}

interface CreateRuleOutput {
  readonly Rules: [];
}

interface CreateTargetGroupInput {
  readonly Name: string;
  readonly Protocol: string;
  readonly ProtocolVersion: string;
  readonly Port: number;
  readonly VpcId: string;
  readonly HealthCheckProtocol: string;
  readonly HealthCheckPort: string;
  readonly HealthCheckEnabled: boolean;
  readonly HealthCheckPath: string;
  readonly HealthCheckIntervalSeconds: number;
  readonly HealthCheckTimeoutSeconds: number;
  readonly HealthyThresholdCount: number;
  readonly UnhealthyThresholdCount: number;
  readonly Matcher: Matcher;
  readonly TargetType: string;
  readonly Tags: [];
  readonly IpAddressType: string;
}

interface CreateTargetGroupOutput {
  readonly TargetGroups: [];
}

interface DeleteListenerInput {
  readonly ListenerArn: string;
}

interface DeleteListenerOutput {
}

interface DeleteLoadBalancerInput {
  readonly LoadBalancerArn: string;
}

interface DeleteLoadBalancerOutput {
}

interface DeleteRuleInput {
  readonly RuleArn: string;
}

interface DeleteRuleOutput {
}

interface DeleteTargetGroupInput {
  readonly TargetGroupArn: string;
}

interface DeleteTargetGroupOutput {
}

interface DeregisterTargetsInput {
  readonly TargetGroupArn: string;
  readonly Targets: [];
}

interface DeregisterTargetsOutput {
}

interface DescribeAccountLimitsInput {
  readonly Marker: string;
  readonly PageSize: number;
}

interface DescribeAccountLimitsOutput {
  readonly Limits: [];
  readonly NextMarker: string;
}

interface DescribeListenerCertificatesInput {
  readonly ListenerArn: string;
  readonly Marker: string;
  readonly PageSize: number;
}

interface DescribeListenerCertificatesOutput {
  readonly Certificates: [];
  readonly NextMarker: string;
}

interface DescribeListenersInput {
  readonly LoadBalancerArn: string;
  readonly ListenerArns: [];
  readonly Marker: string;
  readonly PageSize: number;
}

interface DescribeListenersOutput {
  readonly Listeners: [];
  readonly NextMarker: string;
}

interface DescribeLoadBalancerAttributesInput {
  readonly LoadBalancerArn: string;
}

interface DescribeLoadBalancerAttributesOutput {
  readonly Attributes: [];
}

interface DescribeLoadBalancersInput {
  readonly LoadBalancerArns: [];
  readonly Names: [];
  readonly Marker: string;
  readonly PageSize: number;
}

interface DescribeLoadBalancersOutput {
  readonly LoadBalancers: [];
  readonly NextMarker: string;
}

interface DescribeRulesInput {
  readonly ListenerArn: string;
  readonly RuleArns: [];
  readonly Marker: string;
  readonly PageSize: number;
}

interface DescribeRulesOutput {
  readonly Rules: [];
  readonly NextMarker: string;
}

interface DescribeSSLPoliciesInput {
  readonly Names: [];
  readonly Marker: string;
  readonly PageSize: number;
  readonly LoadBalancerType: string;
}

interface DescribeSSLPoliciesOutput {
  readonly SslPolicies: [];
  readonly NextMarker: string;
}

interface DescribeTagsInput {
  readonly ResourceArns: [];
}

interface DescribeTagsOutput {
  readonly TagDescriptions: [];
}

interface DescribeTargetGroupAttributesInput {
  readonly TargetGroupArn: string;
}

interface DescribeTargetGroupAttributesOutput {
  readonly Attributes: [];
}

interface DescribeTargetGroupsInput {
  readonly LoadBalancerArn: string;
  readonly TargetGroupArns: [];
  readonly Names: [];
  readonly Marker: string;
  readonly PageSize: number;
}

interface DescribeTargetGroupsOutput {
  readonly TargetGroups: [];
  readonly NextMarker: string;
}

interface DescribeTargetHealthInput {
  readonly TargetGroupArn: string;
  readonly Targets: [];
}

interface DescribeTargetHealthOutput {
  readonly TargetHealthDescriptions: [];
}

interface DuplicateListenerException {
}

interface DuplicateLoadBalancerNameException {
}

interface DuplicateTagKeysException {
}

interface DuplicateTargetGroupNameException {
}

interface FixedResponseActionConfig {
  readonly MessageBody: string;
  readonly StatusCode: string;
  readonly ContentType: string;
}

interface ForwardActionConfig {
  readonly TargetGroups: [];
  readonly TargetGroupStickinessConfig: TargetGroupStickinessConfig;
}

interface HealthUnavailableException {
}

interface HostHeaderConditionConfig {
  readonly Values: [];
}

interface HttpHeaderConditionConfig {
  readonly HttpHeaderName: string;
  readonly Values: [];
}

interface HttpRequestMethodConditionConfig {
  readonly Values: [];
}

interface IncompatibleProtocolsException {
}

interface InvalidConfigurationRequestException {
}

interface InvalidLoadBalancerActionException {
}

interface InvalidSchemeException {
}

interface InvalidSecurityGroupException {
}

interface InvalidSubnetException {
}

interface InvalidTargetException {
}

interface Limit {
  readonly Name: string;
  readonly Max: string;
}

interface Listener {
  readonly ListenerArn: string;
  readonly LoadBalancerArn: string;
  readonly Port: number;
  readonly Protocol: string;
  readonly Certificates: [];
  readonly SslPolicy: string;
  readonly DefaultActions: [];
  readonly AlpnPolicy: [];
}

interface ListenerNotFoundException {
}

interface LoadBalancer {
  readonly LoadBalancerArn: string;
  readonly DNSName: string;
  readonly CanonicalHostedZoneId: string;
  readonly CreatedTime: Date;
  readonly LoadBalancerName: string;
  readonly Scheme: string;
  readonly VpcId: string;
  readonly State: LoadBalancerState;
  readonly Type: string;
  readonly AvailabilityZones: [];
  readonly SecurityGroups: [];
  readonly IpAddressType: string;
  readonly CustomerOwnedIpv4Pool: string;
}

interface LoadBalancerAddress {
  readonly IpAddress: string;
  readonly AllocationId: string;
  readonly PrivateIPv4Address: string;
  readonly IPv6Address: string;
}

interface LoadBalancerAttribute {
  readonly Key: string;
  readonly Value: string;
}

interface LoadBalancerNotFoundException {
}

interface LoadBalancerState {
  readonly Code: string;
  readonly Reason: string;
}

interface Matcher {
  readonly HttpCode: string;
  readonly GrpcCode: string;
}

interface ModifyListenerInput {
  readonly ListenerArn: string;
  readonly Port: number;
  readonly Protocol: string;
  readonly SslPolicy: string;
  readonly Certificates: [];
  readonly DefaultActions: [];
  readonly AlpnPolicy: [];
}

interface ModifyListenerOutput {
  readonly Listeners: [];
}

interface ModifyLoadBalancerAttributesInput {
  readonly LoadBalancerArn: string;
  readonly Attributes: [];
}

interface ModifyLoadBalancerAttributesOutput {
  readonly Attributes: [];
}

interface ModifyRuleInput {
  readonly RuleArn: string;
  readonly Conditions: [];
  readonly Actions: [];
}

interface ModifyRuleOutput {
  readonly Rules: [];
}

interface ModifyTargetGroupAttributesInput {
  readonly TargetGroupArn: string;
  readonly Attributes: [];
}

interface ModifyTargetGroupAttributesOutput {
  readonly Attributes: [];
}

interface ModifyTargetGroupInput {
  readonly TargetGroupArn: string;
  readonly HealthCheckProtocol: string;
  readonly HealthCheckPort: string;
  readonly HealthCheckPath: string;
  readonly HealthCheckEnabled: boolean;
  readonly HealthCheckIntervalSeconds: number;
  readonly HealthCheckTimeoutSeconds: number;
  readonly HealthyThresholdCount: number;
  readonly UnhealthyThresholdCount: number;
  readonly Matcher: Matcher;
}

interface ModifyTargetGroupOutput {
  readonly TargetGroups: [];
}

interface OperationNotPermittedException {
}

interface PathPatternConditionConfig {
  readonly Values: [];
}

interface PriorityInUseException {
}

interface QueryStringConditionConfig {
  readonly Values: [];
}

interface QueryStringKeyValuePair {
  readonly Key: string;
  readonly Value: string;
}

interface RedirectActionConfig {
  readonly Protocol: string;
  readonly Port: string;
  readonly Host: string;
  readonly Path: string;
  readonly Query: string;
  readonly StatusCode: string;
}

interface RegisterTargetsInput {
  readonly TargetGroupArn: string;
  readonly Targets: [];
}

interface RegisterTargetsOutput {
}

interface RemoveListenerCertificatesInput {
  readonly ListenerArn: string;
  readonly Certificates: [];
}

interface RemoveListenerCertificatesOutput {
}

interface RemoveTagsInput {
  readonly ResourceArns: [];
  readonly TagKeys: [];
}

interface RemoveTagsOutput {
}

interface ResourceInUseException {
}

interface Rule {
  readonly RuleArn: string;
  readonly Priority: string;
  readonly Conditions: [];
  readonly Actions: [];
  readonly IsDefault: boolean;
}

interface RuleCondition {
  readonly Field: string;
  readonly Values: [];
  readonly HostHeaderConfig: HostHeaderConditionConfig;
  readonly PathPatternConfig: PathPatternConditionConfig;
  readonly HttpHeaderConfig: HttpHeaderConditionConfig;
  readonly QueryStringConfig: QueryStringConditionConfig;
  readonly HttpRequestMethodConfig: HttpRequestMethodConditionConfig;
  readonly SourceIpConfig: SourceIpConditionConfig;
}

interface RuleNotFoundException {
}

interface RulePriorityPair {
  readonly RuleArn: string;
  readonly Priority: number;
}

interface SSLPolicyNotFoundException {
}

interface SetIpAddressTypeInput {
  readonly LoadBalancerArn: string;
  readonly IpAddressType: string;
}

interface SetIpAddressTypeOutput {
  readonly IpAddressType: string;
}

interface SetRulePrioritiesInput {
  readonly RulePriorities: [];
}

interface SetRulePrioritiesOutput {
  readonly Rules: [];
}

interface SetSecurityGroupsInput {
  readonly LoadBalancerArn: string;
  readonly SecurityGroups: [];
}

interface SetSecurityGroupsOutput {
  readonly SecurityGroupIds: [];
}

interface SetSubnetsInput {
  readonly LoadBalancerArn: string;
  readonly Subnets: [];
  readonly SubnetMappings: [];
  readonly IpAddressType: string;
}

interface SetSubnetsOutput {
  readonly AvailabilityZones: [];
  readonly IpAddressType: string;
}

interface SourceIpConditionConfig {
  readonly Values: [];
}

interface SslPolicy {
  readonly SslProtocols: [];
  readonly Ciphers: [];
  readonly Name: string;
  readonly SupportedLoadBalancerTypes: [];
}

interface SubnetMapping {
  readonly SubnetId: string;
  readonly AllocationId: string;
  readonly PrivateIPv4Address: string;
  readonly IPv6Address: string;
}

interface SubnetNotFoundException {
}

interface Tag {
  readonly Key: string;
  readonly Value: string;
}

interface TagDescription {
  readonly ResourceArn: string;
  readonly Tags: [];
}

interface TargetDescription {
  readonly Id: string;
  readonly Port: number;
  readonly AvailabilityZone: string;
}

interface TargetGroup {
  readonly TargetGroupArn: string;
  readonly TargetGroupName: string;
  readonly Protocol: string;
  readonly Port: number;
  readonly VpcId: string;
  readonly HealthCheckProtocol: string;
  readonly HealthCheckPort: string;
  readonly HealthCheckEnabled: boolean;
  readonly HealthCheckIntervalSeconds: number;
  readonly HealthCheckTimeoutSeconds: number;
  readonly HealthyThresholdCount: number;
  readonly UnhealthyThresholdCount: number;
  readonly HealthCheckPath: string;
  readonly Matcher: Matcher;
  readonly LoadBalancerArns: [];
  readonly TargetType: string;
  readonly ProtocolVersion: string;
  readonly IpAddressType: string;
}

interface TargetGroupAssociationLimitException {
}

interface TargetGroupAttribute {
  readonly Key: string;
  readonly Value: string;
}

interface TargetGroupNotFoundException {
}

interface TargetGroupStickinessConfig {
  readonly Enabled: boolean;
  readonly DurationSeconds: number;
}

interface TargetGroupTuple {
  readonly TargetGroupArn: string;
  readonly Weight: number;
}

interface TargetHealth {
  readonly State: string;
  readonly Reason: string;
  readonly Description: string;
}

interface TargetHealthDescription {
  readonly Target: TargetDescription;
  readonly HealthCheckPort: string;
  readonly TargetHealth: TargetHealth;
}

interface TooManyActionsException {
}

interface TooManyCertificatesException {
}

interface TooManyListenersException {
}

interface TooManyLoadBalancersException {
}

interface TooManyRegistrationsForTargetIdException {
}

interface TooManyRulesException {
}

interface TooManyTagsException {
}

interface TooManyTargetGroupsException {
}

interface TooManyTargetsException {
}

interface TooManyUniqueTargetGroupsPerLoadBalancerException {
}

interface UnsupportedProtocolException {
}

