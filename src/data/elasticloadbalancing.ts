/**
 * STOP. This file is autogenerated. DO NOT EDIT by hand
 */
export interface AddListenerCertificates {
  readonly ListenerArn: string;
  readonly Certificates: [];
}

export interface AddTags {
  readonly ResourceArns: [];
  readonly Tags: [];
}

export interface CreateListener {
  readonly LoadBalancerArn: string;
  readonly Protocol?: string;
  readonly Port?: number;
  readonly SslPolicy?: string;
  readonly Certificates?: [];
  readonly DefaultActions: [];
  readonly AlpnPolicy?: [];
  readonly Tags?: [];
}

export interface CreateLoadBalancer {
  readonly Name: string;
  readonly Subnets?: [];
  readonly SubnetMappings?: [];
  readonly SecurityGroups?: [];
  readonly Scheme?: string;
  readonly Tags?: [];
  readonly Type?: string;
  readonly IpAddressType?: string;
  readonly CustomerOwnedIpv4Pool?: string;
}

export interface CreateRule {
  readonly ListenerArn: string;
  readonly Conditions: [];
  readonly Priority: number;
  readonly Actions: [];
  readonly Tags?: [];
}

export interface CreateTargetGroup {
  readonly Name: string;
  readonly Protocol?: string;
  readonly ProtocolVersion?: string;
  readonly Port?: number;
  readonly VpcId?: string;
  readonly HealthCheckProtocol?: string;
  readonly HealthCheckPort?: string;
  readonly HealthCheckEnabled?: boolean;
  readonly HealthCheckPath?: string;
  readonly HealthCheckIntervalSeconds?: number;
  readonly HealthCheckTimeoutSeconds?: number;
  readonly HealthyThresholdCount?: number;
  readonly UnhealthyThresholdCount?: number;
  readonly Matcher?: Matcher;
  readonly TargetType?: string;
  readonly Tags?: [];
  readonly IpAddressType?: string;
}

export interface DeleteListener {
  readonly ListenerArn: string;
}

export interface DeleteLoadBalancer {
  readonly LoadBalancerArn: string;
}

export interface DeleteRule {
  readonly RuleArn: string;
}

export interface DeleteTargetGroup {
  readonly TargetGroupArn: string;
}

export interface DeregisterTargets {
  readonly TargetGroupArn: string;
  readonly Targets: [];
}

export interface DescribeAccountLimits {
  readonly Marker?: string;
  readonly PageSize?: number;
}

export interface DescribeListenerCertificates {
  readonly ListenerArn: string;
  readonly Marker?: string;
  readonly PageSize?: number;
}

export interface DescribeListeners {
  readonly LoadBalancerArn?: string;
  readonly ListenerArns?: [];
  readonly Marker?: string;
  readonly PageSize?: number;
}

export interface DescribeLoadBalancerAttributes {
  readonly LoadBalancerArn: string;
}

export interface DescribeLoadBalancers {
  readonly LoadBalancerArns?: [];
  readonly Names?: [];
  readonly Marker?: string;
  readonly PageSize?: number;
}

export interface DescribeRules {
  readonly ListenerArn?: string;
  readonly RuleArns?: [];
  readonly Marker?: string;
  readonly PageSize?: number;
}

export interface DescribeSSLPolicies {
  readonly Names?: [];
  readonly Marker?: string;
  readonly PageSize?: number;
  readonly LoadBalancerType?: string;
}

export interface DescribeTags {
  readonly ResourceArns: [];
}

export interface DescribeTargetGroupAttributes {
  readonly TargetGroupArn: string;
}

export interface DescribeTargetGroups {
  readonly LoadBalancerArn?: string;
  readonly TargetGroupArns?: [];
  readonly Names?: [];
  readonly Marker?: string;
  readonly PageSize?: number;
}

export interface DescribeTargetHealth {
  readonly TargetGroupArn: string;
  readonly Targets?: [];
}

export interface ModifyListener {
  readonly ListenerArn: string;
  readonly Port?: number;
  readonly Protocol?: string;
  readonly SslPolicy?: string;
  readonly Certificates?: [];
  readonly DefaultActions?: [];
  readonly AlpnPolicy?: [];
}

export interface ModifyLoadBalancerAttributes {
  readonly LoadBalancerArn: string;
  readonly Attributes: [];
}

export interface ModifyRule {
  readonly RuleArn: string;
  readonly Conditions?: [];
  readonly Actions?: [];
}

export interface ModifyTargetGroup {
  readonly TargetGroupArn: string;
  readonly HealthCheckProtocol?: string;
  readonly HealthCheckPort?: string;
  readonly HealthCheckPath?: string;
  readonly HealthCheckEnabled?: boolean;
  readonly HealthCheckIntervalSeconds?: number;
  readonly HealthCheckTimeoutSeconds?: number;
  readonly HealthyThresholdCount?: number;
  readonly UnhealthyThresholdCount?: number;
  readonly Matcher?: Matcher;
}

export interface ModifyTargetGroupAttributes {
  readonly TargetGroupArn: string;
  readonly Attributes: [];
}

export interface RegisterTargets {
  readonly TargetGroupArn: string;
  readonly Targets: [];
}

export interface RemoveListenerCertificates {
  readonly ListenerArn: string;
  readonly Certificates: [];
}

export interface RemoveTags {
  readonly ResourceArns: [];
  readonly TagKeys: [];
}

export interface SetIpAddressType {
  readonly LoadBalancerArn: string;
  readonly IpAddressType: string;
}

export interface SetRulePriorities {
  readonly RulePriorities: [];
}

export interface SetSecurityGroups {
  readonly LoadBalancerArn: string;
  readonly SecurityGroups: [];
}

export interface SetSubnets {
  readonly LoadBalancerArn: string;
  readonly Subnets?: [];
  readonly SubnetMappings?: [];
  readonly IpAddressType?: string;
}

export interface ALPNPolicyNotSupportedException {
}

export interface Action {
  readonly Type: string;
  readonly TargetGroupArn?: string;
  readonly AuthenticateOidcConfig?: AuthenticateOidcActionConfig;
  readonly AuthenticateCognitoConfig?: AuthenticateCognitoActionConfig;
  readonly Order?: number;
  readonly RedirectConfig?: RedirectActionConfig;
  readonly FixedResponseConfig?: FixedResponseActionConfig;
  readonly ForwardConfig?: ForwardActionConfig;
}

export interface AddListenerCertificatesInput {
  readonly ListenerArn: string;
  readonly Certificates: [];
}

export interface AddListenerCertificatesOutput {
  readonly Certificates?: [];
}

export interface AddTagsInput {
  readonly ResourceArns: [];
  readonly Tags: [];
}

export interface AddTagsOutput {
}

export interface AllocationIdNotFoundException {
}

export interface AuthenticateCognitoActionConfig {
  readonly UserPoolArn: string;
  readonly UserPoolClientId: string;
  readonly UserPoolDomain: string;
  readonly SessionCookieName?: string;
  readonly Scope?: string;
  readonly SessionTimeout?: number;
  readonly AuthenticationRequestExtraParams?: {[key: string]: any};
  readonly OnUnauthenticatedRequest?: string;
}

export interface AuthenticateOidcActionConfig {
  readonly Issuer: string;
  readonly AuthorizationEndpoint: string;
  readonly TokenEndpoint: string;
  readonly UserInfoEndpoint: string;
  readonly ClientId: string;
  readonly ClientSecret?: string;
  readonly SessionCookieName?: string;
  readonly Scope?: string;
  readonly SessionTimeout?: number;
  readonly AuthenticationRequestExtraParams?: {[key: string]: any};
  readonly OnUnauthenticatedRequest?: string;
  readonly UseExistingClientSecret?: boolean;
}

export interface AvailabilityZone {
  readonly ZoneName?: string;
  readonly SubnetId?: string;
  readonly OutpostId?: string;
  readonly LoadBalancerAddresses?: [];
}

export interface AvailabilityZoneNotSupportedException {
}

export interface Certificate {
  readonly CertificateArn?: string;
  readonly IsDefault?: boolean;
}

export interface CertificateNotFoundException {
}

export interface Cipher {
  readonly Name?: string;
  readonly Priority?: number;
}

export interface CreateListenerInput {
  readonly LoadBalancerArn: string;
  readonly Protocol?: string;
  readonly Port?: number;
  readonly SslPolicy?: string;
  readonly Certificates?: [];
  readonly DefaultActions: [];
  readonly AlpnPolicy?: [];
  readonly Tags?: [];
}

export interface CreateListenerOutput {
  readonly Listeners?: [];
}

export interface CreateLoadBalancerInput {
  readonly Name: string;
  readonly Subnets?: [];
  readonly SubnetMappings?: [];
  readonly SecurityGroups?: [];
  readonly Scheme?: string;
  readonly Tags?: [];
  readonly Type?: string;
  readonly IpAddressType?: string;
  readonly CustomerOwnedIpv4Pool?: string;
}

export interface CreateLoadBalancerOutput {
  readonly LoadBalancers?: [];
}

export interface CreateRuleInput {
  readonly ListenerArn: string;
  readonly Conditions: [];
  readonly Priority: number;
  readonly Actions: [];
  readonly Tags?: [];
}

export interface CreateRuleOutput {
  readonly Rules?: [];
}

export interface CreateTargetGroupInput {
  readonly Name: string;
  readonly Protocol?: string;
  readonly ProtocolVersion?: string;
  readonly Port?: number;
  readonly VpcId?: string;
  readonly HealthCheckProtocol?: string;
  readonly HealthCheckPort?: string;
  readonly HealthCheckEnabled?: boolean;
  readonly HealthCheckPath?: string;
  readonly HealthCheckIntervalSeconds?: number;
  readonly HealthCheckTimeoutSeconds?: number;
  readonly HealthyThresholdCount?: number;
  readonly UnhealthyThresholdCount?: number;
  readonly Matcher?: Matcher;
  readonly TargetType?: string;
  readonly Tags?: [];
  readonly IpAddressType?: string;
}

export interface CreateTargetGroupOutput {
  readonly TargetGroups?: [];
}

export interface DeleteListenerInput {
  readonly ListenerArn: string;
}

export interface DeleteListenerOutput {
}

export interface DeleteLoadBalancerInput {
  readonly LoadBalancerArn: string;
}

export interface DeleteLoadBalancerOutput {
}

export interface DeleteRuleInput {
  readonly RuleArn: string;
}

export interface DeleteRuleOutput {
}

export interface DeleteTargetGroupInput {
  readonly TargetGroupArn: string;
}

export interface DeleteTargetGroupOutput {
}

export interface DeregisterTargetsInput {
  readonly TargetGroupArn: string;
  readonly Targets: [];
}

export interface DeregisterTargetsOutput {
}

export interface DescribeAccountLimitsInput {
  readonly Marker?: string;
  readonly PageSize?: number;
}

export interface DescribeAccountLimitsOutput {
  readonly Limits?: [];
  readonly NextMarker?: string;
}

export interface DescribeListenerCertificatesInput {
  readonly ListenerArn: string;
  readonly Marker?: string;
  readonly PageSize?: number;
}

export interface DescribeListenerCertificatesOutput {
  readonly Certificates?: [];
  readonly NextMarker?: string;
}

export interface DescribeListenersInput {
  readonly LoadBalancerArn?: string;
  readonly ListenerArns?: [];
  readonly Marker?: string;
  readonly PageSize?: number;
}

export interface DescribeListenersOutput {
  readonly Listeners?: [];
  readonly NextMarker?: string;
}

export interface DescribeLoadBalancerAttributesInput {
  readonly LoadBalancerArn: string;
}

export interface DescribeLoadBalancerAttributesOutput {
  readonly Attributes?: [];
}

export interface DescribeLoadBalancersInput {
  readonly LoadBalancerArns?: [];
  readonly Names?: [];
  readonly Marker?: string;
  readonly PageSize?: number;
}

export interface DescribeLoadBalancersOutput {
  readonly LoadBalancers?: [];
  readonly NextMarker?: string;
}

export interface DescribeRulesInput {
  readonly ListenerArn?: string;
  readonly RuleArns?: [];
  readonly Marker?: string;
  readonly PageSize?: number;
}

export interface DescribeRulesOutput {
  readonly Rules?: [];
  readonly NextMarker?: string;
}

export interface DescribeSSLPoliciesInput {
  readonly Names?: [];
  readonly Marker?: string;
  readonly PageSize?: number;
  readonly LoadBalancerType?: string;
}

export interface DescribeSSLPoliciesOutput {
  readonly SslPolicies?: [];
  readonly NextMarker?: string;
}

export interface DescribeTagsInput {
  readonly ResourceArns: [];
}

export interface DescribeTagsOutput {
  readonly TagDescriptions?: [];
}

export interface DescribeTargetGroupAttributesInput {
  readonly TargetGroupArn: string;
}

export interface DescribeTargetGroupAttributesOutput {
  readonly Attributes?: [];
}

export interface DescribeTargetGroupsInput {
  readonly LoadBalancerArn?: string;
  readonly TargetGroupArns?: [];
  readonly Names?: [];
  readonly Marker?: string;
  readonly PageSize?: number;
}

export interface DescribeTargetGroupsOutput {
  readonly TargetGroups?: [];
  readonly NextMarker?: string;
}

export interface DescribeTargetHealthInput {
  readonly TargetGroupArn: string;
  readonly Targets?: [];
}

export interface DescribeTargetHealthOutput {
  readonly TargetHealthDescriptions?: [];
}

export interface DuplicateListenerException {
}

export interface DuplicateLoadBalancerNameException {
}

export interface DuplicateTagKeysException {
}

export interface DuplicateTargetGroupNameException {
}

export interface FixedResponseActionConfig {
  readonly MessageBody?: string;
  readonly StatusCode: string;
  readonly ContentType?: string;
}

export interface ForwardActionConfig {
  readonly TargetGroups?: [];
  readonly TargetGroupStickinessConfig?: TargetGroupStickinessConfig;
}

export interface HealthUnavailableException {
}

export interface HostHeaderConditionConfig {
  readonly Values?: [];
}

export interface HttpHeaderConditionConfig {
  readonly HttpHeaderName?: string;
  readonly Values?: [];
}

export interface HttpRequestMethodConditionConfig {
  readonly Values?: [];
}

export interface IncompatibleProtocolsException {
}

export interface InvalidConfigurationRequestException {
}

export interface InvalidLoadBalancerActionException {
}

export interface InvalidSchemeException {
}

export interface InvalidSecurityGroupException {
}

export interface InvalidSubnetException {
}

export interface InvalidTargetException {
}

export interface Limit {
  readonly Name?: string;
  readonly Max?: string;
}

export interface Listener {
  readonly ListenerArn?: string;
  readonly LoadBalancerArn?: string;
  readonly Port?: number;
  readonly Protocol?: string;
  readonly Certificates?: [];
  readonly SslPolicy?: string;
  readonly DefaultActions?: [];
  readonly AlpnPolicy?: [];
}

export interface ListenerNotFoundException {
}

export interface LoadBalancer {
  readonly LoadBalancerArn?: string;
  readonly DNSName?: string;
  readonly CanonicalHostedZoneId?: string;
  readonly CreatedTime?: Date;
  readonly LoadBalancerName?: string;
  readonly Scheme?: string;
  readonly VpcId?: string;
  readonly State?: LoadBalancerState;
  readonly Type?: string;
  readonly AvailabilityZones?: [];
  readonly SecurityGroups?: [];
  readonly IpAddressType?: string;
  readonly CustomerOwnedIpv4Pool?: string;
}

export interface LoadBalancerAddress {
  readonly IpAddress?: string;
  readonly AllocationId?: string;
  readonly PrivateIPv4Address?: string;
  readonly IPv6Address?: string;
}

export interface LoadBalancerAttribute {
  readonly Key?: string;
  readonly Value?: string;
}

export interface LoadBalancerNotFoundException {
}

export interface LoadBalancerState {
  readonly Code?: string;
  readonly Reason?: string;
}

export interface Matcher {
  readonly HttpCode?: string;
  readonly GrpcCode?: string;
}

export interface ModifyListenerInput {
  readonly ListenerArn: string;
  readonly Port?: number;
  readonly Protocol?: string;
  readonly SslPolicy?: string;
  readonly Certificates?: [];
  readonly DefaultActions?: [];
  readonly AlpnPolicy?: [];
}

export interface ModifyListenerOutput {
  readonly Listeners?: [];
}

export interface ModifyLoadBalancerAttributesInput {
  readonly LoadBalancerArn: string;
  readonly Attributes: [];
}

export interface ModifyLoadBalancerAttributesOutput {
  readonly Attributes?: [];
}

export interface ModifyRuleInput {
  readonly RuleArn: string;
  readonly Conditions?: [];
  readonly Actions?: [];
}

export interface ModifyRuleOutput {
  readonly Rules?: [];
}

export interface ModifyTargetGroupAttributesInput {
  readonly TargetGroupArn: string;
  readonly Attributes: [];
}

export interface ModifyTargetGroupAttributesOutput {
  readonly Attributes?: [];
}

export interface ModifyTargetGroupInput {
  readonly TargetGroupArn: string;
  readonly HealthCheckProtocol?: string;
  readonly HealthCheckPort?: string;
  readonly HealthCheckPath?: string;
  readonly HealthCheckEnabled?: boolean;
  readonly HealthCheckIntervalSeconds?: number;
  readonly HealthCheckTimeoutSeconds?: number;
  readonly HealthyThresholdCount?: number;
  readonly UnhealthyThresholdCount?: number;
  readonly Matcher?: Matcher;
}

export interface ModifyTargetGroupOutput {
  readonly TargetGroups?: [];
}

export interface OperationNotPermittedException {
}

export interface PathPatternConditionConfig {
  readonly Values?: [];
}

export interface PriorityInUseException {
}

export interface QueryStringConditionConfig {
  readonly Values?: [];
}

export interface QueryStringKeyValuePair {
  readonly Key?: string;
  readonly Value?: string;
}

export interface RedirectActionConfig {
  readonly Protocol?: string;
  readonly Port?: string;
  readonly Host?: string;
  readonly Path?: string;
  readonly Query?: string;
  readonly StatusCode: string;
}

export interface RegisterTargetsInput {
  readonly TargetGroupArn: string;
  readonly Targets: [];
}

export interface RegisterTargetsOutput {
}

export interface RemoveListenerCertificatesInput {
  readonly ListenerArn: string;
  readonly Certificates: [];
}

export interface RemoveListenerCertificatesOutput {
}

export interface RemoveTagsInput {
  readonly ResourceArns: [];
  readonly TagKeys: [];
}

export interface RemoveTagsOutput {
}

export interface ResourceInUseException {
}

export interface Rule {
  readonly RuleArn?: string;
  readonly Priority?: string;
  readonly Conditions?: [];
  readonly Actions?: [];
  readonly IsDefault?: boolean;
}

export interface RuleCondition {
  readonly Field?: string;
  readonly Values?: [];
  readonly HostHeaderConfig?: HostHeaderConditionConfig;
  readonly PathPatternConfig?: PathPatternConditionConfig;
  readonly HttpHeaderConfig?: HttpHeaderConditionConfig;
  readonly QueryStringConfig?: QueryStringConditionConfig;
  readonly HttpRequestMethodConfig?: HttpRequestMethodConditionConfig;
  readonly SourceIpConfig?: SourceIpConditionConfig;
}

export interface RuleNotFoundException {
}

export interface RulePriorityPair {
  readonly RuleArn?: string;
  readonly Priority?: number;
}

export interface SSLPolicyNotFoundException {
}

export interface SetIpAddressTypeInput {
  readonly LoadBalancerArn: string;
  readonly IpAddressType: string;
}

export interface SetIpAddressTypeOutput {
  readonly IpAddressType?: string;
}

export interface SetRulePrioritiesInput {
  readonly RulePriorities: [];
}

export interface SetRulePrioritiesOutput {
  readonly Rules?: [];
}

export interface SetSecurityGroupsInput {
  readonly LoadBalancerArn: string;
  readonly SecurityGroups: [];
}

export interface SetSecurityGroupsOutput {
  readonly SecurityGroupIds?: [];
}

export interface SetSubnetsInput {
  readonly LoadBalancerArn: string;
  readonly Subnets?: [];
  readonly SubnetMappings?: [];
  readonly IpAddressType?: string;
}

export interface SetSubnetsOutput {
  readonly AvailabilityZones?: [];
  readonly IpAddressType?: string;
}

export interface SourceIpConditionConfig {
  readonly Values?: [];
}

export interface SslPolicy {
  readonly SslProtocols?: [];
  readonly Ciphers?: [];
  readonly Name?: string;
  readonly SupportedLoadBalancerTypes?: [];
}

export interface SubnetMapping {
  readonly SubnetId?: string;
  readonly AllocationId?: string;
  readonly PrivateIPv4Address?: string;
  readonly IPv6Address?: string;
}

export interface SubnetNotFoundException {
}

export interface Tag {
  readonly Key: string;
  readonly Value?: string;
}

export interface TagDescription {
  readonly ResourceArn?: string;
  readonly Tags?: [];
}

export interface TargetDescription {
  readonly Id: string;
  readonly Port?: number;
  readonly AvailabilityZone?: string;
}

export interface TargetGroup {
  readonly TargetGroupArn?: string;
  readonly TargetGroupName?: string;
  readonly Protocol?: string;
  readonly Port?: number;
  readonly VpcId?: string;
  readonly HealthCheckProtocol?: string;
  readonly HealthCheckPort?: string;
  readonly HealthCheckEnabled?: boolean;
  readonly HealthCheckIntervalSeconds?: number;
  readonly HealthCheckTimeoutSeconds?: number;
  readonly HealthyThresholdCount?: number;
  readonly UnhealthyThresholdCount?: number;
  readonly HealthCheckPath?: string;
  readonly Matcher?: Matcher;
  readonly LoadBalancerArns?: [];
  readonly TargetType?: string;
  readonly ProtocolVersion?: string;
  readonly IpAddressType?: string;
}

export interface TargetGroupAssociationLimitException {
}

export interface TargetGroupAttribute {
  readonly Key?: string;
  readonly Value?: string;
}

export interface TargetGroupNotFoundException {
}

export interface TargetGroupStickinessConfig {
  readonly Enabled?: boolean;
  readonly DurationSeconds?: number;
}

export interface TargetGroupTuple {
  readonly TargetGroupArn?: string;
  readonly Weight?: number;
}

export interface TargetHealth {
  readonly State?: string;
  readonly Reason?: string;
  readonly Description?: string;
}

export interface TargetHealthDescription {
  readonly Target?: TargetDescription;
  readonly HealthCheckPort?: string;
  readonly TargetHealth?: TargetHealth;
}

export interface TooManyActionsException {
}

export interface TooManyCertificatesException {
}

export interface TooManyListenersException {
}

export interface TooManyLoadBalancersException {
}

export interface TooManyRegistrationsForTargetIdException {
}

export interface TooManyRulesException {
}

export interface TooManyTagsException {
}

export interface TooManyTargetGroupsException {
}

export interface TooManyTargetsException {
}

export interface TooManyUniqueTargetGroupsPerLoadBalancerException {
}

export interface UnsupportedProtocolException {
}


