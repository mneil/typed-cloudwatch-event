/**
 * STOP. This file is autogenerated. DO NOT EDIT by hand
 */
export interface CreateApp {
  readonly name: string;
  readonly description: string;
  readonly roleName: string;
  readonly clientToken: string;
  readonly serverGroups: [];
  readonly tags: [];
}
export interface CreateReplicationJob {
  readonly serverId: string;
  readonly seedReplicationTime: Date;
  readonly frequency: number;
  readonly runOnce: boolean;
  readonly licenseType: string;
  readonly roleName: string;
  readonly description: string;
  readonly numberOfRecentAmisToKeep: number;
  readonly encrypted: boolean;
  readonly kmsKeyId: string;
}
export interface DeleteApp {
  readonly appId: string;
  readonly forceStopAppReplication: boolean;
  readonly forceTerminateApp: boolean;
}
export interface DeleteAppLaunchConfiguration {
  readonly appId: string;
}
export interface DeleteAppReplicationConfiguration {
  readonly appId: string;
}
export interface DeleteAppValidationConfiguration {
  readonly appId: string;
}
export interface DeleteReplicationJob {
  readonly replicationJobId: string;
}
export interface DeleteServerCatalog {
}
export interface DisassociateConnector {
  readonly connectorId: string;
}
export interface GenerateChangeSet {
  readonly appId: string;
  readonly changesetFormat: string;
}
export interface GenerateTemplate {
  readonly appId: string;
  readonly templateFormat: string;
}
export interface GetApp {
  readonly appId: string;
}
export interface GetAppLaunchConfiguration {
  readonly appId: string;
}
export interface GetAppReplicationConfiguration {
  readonly appId: string;
}
export interface GetAppValidationConfiguration {
  readonly appId: string;
}
export interface GetAppValidationOutput {
  readonly appId: string;
}
export interface GetConnectors {
  readonly nextToken: string;
  readonly maxResults: number;
}
export interface GetReplicationJobs {
  readonly replicationJobId: string;
  readonly nextToken: string;
  readonly maxResults: number;
}
export interface GetReplicationRuns {
  readonly replicationJobId: string;
  readonly nextToken: string;
  readonly maxResults: number;
}
export interface GetServers {
  readonly nextToken: string;
  readonly maxResults: number;
  readonly vmServerAddressList: [];
}
export interface ImportAppCatalog {
  readonly roleName: string;
}
export interface ImportServerCatalog {
}
export interface LaunchApp {
  readonly appId: string;
}
export interface ListApps {
  readonly appIds: [];
  readonly nextToken: string;
  readonly maxResults: number;
}
export interface NotifyAppValidationOutput {
  readonly appId: string;
  readonly notificationContext: NotificationContext;
}
export interface PutAppLaunchConfiguration {
  readonly appId: string;
  readonly roleName: string;
  readonly autoLaunch: boolean;
  readonly serverGroupLaunchConfigurations: [];
}
export interface PutAppReplicationConfiguration {
  readonly appId: string;
  readonly serverGroupReplicationConfigurations: [];
}
export interface PutAppValidationConfiguration {
  readonly appId: string;
  readonly appValidationConfigurations: [];
  readonly serverGroupValidationConfigurations: [];
}
export interface StartAppReplication {
  readonly appId: string;
}
export interface StartOnDemandAppReplication {
  readonly appId: string;
  readonly description: string;
}
export interface StartOnDemandReplicationRun {
  readonly replicationJobId: string;
  readonly description: string;
}
export interface StopAppReplication {
  readonly appId: string;
}
export interface TerminateApp {
  readonly appId: string;
}
export interface UpdateApp {
  readonly appId: string;
  readonly name: string;
  readonly description: string;
  readonly roleName: string;
  readonly serverGroups: [];
  readonly tags: [];
}
export interface UpdateReplicationJob {
  readonly replicationJobId: string;
  readonly frequency: number;
  readonly nextReplicationRunStartTime: Date;
  readonly licenseType: string;
  readonly roleName: string;
  readonly description: string;
  readonly numberOfRecentAmisToKeep: number;
  readonly encrypted: boolean;
  readonly kmsKeyId: string;
}



interface AppSummary {
  readonly appId: string;
  readonly importedAppId: string;
  readonly name: string;
  readonly description: string;
  readonly status: string;
  readonly statusMessage: string;
  readonly replicationConfigurationStatus: string;
  readonly replicationStatus: string;
  readonly replicationStatusMessage: string;
  readonly latestReplicationTime: Date;
  readonly launchConfigurationStatus: string;
  readonly launchStatus: string;
  readonly launchStatusMessage: string;
  readonly launchDetails: LaunchDetails;
  readonly creationTime: Date;
  readonly lastModified: Date;
  readonly roleName: string;
  readonly totalServerGroups: number;
  readonly totalServers: number;
}

interface AppValidationConfiguration {
  readonly validationId: string;
  readonly name: string;
  readonly appValidationStrategy: string;
  readonly ssmValidationParameters: SSMValidationParameters;
}

interface AppValidationOutput {
  readonly ssmOutput: SSMOutput;
}

interface Connector {
  readonly connectorId: string;
  readonly version: string;
  readonly status: string;
  readonly capabilityList: [];
  readonly vmManagerName: string;
  readonly vmManagerType: string;
  readonly vmManagerId: string;
  readonly ipAddress: string;
  readonly macAddress: string;
  readonly associatedOn: Date;
}

interface CreateAppRequest {
  readonly name: string;
  readonly description: string;
  readonly roleName: string;
  readonly clientToken: string;
  readonly serverGroups: [];
  readonly tags: [];
}

interface CreateAppResponse {
  readonly appSummary: AppSummary;
  readonly serverGroups: [];
  readonly tags: [];
}

interface CreateReplicationJobRequest {
  readonly serverId: string;
  readonly seedReplicationTime: Date;
  readonly frequency: number;
  readonly runOnce: boolean;
  readonly licenseType: string;
  readonly roleName: string;
  readonly description: string;
  readonly numberOfRecentAmisToKeep: number;
  readonly encrypted: boolean;
  readonly kmsKeyId: string;
}

interface CreateReplicationJobResponse {
  readonly replicationJobId: string;
}

interface DeleteAppLaunchConfigurationRequest {
  readonly appId: string;
}

interface DeleteAppLaunchConfigurationResponse {
}

interface DeleteAppReplicationConfigurationRequest {
  readonly appId: string;
}

interface DeleteAppReplicationConfigurationResponse {
}

interface DeleteAppRequest {
  readonly appId: string;
  readonly forceStopAppReplication: boolean;
  readonly forceTerminateApp: boolean;
}

interface DeleteAppResponse {
}

interface DeleteAppValidationConfigurationRequest {
  readonly appId: string;
}

interface DeleteAppValidationConfigurationResponse {
}

interface DeleteReplicationJobRequest {
  readonly replicationJobId: string;
}

interface DeleteReplicationJobResponse {
}

interface DeleteServerCatalogRequest {
}

interface DeleteServerCatalogResponse {
}

interface DisassociateConnectorRequest {
  readonly connectorId: string;
}

interface DisassociateConnectorResponse {
}

interface DryRunOperationException {
  readonly message: string;
}

interface GenerateChangeSetRequest {
  readonly appId: string;
  readonly changesetFormat: string;
}

interface GenerateChangeSetResponse {
  readonly s3Location: S3Location;
}

interface GenerateTemplateRequest {
  readonly appId: string;
  readonly templateFormat: string;
}

interface GenerateTemplateResponse {
  readonly s3Location: S3Location;
}

interface GetAppLaunchConfigurationRequest {
  readonly appId: string;
}

interface GetAppLaunchConfigurationResponse {
  readonly appId: string;
  readonly roleName: string;
  readonly autoLaunch: boolean;
  readonly serverGroupLaunchConfigurations: [];
}

interface GetAppReplicationConfigurationRequest {
  readonly appId: string;
}

interface GetAppReplicationConfigurationResponse {
  readonly serverGroupReplicationConfigurations: [];
}

interface GetAppRequest {
  readonly appId: string;
}

interface GetAppResponse {
  readonly appSummary: AppSummary;
  readonly serverGroups: [];
  readonly tags: [];
}

interface GetAppValidationConfigurationRequest {
  readonly appId: string;
}

interface GetAppValidationConfigurationResponse {
  readonly appValidationConfigurations: [];
  readonly serverGroupValidationConfigurations: [];
}

interface GetAppValidationOutputRequest {
  readonly appId: string;
}

interface GetAppValidationOutputResponse {
  readonly validationOutputList: [];
}

interface GetConnectorsRequest {
  readonly nextToken: string;
  readonly maxResults: number;
}

interface GetConnectorsResponse {
  readonly connectorList: [];
  readonly nextToken: string;
}

interface GetReplicationJobsRequest {
  readonly replicationJobId: string;
  readonly nextToken: string;
  readonly maxResults: number;
}

interface GetReplicationJobsResponse {
  readonly replicationJobList: [];
  readonly nextToken: string;
}

interface GetReplicationRunsRequest {
  readonly replicationJobId: string;
  readonly nextToken: string;
  readonly maxResults: number;
}

interface GetReplicationRunsResponse {
  readonly replicationJob: ReplicationJob;
  readonly replicationRunList: [];
  readonly nextToken: string;
}

interface GetServersRequest {
  readonly nextToken: string;
  readonly maxResults: number;
  readonly vmServerAddressList: [];
}

interface GetServersResponse {
  readonly lastModifiedOn: Date;
  readonly serverCatalogStatus: string;
  readonly serverList: [];
  readonly nextToken: string;
}

interface ImportAppCatalogRequest {
  readonly roleName: string;
}

interface ImportAppCatalogResponse {
}

interface ImportServerCatalogRequest {
}

interface ImportServerCatalogResponse {
}

interface InternalError {
  readonly message: string;
}

interface InvalidParameterException {
  readonly message: string;
}

interface LaunchAppRequest {
  readonly appId: string;
}

interface LaunchAppResponse {
}

interface LaunchDetails {
  readonly latestLaunchTime: Date;
  readonly stackName: string;
  readonly stackId: string;
}

interface ListAppsRequest {
  readonly appIds: [];
  readonly nextToken: string;
  readonly maxResults: number;
}

interface ListAppsResponse {
  readonly apps: [];
  readonly nextToken: string;
}

interface MissingRequiredParameterException {
  readonly message: string;
}

interface NoConnectorsAvailableException {
  readonly message: string;
}

interface NotificationContext {
  readonly validationId: string;
  readonly status: string;
  readonly statusMessage: string;
}

interface NotifyAppValidationOutputRequest {
  readonly appId: string;
  readonly notificationContext: NotificationContext;
}

interface NotifyAppValidationOutputResponse {
}

interface OperationNotPermittedException {
  readonly message: string;
}

interface PutAppLaunchConfigurationRequest {
  readonly appId: string;
  readonly roleName: string;
  readonly autoLaunch: boolean;
  readonly serverGroupLaunchConfigurations: [];
}

interface PutAppLaunchConfigurationResponse {
}

interface PutAppReplicationConfigurationRequest {
  readonly appId: string;
  readonly serverGroupReplicationConfigurations: [];
}

interface PutAppReplicationConfigurationResponse {
}

interface PutAppValidationConfigurationRequest {
  readonly appId: string;
  readonly appValidationConfigurations: [];
  readonly serverGroupValidationConfigurations: [];
}

interface PutAppValidationConfigurationResponse {
}

interface ReplicationJob {
  readonly replicationJobId: string;
  readonly serverId: string;
  readonly serverType: string;
  readonly vmServer: VmServer;
  readonly seedReplicationTime: Date;
  readonly frequency: number;
  readonly runOnce: boolean;
  readonly nextReplicationRunStartTime: Date;
  readonly licenseType: string;
  readonly roleName: string;
  readonly latestAmiId: string;
  readonly state: string;
  readonly statusMessage: string;
  readonly description: string;
  readonly numberOfRecentAmisToKeep: number;
  readonly encrypted: boolean;
  readonly kmsKeyId: string;
  readonly replicationRunList: [];
}

interface ReplicationJobAlreadyExistsException {
  readonly message: string;
}

interface ReplicationJobNotFoundException {
  readonly message: string;
}

interface ReplicationRun {
  readonly replicationRunId: string;
  readonly state: string;
  readonly type: string;
  readonly stageDetails: ReplicationRunStageDetails;
  readonly statusMessage: string;
  readonly amiId: string;
  readonly scheduledStartTime: Date;
  readonly completedTime: Date;
  readonly description: string;
  readonly encrypted: boolean;
  readonly kmsKeyId: string;
}

interface ReplicationRunLimitExceededException {
  readonly message: string;
}

interface ReplicationRunStageDetails {
  readonly stage: string;
  readonly stageProgress: string;
}

interface S3Location {
  readonly bucket: string;
  readonly key: string;
}

interface SSMOutput {
  readonly s3Location: S3Location;
}

interface SSMValidationParameters {
  readonly source: Source;
  readonly instanceId: string;
  readonly scriptType: string;
  readonly command: string;
  readonly executionTimeoutSeconds: number;
  readonly outputS3BucketName: string;
}

interface Server {
  readonly serverId: string;
  readonly serverType: string;
  readonly vmServer: VmServer;
  readonly replicationJobId: string;
  readonly replicationJobTerminated: boolean;
}

interface ServerCannotBeReplicatedException {
  readonly message: string;
}

interface ServerGroup {
  readonly serverGroupId: string;
  readonly name: string;
  readonly serverList: [];
}

interface ServerGroupLaunchConfiguration {
  readonly serverGroupId: string;
  readonly launchOrder: number;
  readonly serverLaunchConfigurations: [];
}

interface ServerGroupReplicationConfiguration {
  readonly serverGroupId: string;
  readonly serverReplicationConfigurations: [];
}

interface ServerGroupValidationConfiguration {
  readonly serverGroupId: string;
  readonly serverValidationConfigurations: [];
}

interface ServerLaunchConfiguration {
  readonly server: Server;
  readonly logicalId: string;
  readonly vpc: string;
  readonly subnet: string;
  readonly securityGroup: string;
  readonly ec2KeyName: string;
  readonly userData: UserData;
  readonly instanceType: string;
  readonly associatePublicIpAddress: boolean;
  readonly iamInstanceProfileName: string;
  readonly configureScript: S3Location;
  readonly configureScriptType: string;
}

interface ServerReplicationConfiguration {
  readonly server: Server;
  readonly serverReplicationParameters: ServerReplicationParameters;
}

interface ServerReplicationParameters {
  readonly seedTime: Date;
  readonly frequency: number;
  readonly runOnce: boolean;
  readonly licenseType: string;
  readonly numberOfRecentAmisToKeep: number;
  readonly encrypted: boolean;
  readonly kmsKeyId: string;
}

interface ServerValidationConfiguration {
  readonly server: Server;
  readonly validationId: string;
  readonly name: string;
  readonly serverValidationStrategy: string;
  readonly userDataValidationParameters: UserDataValidationParameters;
}

interface ServerValidationOutput {
  readonly server: Server;
}

interface Source {
  readonly s3Location: S3Location;
}

interface StartAppReplicationRequest {
  readonly appId: string;
}

interface StartAppReplicationResponse {
}

interface StartOnDemandAppReplicationRequest {
  readonly appId: string;
  readonly description: string;
}

interface StartOnDemandAppReplicationResponse {
}

interface StartOnDemandReplicationRunRequest {
  readonly replicationJobId: string;
  readonly description: string;
}

interface StartOnDemandReplicationRunResponse {
  readonly replicationRunId: string;
}

interface StopAppReplicationRequest {
  readonly appId: string;
}

interface StopAppReplicationResponse {
}

interface Tag {
  readonly key: string;
  readonly value: string;
}

interface TemporarilyUnavailableException {
}

interface TerminateAppRequest {
  readonly appId: string;
}

interface TerminateAppResponse {
}

interface UnauthorizedOperationException {
  readonly message: string;
}

interface UpdateAppRequest {
  readonly appId: string;
  readonly name: string;
  readonly description: string;
  readonly roleName: string;
  readonly serverGroups: [];
  readonly tags: [];
}

interface UpdateAppResponse {
  readonly appSummary: AppSummary;
  readonly serverGroups: [];
  readonly tags: [];
}

interface UpdateReplicationJobRequest {
  readonly replicationJobId: string;
  readonly frequency: number;
  readonly nextReplicationRunStartTime: Date;
  readonly licenseType: string;
  readonly roleName: string;
  readonly description: string;
  readonly numberOfRecentAmisToKeep: number;
  readonly encrypted: boolean;
  readonly kmsKeyId: string;
}

interface UpdateReplicationJobResponse {
}

interface UserData {
  readonly s3Location: S3Location;
}

interface UserDataValidationParameters {
  readonly source: Source;
  readonly scriptType: string;
}

interface ValidationOutput {
  readonly validationId: string;
  readonly name: string;
  readonly status: string;
  readonly statusMessage: string;
  readonly latestValidationTime: Date;
  readonly appValidationOutput: AppValidationOutput;
  readonly serverValidationOutput: ServerValidationOutput;
}

interface VmServer {
  readonly vmServerAddress: VmServerAddress;
  readonly vmName: string;
  readonly vmManagerName: string;
  readonly vmManagerType: string;
  readonly vmPath: string;
}

interface VmServerAddress {
  readonly vmManagerId: string;
  readonly vmId: string;
}

