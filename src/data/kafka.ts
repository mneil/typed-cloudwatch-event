/**
 * STOP. This file is autogenerated. DO NOT EDIT by hand
 */
export interface BatchAssociateScramSecret {
  readonly ClusterArn: string;
  readonly SecretArnList: [];
}

export interface CreateCluster {
  readonly BrokerNodeGroupInfo: BrokerNodeGroupInfo;
  readonly ClientAuthentication?: ClientAuthentication;
  readonly ClusterName: string;
  readonly ConfigurationInfo?: ConfigurationInfo;
  readonly EncryptionInfo?: EncryptionInfo;
  readonly EnhancedMonitoring?: string;
  readonly OpenMonitoring?: OpenMonitoringInfo;
  readonly KafkaVersion: string;
  readonly LoggingInfo?: LoggingInfo;
  readonly NumberOfBrokerNodes: number;
  readonly Tags?: {[key: string]: any};
}

export interface CreateClusterV2 {
  readonly ClusterName: string;
  readonly Tags?: {[key: string]: any};
  readonly Provisioned?: ProvisionedRequest;
  readonly Serverless?: ServerlessRequest;
}

export interface CreateConfiguration {
  readonly Description?: string;
  readonly KafkaVersions?: [];
  readonly Name: string;
  readonly ServerProperties: unknown;
}

export interface DeleteCluster {
  readonly ClusterArn: string;
  readonly CurrentVersion?: string;
}

export interface DeleteConfiguration {
  readonly Arn: string;
}

export interface DescribeCluster {
  readonly ClusterArn: string;
}

export interface DescribeClusterV2 {
  readonly ClusterArn: string;
}

export interface DescribeClusterOperation {
  readonly ClusterOperationArn: string;
}

export interface DescribeConfiguration {
  readonly Arn: string;
}

export interface DescribeConfigurationRevision {
  readonly Arn: string;
  readonly Revision: number;
}

export interface BatchDisassociateScramSecret {
  readonly ClusterArn: string;
  readonly SecretArnList: [];
}

export interface GetBootstrapBrokers {
  readonly ClusterArn: string;
}

export interface GetCompatibleKafkaVersions {
  readonly ClusterArn?: string;
}

export interface ListClusterOperations {
  readonly ClusterArn: string;
  readonly MaxResults?: number;
  readonly NextToken?: string;
}

export interface ListClusters {
  readonly ClusterNameFilter?: string;
  readonly MaxResults?: number;
  readonly NextToken?: string;
}

export interface ListClustersV2 {
  readonly ClusterNameFilter?: string;
  readonly ClusterTypeFilter?: string;
  readonly MaxResults?: number;
  readonly NextToken?: string;
}

export interface ListConfigurationRevisions {
  readonly Arn: string;
  readonly MaxResults?: number;
  readonly NextToken?: string;
}

export interface ListConfigurations {
  readonly MaxResults?: number;
  readonly NextToken?: string;
}

export interface ListKafkaVersions {
  readonly MaxResults?: number;
  readonly NextToken?: string;
}

export interface ListNodes {
  readonly ClusterArn: string;
  readonly MaxResults?: number;
  readonly NextToken?: string;
}

export interface ListScramSecrets {
  readonly ClusterArn: string;
  readonly MaxResults?: number;
  readonly NextToken?: string;
}

export interface ListTagsForResource {
  readonly ResourceArn: string;
}

export interface RebootBroker {
  readonly BrokerIds: [];
  readonly ClusterArn: string;
}

export interface TagResource {
  readonly ResourceArn: string;
  readonly Tags: {[key: string]: any};
}

export interface UntagResource {
  readonly ResourceArn: string;
  readonly TagKeys: [];
}

export interface UpdateBrokerCount {
  readonly ClusterArn: string;
  readonly CurrentVersion: string;
  readonly TargetNumberOfBrokerNodes: number;
}

export interface UpdateBrokerType {
  readonly ClusterArn: string;
  readonly CurrentVersion: string;
  readonly TargetInstanceType: string;
}

export interface UpdateBrokerStorage {
  readonly ClusterArn: string;
  readonly CurrentVersion: string;
  readonly TargetBrokerEBSVolumeInfo: [];
}

export interface UpdateConfiguration {
  readonly Arn: string;
  readonly Description?: string;
  readonly ServerProperties: unknown;
}

export interface UpdateConnectivity {
  readonly ClusterArn: string;
  readonly ConnectivityInfo: ConnectivityInfo;
  readonly CurrentVersion: string;
}

export interface UpdateClusterConfiguration {
  readonly ClusterArn: string;
  readonly ConfigurationInfo: ConfigurationInfo;
  readonly CurrentVersion: string;
}

export interface UpdateClusterKafkaVersion {
  readonly ClusterArn: string;
  readonly ConfigurationInfo?: ConfigurationInfo;
  readonly CurrentVersion: string;
  readonly TargetKafkaVersion: string;
}

export interface UpdateMonitoring {
  readonly ClusterArn: string;
  readonly CurrentVersion: string;
  readonly EnhancedMonitoring?: string;
  readonly OpenMonitoring?: OpenMonitoringInfo;
  readonly LoggingInfo?: LoggingInfo;
}

export interface UpdateSecurity {
  readonly ClientAuthentication?: ClientAuthentication;
  readonly ClusterArn: string;
  readonly CurrentVersion: string;
  readonly EncryptionInfo?: EncryptionInfo;
}

export interface BatchAssociateScramSecretRequest {
  readonly ClusterArn: string;
  readonly SecretArnList: [];
}

export interface BatchAssociateScramSecretResponse {
  readonly ClusterArn?: string;
  readonly UnprocessedScramSecrets?: [];
}

export interface BadRequestException {
  readonly InvalidParameter?: string;
  readonly Message?: string;
}

export interface BrokerEBSVolumeInfo {
  readonly KafkaBrokerNodeId: string;
  readonly VolumeSizeGB: number;
}

export interface BrokerLogs {
  readonly CloudWatchLogs?: CloudWatchLogs;
  readonly Firehose?: Firehose;
  readonly S3?: S3;
}

export interface BrokerNodeGroupInfo {
  readonly BrokerAZDistribution?: string;
  readonly ClientSubnets: [];
  readonly InstanceType: string;
  readonly SecurityGroups?: [];
  readonly StorageInfo?: StorageInfo;
  readonly ConnectivityInfo?: ConnectivityInfo;
}

export interface BrokerNodeInfo {
  readonly AttachedENIId?: string;
  readonly BrokerId?: unknown;
  readonly ClientSubnet?: string;
  readonly ClientVpcIpAddress?: string;
  readonly CurrentBrokerSoftwareInfo?: BrokerSoftwareInfo;
  readonly Endpoints?: [];
}

export interface BrokerSoftwareInfo {
  readonly ConfigurationArn?: string;
  readonly ConfigurationRevision?: number;
  readonly KafkaVersion?: string;
}

export interface ClientAuthentication {
  readonly Sasl?: Sasl;
  readonly Tls?: Tls;
  readonly Unauthenticated?: Unauthenticated;
}

export interface ServerlessClientAuthentication {
  readonly Sasl?: ServerlessSasl;
}

export interface CloudWatchLogs {
  readonly Enabled: boolean;
  readonly LogGroup?: string;
}

export interface ClusterInfo {
  readonly ActiveOperationArn?: string;
  readonly BrokerNodeGroupInfo?: BrokerNodeGroupInfo;
  readonly ClientAuthentication?: ClientAuthentication;
  readonly ClusterArn?: string;
  readonly ClusterName?: string;
  readonly CreationTime?: Date;
  readonly CurrentBrokerSoftwareInfo?: BrokerSoftwareInfo;
  readonly CurrentVersion?: string;
  readonly EncryptionInfo?: EncryptionInfo;
  readonly EnhancedMonitoring?: string;
  readonly OpenMonitoring?: OpenMonitoring;
  readonly LoggingInfo?: LoggingInfo;
  readonly NumberOfBrokerNodes?: number;
  readonly State?: string;
  readonly StateInfo?: StateInfo;
  readonly Tags?: {[key: string]: any};
  readonly ZookeeperConnectString?: string;
  readonly ZookeeperConnectStringTls?: string;
}

export interface Cluster {
  readonly ActiveOperationArn?: string;
  readonly ClusterType?: string;
  readonly ClusterArn?: string;
  readonly ClusterName?: string;
  readonly CreationTime?: Date;
  readonly CurrentVersion?: string;
  readonly State?: string;
  readonly StateInfo?: StateInfo;
  readonly Tags?: {[key: string]: any};
  readonly Provisioned?: Provisioned;
  readonly Serverless?: Serverless;
}

export interface ClusterOperationInfo {
  readonly ClientRequestId?: string;
  readonly ClusterArn?: string;
  readonly CreationTime?: Date;
  readonly EndTime?: Date;
  readonly ErrorInfo?: ErrorInfo;
  readonly OperationArn?: string;
  readonly OperationState?: string;
  readonly OperationSteps?: [];
  readonly OperationType?: string;
  readonly SourceClusterInfo?: MutableClusterInfo;
  readonly TargetClusterInfo?: MutableClusterInfo;
}

export interface ClusterOperationStep {
  readonly StepInfo?: ClusterOperationStepInfo;
  readonly StepName?: string;
}

export interface ClusterOperationStepInfo {
  readonly StepStatus?: string;
}

export interface ProvisionedRequest {
  readonly BrokerNodeGroupInfo: BrokerNodeGroupInfo;
  readonly ClientAuthentication?: ClientAuthentication;
  readonly ConfigurationInfo?: ConfigurationInfo;
  readonly EncryptionInfo?: EncryptionInfo;
  readonly EnhancedMonitoring?: string;
  readonly OpenMonitoring?: OpenMonitoringInfo;
  readonly KafkaVersion: string;
  readonly LoggingInfo?: LoggingInfo;
  readonly NumberOfBrokerNodes: number;
}

export interface Provisioned {
  readonly BrokerNodeGroupInfo: BrokerNodeGroupInfo;
  readonly CurrentBrokerSoftwareInfo?: BrokerSoftwareInfo;
  readonly ClientAuthentication?: ClientAuthentication;
  readonly EncryptionInfo?: EncryptionInfo;
  readonly EnhancedMonitoring?: string;
  readonly OpenMonitoring?: OpenMonitoringInfo;
  readonly LoggingInfo?: LoggingInfo;
  readonly NumberOfBrokerNodes: number;
  readonly ZookeeperConnectString?: string;
  readonly ZookeeperConnectStringTls?: string;
}

export interface VpcConfig {
  readonly SubnetIds: [];
  readonly SecurityGroupIds?: [];
}

export interface ServerlessRequest {
  readonly VpcConfigs: [];
  readonly ClientAuthentication?: ServerlessClientAuthentication;
}

export interface Serverless {
  readonly VpcConfigs: [];
  readonly ClientAuthentication?: ServerlessClientAuthentication;
}

export interface CompatibleKafkaVersion {
  readonly SourceVersion?: string;
  readonly TargetVersions?: [];
}

export interface Configuration {
  readonly Arn: string;
  readonly CreationTime: Date;
  readonly Description: string;
  readonly KafkaVersions: [];
  readonly LatestRevision: ConfigurationRevision;
  readonly Name: string;
  readonly State: string;
}

export interface ConfigurationInfo {
  readonly Arn: string;
  readonly Revision: number;
}

export interface ConfigurationRevision {
  readonly CreationTime: Date;
  readonly Description?: string;
  readonly Revision: number;
}

export interface ConflictException {
  readonly InvalidParameter?: string;
  readonly Message?: string;
}

export interface ConnectivityInfo {
  readonly PublicAccess?: PublicAccess;
}

export interface CreateClusterV2Request {
  readonly ClusterName: string;
  readonly Tags?: {[key: string]: any};
  readonly Provisioned?: ProvisionedRequest;
  readonly Serverless?: ServerlessRequest;
}

export interface CreateClusterRequest {
  readonly BrokerNodeGroupInfo: BrokerNodeGroupInfo;
  readonly ClientAuthentication?: ClientAuthentication;
  readonly ClusterName: string;
  readonly ConfigurationInfo?: ConfigurationInfo;
  readonly EncryptionInfo?: EncryptionInfo;
  readonly EnhancedMonitoring?: string;
  readonly OpenMonitoring?: OpenMonitoringInfo;
  readonly KafkaVersion: string;
  readonly LoggingInfo?: LoggingInfo;
  readonly NumberOfBrokerNodes: number;
  readonly Tags?: {[key: string]: any};
}

export interface CreateClusterResponse {
  readonly ClusterArn?: string;
  readonly ClusterName?: string;
  readonly State?: string;
}

export interface CreateClusterV2Response {
  readonly ClusterArn?: string;
  readonly ClusterName?: string;
  readonly State?: string;
  readonly ClusterType?: string;
}

export interface CreateConfigurationRequest {
  readonly Description?: string;
  readonly KafkaVersions?: [];
  readonly Name: string;
  readonly ServerProperties: unknown;
}

export interface CreateConfigurationResponse {
  readonly Arn?: string;
  readonly CreationTime?: Date;
  readonly LatestRevision?: ConfigurationRevision;
  readonly Name?: string;
  readonly State?: string;
}

export interface DeleteClusterRequest {
  readonly ClusterArn: string;
  readonly CurrentVersion?: string;
}

export interface DeleteClusterResponse {
  readonly ClusterArn?: string;
  readonly State?: string;
}

export interface DeleteConfigurationRequest {
  readonly Arn: string;
}

export interface DeleteConfigurationResponse {
  readonly Arn?: string;
  readonly State?: string;
}

export interface DescribeClusterOperationRequest {
  readonly ClusterOperationArn: string;
}

export interface DescribeClusterOperationResponse {
  readonly ClusterOperationInfo?: ClusterOperationInfo;
}

export interface DescribeClusterRequest {
  readonly ClusterArn: string;
}

export interface DescribeClusterV2Request {
  readonly ClusterArn: string;
}

export interface DescribeClusterResponse {
  readonly ClusterInfo?: ClusterInfo;
}

export interface DescribeClusterV2Response {
  readonly ClusterInfo?: Cluster;
}

export interface DescribeConfigurationRequest {
  readonly Arn: string;
}

export interface DescribeConfigurationResponse {
  readonly Arn?: string;
  readonly CreationTime?: Date;
  readonly Description?: string;
  readonly KafkaVersions?: [];
  readonly LatestRevision?: ConfigurationRevision;
  readonly Name?: string;
  readonly State?: string;
}

export interface DescribeConfigurationRevisionRequest {
  readonly Arn: string;
  readonly Revision: number;
}

export interface DescribeConfigurationRevisionResponse {
  readonly Arn?: string;
  readonly CreationTime?: Date;
  readonly Description?: string;
  readonly Revision?: number;
  readonly ServerProperties?: unknown;
}

export interface BatchDisassociateScramSecretRequest {
  readonly ClusterArn: string;
  readonly SecretArnList: [];
}

export interface BatchDisassociateScramSecretResponse {
  readonly ClusterArn?: string;
  readonly UnprocessedScramSecrets?: [];
}

export interface EBSStorageInfo {
  readonly VolumeSize?: number;
}

export interface EncryptionAtRest {
  readonly DataVolumeKMSKeyId: string;
}

export interface EncryptionInTransit {
  readonly ClientBroker?: string;
  readonly InCluster?: boolean;
}

export interface EncryptionInfo {
  readonly EncryptionAtRest?: EncryptionAtRest;
  readonly EncryptionInTransit?: EncryptionInTransit;
}

export interface Error {
  readonly InvalidParameter?: string;
  readonly Message?: string;
}

export interface ErrorInfo {
  readonly ErrorCode?: string;
  readonly ErrorString?: string;
}

export interface Firehose {
  readonly DeliveryStream?: string;
  readonly Enabled: boolean;
}

export interface ForbiddenException {
  readonly InvalidParameter?: string;
  readonly Message?: string;
}

export interface GetBootstrapBrokersRequest {
  readonly ClusterArn: string;
}

export interface GetBootstrapBrokersResponse {
  readonly BootstrapBrokerString?: string;
  readonly BootstrapBrokerStringTls?: string;
  readonly BootstrapBrokerStringSaslScram?: string;
  readonly BootstrapBrokerStringSaslIam?: string;
  readonly BootstrapBrokerStringPublicTls?: string;
  readonly BootstrapBrokerStringPublicSaslScram?: string;
  readonly BootstrapBrokerStringPublicSaslIam?: string;
}

export interface GetCompatibleKafkaVersionsRequest {
  readonly ClusterArn?: string;
}

export interface GetCompatibleKafkaVersionsResponse {
  readonly CompatibleKafkaVersions?: [];
}

export interface InternalServerErrorException {
  readonly InvalidParameter?: string;
  readonly Message?: string;
}

export interface KafkaVersion {
  readonly Version?: string;
  readonly Status?: string;
}

export interface ListClusterOperationsRequest {
  readonly ClusterArn: string;
  readonly MaxResults?: number;
  readonly NextToken?: string;
}

export interface ListClusterOperationsResponse {
  readonly ClusterOperationInfoList?: [];
  readonly NextToken?: string;
}

export interface ListClustersRequest {
  readonly ClusterNameFilter?: string;
  readonly MaxResults?: number;
  readonly NextToken?: string;
}

export interface ListClustersV2Request {
  readonly ClusterNameFilter?: string;
  readonly ClusterTypeFilter?: string;
  readonly MaxResults?: number;
  readonly NextToken?: string;
}

export interface ListClustersResponse {
  readonly ClusterInfoList?: [];
  readonly NextToken?: string;
}

export interface ListClustersV2Response {
  readonly ClusterInfoList?: [];
  readonly NextToken?: string;
}

export interface ListConfigurationRevisionsRequest {
  readonly Arn: string;
  readonly MaxResults?: number;
  readonly NextToken?: string;
}

export interface ListConfigurationRevisionsResponse {
  readonly NextToken?: string;
  readonly Revisions?: [];
}

export interface ListConfigurationsRequest {
  readonly MaxResults?: number;
  readonly NextToken?: string;
}

export interface ListConfigurationsResponse {
  readonly Configurations?: [];
  readonly NextToken?: string;
}

export interface ListKafkaVersionsRequest {
  readonly MaxResults?: number;
  readonly NextToken?: string;
}

export interface ListKafkaVersionsResponse {
  readonly KafkaVersions?: [];
  readonly NextToken?: string;
}

export interface ListNodesRequest {
  readonly ClusterArn: string;
  readonly MaxResults?: number;
  readonly NextToken?: string;
}

export interface ListNodesResponse {
  readonly NextToken?: string;
  readonly NodeInfoList?: [];
}

export interface ListScramSecretsRequest {
  readonly ClusterArn: string;
  readonly MaxResults?: number;
  readonly NextToken?: string;
}

export interface ListScramSecretsResponse {
  readonly NextToken?: string;
  readonly SecretArnList?: [];
}

export interface ListTagsForResourceRequest {
  readonly ResourceArn: string;
}

export interface ListTagsForResourceResponse {
  readonly Tags?: {[key: string]: any};
}

export interface LoggingInfo {
  readonly BrokerLogs: BrokerLogs;
}

export interface MutableClusterInfo {
  readonly BrokerEBSVolumeInfo?: [];
  readonly ConfigurationInfo?: ConfigurationInfo;
  readonly NumberOfBrokerNodes?: number;
  readonly EnhancedMonitoring?: string;
  readonly OpenMonitoring?: OpenMonitoring;
  readonly KafkaVersion?: string;
  readonly LoggingInfo?: LoggingInfo;
  readonly InstanceType?: string;
  readonly ClientAuthentication?: ClientAuthentication;
  readonly EncryptionInfo?: EncryptionInfo;
  readonly ConnectivityInfo?: ConnectivityInfo;
}

export interface NodeExporter {
  readonly EnabledInBroker: boolean;
}

export interface NodeExporterInfo {
  readonly EnabledInBroker: boolean;
}

export interface JmxExporter {
  readonly EnabledInBroker: boolean;
}

export interface JmxExporterInfo {
  readonly EnabledInBroker: boolean;
}

export interface OpenMonitoring {
  readonly Prometheus: Prometheus;
}

export interface OpenMonitoringInfo {
  readonly Prometheus: PrometheusInfo;
}

export interface Prometheus {
  readonly JmxExporter?: JmxExporter;
  readonly NodeExporter?: NodeExporter;
}

export interface PrometheusInfo {
  readonly JmxExporter?: JmxExporterInfo;
  readonly NodeExporter?: NodeExporterInfo;
}

export interface PublicAccess {
  readonly Type?: string;
}

export interface RebootBrokerRequest {
  readonly BrokerIds: [];
  readonly ClusterArn: string;
}

export interface RebootBrokerResponse {
  readonly ClusterArn?: string;
  readonly ClusterOperationArn?: string;
}

export interface S3 {
  readonly Bucket?: string;
  readonly Enabled: boolean;
  readonly Prefix?: string;
}

export interface ServerlessSasl {
  readonly Iam?: Iam;
}

export interface Sasl {
  readonly Scram?: Scram;
  readonly Iam?: Iam;
}

export interface Scram {
  readonly Enabled?: boolean;
}

export interface Iam {
  readonly Enabled?: boolean;
}

export interface NodeInfo {
  readonly AddedToClusterTime?: string;
  readonly BrokerNodeInfo?: BrokerNodeInfo;
  readonly InstanceType?: string;
  readonly NodeARN?: string;
  readonly NodeType?: string;
  readonly ZookeeperNodeInfo?: ZookeeperNodeInfo;
}

export interface NotFoundException {
  readonly InvalidParameter?: string;
  readonly Message?: string;
}

export interface ServiceUnavailableException {
  readonly InvalidParameter?: string;
  readonly Message?: string;
}

export interface StateInfo {
  readonly Code?: string;
  readonly Message?: string;
}

export interface StorageInfo {
  readonly EbsStorageInfo?: EBSStorageInfo;
}

export interface TagResourceRequest {
  readonly ResourceArn: string;
  readonly Tags: {[key: string]: any};
}

export interface Tls {
  readonly CertificateAuthorityArnList?: [];
  readonly Enabled?: boolean;
}

export interface TooManyRequestsException {
  readonly InvalidParameter?: string;
  readonly Message?: string;
}

export interface Unauthenticated {
  readonly Enabled?: boolean;
}

export interface UnauthorizedException {
  readonly InvalidParameter?: string;
  readonly Message?: string;
}

export interface UnprocessedScramSecret {
  readonly ErrorCode?: string;
  readonly ErrorMessage?: string;
  readonly SecretArn?: string;
}

export interface UntagResourceRequest {
  readonly ResourceArn: string;
  readonly TagKeys: [];
}

export interface UpdateBrokerCountRequest {
  readonly ClusterArn: string;
  readonly CurrentVersion: string;
  readonly TargetNumberOfBrokerNodes: number;
}

export interface UpdateBrokerCountResponse {
  readonly ClusterArn?: string;
  readonly ClusterOperationArn?: string;
}

export interface UpdateBrokerTypeRequest {
  readonly ClusterArn: string;
  readonly CurrentVersion: string;
  readonly TargetInstanceType: string;
}

export interface UpdateBrokerTypeResponse {
  readonly ClusterArn?: string;
  readonly ClusterOperationArn?: string;
}

export interface UpdateBrokerStorageRequest {
  readonly ClusterArn: string;
  readonly CurrentVersion: string;
  readonly TargetBrokerEBSVolumeInfo: [];
}

export interface UpdateBrokerStorageResponse {
  readonly ClusterArn?: string;
  readonly ClusterOperationArn?: string;
}

export interface UpdateClusterConfigurationRequest {
  readonly ClusterArn: string;
  readonly ConfigurationInfo: ConfigurationInfo;
  readonly CurrentVersion: string;
}

export interface UpdateClusterConfigurationResponse {
  readonly ClusterArn?: string;
  readonly ClusterOperationArn?: string;
}

export interface UpdateClusterKafkaVersionRequest {
  readonly ClusterArn: string;
  readonly ConfigurationInfo?: ConfigurationInfo;
  readonly CurrentVersion: string;
  readonly TargetKafkaVersion: string;
}

export interface UpdateClusterKafkaVersionResponse {
  readonly ClusterArn?: string;
  readonly ClusterOperationArn?: string;
}

export interface UpdateMonitoringRequest {
  readonly ClusterArn: string;
  readonly CurrentVersion: string;
  readonly EnhancedMonitoring?: string;
  readonly OpenMonitoring?: OpenMonitoringInfo;
  readonly LoggingInfo?: LoggingInfo;
}

export interface UpdateMonitoringResponse {
  readonly ClusterArn?: string;
  readonly ClusterOperationArn?: string;
}

export interface UpdateSecurityRequest {
  readonly ClientAuthentication?: ClientAuthentication;
  readonly ClusterArn: string;
  readonly CurrentVersion: string;
  readonly EncryptionInfo?: EncryptionInfo;
}

export interface UpdateSecurityResponse {
  readonly ClusterArn?: string;
  readonly ClusterOperationArn?: string;
}

export interface UpdateConfigurationRequest {
  readonly Arn: string;
  readonly Description?: string;
  readonly ServerProperties: unknown;
}

export interface UpdateConfigurationResponse {
  readonly Arn?: string;
  readonly LatestRevision?: ConfigurationRevision;
}

export interface UpdateConnectivityRequest {
  readonly ClusterArn: string;
  readonly ConnectivityInfo: ConnectivityInfo;
  readonly CurrentVersion: string;
}

export interface UpdateConnectivityResponse {
  readonly ClusterArn?: string;
  readonly ClusterOperationArn?: string;
}

export interface ZookeeperNodeInfo {
  readonly AttachedENIId?: string;
  readonly ClientVpcIpAddress?: string;
  readonly Endpoints?: [];
  readonly ZookeeperId?: unknown;
  readonly ZookeeperVersion?: string;
}


