/**
 * STOP. This file is autogenerated. DO NOT EDIT by hand
 */
export interface AddFlowMediaStreams {
  readonly FlowArn: string;
  readonly MediaStreams: [];
}
export interface AddFlowOutputs {
  readonly FlowArn: string;
  readonly Outputs: [];
}
export interface AddFlowSources {
  readonly FlowArn: string;
  readonly Sources: [];
}
export interface AddFlowVpcInterfaces {
  readonly FlowArn: string;
  readonly VpcInterfaces: [];
}
export interface CreateFlow {
  readonly AvailabilityZone?: string;
  readonly Entitlements?: [];
  readonly MediaStreams?: [];
  readonly Name: string;
  readonly Outputs?: [];
  readonly Source?: SetSourceRequest;
  readonly SourceFailoverConfig?: FailoverConfig;
  readonly Sources?: [];
  readonly VpcInterfaces?: [];
}
export interface DeleteFlow {
  readonly FlowArn: string;
}
export interface DescribeFlow {
  readonly FlowArn: string;
}
export interface DescribeOffering {
  readonly OfferingArn: string;
}
export interface DescribeReservation {
  readonly ReservationArn: string;
}
export interface GrantFlowEntitlements {
  readonly Entitlements: [];
  readonly FlowArn: string;
}
export interface ListEntitlements {
  readonly MaxResults?: number;
  readonly NextToken?: string;
}
export interface ListFlows {
  readonly MaxResults?: number;
  readonly NextToken?: string;
}
export interface ListOfferings {
  readonly MaxResults?: number;
  readonly NextToken?: string;
}
export interface ListReservations {
  readonly MaxResults?: number;
  readonly NextToken?: string;
}
export interface ListTagsForResource {
  readonly ResourceArn: string;
}
export interface PurchaseOffering {
  readonly OfferingArn: string;
  readonly ReservationName: string;
  readonly Start: string;
}
export interface RemoveFlowMediaStream {
  readonly FlowArn: string;
  readonly MediaStreamName: string;
}
export interface RemoveFlowOutput {
  readonly FlowArn: string;
  readonly OutputArn: string;
}
export interface RemoveFlowSource {
  readonly FlowArn: string;
  readonly SourceArn: string;
}
export interface RemoveFlowVpcInterface {
  readonly FlowArn: string;
  readonly VpcInterfaceName: string;
}
export interface RevokeFlowEntitlement {
  readonly EntitlementArn: string;
  readonly FlowArn: string;
}
export interface StartFlow {
  readonly FlowArn: string;
}
export interface StopFlow {
  readonly FlowArn: string;
}
export interface TagResource {
  readonly ResourceArn: string;
  readonly Tags: {[key: string]: any};
}
export interface UntagResource {
  readonly ResourceArn: string;
  readonly TagKeys: [];
}
export interface UpdateFlow {
  readonly FlowArn: string;
  readonly SourceFailoverConfig?: UpdateFailoverConfig;
}
export interface UpdateFlowEntitlement {
  readonly Description?: string;
  readonly Encryption?: UpdateEncryption;
  readonly EntitlementArn: string;
  readonly EntitlementStatus?: string;
  readonly FlowArn: string;
  readonly Subscribers?: [];
}
export interface UpdateFlowMediaStream {
  readonly Attributes?: MediaStreamAttributesRequest;
  readonly ClockRate?: number;
  readonly Description?: string;
  readonly FlowArn: string;
  readonly MediaStreamName: string;
  readonly MediaStreamType?: string;
  readonly VideoFormat?: string;
}
export interface UpdateFlowOutput {
  readonly CidrAllowList?: [];
  readonly Description?: string;
  readonly Destination?: string;
  readonly Encryption?: UpdateEncryption;
  readonly FlowArn: string;
  readonly MaxLatency?: number;
  readonly MediaStreamOutputConfigurations?: [];
  readonly MinLatency?: number;
  readonly OutputArn: string;
  readonly Port?: number;
  readonly Protocol?: string;
  readonly RemoteId?: string;
  readonly SmoothingLatency?: number;
  readonly StreamId?: string;
  readonly VpcInterfaceAttachment?: VpcInterfaceAttachment;
}
export interface UpdateFlowSource {
  readonly Decryption?: UpdateEncryption;
  readonly Description?: string;
  readonly EntitlementArn?: string;
  readonly FlowArn: string;
  readonly IngestPort?: number;
  readonly MaxBitrate?: number;
  readonly MaxLatency?: number;
  readonly MaxSyncBuffer?: number;
  readonly MediaStreamSourceConfigurations?: [];
  readonly MinLatency?: number;
  readonly Protocol?: string;
  readonly SourceArn: string;
  readonly StreamId?: string;
  readonly VpcInterfaceName?: string;
  readonly WhitelistCidr?: string;
}



interface AddFlowMediaStreamsRequest {
  readonly FlowArn: string;
  readonly MediaStreams: [];
}

interface AddFlowMediaStreamsResponse {
  readonly FlowArn: string;
  readonly MediaStreams: [];
}

interface AddFlowOutputs420Exception {
  readonly Message: string;
}

interface AddFlowOutputsRequest {
  readonly FlowArn: string;
  readonly Outputs: [];
}

interface AddFlowOutputsResponse {
  readonly FlowArn: string;
  readonly Outputs: [];
}

interface AddFlowSourcesRequest {
  readonly FlowArn: string;
  readonly Sources: [];
}

interface AddFlowSourcesResponse {
  readonly FlowArn: string;
  readonly Sources: [];
}

interface AddFlowVpcInterfacesRequest {
  readonly FlowArn: string;
  readonly VpcInterfaces: [];
}

interface AddFlowVpcInterfacesResponse {
  readonly FlowArn: string;
  readonly VpcInterfaces: [];
}

interface AddMediaStreamRequest {
  readonly Attributes: MediaStreamAttributesRequest;
  readonly ClockRate: number;
  readonly Description: string;
  readonly MediaStreamId: number;
  readonly MediaStreamName: string;
  readonly MediaStreamType: string;
  readonly VideoFormat: string;
}

interface AddOutputRequest {
  readonly CidrAllowList: [];
  readonly Description: string;
  readonly Destination: string;
  readonly Encryption: Encryption;
  readonly MaxLatency: number;
  readonly MediaStreamOutputConfigurations: [];
  readonly MinLatency: number;
  readonly Name: string;
  readonly Port: number;
  readonly Protocol: string;
  readonly RemoteId: string;
  readonly SmoothingLatency: number;
  readonly StreamId: string;
  readonly VpcInterfaceAttachment: VpcInterfaceAttachment;
}

interface BadRequestException {
  readonly Message: string;
}

interface CreateFlow420Exception {
  readonly Message: string;
}

interface CreateFlowRequest {
  readonly AvailabilityZone: string;
  readonly Entitlements: [];
  readonly MediaStreams: [];
  readonly Name: string;
  readonly Outputs: [];
  readonly Source: SetSourceRequest;
  readonly SourceFailoverConfig: FailoverConfig;
  readonly Sources: [];
  readonly VpcInterfaces: [];
}

interface CreateFlowResponse {
  readonly Flow: Flow;
}

interface DeleteFlowRequest {
  readonly FlowArn: string;
}

interface DeleteFlowResponse {
  readonly FlowArn: string;
  readonly Status: string;
}

interface DescribeFlowRequest {
  readonly FlowArn: string;
}

interface DescribeFlowResponse {
  readonly Flow: Flow;
  readonly Messages: Messages;
}

interface DescribeOfferingRequest {
  readonly OfferingArn: string;
}

interface DescribeOfferingResponse {
  readonly Offering: Offering;
}

interface DescribeReservationRequest {
  readonly ReservationArn: string;
}

interface DescribeReservationResponse {
  readonly Reservation: Reservation;
}

interface DestinationConfiguration {
  readonly DestinationIp: string;
  readonly DestinationPort: number;
  readonly Interface: Interface;
  readonly OutboundIp: string;
}

interface DestinationConfigurationRequest {
  readonly DestinationIp: string;
  readonly DestinationPort: number;
  readonly Interface: InterfaceRequest;
}

interface EncodingParameters {
  readonly CompressionFactor: unknown;
  readonly EncoderProfile: string;
}

interface EncodingParametersRequest {
  readonly CompressionFactor: unknown;
  readonly EncoderProfile: string;
}

interface Encryption {
  readonly Algorithm: string;
  readonly ConstantInitializationVector: string;
  readonly DeviceId: string;
  readonly KeyType: string;
  readonly Region: string;
  readonly ResourceId: string;
  readonly RoleArn: string;
  readonly SecretArn: string;
  readonly Url: string;
}

interface Entitlement {
  readonly DataTransferSubscriberFeePercent: number;
  readonly Description: string;
  readonly Encryption: Encryption;
  readonly EntitlementArn: string;
  readonly EntitlementStatus: string;
  readonly Name: string;
  readonly Subscribers: [];
}

interface FailoverConfig {
  readonly FailoverMode: string;
  readonly RecoveryWindow: number;
  readonly SourcePriority: SourcePriority;
  readonly State: string;
}

interface Flow {
  readonly AvailabilityZone: string;
  readonly Description: string;
  readonly EgressIp: string;
  readonly Entitlements: [];
  readonly FlowArn: string;
  readonly MediaStreams: [];
  readonly Name: string;
  readonly Outputs: [];
  readonly Source: Source;
  readonly SourceFailoverConfig: FailoverConfig;
  readonly Sources: [];
  readonly Status: string;
  readonly VpcInterfaces: [];
}

interface Fmtp {
  readonly ChannelOrder: string;
  readonly Colorimetry: string;
  readonly ExactFramerate: string;
  readonly Par: string;
  readonly Range: string;
  readonly ScanMode: string;
  readonly Tcs: string;
}

interface FmtpRequest {
  readonly ChannelOrder: string;
  readonly Colorimetry: string;
  readonly ExactFramerate: string;
  readonly Par: string;
  readonly Range: string;
  readonly ScanMode: string;
  readonly Tcs: string;
}

interface ForbiddenException {
  readonly Message: string;
}

interface GrantEntitlementRequest {
  readonly DataTransferSubscriberFeePercent: number;
  readonly Description: string;
  readonly Encryption: Encryption;
  readonly EntitlementStatus: string;
  readonly Name: string;
  readonly Subscribers: [];
}

interface GrantFlowEntitlements420Exception {
  readonly Message: string;
}

interface GrantFlowEntitlementsRequest {
  readonly Entitlements: [];
  readonly FlowArn: string;
}

interface GrantFlowEntitlementsResponse {
  readonly Entitlements: [];
  readonly FlowArn: string;
}

interface InputConfiguration {
  readonly InputIp: string;
  readonly InputPort: number;
  readonly Interface: Interface;
}

interface InputConfigurationRequest {
  readonly InputPort: number;
  readonly Interface: InterfaceRequest;
}

interface Interface {
  readonly Name: string;
}

interface InterfaceRequest {
  readonly Name: string;
}

interface InternalServerErrorException {
  readonly Message: string;
}

interface ListEntitlementsRequest {
  readonly MaxResults: number;
  readonly NextToken: string;
}

interface ListEntitlementsResponse {
  readonly Entitlements: [];
  readonly NextToken: string;
}

interface ListFlowsRequest {
  readonly MaxResults: number;
  readonly NextToken: string;
}

interface ListFlowsResponse {
  readonly Flows: [];
  readonly NextToken: string;
}

interface ListOfferingsRequest {
  readonly MaxResults: number;
  readonly NextToken: string;
}

interface ListOfferingsResponse {
  readonly NextToken: string;
  readonly Offerings: [];
}

interface ListReservationsRequest {
  readonly MaxResults: number;
  readonly NextToken: string;
}

interface ListReservationsResponse {
  readonly NextToken: string;
  readonly Reservations: [];
}

interface ListTagsForResourceRequest {
  readonly ResourceArn: string;
}

interface ListTagsForResourceResponse {
  readonly Tags: {[key: string]: any};
}

interface ListedEntitlement {
  readonly DataTransferSubscriberFeePercent: number;
  readonly EntitlementArn: string;
  readonly EntitlementName: string;
}

interface ListedFlow {
  readonly AvailabilityZone: string;
  readonly Description: string;
  readonly FlowArn: string;
  readonly Name: string;
  readonly SourceType: string;
  readonly Status: string;
}

interface MediaStream {
  readonly Attributes: MediaStreamAttributes;
  readonly ClockRate: number;
  readonly Description: string;
  readonly Fmt: number;
  readonly MediaStreamId: number;
  readonly MediaStreamName: string;
  readonly MediaStreamType: string;
  readonly VideoFormat: string;
}

interface MediaStreamAttributes {
  readonly Fmtp: Fmtp;
  readonly Lang: string;
}

interface MediaStreamAttributesRequest {
  readonly Fmtp: FmtpRequest;
  readonly Lang: string;
}

interface MediaStreamOutputConfiguration {
  readonly DestinationConfigurations: [];
  readonly EncodingName: string;
  readonly EncodingParameters: EncodingParameters;
  readonly MediaStreamName: string;
}

interface MediaStreamOutputConfigurationRequest {
  readonly DestinationConfigurations: [];
  readonly EncodingName: string;
  readonly EncodingParameters: EncodingParametersRequest;
  readonly MediaStreamName: string;
}

interface MediaStreamSourceConfiguration {
  readonly EncodingName: string;
  readonly InputConfigurations: [];
  readonly MediaStreamName: string;
}

interface MediaStreamSourceConfigurationRequest {
  readonly EncodingName: string;
  readonly InputConfigurations: [];
  readonly MediaStreamName: string;
}

interface Messages {
  readonly Errors: [];
}

interface NotFoundException {
  readonly Message: string;
}

interface Offering {
  readonly CurrencyCode: string;
  readonly Duration: number;
  readonly DurationUnits: string;
  readonly OfferingArn: string;
  readonly OfferingDescription: string;
  readonly PricePerUnit: string;
  readonly PriceUnits: string;
  readonly ResourceSpecification: ResourceSpecification;
}

interface Output {
  readonly DataTransferSubscriberFeePercent: number;
  readonly Description: string;
  readonly Destination: string;
  readonly Encryption: Encryption;
  readonly EntitlementArn: string;
  readonly ListenerAddress: string;
  readonly MediaLiveInputArn: string;
  readonly MediaStreamOutputConfigurations: [];
  readonly Name: string;
  readonly OutputArn: string;
  readonly Port: number;
  readonly Transport: Transport;
  readonly VpcInterfaceAttachment: VpcInterfaceAttachment;
}

interface PurchaseOfferingRequest {
  readonly OfferingArn: string;
  readonly ReservationName: string;
  readonly Start: string;
}

interface PurchaseOfferingResponse {
  readonly Reservation: Reservation;
}

interface RemoveFlowMediaStreamRequest {
  readonly FlowArn: string;
  readonly MediaStreamName: string;
}

interface RemoveFlowMediaStreamResponse {
  readonly FlowArn: string;
  readonly MediaStreamName: string;
}

interface RemoveFlowOutputRequest {
  readonly FlowArn: string;
  readonly OutputArn: string;
}

interface RemoveFlowOutputResponse {
  readonly FlowArn: string;
  readonly OutputArn: string;
}

interface RemoveFlowSourceRequest {
  readonly FlowArn: string;
  readonly SourceArn: string;
}

interface RemoveFlowSourceResponse {
  readonly FlowArn: string;
  readonly SourceArn: string;
}

interface RemoveFlowVpcInterfaceRequest {
  readonly FlowArn: string;
  readonly VpcInterfaceName: string;
}

interface RemoveFlowVpcInterfaceResponse {
  readonly FlowArn: string;
  readonly NonDeletedNetworkInterfaceIds: [];
  readonly VpcInterfaceName: string;
}

interface Reservation {
  readonly CurrencyCode: string;
  readonly Duration: number;
  readonly DurationUnits: string;
  readonly End: string;
  readonly OfferingArn: string;
  readonly OfferingDescription: string;
  readonly PricePerUnit: string;
  readonly PriceUnits: string;
  readonly ReservationArn: string;
  readonly ReservationName: string;
  readonly ReservationState: string;
  readonly ResourceSpecification: ResourceSpecification;
  readonly Start: string;
}

interface ResourceSpecification {
  readonly ReservedBitrate: number;
  readonly ResourceType: string;
}

interface ResponseError {
  readonly Message: string;
}

interface RevokeFlowEntitlementRequest {
  readonly EntitlementArn: string;
  readonly FlowArn: string;
}

interface RevokeFlowEntitlementResponse {
  readonly EntitlementArn: string;
  readonly FlowArn: string;
}

interface ServiceUnavailableException {
  readonly Message: string;
}

interface SetSourceRequest {
  readonly Decryption: Encryption;
  readonly Description: string;
  readonly EntitlementArn: string;
  readonly IngestPort: number;
  readonly MaxBitrate: number;
  readonly MaxLatency: number;
  readonly MaxSyncBuffer: number;
  readonly MediaStreamSourceConfigurations: [];
  readonly MinLatency: number;
  readonly Name: string;
  readonly Protocol: string;
  readonly StreamId: string;
  readonly VpcInterfaceName: string;
  readonly WhitelistCidr: string;
}

interface Source {
  readonly DataTransferSubscriberFeePercent: number;
  readonly Decryption: Encryption;
  readonly Description: string;
  readonly EntitlementArn: string;
  readonly IngestIp: string;
  readonly IngestPort: number;
  readonly MediaStreamSourceConfigurations: [];
  readonly Name: string;
  readonly SourceArn: string;
  readonly Transport: Transport;
  readonly VpcInterfaceName: string;
  readonly WhitelistCidr: string;
}

interface SourcePriority {
  readonly PrimarySource: string;
}

interface StartFlowRequest {
  readonly FlowArn: string;
}

interface StartFlowResponse {
  readonly FlowArn: string;
  readonly Status: string;
}

interface StopFlowRequest {
  readonly FlowArn: string;
}

interface StopFlowResponse {
  readonly FlowArn: string;
  readonly Status: string;
}

interface TagResourceRequest {
  readonly ResourceArn: string;
  readonly Tags: {[key: string]: any};
}

interface TooManyRequestsException {
  readonly Message: string;
}

interface Transport {
  readonly CidrAllowList: [];
  readonly MaxBitrate: number;
  readonly MaxLatency: number;
  readonly MaxSyncBuffer: number;
  readonly MinLatency: number;
  readonly Protocol: string;
  readonly RemoteId: string;
  readonly SmoothingLatency: number;
  readonly StreamId: string;
}

interface UntagResourceRequest {
  readonly ResourceArn: string;
  readonly TagKeys: [];
}

interface UpdateEncryption {
  readonly Algorithm: string;
  readonly ConstantInitializationVector: string;
  readonly DeviceId: string;
  readonly KeyType: string;
  readonly Region: string;
  readonly ResourceId: string;
  readonly RoleArn: string;
  readonly SecretArn: string;
  readonly Url: string;
}

interface UpdateFailoverConfig {
  readonly FailoverMode: string;
  readonly RecoveryWindow: number;
  readonly SourcePriority: SourcePriority;
  readonly State: string;
}

interface UpdateFlowEntitlementRequest {
  readonly Description: string;
  readonly Encryption: UpdateEncryption;
  readonly EntitlementArn: string;
  readonly EntitlementStatus: string;
  readonly FlowArn: string;
  readonly Subscribers: [];
}

interface UpdateFlowEntitlementResponse {
  readonly Entitlement: Entitlement;
  readonly FlowArn: string;
}

interface UpdateFlowMediaStreamRequest {
  readonly Attributes: MediaStreamAttributesRequest;
  readonly ClockRate: number;
  readonly Description: string;
  readonly FlowArn: string;
  readonly MediaStreamName: string;
  readonly MediaStreamType: string;
  readonly VideoFormat: string;
}

interface UpdateFlowMediaStreamResponse {
  readonly FlowArn: string;
  readonly MediaStream: MediaStream;
}

interface UpdateFlowOutputRequest {
  readonly CidrAllowList: [];
  readonly Description: string;
  readonly Destination: string;
  readonly Encryption: UpdateEncryption;
  readonly FlowArn: string;
  readonly MaxLatency: number;
  readonly MediaStreamOutputConfigurations: [];
  readonly MinLatency: number;
  readonly OutputArn: string;
  readonly Port: number;
  readonly Protocol: string;
  readonly RemoteId: string;
  readonly SmoothingLatency: number;
  readonly StreamId: string;
  readonly VpcInterfaceAttachment: VpcInterfaceAttachment;
}

interface UpdateFlowOutputResponse {
  readonly FlowArn: string;
  readonly Output: Output;
}

interface UpdateFlowRequest {
  readonly FlowArn: string;
  readonly SourceFailoverConfig: UpdateFailoverConfig;
}

interface UpdateFlowResponse {
  readonly Flow: Flow;
}

interface UpdateFlowSourceRequest {
  readonly Decryption: UpdateEncryption;
  readonly Description: string;
  readonly EntitlementArn: string;
  readonly FlowArn: string;
  readonly IngestPort: number;
  readonly MaxBitrate: number;
  readonly MaxLatency: number;
  readonly MaxSyncBuffer: number;
  readonly MediaStreamSourceConfigurations: [];
  readonly MinLatency: number;
  readonly Protocol: string;
  readonly SourceArn: string;
  readonly StreamId: string;
  readonly VpcInterfaceName: string;
  readonly WhitelistCidr: string;
}

interface UpdateFlowSourceResponse {
  readonly FlowArn: string;
  readonly Source: Source;
}

interface VpcInterface {
  readonly Name: string;
  readonly NetworkInterfaceIds: [];
  readonly NetworkInterfaceType: string;
  readonly RoleArn: string;
  readonly SecurityGroupIds: [];
  readonly SubnetId: string;
}

interface VpcInterfaceAttachment {
  readonly VpcInterfaceName: string;
}

interface VpcInterfaceRequest {
  readonly Name: string;
  readonly NetworkInterfaceType: string;
  readonly RoleArn: string;
  readonly SecurityGroupIds: [];
  readonly SubnetId: string;
}

