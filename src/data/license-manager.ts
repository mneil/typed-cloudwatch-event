/**
 * STOP. This file is autogenerated. DO NOT EDIT by hand
 */
export interface AcceptGrant {
  readonly GrantArn: string;
}

export interface CheckInLicense {
  readonly LicenseConsumptionToken: string;
  readonly Beneficiary?: string;
}

export interface CheckoutBorrowLicense {
  readonly LicenseArn: string;
  readonly Entitlements: [];
  readonly DigitalSignatureMethod: string;
  readonly NodeId?: string;
  readonly CheckoutMetadata?: [];
  readonly ClientToken: string;
}

export interface CheckoutLicense {
  readonly ProductSKU: string;
  readonly CheckoutType: string;
  readonly KeyFingerprint: string;
  readonly Entitlements: [];
  readonly ClientToken: string;
  readonly Beneficiary?: string;
  readonly NodeId?: string;
}

export interface CreateGrant {
  readonly ClientToken: string;
  readonly GrantName: string;
  readonly LicenseArn: string;
  readonly Principals: [];
  readonly HomeRegion: string;
  readonly AllowedOperations: [];
}

export interface CreateGrantVersion {
  readonly ClientToken: string;
  readonly GrantArn: string;
  readonly GrantName?: string;
  readonly AllowedOperations?: [];
  readonly Status?: string;
  readonly StatusReason?: string;
  readonly SourceVersion?: string;
}

export interface CreateLicense {
  readonly LicenseName: string;
  readonly ProductName: string;
  readonly ProductSKU: string;
  readonly Issuer: Issuer;
  readonly HomeRegion: string;
  readonly Validity: DatetimeRange;
  readonly Entitlements: [];
  readonly Beneficiary: string;
  readonly ConsumptionConfiguration: ConsumptionConfiguration;
  readonly LicenseMetadata?: [];
  readonly ClientToken: string;
}

export interface CreateLicenseConfiguration {
  readonly Name: string;
  readonly Description?: string;
  readonly LicenseCountingType: string;
  readonly LicenseCount?: number;
  readonly LicenseCountHardLimit?: boolean;
  readonly LicenseRules?: [];
  readonly Tags?: [];
  readonly DisassociateWhenNotFound?: boolean;
  readonly ProductInformationList?: [];
}

export interface CreateLicenseConversionTaskForResource {
  readonly ResourceArn: string;
  readonly SourceLicenseContext: LicenseConversionContext;
  readonly DestinationLicenseContext: LicenseConversionContext;
}

export interface CreateLicenseManagerReportGenerator {
  readonly ReportGeneratorName: string;
  readonly Type: [];
  readonly ReportContext: ReportContext;
  readonly ReportFrequency: ReportFrequency;
  readonly ClientToken: string;
  readonly Description?: string;
  readonly Tags?: [];
}

export interface CreateLicenseVersion {
  readonly LicenseArn: string;
  readonly LicenseName: string;
  readonly ProductName: string;
  readonly Issuer: Issuer;
  readonly HomeRegion: string;
  readonly Validity: DatetimeRange;
  readonly LicenseMetadata?: [];
  readonly Entitlements: [];
  readonly ConsumptionConfiguration: ConsumptionConfiguration;
  readonly Status: string;
  readonly ClientToken: string;
  readonly SourceVersion?: string;
}

export interface CreateToken {
  readonly LicenseArn: string;
  readonly RoleArns?: [];
  readonly ExpirationInDays?: number;
  readonly TokenProperties?: [];
  readonly ClientToken: string;
}

export interface DeleteGrant {
  readonly GrantArn: string;
  readonly StatusReason?: string;
  readonly Version: string;
}

export interface DeleteLicense {
  readonly LicenseArn: string;
  readonly SourceVersion: string;
}

export interface DeleteLicenseConfiguration {
  readonly LicenseConfigurationArn: string;
}

export interface DeleteLicenseManagerReportGenerator {
  readonly LicenseManagerReportGeneratorArn: string;
}

export interface DeleteToken {
  readonly TokenId: string;
}

export interface ExtendLicenseConsumption {
  readonly LicenseConsumptionToken: string;
  readonly DryRun?: boolean;
}

export interface GetAccessToken {
  readonly Token: string;
  readonly TokenProperties?: [];
}

export interface GetGrant {
  readonly GrantArn: string;
  readonly Version?: string;
}

export interface GetLicense {
  readonly LicenseArn: string;
  readonly Version?: string;
}

export interface GetLicenseConfiguration {
  readonly LicenseConfigurationArn: string;
}

export interface GetLicenseConversionTask {
  readonly LicenseConversionTaskId: string;
}

export interface GetLicenseManagerReportGenerator {
  readonly LicenseManagerReportGeneratorArn: string;
}

export interface GetLicenseUsage {
  readonly LicenseArn: string;
}

export interface GetServiceSettings {
}

export interface ListAssociationsForLicenseConfiguration {
  readonly LicenseConfigurationArn: string;
  readonly MaxResults?: number;
  readonly NextToken?: string;
}

export interface ListDistributedGrants {
  readonly GrantArns?: [];
  readonly Filters?: [];
  readonly NextToken?: string;
  readonly MaxResults?: number;
}

export interface ListFailuresForLicenseConfigurationOperations {
  readonly LicenseConfigurationArn: string;
  readonly MaxResults?: number;
  readonly NextToken?: string;
}

export interface ListLicenseConfigurations {
  readonly LicenseConfigurationArns?: [];
  readonly MaxResults?: number;
  readonly NextToken?: string;
  readonly Filters?: [];
}

export interface ListLicenseConversionTasks {
  readonly NextToken?: string;
  readonly MaxResults?: number;
  readonly Filters?: [];
}

export interface ListLicenseManagerReportGenerators {
  readonly Filters?: [];
  readonly NextToken?: string;
  readonly MaxResults?: number;
}

export interface ListLicenseSpecificationsForResource {
  readonly ResourceArn: string;
  readonly MaxResults?: number;
  readonly NextToken?: string;
}

export interface ListLicenseVersions {
  readonly LicenseArn: string;
  readonly NextToken?: string;
  readonly MaxResults?: number;
}

export interface ListLicenses {
  readonly LicenseArns?: [];
  readonly Filters?: [];
  readonly NextToken?: string;
  readonly MaxResults?: number;
}

export interface ListReceivedGrants {
  readonly GrantArns?: [];
  readonly Filters?: [];
  readonly NextToken?: string;
  readonly MaxResults?: number;
}

export interface ListReceivedLicenses {
  readonly LicenseArns?: [];
  readonly Filters?: [];
  readonly NextToken?: string;
  readonly MaxResults?: number;
}

export interface ListResourceInventory {
  readonly MaxResults?: number;
  readonly NextToken?: string;
  readonly Filters?: [];
}

export interface ListTagsForResource {
  readonly ResourceArn: string;
}

export interface ListTokens {
  readonly TokenIds?: [];
  readonly Filters?: [];
  readonly NextToken?: string;
  readonly MaxResults?: number;
}

export interface ListUsageForLicenseConfiguration {
  readonly LicenseConfigurationArn: string;
  readonly MaxResults?: number;
  readonly NextToken?: string;
  readonly Filters?: [];
}

export interface RejectGrant {
  readonly GrantArn: string;
}

export interface TagResource {
  readonly ResourceArn: string;
  readonly Tags: [];
}

export interface UntagResource {
  readonly ResourceArn: string;
  readonly TagKeys: [];
}

export interface UpdateLicenseConfiguration {
  readonly LicenseConfigurationArn: string;
  readonly LicenseConfigurationStatus?: string;
  readonly LicenseRules?: [];
  readonly LicenseCount?: number;
  readonly LicenseCountHardLimit?: boolean;
  readonly Name?: string;
  readonly Description?: string;
  readonly ProductInformationList?: [];
  readonly DisassociateWhenNotFound?: boolean;
}

export interface UpdateLicenseManagerReportGenerator {
  readonly LicenseManagerReportGeneratorArn: string;
  readonly ReportGeneratorName: string;
  readonly Type: [];
  readonly ReportContext: ReportContext;
  readonly ReportFrequency: ReportFrequency;
  readonly ClientToken: string;
  readonly Description?: string;
}

export interface UpdateLicenseSpecificationsForResource {
  readonly ResourceArn: string;
  readonly AddLicenseSpecifications?: [];
  readonly RemoveLicenseSpecifications?: [];
}

export interface UpdateServiceSettings {
  readonly S3BucketArn?: string;
  readonly SnsTopicArn?: string;
  readonly OrganizationConfiguration?: OrganizationConfiguration;
  readonly EnableCrossAccountsDiscovery?: boolean;
}

export interface AcceptGrantRequest {
  readonly GrantArn: string;
}

export interface AcceptGrantResponse {
  readonly GrantArn?: string;
  readonly Status?: string;
  readonly Version?: string;
}

export interface AccessDeniedException {
  readonly Message?: string;
}

export interface AuthorizationException {
  readonly Message?: string;
}

export interface AutomatedDiscoveryInformation {
  readonly LastRunTime?: Date;
}

export interface BorrowConfiguration {
  readonly AllowEarlyCheckIn: boolean;
  readonly MaxTimeToLiveInMinutes: number;
}

export interface CheckInLicenseRequest {
  readonly LicenseConsumptionToken: string;
  readonly Beneficiary?: string;
}

export interface CheckInLicenseResponse {
}

export interface CheckoutBorrowLicenseRequest {
  readonly LicenseArn: string;
  readonly Entitlements: [];
  readonly DigitalSignatureMethod: string;
  readonly NodeId?: string;
  readonly CheckoutMetadata?: [];
  readonly ClientToken: string;
}

export interface CheckoutBorrowLicenseResponse {
  readonly LicenseArn?: string;
  readonly LicenseConsumptionToken?: string;
  readonly EntitlementsAllowed?: [];
  readonly NodeId?: string;
  readonly SignedToken?: string;
  readonly IssuedAt?: string;
  readonly Expiration?: string;
  readonly CheckoutMetadata?: [];
}

export interface CheckoutLicenseRequest {
  readonly ProductSKU: string;
  readonly CheckoutType: string;
  readonly KeyFingerprint: string;
  readonly Entitlements: [];
  readonly ClientToken: string;
  readonly Beneficiary?: string;
  readonly NodeId?: string;
}

export interface CheckoutLicenseResponse {
  readonly CheckoutType?: string;
  readonly LicenseConsumptionToken?: string;
  readonly EntitlementsAllowed?: [];
  readonly SignedToken?: string;
  readonly NodeId?: string;
  readonly IssuedAt?: string;
  readonly Expiration?: string;
  readonly LicenseArn?: string;
}

export interface ConflictException {
  readonly Message?: string;
}

export interface ConsumedLicenseSummary {
  readonly ResourceType?: string;
  readonly ConsumedLicenses?: number;
}

export interface ConsumptionConfiguration {
  readonly RenewType?: string;
  readonly ProvisionalConfiguration?: ProvisionalConfiguration;
  readonly BorrowConfiguration?: BorrowConfiguration;
}

export interface CreateGrantRequest {
  readonly ClientToken: string;
  readonly GrantName: string;
  readonly LicenseArn: string;
  readonly Principals: [];
  readonly HomeRegion: string;
  readonly AllowedOperations: [];
}

export interface CreateGrantResponse {
  readonly GrantArn?: string;
  readonly Status?: string;
  readonly Version?: string;
}

export interface CreateGrantVersionRequest {
  readonly ClientToken: string;
  readonly GrantArn: string;
  readonly GrantName?: string;
  readonly AllowedOperations?: [];
  readonly Status?: string;
  readonly StatusReason?: string;
  readonly SourceVersion?: string;
}

export interface CreateGrantVersionResponse {
  readonly GrantArn?: string;
  readonly Status?: string;
  readonly Version?: string;
}

export interface CreateLicenseConfigurationRequest {
  readonly Name: string;
  readonly Description?: string;
  readonly LicenseCountingType: string;
  readonly LicenseCount?: number;
  readonly LicenseCountHardLimit?: boolean;
  readonly LicenseRules?: [];
  readonly Tags?: [];
  readonly DisassociateWhenNotFound?: boolean;
  readonly ProductInformationList?: [];
}

export interface CreateLicenseConfigurationResponse {
  readonly LicenseConfigurationArn?: string;
}

export interface CreateLicenseConversionTaskForResourceRequest {
  readonly ResourceArn: string;
  readonly SourceLicenseContext: LicenseConversionContext;
  readonly DestinationLicenseContext: LicenseConversionContext;
}

export interface CreateLicenseConversionTaskForResourceResponse {
  readonly LicenseConversionTaskId?: string;
}

export interface CreateLicenseManagerReportGeneratorRequest {
  readonly ReportGeneratorName: string;
  readonly Type: [];
  readonly ReportContext: ReportContext;
  readonly ReportFrequency: ReportFrequency;
  readonly ClientToken: string;
  readonly Description?: string;
  readonly Tags?: [];
}

export interface CreateLicenseManagerReportGeneratorResponse {
  readonly LicenseManagerReportGeneratorArn?: string;
}

export interface CreateLicenseRequest {
  readonly LicenseName: string;
  readonly ProductName: string;
  readonly ProductSKU: string;
  readonly Issuer: Issuer;
  readonly HomeRegion: string;
  readonly Validity: DatetimeRange;
  readonly Entitlements: [];
  readonly Beneficiary: string;
  readonly ConsumptionConfiguration: ConsumptionConfiguration;
  readonly LicenseMetadata?: [];
  readonly ClientToken: string;
}

export interface CreateLicenseResponse {
  readonly LicenseArn?: string;
  readonly Status?: string;
  readonly Version?: string;
}

export interface CreateLicenseVersionRequest {
  readonly LicenseArn: string;
  readonly LicenseName: string;
  readonly ProductName: string;
  readonly Issuer: Issuer;
  readonly HomeRegion: string;
  readonly Validity: DatetimeRange;
  readonly LicenseMetadata?: [];
  readonly Entitlements: [];
  readonly ConsumptionConfiguration: ConsumptionConfiguration;
  readonly Status: string;
  readonly ClientToken: string;
  readonly SourceVersion?: string;
}

export interface CreateLicenseVersionResponse {
  readonly LicenseArn?: string;
  readonly Version?: string;
  readonly Status?: string;
}

export interface CreateTokenRequest {
  readonly LicenseArn: string;
  readonly RoleArns?: [];
  readonly ExpirationInDays?: number;
  readonly TokenProperties?: [];
  readonly ClientToken: string;
}

export interface CreateTokenResponse {
  readonly TokenId?: string;
  readonly TokenType?: string;
  readonly Token?: string;
}

export interface DatetimeRange {
  readonly Begin: string;
  readonly End?: string;
}

export interface DeleteGrantRequest {
  readonly GrantArn: string;
  readonly StatusReason?: string;
  readonly Version: string;
}

export interface DeleteGrantResponse {
  readonly GrantArn?: string;
  readonly Status?: string;
  readonly Version?: string;
}

export interface DeleteLicenseConfigurationRequest {
  readonly LicenseConfigurationArn: string;
}

export interface DeleteLicenseConfigurationResponse {
}

export interface DeleteLicenseManagerReportGeneratorRequest {
  readonly LicenseManagerReportGeneratorArn: string;
}

export interface DeleteLicenseManagerReportGeneratorResponse {
}

export interface DeleteLicenseRequest {
  readonly LicenseArn: string;
  readonly SourceVersion: string;
}

export interface DeleteLicenseResponse {
  readonly Status?: string;
  readonly DeletionDate?: string;
}

export interface DeleteTokenRequest {
  readonly TokenId: string;
}

export interface DeleteTokenResponse {
}

export interface Entitlement {
  readonly Name: string;
  readonly Value?: string;
  readonly MaxCount?: number;
  readonly Overage?: boolean;
  readonly Unit: string;
  readonly AllowCheckIn?: boolean;
}

export interface EntitlementData {
  readonly Name: string;
  readonly Value?: string;
  readonly Unit: string;
}

export interface EntitlementNotAllowedException {
  readonly Message?: string;
}

export interface EntitlementUsage {
  readonly Name: string;
  readonly ConsumedValue: string;
  readonly MaxCount?: string;
  readonly Unit: string;
}

export interface ExtendLicenseConsumptionRequest {
  readonly LicenseConsumptionToken: string;
  readonly DryRun?: boolean;
}

export interface ExtendLicenseConsumptionResponse {
  readonly LicenseConsumptionToken?: string;
  readonly Expiration?: string;
}

export interface FailedDependencyException {
  readonly Message?: string;
  readonly ErrorCode?: string;
}

export interface Filter {
  readonly Name?: string;
  readonly Values?: [];
}

export interface FilterLimitExceededException {
  readonly Message?: string;
}

export interface GetAccessTokenRequest {
  readonly Token: string;
  readonly TokenProperties?: [];
}

export interface GetAccessTokenResponse {
  readonly AccessToken?: string;
}

export interface GetGrantRequest {
  readonly GrantArn: string;
  readonly Version?: string;
}

export interface GetGrantResponse {
  readonly Grant?: Grant;
}

export interface GetLicenseConfigurationRequest {
  readonly LicenseConfigurationArn: string;
}

export interface GetLicenseConfigurationResponse {
  readonly LicenseConfigurationId?: string;
  readonly LicenseConfigurationArn?: string;
  readonly Name?: string;
  readonly Description?: string;
  readonly LicenseCountingType?: string;
  readonly LicenseRules?: [];
  readonly LicenseCount?: number;
  readonly LicenseCountHardLimit?: boolean;
  readonly ConsumedLicenses?: number;
  readonly Status?: string;
  readonly OwnerAccountId?: string;
  readonly ConsumedLicenseSummaryList?: [];
  readonly ManagedResourceSummaryList?: [];
  readonly Tags?: [];
  readonly ProductInformationList?: [];
  readonly AutomatedDiscoveryInformation?: AutomatedDiscoveryInformation;
  readonly DisassociateWhenNotFound?: boolean;
}

export interface GetLicenseConversionTaskRequest {
  readonly LicenseConversionTaskId: string;
}

export interface GetLicenseConversionTaskResponse {
  readonly LicenseConversionTaskId?: string;
  readonly ResourceArn?: string;
  readonly SourceLicenseContext?: LicenseConversionContext;
  readonly DestinationLicenseContext?: LicenseConversionContext;
  readonly StatusMessage?: string;
  readonly Status?: string;
  readonly StartTime?: Date;
  readonly LicenseConversionTime?: Date;
  readonly EndTime?: Date;
}

export interface GetLicenseManagerReportGeneratorRequest {
  readonly LicenseManagerReportGeneratorArn: string;
}

export interface GetLicenseManagerReportGeneratorResponse {
  readonly ReportGenerator?: ReportGenerator;
}

export interface GetLicenseRequest {
  readonly LicenseArn: string;
  readonly Version?: string;
}

export interface GetLicenseResponse {
  readonly License?: License;
}

export interface GetLicenseUsageRequest {
  readonly LicenseArn: string;
}

export interface GetLicenseUsageResponse {
  readonly LicenseUsage?: LicenseUsage;
}

export interface GetServiceSettingsRequest {
}

export interface GetServiceSettingsResponse {
  readonly S3BucketArn?: string;
  readonly SnsTopicArn?: string;
  readonly OrganizationConfiguration?: OrganizationConfiguration;
  readonly EnableCrossAccountsDiscovery?: boolean;
  readonly LicenseManagerResourceShareArn?: string;
}

export interface Grant {
  readonly GrantArn: string;
  readonly GrantName: string;
  readonly ParentArn: string;
  readonly LicenseArn: string;
  readonly GranteePrincipalArn: string;
  readonly HomeRegion: string;
  readonly GrantStatus: string;
  readonly StatusReason?: string;
  readonly Version: string;
  readonly GrantedOperations: [];
}

export interface GrantedLicense {
  readonly LicenseArn?: string;
  readonly LicenseName?: string;
  readonly ProductName?: string;
  readonly ProductSKU?: string;
  readonly Issuer?: IssuerDetails;
  readonly HomeRegion?: string;
  readonly Status?: string;
  readonly Validity?: DatetimeRange;
  readonly Beneficiary?: string;
  readonly Entitlements?: [];
  readonly ConsumptionConfiguration?: ConsumptionConfiguration;
  readonly LicenseMetadata?: [];
  readonly CreateTime?: string;
  readonly Version?: string;
  readonly ReceivedMetadata?: ReceivedMetadata;
}

export interface InvalidParameterValueException {
  readonly Message?: string;
}

export interface InvalidResourceStateException {
  readonly Message?: string;
}

export interface InventoryFilter {
  readonly Name: string;
  readonly Condition: string;
  readonly Value?: string;
}

export interface Issuer {
  readonly Name: string;
  readonly SignKey?: string;
}

export interface IssuerDetails {
  readonly Name?: string;
  readonly SignKey?: string;
  readonly KeyFingerprint?: string;
}

export interface License {
  readonly LicenseArn?: string;
  readonly LicenseName?: string;
  readonly ProductName?: string;
  readonly ProductSKU?: string;
  readonly Issuer?: IssuerDetails;
  readonly HomeRegion?: string;
  readonly Status?: string;
  readonly Validity?: DatetimeRange;
  readonly Beneficiary?: string;
  readonly Entitlements?: [];
  readonly ConsumptionConfiguration?: ConsumptionConfiguration;
  readonly LicenseMetadata?: [];
  readonly CreateTime?: string;
  readonly Version?: string;
}

export interface LicenseConfiguration {
  readonly LicenseConfigurationId?: string;
  readonly LicenseConfigurationArn?: string;
  readonly Name?: string;
  readonly Description?: string;
  readonly LicenseCountingType?: string;
  readonly LicenseRules?: [];
  readonly LicenseCount?: number;
  readonly LicenseCountHardLimit?: boolean;
  readonly DisassociateWhenNotFound?: boolean;
  readonly ConsumedLicenses?: number;
  readonly Status?: string;
  readonly OwnerAccountId?: string;
  readonly ConsumedLicenseSummaryList?: [];
  readonly ManagedResourceSummaryList?: [];
  readonly ProductInformationList?: [];
  readonly AutomatedDiscoveryInformation?: AutomatedDiscoveryInformation;
}

export interface LicenseConfigurationAssociation {
  readonly ResourceArn?: string;
  readonly ResourceType?: string;
  readonly ResourceOwnerId?: string;
  readonly AssociationTime?: Date;
  readonly AmiAssociationScope?: string;
}

export interface LicenseConfigurationUsage {
  readonly ResourceArn?: string;
  readonly ResourceType?: string;
  readonly ResourceStatus?: string;
  readonly ResourceOwnerId?: string;
  readonly AssociationTime?: Date;
  readonly ConsumedLicenses?: number;
}

export interface LicenseConversionContext {
  readonly UsageOperation?: string;
}

export interface LicenseConversionTask {
  readonly LicenseConversionTaskId?: string;
  readonly ResourceArn?: string;
  readonly SourceLicenseContext?: LicenseConversionContext;
  readonly DestinationLicenseContext?: LicenseConversionContext;
  readonly Status?: string;
  readonly StatusMessage?: string;
  readonly StartTime?: Date;
  readonly LicenseConversionTime?: Date;
  readonly EndTime?: Date;
}

export interface LicenseOperationFailure {
  readonly ResourceArn?: string;
  readonly ResourceType?: string;
  readonly ErrorMessage?: string;
  readonly FailureTime?: Date;
  readonly OperationName?: string;
  readonly ResourceOwnerId?: string;
  readonly OperationRequestedBy?: string;
  readonly MetadataList?: [];
}

export interface LicenseSpecification {
  readonly LicenseConfigurationArn: string;
  readonly AmiAssociationScope?: string;
}

export interface LicenseUsage {
  readonly EntitlementUsages?: [];
}

export interface LicenseUsageException {
  readonly Message?: string;
}

export interface ListAssociationsForLicenseConfigurationRequest {
  readonly LicenseConfigurationArn: string;
  readonly MaxResults?: number;
  readonly NextToken?: string;
}

export interface ListAssociationsForLicenseConfigurationResponse {
  readonly LicenseConfigurationAssociations?: [];
  readonly NextToken?: string;
}

export interface ListDistributedGrantsRequest {
  readonly GrantArns?: [];
  readonly Filters?: [];
  readonly NextToken?: string;
  readonly MaxResults?: number;
}

export interface ListDistributedGrantsResponse {
  readonly Grants?: [];
  readonly NextToken?: string;
}

export interface ListFailuresForLicenseConfigurationOperationsRequest {
  readonly LicenseConfigurationArn: string;
  readonly MaxResults?: number;
  readonly NextToken?: string;
}

export interface ListFailuresForLicenseConfigurationOperationsResponse {
  readonly LicenseOperationFailureList?: [];
  readonly NextToken?: string;
}

export interface ListLicenseConfigurationsRequest {
  readonly LicenseConfigurationArns?: [];
  readonly MaxResults?: number;
  readonly NextToken?: string;
  readonly Filters?: [];
}

export interface ListLicenseConfigurationsResponse {
  readonly LicenseConfigurations?: [];
  readonly NextToken?: string;
}

export interface ListLicenseConversionTasksRequest {
  readonly NextToken?: string;
  readonly MaxResults?: number;
  readonly Filters?: [];
}

export interface ListLicenseConversionTasksResponse {
  readonly LicenseConversionTasks?: [];
  readonly NextToken?: string;
}

export interface ListLicenseManagerReportGeneratorsRequest {
  readonly Filters?: [];
  readonly NextToken?: string;
  readonly MaxResults?: number;
}

export interface ListLicenseManagerReportGeneratorsResponse {
  readonly ReportGenerators?: [];
  readonly NextToken?: string;
}

export interface ListLicenseSpecificationsForResourceRequest {
  readonly ResourceArn: string;
  readonly MaxResults?: number;
  readonly NextToken?: string;
}

export interface ListLicenseSpecificationsForResourceResponse {
  readonly LicenseSpecifications?: [];
  readonly NextToken?: string;
}

export interface ListLicenseVersionsRequest {
  readonly LicenseArn: string;
  readonly NextToken?: string;
  readonly MaxResults?: number;
}

export interface ListLicenseVersionsResponse {
  readonly Licenses?: [];
  readonly NextToken?: string;
}

export interface ListLicensesRequest {
  readonly LicenseArns?: [];
  readonly Filters?: [];
  readonly NextToken?: string;
  readonly MaxResults?: number;
}

export interface ListLicensesResponse {
  readonly Licenses?: [];
  readonly NextToken?: string;
}

export interface ListReceivedGrantsRequest {
  readonly GrantArns?: [];
  readonly Filters?: [];
  readonly NextToken?: string;
  readonly MaxResults?: number;
}

export interface ListReceivedGrantsResponse {
  readonly Grants?: [];
  readonly NextToken?: string;
}

export interface ListReceivedLicensesRequest {
  readonly LicenseArns?: [];
  readonly Filters?: [];
  readonly NextToken?: string;
  readonly MaxResults?: number;
}

export interface ListReceivedLicensesResponse {
  readonly Licenses?: [];
  readonly NextToken?: string;
}

export interface ListResourceInventoryRequest {
  readonly MaxResults?: number;
  readonly NextToken?: string;
  readonly Filters?: [];
}

export interface ListResourceInventoryResponse {
  readonly ResourceInventoryList?: [];
  readonly NextToken?: string;
}

export interface ListTagsForResourceRequest {
  readonly ResourceArn: string;
}

export interface ListTagsForResourceResponse {
  readonly Tags?: [];
}

export interface ListTokensRequest {
  readonly TokenIds?: [];
  readonly Filters?: [];
  readonly NextToken?: string;
  readonly MaxResults?: number;
}

export interface ListTokensResponse {
  readonly Tokens?: [];
  readonly NextToken?: string;
}

export interface ListUsageForLicenseConfigurationRequest {
  readonly LicenseConfigurationArn: string;
  readonly MaxResults?: number;
  readonly NextToken?: string;
  readonly Filters?: [];
}

export interface ListUsageForLicenseConfigurationResponse {
  readonly LicenseConfigurationUsageList?: [];
  readonly NextToken?: string;
}

export interface ManagedResourceSummary {
  readonly ResourceType?: string;
  readonly AssociationCount?: number;
}

export interface Metadata {
  readonly Name?: string;
  readonly Value?: string;
}

export interface NoEntitlementsAllowedException {
  readonly Message?: string;
}

export interface OrganizationConfiguration {
  readonly EnableIntegration: boolean;
}

export interface ProductInformation {
  readonly ResourceType: string;
  readonly ProductInformationFilterList: [];
}

export interface ProductInformationFilter {
  readonly ProductInformationFilterName: string;
  readonly ProductInformationFilterValue?: [];
  readonly ProductInformationFilterComparator: string;
}

export interface ProvisionalConfiguration {
  readonly MaxTimeToLiveInMinutes: number;
}

export interface RateLimitExceededException {
  readonly Message?: string;
}

export interface ReceivedMetadata {
  readonly ReceivedStatus?: string;
  readonly ReceivedStatusReason?: string;
  readonly AllowedOperations?: [];
}

export interface RedirectException {
  readonly Location?: string;
  readonly Message?: string;
}

export interface RejectGrantRequest {
  readonly GrantArn: string;
}

export interface RejectGrantResponse {
  readonly GrantArn?: string;
  readonly Status?: string;
  readonly Version?: string;
}

export interface ReportContext {
  readonly licenseConfigurationArns: [];
}

export interface ReportFrequency {
  readonly value?: number;
  readonly period?: string;
}

export interface ReportGenerator {
  readonly ReportGeneratorName?: string;
  readonly ReportType?: [];
  readonly ReportContext?: ReportContext;
  readonly ReportFrequency?: ReportFrequency;
  readonly LicenseManagerReportGeneratorArn?: string;
  readonly LastRunStatus?: string;
  readonly LastRunFailureReason?: string;
  readonly LastReportGenerationTime?: string;
  readonly ReportCreatorAccount?: string;
  readonly Description?: string;
  readonly S3Location?: S3Location;
  readonly CreateTime?: string;
  readonly Tags?: [];
}

export interface ResourceInventory {
  readonly ResourceId?: string;
  readonly ResourceType?: string;
  readonly ResourceArn?: string;
  readonly Platform?: string;
  readonly PlatformVersion?: string;
  readonly ResourceOwningAccountId?: string;
}

export interface ResourceLimitExceededException {
  readonly Message?: string;
}

export interface ResourceNotFoundException {
  readonly Message?: string;
}

export interface S3Location {
  readonly bucket?: string;
  readonly keyPrefix?: string;
}

export interface ServerInternalException {
  readonly Message?: string;
}

export interface Tag {
  readonly Key?: string;
  readonly Value?: string;
}

export interface TagResourceRequest {
  readonly ResourceArn: string;
  readonly Tags: [];
}

export interface TagResourceResponse {
}

export interface TokenData {
  readonly TokenId?: string;
  readonly TokenType?: string;
  readonly LicenseArn?: string;
  readonly ExpirationTime?: string;
  readonly TokenProperties?: [];
  readonly RoleArns?: [];
  readonly Status?: string;
}

export interface UnsupportedDigitalSignatureMethodException {
  readonly Message?: string;
}

export interface UntagResourceRequest {
  readonly ResourceArn: string;
  readonly TagKeys: [];
}

export interface UntagResourceResponse {
}

export interface UpdateLicenseConfigurationRequest {
  readonly LicenseConfigurationArn: string;
  readonly LicenseConfigurationStatus?: string;
  readonly LicenseRules?: [];
  readonly LicenseCount?: number;
  readonly LicenseCountHardLimit?: boolean;
  readonly Name?: string;
  readonly Description?: string;
  readonly ProductInformationList?: [];
  readonly DisassociateWhenNotFound?: boolean;
}

export interface UpdateLicenseConfigurationResponse {
}

export interface UpdateLicenseManagerReportGeneratorRequest {
  readonly LicenseManagerReportGeneratorArn: string;
  readonly ReportGeneratorName: string;
  readonly Type: [];
  readonly ReportContext: ReportContext;
  readonly ReportFrequency: ReportFrequency;
  readonly ClientToken: string;
  readonly Description?: string;
}

export interface UpdateLicenseManagerReportGeneratorResponse {
}

export interface UpdateLicenseSpecificationsForResourceRequest {
  readonly ResourceArn: string;
  readonly AddLicenseSpecifications?: [];
  readonly RemoveLicenseSpecifications?: [];
}

export interface UpdateLicenseSpecificationsForResourceResponse {
}

export interface UpdateServiceSettingsRequest {
  readonly S3BucketArn?: string;
  readonly SnsTopicArn?: string;
  readonly OrganizationConfiguration?: OrganizationConfiguration;
  readonly EnableCrossAccountsDiscovery?: boolean;
}

export interface UpdateServiceSettingsResponse {
}

export interface ValidationException {
  readonly Message?: string;
}


