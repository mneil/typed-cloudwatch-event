/**
 * STOP. This file is autogenerated. DO NOT EDIT by hand
 */
export interface AcceptGrant {
  readonly GrantArn: string;
}
export interface CheckInLicense {
  readonly LicenseConsumptionToken: string;
  readonly Beneficiary?: string;
}
export interface CheckoutBorrowLicense {
  readonly LicenseArn: string;
  readonly Entitlements: [];
  readonly DigitalSignatureMethod: string;
  readonly NodeId?: string;
  readonly CheckoutMetadata?: [];
  readonly ClientToken: string;
}
export interface CheckoutLicense {
  readonly ProductSKU: string;
  readonly CheckoutType: string;
  readonly KeyFingerprint: string;
  readonly Entitlements: [];
  readonly ClientToken: string;
  readonly Beneficiary?: string;
  readonly NodeId?: string;
}
export interface CreateGrant {
  readonly ClientToken: string;
  readonly GrantName: string;
  readonly LicenseArn: string;
  readonly Principals: [];
  readonly HomeRegion: string;
  readonly AllowedOperations: [];
}
export interface CreateGrantVersion {
  readonly ClientToken: string;
  readonly GrantArn: string;
  readonly GrantName?: string;
  readonly AllowedOperations?: [];
  readonly Status?: string;
  readonly StatusReason?: string;
  readonly SourceVersion?: string;
}
export interface CreateLicense {
  readonly LicenseName: string;
  readonly ProductName: string;
  readonly ProductSKU: string;
  readonly Issuer: Issuer;
  readonly HomeRegion: string;
  readonly Validity: DatetimeRange;
  readonly Entitlements: [];
  readonly Beneficiary: string;
  readonly ConsumptionConfiguration: ConsumptionConfiguration;
  readonly LicenseMetadata?: [];
  readonly ClientToken: string;
}
export interface CreateLicenseConfiguration {
  readonly Name: string;
  readonly Description?: string;
  readonly LicenseCountingType: string;
  readonly LicenseCount?: number;
  readonly LicenseCountHardLimit?: boolean;
  readonly LicenseRules?: [];
  readonly Tags?: [];
  readonly DisassociateWhenNotFound?: boolean;
  readonly ProductInformationList?: [];
}
export interface CreateLicenseConversionTaskForResource {
  readonly ResourceArn: string;
  readonly SourceLicenseContext: LicenseConversionContext;
  readonly DestinationLicenseContext: LicenseConversionContext;
}
export interface CreateLicenseManagerReportGenerator {
  readonly ReportGeneratorName: string;
  readonly Type: [];
  readonly ReportContext: ReportContext;
  readonly ReportFrequency: ReportFrequency;
  readonly ClientToken: string;
  readonly Description?: string;
  readonly Tags?: [];
}
export interface CreateLicenseVersion {
  readonly LicenseArn: string;
  readonly LicenseName: string;
  readonly ProductName: string;
  readonly Issuer: Issuer;
  readonly HomeRegion: string;
  readonly Validity: DatetimeRange;
  readonly LicenseMetadata?: [];
  readonly Entitlements: [];
  readonly ConsumptionConfiguration: ConsumptionConfiguration;
  readonly Status: string;
  readonly ClientToken: string;
  readonly SourceVersion?: string;
}
export interface CreateToken {
  readonly LicenseArn: string;
  readonly RoleArns?: [];
  readonly ExpirationInDays?: number;
  readonly TokenProperties?: [];
  readonly ClientToken: string;
}
export interface DeleteGrant {
  readonly GrantArn: string;
  readonly StatusReason?: string;
  readonly Version: string;
}
export interface DeleteLicense {
  readonly LicenseArn: string;
  readonly SourceVersion: string;
}
export interface DeleteLicenseConfiguration {
  readonly LicenseConfigurationArn: string;
}
export interface DeleteLicenseManagerReportGenerator {
  readonly LicenseManagerReportGeneratorArn: string;
}
export interface DeleteToken {
  readonly TokenId: string;
}
export interface ExtendLicenseConsumption {
  readonly LicenseConsumptionToken: string;
  readonly DryRun?: boolean;
}
export interface GetAccessToken {
  readonly Token: string;
  readonly TokenProperties?: [];
}
export interface GetGrant {
  readonly GrantArn: string;
  readonly Version?: string;
}
export interface GetLicense {
  readonly LicenseArn: string;
  readonly Version?: string;
}
export interface GetLicenseConfiguration {
  readonly LicenseConfigurationArn: string;
}
export interface GetLicenseConversionTask {
  readonly LicenseConversionTaskId: string;
}
export interface GetLicenseManagerReportGenerator {
  readonly LicenseManagerReportGeneratorArn: string;
}
export interface GetLicenseUsage {
  readonly LicenseArn: string;
}
export interface GetServiceSettings {
}
export interface ListAssociationsForLicenseConfiguration {
  readonly LicenseConfigurationArn: string;
  readonly MaxResults?: number;
  readonly NextToken?: string;
}
export interface ListDistributedGrants {
  readonly GrantArns?: [];
  readonly Filters?: [];
  readonly NextToken?: string;
  readonly MaxResults?: number;
}
export interface ListFailuresForLicenseConfigurationOperations {
  readonly LicenseConfigurationArn: string;
  readonly MaxResults?: number;
  readonly NextToken?: string;
}
export interface ListLicenseConfigurations {
  readonly LicenseConfigurationArns?: [];
  readonly MaxResults?: number;
  readonly NextToken?: string;
  readonly Filters?: [];
}
export interface ListLicenseConversionTasks {
  readonly NextToken?: string;
  readonly MaxResults?: number;
  readonly Filters?: [];
}
export interface ListLicenseManagerReportGenerators {
  readonly Filters?: [];
  readonly NextToken?: string;
  readonly MaxResults?: number;
}
export interface ListLicenseSpecificationsForResource {
  readonly ResourceArn: string;
  readonly MaxResults?: number;
  readonly NextToken?: string;
}
export interface ListLicenseVersions {
  readonly LicenseArn: string;
  readonly NextToken?: string;
  readonly MaxResults?: number;
}
export interface ListLicenses {
  readonly LicenseArns?: [];
  readonly Filters?: [];
  readonly NextToken?: string;
  readonly MaxResults?: number;
}
export interface ListReceivedGrants {
  readonly GrantArns?: [];
  readonly Filters?: [];
  readonly NextToken?: string;
  readonly MaxResults?: number;
}
export interface ListReceivedLicenses {
  readonly LicenseArns?: [];
  readonly Filters?: [];
  readonly NextToken?: string;
  readonly MaxResults?: number;
}
export interface ListResourceInventory {
  readonly MaxResults?: number;
  readonly NextToken?: string;
  readonly Filters?: [];
}
export interface ListTagsForResource {
  readonly ResourceArn: string;
}
export interface ListTokens {
  readonly TokenIds?: [];
  readonly Filters?: [];
  readonly NextToken?: string;
  readonly MaxResults?: number;
}
export interface ListUsageForLicenseConfiguration {
  readonly LicenseConfigurationArn: string;
  readonly MaxResults?: number;
  readonly NextToken?: string;
  readonly Filters?: [];
}
export interface RejectGrant {
  readonly GrantArn: string;
}
export interface TagResource {
  readonly ResourceArn: string;
  readonly Tags: [];
}
export interface UntagResource {
  readonly ResourceArn: string;
  readonly TagKeys: [];
}
export interface UpdateLicenseConfiguration {
  readonly LicenseConfigurationArn: string;
  readonly LicenseConfigurationStatus?: string;
  readonly LicenseRules?: [];
  readonly LicenseCount?: number;
  readonly LicenseCountHardLimit?: boolean;
  readonly Name?: string;
  readonly Description?: string;
  readonly ProductInformationList?: [];
  readonly DisassociateWhenNotFound?: boolean;
}
export interface UpdateLicenseManagerReportGenerator {
  readonly LicenseManagerReportGeneratorArn: string;
  readonly ReportGeneratorName: string;
  readonly Type: [];
  readonly ReportContext: ReportContext;
  readonly ReportFrequency: ReportFrequency;
  readonly ClientToken: string;
  readonly Description?: string;
}
export interface UpdateLicenseSpecificationsForResource {
  readonly ResourceArn: string;
  readonly AddLicenseSpecifications?: [];
  readonly RemoveLicenseSpecifications?: [];
}
export interface UpdateServiceSettings {
  readonly S3BucketArn?: string;
  readonly SnsTopicArn?: string;
  readonly OrganizationConfiguration?: OrganizationConfiguration;
  readonly EnableCrossAccountsDiscovery?: boolean;
}



interface AcceptGrantRequest {
  readonly GrantArn: string;
}

interface AcceptGrantResponse {
  readonly GrantArn: string;
  readonly Status: string;
  readonly Version: string;
}

interface AccessDeniedException {
  readonly Message: string;
}

interface AuthorizationException {
  readonly Message: string;
}

interface AutomatedDiscoveryInformation {
  readonly LastRunTime: Date;
}

interface BorrowConfiguration {
  readonly AllowEarlyCheckIn: boolean;
  readonly MaxTimeToLiveInMinutes: number;
}

interface CheckInLicenseRequest {
  readonly LicenseConsumptionToken: string;
  readonly Beneficiary: string;
}

interface CheckInLicenseResponse {
}

interface CheckoutBorrowLicenseRequest {
  readonly LicenseArn: string;
  readonly Entitlements: [];
  readonly DigitalSignatureMethod: string;
  readonly NodeId: string;
  readonly CheckoutMetadata: [];
  readonly ClientToken: string;
}

interface CheckoutBorrowLicenseResponse {
  readonly LicenseArn: string;
  readonly LicenseConsumptionToken: string;
  readonly EntitlementsAllowed: [];
  readonly NodeId: string;
  readonly SignedToken: string;
  readonly IssuedAt: string;
  readonly Expiration: string;
  readonly CheckoutMetadata: [];
}

interface CheckoutLicenseRequest {
  readonly ProductSKU: string;
  readonly CheckoutType: string;
  readonly KeyFingerprint: string;
  readonly Entitlements: [];
  readonly ClientToken: string;
  readonly Beneficiary: string;
  readonly NodeId: string;
}

interface CheckoutLicenseResponse {
  readonly CheckoutType: string;
  readonly LicenseConsumptionToken: string;
  readonly EntitlementsAllowed: [];
  readonly SignedToken: string;
  readonly NodeId: string;
  readonly IssuedAt: string;
  readonly Expiration: string;
  readonly LicenseArn: string;
}

interface ConflictException {
  readonly Message: string;
}

interface ConsumedLicenseSummary {
  readonly ResourceType: string;
  readonly ConsumedLicenses: number;
}

interface ConsumptionConfiguration {
  readonly RenewType: string;
  readonly ProvisionalConfiguration: ProvisionalConfiguration;
  readonly BorrowConfiguration: BorrowConfiguration;
}

interface CreateGrantRequest {
  readonly ClientToken: string;
  readonly GrantName: string;
  readonly LicenseArn: string;
  readonly Principals: [];
  readonly HomeRegion: string;
  readonly AllowedOperations: [];
}

interface CreateGrantResponse {
  readonly GrantArn: string;
  readonly Status: string;
  readonly Version: string;
}

interface CreateGrantVersionRequest {
  readonly ClientToken: string;
  readonly GrantArn: string;
  readonly GrantName: string;
  readonly AllowedOperations: [];
  readonly Status: string;
  readonly StatusReason: string;
  readonly SourceVersion: string;
}

interface CreateGrantVersionResponse {
  readonly GrantArn: string;
  readonly Status: string;
  readonly Version: string;
}

interface CreateLicenseConfigurationRequest {
  readonly Name: string;
  readonly Description: string;
  readonly LicenseCountingType: string;
  readonly LicenseCount: number;
  readonly LicenseCountHardLimit: boolean;
  readonly LicenseRules: [];
  readonly Tags: [];
  readonly DisassociateWhenNotFound: boolean;
  readonly ProductInformationList: [];
}

interface CreateLicenseConfigurationResponse {
  readonly LicenseConfigurationArn: string;
}

interface CreateLicenseConversionTaskForResourceRequest {
  readonly ResourceArn: string;
  readonly SourceLicenseContext: LicenseConversionContext;
  readonly DestinationLicenseContext: LicenseConversionContext;
}

interface CreateLicenseConversionTaskForResourceResponse {
  readonly LicenseConversionTaskId: string;
}

interface CreateLicenseManagerReportGeneratorRequest {
  readonly ReportGeneratorName: string;
  readonly Type: [];
  readonly ReportContext: ReportContext;
  readonly ReportFrequency: ReportFrequency;
  readonly ClientToken: string;
  readonly Description: string;
  readonly Tags: [];
}

interface CreateLicenseManagerReportGeneratorResponse {
  readonly LicenseManagerReportGeneratorArn: string;
}

interface CreateLicenseRequest {
  readonly LicenseName: string;
  readonly ProductName: string;
  readonly ProductSKU: string;
  readonly Issuer: Issuer;
  readonly HomeRegion: string;
  readonly Validity: DatetimeRange;
  readonly Entitlements: [];
  readonly Beneficiary: string;
  readonly ConsumptionConfiguration: ConsumptionConfiguration;
  readonly LicenseMetadata: [];
  readonly ClientToken: string;
}

interface CreateLicenseResponse {
  readonly LicenseArn: string;
  readonly Status: string;
  readonly Version: string;
}

interface CreateLicenseVersionRequest {
  readonly LicenseArn: string;
  readonly LicenseName: string;
  readonly ProductName: string;
  readonly Issuer: Issuer;
  readonly HomeRegion: string;
  readonly Validity: DatetimeRange;
  readonly LicenseMetadata: [];
  readonly Entitlements: [];
  readonly ConsumptionConfiguration: ConsumptionConfiguration;
  readonly Status: string;
  readonly ClientToken: string;
  readonly SourceVersion: string;
}

interface CreateLicenseVersionResponse {
  readonly LicenseArn: string;
  readonly Version: string;
  readonly Status: string;
}

interface CreateTokenRequest {
  readonly LicenseArn: string;
  readonly RoleArns: [];
  readonly ExpirationInDays: number;
  readonly TokenProperties: [];
  readonly ClientToken: string;
}

interface CreateTokenResponse {
  readonly TokenId: string;
  readonly TokenType: string;
  readonly Token: string;
}

interface DatetimeRange {
  readonly Begin: string;
  readonly End: string;
}

interface DeleteGrantRequest {
  readonly GrantArn: string;
  readonly StatusReason: string;
  readonly Version: string;
}

interface DeleteGrantResponse {
  readonly GrantArn: string;
  readonly Status: string;
  readonly Version: string;
}

interface DeleteLicenseConfigurationRequest {
  readonly LicenseConfigurationArn: string;
}

interface DeleteLicenseConfigurationResponse {
}

interface DeleteLicenseManagerReportGeneratorRequest {
  readonly LicenseManagerReportGeneratorArn: string;
}

interface DeleteLicenseManagerReportGeneratorResponse {
}

interface DeleteLicenseRequest {
  readonly LicenseArn: string;
  readonly SourceVersion: string;
}

interface DeleteLicenseResponse {
  readonly Status: string;
  readonly DeletionDate: string;
}

interface DeleteTokenRequest {
  readonly TokenId: string;
}

interface DeleteTokenResponse {
}

interface Entitlement {
  readonly Name: string;
  readonly Value: string;
  readonly MaxCount: number;
  readonly Overage: boolean;
  readonly Unit: string;
  readonly AllowCheckIn: boolean;
}

interface EntitlementData {
  readonly Name: string;
  readonly Value: string;
  readonly Unit: string;
}

interface EntitlementNotAllowedException {
  readonly Message: string;
}

interface EntitlementUsage {
  readonly Name: string;
  readonly ConsumedValue: string;
  readonly MaxCount: string;
  readonly Unit: string;
}

interface ExtendLicenseConsumptionRequest {
  readonly LicenseConsumptionToken: string;
  readonly DryRun: boolean;
}

interface ExtendLicenseConsumptionResponse {
  readonly LicenseConsumptionToken: string;
  readonly Expiration: string;
}

interface FailedDependencyException {
  readonly Message: string;
  readonly ErrorCode: string;
}

interface Filter {
  readonly Name: string;
  readonly Values: [];
}

interface FilterLimitExceededException {
  readonly Message: string;
}

interface GetAccessTokenRequest {
  readonly Token: string;
  readonly TokenProperties: [];
}

interface GetAccessTokenResponse {
  readonly AccessToken: string;
}

interface GetGrantRequest {
  readonly GrantArn: string;
  readonly Version: string;
}

interface GetGrantResponse {
  readonly Grant: Grant;
}

interface GetLicenseConfigurationRequest {
  readonly LicenseConfigurationArn: string;
}

interface GetLicenseConfigurationResponse {
  readonly LicenseConfigurationId: string;
  readonly LicenseConfigurationArn: string;
  readonly Name: string;
  readonly Description: string;
  readonly LicenseCountingType: string;
  readonly LicenseRules: [];
  readonly LicenseCount: number;
  readonly LicenseCountHardLimit: boolean;
  readonly ConsumedLicenses: number;
  readonly Status: string;
  readonly OwnerAccountId: string;
  readonly ConsumedLicenseSummaryList: [];
  readonly ManagedResourceSummaryList: [];
  readonly Tags: [];
  readonly ProductInformationList: [];
  readonly AutomatedDiscoveryInformation: AutomatedDiscoveryInformation;
  readonly DisassociateWhenNotFound: boolean;
}

interface GetLicenseConversionTaskRequest {
  readonly LicenseConversionTaskId: string;
}

interface GetLicenseConversionTaskResponse {
  readonly LicenseConversionTaskId: string;
  readonly ResourceArn: string;
  readonly SourceLicenseContext: LicenseConversionContext;
  readonly DestinationLicenseContext: LicenseConversionContext;
  readonly StatusMessage: string;
  readonly Status: string;
  readonly StartTime: Date;
  readonly LicenseConversionTime: Date;
  readonly EndTime: Date;
}

interface GetLicenseManagerReportGeneratorRequest {
  readonly LicenseManagerReportGeneratorArn: string;
}

interface GetLicenseManagerReportGeneratorResponse {
  readonly ReportGenerator: ReportGenerator;
}

interface GetLicenseRequest {
  readonly LicenseArn: string;
  readonly Version: string;
}

interface GetLicenseResponse {
  readonly License: License;
}

interface GetLicenseUsageRequest {
  readonly LicenseArn: string;
}

interface GetLicenseUsageResponse {
  readonly LicenseUsage: LicenseUsage;
}

interface GetServiceSettingsRequest {
}

interface GetServiceSettingsResponse {
  readonly S3BucketArn: string;
  readonly SnsTopicArn: string;
  readonly OrganizationConfiguration: OrganizationConfiguration;
  readonly EnableCrossAccountsDiscovery: boolean;
  readonly LicenseManagerResourceShareArn: string;
}

interface Grant {
  readonly GrantArn: string;
  readonly GrantName: string;
  readonly ParentArn: string;
  readonly LicenseArn: string;
  readonly GranteePrincipalArn: string;
  readonly HomeRegion: string;
  readonly GrantStatus: string;
  readonly StatusReason: string;
  readonly Version: string;
  readonly GrantedOperations: [];
}

interface GrantedLicense {
  readonly LicenseArn: string;
  readonly LicenseName: string;
  readonly ProductName: string;
  readonly ProductSKU: string;
  readonly Issuer: IssuerDetails;
  readonly HomeRegion: string;
  readonly Status: string;
  readonly Validity: DatetimeRange;
  readonly Beneficiary: string;
  readonly Entitlements: [];
  readonly ConsumptionConfiguration: ConsumptionConfiguration;
  readonly LicenseMetadata: [];
  readonly CreateTime: string;
  readonly Version: string;
  readonly ReceivedMetadata: ReceivedMetadata;
}

interface InvalidParameterValueException {
  readonly Message: string;
}

interface InvalidResourceStateException {
  readonly Message: string;
}

interface InventoryFilter {
  readonly Name: string;
  readonly Condition: string;
  readonly Value: string;
}

interface Issuer {
  readonly Name: string;
  readonly SignKey: string;
}

interface IssuerDetails {
  readonly Name: string;
  readonly SignKey: string;
  readonly KeyFingerprint: string;
}

interface License {
  readonly LicenseArn: string;
  readonly LicenseName: string;
  readonly ProductName: string;
  readonly ProductSKU: string;
  readonly Issuer: IssuerDetails;
  readonly HomeRegion: string;
  readonly Status: string;
  readonly Validity: DatetimeRange;
  readonly Beneficiary: string;
  readonly Entitlements: [];
  readonly ConsumptionConfiguration: ConsumptionConfiguration;
  readonly LicenseMetadata: [];
  readonly CreateTime: string;
  readonly Version: string;
}

interface LicenseConfiguration {
  readonly LicenseConfigurationId: string;
  readonly LicenseConfigurationArn: string;
  readonly Name: string;
  readonly Description: string;
  readonly LicenseCountingType: string;
  readonly LicenseRules: [];
  readonly LicenseCount: number;
  readonly LicenseCountHardLimit: boolean;
  readonly DisassociateWhenNotFound: boolean;
  readonly ConsumedLicenses: number;
  readonly Status: string;
  readonly OwnerAccountId: string;
  readonly ConsumedLicenseSummaryList: [];
  readonly ManagedResourceSummaryList: [];
  readonly ProductInformationList: [];
  readonly AutomatedDiscoveryInformation: AutomatedDiscoveryInformation;
}

interface LicenseConfigurationAssociation {
  readonly ResourceArn: string;
  readonly ResourceType: string;
  readonly ResourceOwnerId: string;
  readonly AssociationTime: Date;
  readonly AmiAssociationScope: string;
}

interface LicenseConfigurationUsage {
  readonly ResourceArn: string;
  readonly ResourceType: string;
  readonly ResourceStatus: string;
  readonly ResourceOwnerId: string;
  readonly AssociationTime: Date;
  readonly ConsumedLicenses: number;
}

interface LicenseConversionContext {
  readonly UsageOperation: string;
}

interface LicenseConversionTask {
  readonly LicenseConversionTaskId: string;
  readonly ResourceArn: string;
  readonly SourceLicenseContext: LicenseConversionContext;
  readonly DestinationLicenseContext: LicenseConversionContext;
  readonly Status: string;
  readonly StatusMessage: string;
  readonly StartTime: Date;
  readonly LicenseConversionTime: Date;
  readonly EndTime: Date;
}

interface LicenseOperationFailure {
  readonly ResourceArn: string;
  readonly ResourceType: string;
  readonly ErrorMessage: string;
  readonly FailureTime: Date;
  readonly OperationName: string;
  readonly ResourceOwnerId: string;
  readonly OperationRequestedBy: string;
  readonly MetadataList: [];
}

interface LicenseSpecification {
  readonly LicenseConfigurationArn: string;
  readonly AmiAssociationScope: string;
}

interface LicenseUsage {
  readonly EntitlementUsages: [];
}

interface LicenseUsageException {
  readonly Message: string;
}

interface ListAssociationsForLicenseConfigurationRequest {
  readonly LicenseConfigurationArn: string;
  readonly MaxResults: number;
  readonly NextToken: string;
}

interface ListAssociationsForLicenseConfigurationResponse {
  readonly LicenseConfigurationAssociations: [];
  readonly NextToken: string;
}

interface ListDistributedGrantsRequest {
  readonly GrantArns: [];
  readonly Filters: [];
  readonly NextToken: string;
  readonly MaxResults: number;
}

interface ListDistributedGrantsResponse {
  readonly Grants: [];
  readonly NextToken: string;
}

interface ListFailuresForLicenseConfigurationOperationsRequest {
  readonly LicenseConfigurationArn: string;
  readonly MaxResults: number;
  readonly NextToken: string;
}

interface ListFailuresForLicenseConfigurationOperationsResponse {
  readonly LicenseOperationFailureList: [];
  readonly NextToken: string;
}

interface ListLicenseConfigurationsRequest {
  readonly LicenseConfigurationArns: [];
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly Filters: [];
}

interface ListLicenseConfigurationsResponse {
  readonly LicenseConfigurations: [];
  readonly NextToken: string;
}

interface ListLicenseConversionTasksRequest {
  readonly NextToken: string;
  readonly MaxResults: number;
  readonly Filters: [];
}

interface ListLicenseConversionTasksResponse {
  readonly LicenseConversionTasks: [];
  readonly NextToken: string;
}

interface ListLicenseManagerReportGeneratorsRequest {
  readonly Filters: [];
  readonly NextToken: string;
  readonly MaxResults: number;
}

interface ListLicenseManagerReportGeneratorsResponse {
  readonly ReportGenerators: [];
  readonly NextToken: string;
}

interface ListLicenseSpecificationsForResourceRequest {
  readonly ResourceArn: string;
  readonly MaxResults: number;
  readonly NextToken: string;
}

interface ListLicenseSpecificationsForResourceResponse {
  readonly LicenseSpecifications: [];
  readonly NextToken: string;
}

interface ListLicenseVersionsRequest {
  readonly LicenseArn: string;
  readonly NextToken: string;
  readonly MaxResults: number;
}

interface ListLicenseVersionsResponse {
  readonly Licenses: [];
  readonly NextToken: string;
}

interface ListLicensesRequest {
  readonly LicenseArns: [];
  readonly Filters: [];
  readonly NextToken: string;
  readonly MaxResults: number;
}

interface ListLicensesResponse {
  readonly Licenses: [];
  readonly NextToken: string;
}

interface ListReceivedGrantsRequest {
  readonly GrantArns: [];
  readonly Filters: [];
  readonly NextToken: string;
  readonly MaxResults: number;
}

interface ListReceivedGrantsResponse {
  readonly Grants: [];
  readonly NextToken: string;
}

interface ListReceivedLicensesRequest {
  readonly LicenseArns: [];
  readonly Filters: [];
  readonly NextToken: string;
  readonly MaxResults: number;
}

interface ListReceivedLicensesResponse {
  readonly Licenses: [];
  readonly NextToken: string;
}

interface ListResourceInventoryRequest {
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly Filters: [];
}

interface ListResourceInventoryResponse {
  readonly ResourceInventoryList: [];
  readonly NextToken: string;
}

interface ListTagsForResourceRequest {
  readonly ResourceArn: string;
}

interface ListTagsForResourceResponse {
  readonly Tags: [];
}

interface ListTokensRequest {
  readonly TokenIds: [];
  readonly Filters: [];
  readonly NextToken: string;
  readonly MaxResults: number;
}

interface ListTokensResponse {
  readonly Tokens: [];
  readonly NextToken: string;
}

interface ListUsageForLicenseConfigurationRequest {
  readonly LicenseConfigurationArn: string;
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly Filters: [];
}

interface ListUsageForLicenseConfigurationResponse {
  readonly LicenseConfigurationUsageList: [];
  readonly NextToken: string;
}

interface ManagedResourceSummary {
  readonly ResourceType: string;
  readonly AssociationCount: number;
}

interface Metadata {
  readonly Name: string;
  readonly Value: string;
}

interface NoEntitlementsAllowedException {
  readonly Message: string;
}

interface OrganizationConfiguration {
  readonly EnableIntegration: boolean;
}

interface ProductInformation {
  readonly ResourceType: string;
  readonly ProductInformationFilterList: [];
}

interface ProductInformationFilter {
  readonly ProductInformationFilterName: string;
  readonly ProductInformationFilterValue: [];
  readonly ProductInformationFilterComparator: string;
}

interface ProvisionalConfiguration {
  readonly MaxTimeToLiveInMinutes: number;
}

interface RateLimitExceededException {
  readonly Message: string;
}

interface ReceivedMetadata {
  readonly ReceivedStatus: string;
  readonly ReceivedStatusReason: string;
  readonly AllowedOperations: [];
}

interface RedirectException {
  readonly Location: string;
  readonly Message: string;
}

interface RejectGrantRequest {
  readonly GrantArn: string;
}

interface RejectGrantResponse {
  readonly GrantArn: string;
  readonly Status: string;
  readonly Version: string;
}

interface ReportContext {
  readonly licenseConfigurationArns: [];
}

interface ReportFrequency {
  readonly value: number;
  readonly period: string;
}

interface ReportGenerator {
  readonly ReportGeneratorName: string;
  readonly ReportType: [];
  readonly ReportContext: ReportContext;
  readonly ReportFrequency: ReportFrequency;
  readonly LicenseManagerReportGeneratorArn: string;
  readonly LastRunStatus: string;
  readonly LastRunFailureReason: string;
  readonly LastReportGenerationTime: string;
  readonly ReportCreatorAccount: string;
  readonly Description: string;
  readonly S3Location: S3Location;
  readonly CreateTime: string;
  readonly Tags: [];
}

interface ResourceInventory {
  readonly ResourceId: string;
  readonly ResourceType: string;
  readonly ResourceArn: string;
  readonly Platform: string;
  readonly PlatformVersion: string;
  readonly ResourceOwningAccountId: string;
}

interface ResourceLimitExceededException {
  readonly Message: string;
}

interface ResourceNotFoundException {
  readonly Message: string;
}

interface S3Location {
  readonly bucket: string;
  readonly keyPrefix: string;
}

interface ServerInternalException {
  readonly Message: string;
}

interface Tag {
  readonly Key: string;
  readonly Value: string;
}

interface TagResourceRequest {
  readonly ResourceArn: string;
  readonly Tags: [];
}

interface TagResourceResponse {
}

interface TokenData {
  readonly TokenId: string;
  readonly TokenType: string;
  readonly LicenseArn: string;
  readonly ExpirationTime: string;
  readonly TokenProperties: [];
  readonly RoleArns: [];
  readonly Status: string;
}

interface UnsupportedDigitalSignatureMethodException {
  readonly Message: string;
}

interface UntagResourceRequest {
  readonly ResourceArn: string;
  readonly TagKeys: [];
}

interface UntagResourceResponse {
}

interface UpdateLicenseConfigurationRequest {
  readonly LicenseConfigurationArn: string;
  readonly LicenseConfigurationStatus: string;
  readonly LicenseRules: [];
  readonly LicenseCount: number;
  readonly LicenseCountHardLimit: boolean;
  readonly Name: string;
  readonly Description: string;
  readonly ProductInformationList: [];
  readonly DisassociateWhenNotFound: boolean;
}

interface UpdateLicenseConfigurationResponse {
}

interface UpdateLicenseManagerReportGeneratorRequest {
  readonly LicenseManagerReportGeneratorArn: string;
  readonly ReportGeneratorName: string;
  readonly Type: [];
  readonly ReportContext: ReportContext;
  readonly ReportFrequency: ReportFrequency;
  readonly ClientToken: string;
  readonly Description: string;
}

interface UpdateLicenseManagerReportGeneratorResponse {
}

interface UpdateLicenseSpecificationsForResourceRequest {
  readonly ResourceArn: string;
  readonly AddLicenseSpecifications: [];
  readonly RemoveLicenseSpecifications: [];
}

interface UpdateLicenseSpecificationsForResourceResponse {
}

interface UpdateServiceSettingsRequest {
  readonly S3BucketArn: string;
  readonly SnsTopicArn: string;
  readonly OrganizationConfiguration: OrganizationConfiguration;
  readonly EnableCrossAccountsDiscovery: boolean;
}

interface UpdateServiceSettingsResponse {
}

interface ValidationException {
  readonly Message: string;
}

