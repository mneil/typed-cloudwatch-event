/**
 * STOP. This file is autogenerated. DO NOT EDIT by hand
 */
export interface CreateEnvironmentEC2 {
  readonly name: string;
  readonly description: string;
  readonly clientRequestToken: string;
  readonly instanceType: string;
  readonly subnetId: string;
  readonly imageId: string;
  readonly automaticStopTimeMinutes: number;
  readonly ownerArn: string;
  readonly tags: [];
  readonly connectionType: string;
  readonly dryRun: boolean;
}
export interface CreateEnvironmentMembership {
  readonly environmentId: string;
  readonly userArn: string;
  readonly permissions: string;
}
export interface DeleteEnvironment {
  readonly environmentId: string;
}
export interface DeleteEnvironmentMembership {
  readonly environmentId: string;
  readonly userArn: string;
}
export interface DescribeEnvironmentMemberships {
  readonly userArn: string;
  readonly environmentId: string;
  readonly permissions: [];
  readonly nextToken: string;
  readonly maxResults: number;
}
export interface DescribeEnvironmentStatus {
  readonly environmentId: string;
}
export interface DescribeEnvironments {
  readonly environmentIds: [];
}
export interface ListEnvironments {
  readonly nextToken: string;
  readonly maxResults: number;
}
export interface ListTagsForResource {
  readonly ResourceARN: string;
}
export interface TagResource {
  readonly ResourceARN: string;
  readonly Tags: [];
}
export interface UntagResource {
  readonly ResourceARN: string;
  readonly TagKeys: [];
}
export interface UpdateEnvironment {
  readonly environmentId: string;
  readonly name: string;
  readonly description: string;
  readonly managedCredentialsAction: string;
}
export interface UpdateEnvironmentMembership {
  readonly environmentId: string;
  readonly userArn: string;
  readonly permissions: string;
}



interface BadRequestException {
}

interface ConcurrentAccessException {
}

interface ConflictException {
}

interface CreateEnvironmentEC2Request {
  readonly name: string;
  readonly description: string;
  readonly clientRequestToken: string;
  readonly instanceType: string;
  readonly subnetId: string;
  readonly imageId: string;
  readonly automaticStopTimeMinutes: number;
  readonly ownerArn: string;
  readonly tags: [];
  readonly connectionType: string;
  readonly dryRun: boolean;
}

interface CreateEnvironmentEC2Result {
  readonly environmentId: string;
}

interface CreateEnvironmentMembershipRequest {
  readonly environmentId: string;
  readonly userArn: string;
  readonly permissions: string;
}

interface CreateEnvironmentMembershipResult {
  readonly membership: EnvironmentMember;
}

interface DeleteEnvironmentMembershipRequest {
  readonly environmentId: string;
  readonly userArn: string;
}

interface DeleteEnvironmentMembershipResult {
}

interface DeleteEnvironmentRequest {
  readonly environmentId: string;
}

interface DeleteEnvironmentResult {
}

interface DescribeEnvironmentMembershipsRequest {
  readonly userArn: string;
  readonly environmentId: string;
  readonly permissions: [];
  readonly nextToken: string;
  readonly maxResults: number;
}

interface DescribeEnvironmentMembershipsResult {
  readonly memberships: [];
  readonly nextToken: string;
}

interface DescribeEnvironmentStatusRequest {
  readonly environmentId: string;
}

interface DescribeEnvironmentStatusResult {
  readonly status: string;
  readonly message: string;
}

interface DescribeEnvironmentsRequest {
  readonly environmentIds: [];
}

interface DescribeEnvironmentsResult {
  readonly environments: [];
}

interface Environment {
  readonly id: string;
  readonly name: string;
  readonly description: string;
  readonly type: string;
  readonly connectionType: string;
  readonly arn: string;
  readonly ownerArn: string;
  readonly lifecycle: EnvironmentLifecycle;
  readonly managedCredentialsStatus: string;
}

interface EnvironmentLifecycle {
  readonly status: string;
  readonly reason: string;
  readonly failureResource: string;
}

interface EnvironmentMember {
  readonly permissions: string;
  readonly userId: string;
  readonly userArn: string;
  readonly environmentId: string;
  readonly lastAccess: Date;
}

interface ForbiddenException {
}

interface InternalServerErrorException {
}

interface LimitExceededException {
}

interface ListEnvironmentsRequest {
  readonly nextToken: string;
  readonly maxResults: number;
}

interface ListEnvironmentsResult {
  readonly nextToken: string;
  readonly environmentIds: [];
}

interface ListTagsForResourceRequest {
  readonly ResourceARN: string;
}

interface ListTagsForResourceResponse {
  readonly Tags: [];
}

interface NotFoundException {
}

interface Tag {
  readonly Key: string;
  readonly Value: string;
}

interface TagResourceRequest {
  readonly ResourceARN: string;
  readonly Tags: [];
}

interface TagResourceResponse {
}

interface TooManyRequestsException {
}

interface UntagResourceRequest {
  readonly ResourceARN: string;
  readonly TagKeys: [];
}

interface UntagResourceResponse {
}

interface UpdateEnvironmentMembershipRequest {
  readonly environmentId: string;
  readonly userArn: string;
  readonly permissions: string;
}

interface UpdateEnvironmentMembershipResult {
  readonly membership: EnvironmentMember;
}

interface UpdateEnvironmentRequest {
  readonly environmentId: string;
  readonly name: string;
  readonly description: string;
  readonly managedCredentialsAction: string;
}

interface UpdateEnvironmentResult {
}

