/**
 * STOP. This file is autogenerated. DO NOT EDIT by hand
 */
export interface AddCustomAttributes {
  readonly UserPoolId: string;
  readonly CustomAttributes: [];
}
export interface AdminAddUserToGroup {
  readonly UserPoolId: string;
  readonly Username: string;
  readonly GroupName: string;
}
export interface AdminConfirmSignUp {
  readonly UserPoolId: string;
  readonly Username: string;
  readonly ClientMetadata?: {[key: string]: any};
}
export interface AdminCreateUser {
  readonly UserPoolId: string;
  readonly Username: string;
  readonly UserAttributes?: [];
  readonly ValidationData?: [];
  readonly TemporaryPassword?: string;
  readonly ForceAliasCreation?: boolean;
  readonly MessageAction?: string;
  readonly DesiredDeliveryMediums?: [];
  readonly ClientMetadata?: {[key: string]: any};
}
export interface AdminDeleteUser {
  readonly UserPoolId: string;
  readonly Username: string;
}
export interface AdminDeleteUserAttributes {
  readonly UserPoolId: string;
  readonly Username: string;
  readonly UserAttributeNames: [];
}
export interface AdminDisableProviderForUser {
  readonly UserPoolId: string;
  readonly User: ProviderUserIdentifierType;
}
export interface AdminDisableUser {
  readonly UserPoolId: string;
  readonly Username: string;
}
export interface AdminEnableUser {
  readonly UserPoolId: string;
  readonly Username: string;
}
export interface AdminForgetDevice {
  readonly UserPoolId: string;
  readonly Username: string;
  readonly DeviceKey: string;
}
export interface AdminGetDevice {
  readonly DeviceKey: string;
  readonly UserPoolId: string;
  readonly Username: string;
}
export interface AdminGetUser {
  readonly UserPoolId: string;
  readonly Username: string;
}
export interface AdminInitiateAuth {
  readonly UserPoolId: string;
  readonly ClientId: string;
  readonly AuthFlow: string;
  readonly AuthParameters?: {[key: string]: any};
  readonly ClientMetadata?: {[key: string]: any};
  readonly AnalyticsMetadata?: AnalyticsMetadataType;
  readonly ContextData?: ContextDataType;
}
export interface AdminLinkProviderForUser {
  readonly UserPoolId: string;
  readonly DestinationUser: ProviderUserIdentifierType;
  readonly SourceUser: ProviderUserIdentifierType;
}
export interface AdminListDevices {
  readonly UserPoolId: string;
  readonly Username: string;
  readonly Limit?: number;
  readonly PaginationToken?: string;
}
export interface AdminListGroupsForUser {
  readonly Username: string;
  readonly UserPoolId: string;
  readonly Limit?: number;
  readonly NextToken?: string;
}
export interface AdminListUserAuthEvents {
  readonly UserPoolId: string;
  readonly Username: string;
  readonly MaxResults?: number;
  readonly NextToken?: string;
}
export interface AdminRemoveUserFromGroup {
  readonly UserPoolId: string;
  readonly Username: string;
  readonly GroupName: string;
}
export interface AdminResetUserPassword {
  readonly UserPoolId: string;
  readonly Username: string;
  readonly ClientMetadata?: {[key: string]: any};
}
export interface AdminRespondToAuthChallenge {
  readonly UserPoolId: string;
  readonly ClientId: string;
  readonly ChallengeName: string;
  readonly ChallengeResponses?: {[key: string]: any};
  readonly Session?: string;
  readonly AnalyticsMetadata?: AnalyticsMetadataType;
  readonly ContextData?: ContextDataType;
  readonly ClientMetadata?: {[key: string]: any};
}
export interface AdminSetUserMFAPreference {
  readonly SMSMfaSettings?: SMSMfaSettingsType;
  readonly SoftwareTokenMfaSettings?: SoftwareTokenMfaSettingsType;
  readonly Username: string;
  readonly UserPoolId: string;
}
export interface AdminSetUserPassword {
  readonly UserPoolId: string;
  readonly Username: string;
  readonly Password: string;
  readonly Permanent?: boolean;
}
export interface AdminSetUserSettings {
  readonly UserPoolId: string;
  readonly Username: string;
  readonly MFAOptions: [];
}
export interface AdminUpdateAuthEventFeedback {
  readonly UserPoolId: string;
  readonly Username: string;
  readonly EventId: string;
  readonly FeedbackValue: string;
}
export interface AdminUpdateDeviceStatus {
  readonly UserPoolId: string;
  readonly Username: string;
  readonly DeviceKey: string;
  readonly DeviceRememberedStatus?: string;
}
export interface AdminUpdateUserAttributes {
  readonly UserPoolId: string;
  readonly Username: string;
  readonly UserAttributes: [];
  readonly ClientMetadata?: {[key: string]: any};
}
export interface AdminUserGlobalSignOut {
  readonly UserPoolId: string;
  readonly Username: string;
}
export interface AssociateSoftwareToken {
  readonly AccessToken?: string;
  readonly Session?: string;
}
export interface ChangePassword {
  readonly PreviousPassword: string;
  readonly ProposedPassword: string;
  readonly AccessToken: string;
}
export interface ConfirmDevice {
  readonly AccessToken: string;
  readonly DeviceKey: string;
  readonly DeviceSecretVerifierConfig?: DeviceSecretVerifierConfigType;
  readonly DeviceName?: string;
}
export interface ConfirmForgotPassword {
  readonly ClientId: string;
  readonly SecretHash?: string;
  readonly Username: string;
  readonly ConfirmationCode: string;
  readonly Password: string;
  readonly AnalyticsMetadata?: AnalyticsMetadataType;
  readonly UserContextData?: UserContextDataType;
  readonly ClientMetadata?: {[key: string]: any};
}
export interface ConfirmSignUp {
  readonly ClientId: string;
  readonly SecretHash?: string;
  readonly Username: string;
  readonly ConfirmationCode: string;
  readonly ForceAliasCreation?: boolean;
  readonly AnalyticsMetadata?: AnalyticsMetadataType;
  readonly UserContextData?: UserContextDataType;
  readonly ClientMetadata?: {[key: string]: any};
}
export interface CreateGroup {
  readonly GroupName: string;
  readonly UserPoolId: string;
  readonly Description?: string;
  readonly RoleArn?: string;
  readonly Precedence?: number;
}
export interface CreateIdentityProvider {
  readonly UserPoolId: string;
  readonly ProviderName: string;
  readonly ProviderType: string;
  readonly ProviderDetails: {[key: string]: any};
  readonly AttributeMapping?: {[key: string]: any};
  readonly IdpIdentifiers?: [];
}
export interface CreateResourceServer {
  readonly UserPoolId: string;
  readonly Identifier: string;
  readonly Name: string;
  readonly Scopes?: [];
}
export interface CreateUserImportJob {
  readonly JobName: string;
  readonly UserPoolId: string;
  readonly CloudWatchLogsRoleArn: string;
}
export interface CreateUserPool {
  readonly PoolName: string;
  readonly Policies?: UserPoolPolicyType;
  readonly LambdaConfig?: LambdaConfigType;
  readonly AutoVerifiedAttributes?: [];
  readonly AliasAttributes?: [];
  readonly UsernameAttributes?: [];
  readonly SmsVerificationMessage?: string;
  readonly EmailVerificationMessage?: string;
  readonly EmailVerificationSubject?: string;
  readonly VerificationMessageTemplate?: VerificationMessageTemplateType;
  readonly SmsAuthenticationMessage?: string;
  readonly MfaConfiguration?: string;
  readonly DeviceConfiguration?: DeviceConfigurationType;
  readonly EmailConfiguration?: EmailConfigurationType;
  readonly SmsConfiguration?: SmsConfigurationType;
  readonly UserPoolTags?: {[key: string]: any};
  readonly AdminCreateUserConfig?: AdminCreateUserConfigType;
  readonly Schema?: [];
  readonly UserPoolAddOns?: UserPoolAddOnsType;
  readonly UsernameConfiguration?: UsernameConfigurationType;
  readonly AccountRecoverySetting?: AccountRecoverySettingType;
}
export interface CreateUserPoolClient {
  readonly UserPoolId: string;
  readonly ClientName: string;
  readonly GenerateSecret?: boolean;
  readonly RefreshTokenValidity?: number;
  readonly AccessTokenValidity?: number;
  readonly IdTokenValidity?: number;
  readonly TokenValidityUnits?: TokenValidityUnitsType;
  readonly ReadAttributes?: [];
  readonly WriteAttributes?: [];
  readonly ExplicitAuthFlows?: [];
  readonly SupportedIdentityProviders?: [];
  readonly CallbackURLs?: [];
  readonly LogoutURLs?: [];
  readonly DefaultRedirectURI?: string;
  readonly AllowedOAuthFlows?: [];
  readonly AllowedOAuthScopes?: [];
  readonly AllowedOAuthFlowsUserPoolClient?: boolean;
  readonly AnalyticsConfiguration?: AnalyticsConfigurationType;
  readonly PreventUserExistenceErrors?: string;
  readonly EnableTokenRevocation?: boolean;
}
export interface CreateUserPoolDomain {
  readonly Domain: string;
  readonly UserPoolId: string;
  readonly CustomDomainConfig?: CustomDomainConfigType;
}
export interface DeleteGroup {
  readonly GroupName: string;
  readonly UserPoolId: string;
}
export interface DeleteIdentityProvider {
  readonly UserPoolId: string;
  readonly ProviderName: string;
}
export interface DeleteResourceServer {
  readonly UserPoolId: string;
  readonly Identifier: string;
}
export interface DeleteUser {
  readonly AccessToken: string;
}
export interface DeleteUserAttributes {
  readonly UserAttributeNames: [];
  readonly AccessToken: string;
}
export interface DeleteUserPool {
  readonly UserPoolId: string;
}
export interface DeleteUserPoolClient {
  readonly UserPoolId: string;
  readonly ClientId: string;
}
export interface DeleteUserPoolDomain {
  readonly Domain: string;
  readonly UserPoolId: string;
}
export interface DescribeIdentityProvider {
  readonly UserPoolId: string;
  readonly ProviderName: string;
}
export interface DescribeResourceServer {
  readonly UserPoolId: string;
  readonly Identifier: string;
}
export interface DescribeRiskConfiguration {
  readonly UserPoolId: string;
  readonly ClientId?: string;
}
export interface DescribeUserImportJob {
  readonly UserPoolId: string;
  readonly JobId: string;
}
export interface DescribeUserPool {
  readonly UserPoolId: string;
}
export interface DescribeUserPoolClient {
  readonly UserPoolId: string;
  readonly ClientId: string;
}
export interface DescribeUserPoolDomain {
  readonly Domain: string;
}
export interface ForgetDevice {
  readonly AccessToken?: string;
  readonly DeviceKey: string;
}
export interface ForgotPassword {
  readonly ClientId: string;
  readonly SecretHash?: string;
  readonly UserContextData?: UserContextDataType;
  readonly Username: string;
  readonly AnalyticsMetadata?: AnalyticsMetadataType;
  readonly ClientMetadata?: {[key: string]: any};
}
export interface GetCSVHeader {
  readonly UserPoolId: string;
}
export interface GetDevice {
  readonly DeviceKey: string;
  readonly AccessToken?: string;
}
export interface GetGroup {
  readonly GroupName: string;
  readonly UserPoolId: string;
}
export interface GetIdentityProviderByIdentifier {
  readonly UserPoolId: string;
  readonly IdpIdentifier: string;
}
export interface GetSigningCertificate {
  readonly UserPoolId: string;
}
export interface GetUICustomization {
  readonly UserPoolId: string;
  readonly ClientId?: string;
}
export interface GetUser {
  readonly AccessToken: string;
}
export interface GetUserAttributeVerificationCode {
  readonly AccessToken: string;
  readonly AttributeName: string;
  readonly ClientMetadata?: {[key: string]: any};
}
export interface GetUserPoolMfaConfig {
  readonly UserPoolId: string;
}
export interface GlobalSignOut {
  readonly AccessToken: string;
}
export interface InitiateAuth {
  readonly AuthFlow: string;
  readonly AuthParameters?: {[key: string]: any};
  readonly ClientMetadata?: {[key: string]: any};
  readonly ClientId: string;
  readonly AnalyticsMetadata?: AnalyticsMetadataType;
  readonly UserContextData?: UserContextDataType;
}
export interface ListDevices {
  readonly AccessToken: string;
  readonly Limit?: number;
  readonly PaginationToken?: string;
}
export interface ListGroups {
  readonly UserPoolId: string;
  readonly Limit?: number;
  readonly NextToken?: string;
}
export interface ListIdentityProviders {
  readonly UserPoolId: string;
  readonly MaxResults?: number;
  readonly NextToken?: string;
}
export interface ListResourceServers {
  readonly UserPoolId: string;
  readonly MaxResults?: number;
  readonly NextToken?: string;
}
export interface ListTagsForResource {
  readonly ResourceArn: string;
}
export interface ListUserImportJobs {
  readonly UserPoolId: string;
  readonly MaxResults: number;
  readonly PaginationToken?: string;
}
export interface ListUserPoolClients {
  readonly UserPoolId: string;
  readonly MaxResults?: number;
  readonly NextToken?: string;
}
export interface ListUserPools {
  readonly NextToken?: string;
  readonly MaxResults: number;
}
export interface ListUsers {
  readonly UserPoolId: string;
  readonly AttributesToGet?: [];
  readonly Limit?: number;
  readonly PaginationToken?: string;
  readonly Filter?: string;
}
export interface ListUsersInGroup {
  readonly UserPoolId: string;
  readonly GroupName: string;
  readonly Limit?: number;
  readonly NextToken?: string;
}
export interface ResendConfirmationCode {
  readonly ClientId: string;
  readonly SecretHash?: string;
  readonly UserContextData?: UserContextDataType;
  readonly Username: string;
  readonly AnalyticsMetadata?: AnalyticsMetadataType;
  readonly ClientMetadata?: {[key: string]: any};
}
export interface RespondToAuthChallenge {
  readonly ClientId: string;
  readonly ChallengeName: string;
  readonly Session?: string;
  readonly ChallengeResponses?: {[key: string]: any};
  readonly AnalyticsMetadata?: AnalyticsMetadataType;
  readonly UserContextData?: UserContextDataType;
  readonly ClientMetadata?: {[key: string]: any};
}
export interface RevokeToken {
  readonly Token: string;
  readonly ClientId: string;
  readonly ClientSecret?: string;
}
export interface SetRiskConfiguration {
  readonly UserPoolId: string;
  readonly ClientId?: string;
  readonly CompromisedCredentialsRiskConfiguration?: CompromisedCredentialsRiskConfigurationType;
  readonly AccountTakeoverRiskConfiguration?: AccountTakeoverRiskConfigurationType;
  readonly RiskExceptionConfiguration?: RiskExceptionConfigurationType;
}
export interface SetUICustomization {
  readonly UserPoolId: string;
  readonly ClientId?: string;
  readonly CSS?: string;
  readonly ImageFile?: unknown;
}
export interface SetUserMFAPreference {
  readonly SMSMfaSettings?: SMSMfaSettingsType;
  readonly SoftwareTokenMfaSettings?: SoftwareTokenMfaSettingsType;
  readonly AccessToken: string;
}
export interface SetUserPoolMfaConfig {
  readonly UserPoolId: string;
  readonly SmsMfaConfiguration?: SmsMfaConfigType;
  readonly SoftwareTokenMfaConfiguration?: SoftwareTokenMfaConfigType;
  readonly MfaConfiguration?: string;
}
export interface SetUserSettings {
  readonly AccessToken: string;
  readonly MFAOptions: [];
}
export interface SignUp {
  readonly ClientId: string;
  readonly SecretHash?: string;
  readonly Username: string;
  readonly Password: string;
  readonly UserAttributes?: [];
  readonly ValidationData?: [];
  readonly AnalyticsMetadata?: AnalyticsMetadataType;
  readonly UserContextData?: UserContextDataType;
  readonly ClientMetadata?: {[key: string]: any};
}
export interface StartUserImportJob {
  readonly UserPoolId: string;
  readonly JobId: string;
}
export interface StopUserImportJob {
  readonly UserPoolId: string;
  readonly JobId: string;
}
export interface TagResource {
  readonly ResourceArn: string;
  readonly Tags: {[key: string]: any};
}
export interface UntagResource {
  readonly ResourceArn: string;
  readonly TagKeys: [];
}
export interface UpdateAuthEventFeedback {
  readonly UserPoolId: string;
  readonly Username: string;
  readonly EventId: string;
  readonly FeedbackToken: string;
  readonly FeedbackValue: string;
}
export interface UpdateDeviceStatus {
  readonly AccessToken: string;
  readonly DeviceKey: string;
  readonly DeviceRememberedStatus?: string;
}
export interface UpdateGroup {
  readonly GroupName: string;
  readonly UserPoolId: string;
  readonly Description?: string;
  readonly RoleArn?: string;
  readonly Precedence?: number;
}
export interface UpdateIdentityProvider {
  readonly UserPoolId: string;
  readonly ProviderName: string;
  readonly ProviderDetails?: {[key: string]: any};
  readonly AttributeMapping?: {[key: string]: any};
  readonly IdpIdentifiers?: [];
}
export interface UpdateResourceServer {
  readonly UserPoolId: string;
  readonly Identifier: string;
  readonly Name: string;
  readonly Scopes?: [];
}
export interface UpdateUserAttributes {
  readonly UserAttributes: [];
  readonly AccessToken: string;
  readonly ClientMetadata?: {[key: string]: any};
}
export interface UpdateUserPool {
  readonly UserPoolId: string;
  readonly Policies?: UserPoolPolicyType;
  readonly LambdaConfig?: LambdaConfigType;
  readonly AutoVerifiedAttributes?: [];
  readonly SmsVerificationMessage?: string;
  readonly EmailVerificationMessage?: string;
  readonly EmailVerificationSubject?: string;
  readonly VerificationMessageTemplate?: VerificationMessageTemplateType;
  readonly SmsAuthenticationMessage?: string;
  readonly MfaConfiguration?: string;
  readonly DeviceConfiguration?: DeviceConfigurationType;
  readonly EmailConfiguration?: EmailConfigurationType;
  readonly SmsConfiguration?: SmsConfigurationType;
  readonly UserPoolTags?: {[key: string]: any};
  readonly AdminCreateUserConfig?: AdminCreateUserConfigType;
  readonly UserPoolAddOns?: UserPoolAddOnsType;
  readonly AccountRecoverySetting?: AccountRecoverySettingType;
}
export interface UpdateUserPoolClient {
  readonly UserPoolId: string;
  readonly ClientId: string;
  readonly ClientName?: string;
  readonly RefreshTokenValidity?: number;
  readonly AccessTokenValidity?: number;
  readonly IdTokenValidity?: number;
  readonly TokenValidityUnits?: TokenValidityUnitsType;
  readonly ReadAttributes?: [];
  readonly WriteAttributes?: [];
  readonly ExplicitAuthFlows?: [];
  readonly SupportedIdentityProviders?: [];
  readonly CallbackURLs?: [];
  readonly LogoutURLs?: [];
  readonly DefaultRedirectURI?: string;
  readonly AllowedOAuthFlows?: [];
  readonly AllowedOAuthScopes?: [];
  readonly AllowedOAuthFlowsUserPoolClient?: boolean;
  readonly AnalyticsConfiguration?: AnalyticsConfigurationType;
  readonly PreventUserExistenceErrors?: string;
  readonly EnableTokenRevocation?: boolean;
}
export interface UpdateUserPoolDomain {
  readonly Domain: string;
  readonly UserPoolId: string;
  readonly CustomDomainConfig: CustomDomainConfigType;
}
export interface VerifySoftwareToken {
  readonly AccessToken?: string;
  readonly Session?: string;
  readonly UserCode: string;
  readonly FriendlyDeviceName?: string;
}
export interface VerifyUserAttribute {
  readonly AccessToken: string;
  readonly AttributeName: string;
  readonly Code: string;
}



interface AccountRecoverySettingType {
  readonly RecoveryMechanisms: [];
}

interface AccountTakeoverActionType {
  readonly Notify: boolean;
  readonly EventAction: string;
}

interface AccountTakeoverActionsType {
  readonly LowAction: AccountTakeoverActionType;
  readonly MediumAction: AccountTakeoverActionType;
  readonly HighAction: AccountTakeoverActionType;
}

interface AccountTakeoverRiskConfigurationType {
  readonly NotifyConfiguration: NotifyConfigurationType;
  readonly Actions: AccountTakeoverActionsType;
}

interface AddCustomAttributesRequest {
  readonly UserPoolId: string;
  readonly CustomAttributes: [];
}

interface AddCustomAttributesResponse {
}

interface AdminAddUserToGroupRequest {
  readonly UserPoolId: string;
  readonly Username: string;
  readonly GroupName: string;
}

interface AdminConfirmSignUpRequest {
  readonly UserPoolId: string;
  readonly Username: string;
  readonly ClientMetadata: {[key: string]: any};
}

interface AdminConfirmSignUpResponse {
}

interface AdminCreateUserConfigType {
  readonly AllowAdminCreateUserOnly: boolean;
  readonly UnusedAccountValidityDays: number;
  readonly InviteMessageTemplate: MessageTemplateType;
}

interface AdminCreateUserRequest {
  readonly UserPoolId: string;
  readonly Username: string;
  readonly UserAttributes: [];
  readonly ValidationData: [];
  readonly TemporaryPassword: string;
  readonly ForceAliasCreation: boolean;
  readonly MessageAction: string;
  readonly DesiredDeliveryMediums: [];
  readonly ClientMetadata: {[key: string]: any};
}

interface AdminCreateUserResponse {
  readonly User: UserType;
}

interface AdminDeleteUserAttributesRequest {
  readonly UserPoolId: string;
  readonly Username: string;
  readonly UserAttributeNames: [];
}

interface AdminDeleteUserAttributesResponse {
}

interface AdminDeleteUserRequest {
  readonly UserPoolId: string;
  readonly Username: string;
}

interface AdminDisableProviderForUserRequest {
  readonly UserPoolId: string;
  readonly User: ProviderUserIdentifierType;
}

interface AdminDisableProviderForUserResponse {
}

interface AdminDisableUserRequest {
  readonly UserPoolId: string;
  readonly Username: string;
}

interface AdminDisableUserResponse {
}

interface AdminEnableUserRequest {
  readonly UserPoolId: string;
  readonly Username: string;
}

interface AdminEnableUserResponse {
}

interface AdminForgetDeviceRequest {
  readonly UserPoolId: string;
  readonly Username: string;
  readonly DeviceKey: string;
}

interface AdminGetDeviceRequest {
  readonly DeviceKey: string;
  readonly UserPoolId: string;
  readonly Username: string;
}

interface AdminGetDeviceResponse {
  readonly Device: DeviceType;
}

interface AdminGetUserRequest {
  readonly UserPoolId: string;
  readonly Username: string;
}

interface AdminGetUserResponse {
  readonly Username: string;
  readonly UserAttributes: [];
  readonly UserCreateDate: Date;
  readonly UserLastModifiedDate: Date;
  readonly Enabled: boolean;
  readonly UserStatus: string;
  readonly MFAOptions: [];
  readonly PreferredMfaSetting: string;
  readonly UserMFASettingList: [];
}

interface AdminInitiateAuthRequest {
  readonly UserPoolId: string;
  readonly ClientId: string;
  readonly AuthFlow: string;
  readonly AuthParameters: {[key: string]: any};
  readonly ClientMetadata: {[key: string]: any};
  readonly AnalyticsMetadata: AnalyticsMetadataType;
  readonly ContextData: ContextDataType;
}

interface AdminInitiateAuthResponse {
  readonly ChallengeName: string;
  readonly Session: string;
  readonly ChallengeParameters: {[key: string]: any};
  readonly AuthenticationResult: AuthenticationResultType;
}

interface AdminLinkProviderForUserRequest {
  readonly UserPoolId: string;
  readonly DestinationUser: ProviderUserIdentifierType;
  readonly SourceUser: ProviderUserIdentifierType;
}

interface AdminLinkProviderForUserResponse {
}

interface AdminListDevicesRequest {
  readonly UserPoolId: string;
  readonly Username: string;
  readonly Limit: number;
  readonly PaginationToken: string;
}

interface AdminListDevicesResponse {
  readonly Devices: [];
  readonly PaginationToken: string;
}

interface AdminListGroupsForUserRequest {
  readonly Username: string;
  readonly UserPoolId: string;
  readonly Limit: number;
  readonly NextToken: string;
}

interface AdminListGroupsForUserResponse {
  readonly Groups: [];
  readonly NextToken: string;
}

interface AdminListUserAuthEventsRequest {
  readonly UserPoolId: string;
  readonly Username: string;
  readonly MaxResults: number;
  readonly NextToken: string;
}

interface AdminListUserAuthEventsResponse {
  readonly AuthEvents: [];
  readonly NextToken: string;
}

interface AdminRemoveUserFromGroupRequest {
  readonly UserPoolId: string;
  readonly Username: string;
  readonly GroupName: string;
}

interface AdminResetUserPasswordRequest {
  readonly UserPoolId: string;
  readonly Username: string;
  readonly ClientMetadata: {[key: string]: any};
}

interface AdminResetUserPasswordResponse {
}

interface AdminRespondToAuthChallengeRequest {
  readonly UserPoolId: string;
  readonly ClientId: string;
  readonly ChallengeName: string;
  readonly ChallengeResponses: {[key: string]: any};
  readonly Session: string;
  readonly AnalyticsMetadata: AnalyticsMetadataType;
  readonly ContextData: ContextDataType;
  readonly ClientMetadata: {[key: string]: any};
}

interface AdminRespondToAuthChallengeResponse {
  readonly ChallengeName: string;
  readonly Session: string;
  readonly ChallengeParameters: {[key: string]: any};
  readonly AuthenticationResult: AuthenticationResultType;
}

interface AdminSetUserMFAPreferenceRequest {
  readonly SMSMfaSettings: SMSMfaSettingsType;
  readonly SoftwareTokenMfaSettings: SoftwareTokenMfaSettingsType;
  readonly Username: string;
  readonly UserPoolId: string;
}

interface AdminSetUserMFAPreferenceResponse {
}

interface AdminSetUserPasswordRequest {
  readonly UserPoolId: string;
  readonly Username: string;
  readonly Password: string;
  readonly Permanent: boolean;
}

interface AdminSetUserPasswordResponse {
}

interface AdminSetUserSettingsRequest {
  readonly UserPoolId: string;
  readonly Username: string;
  readonly MFAOptions: [];
}

interface AdminSetUserSettingsResponse {
}

interface AdminUpdateAuthEventFeedbackRequest {
  readonly UserPoolId: string;
  readonly Username: string;
  readonly EventId: string;
  readonly FeedbackValue: string;
}

interface AdminUpdateAuthEventFeedbackResponse {
}

interface AdminUpdateDeviceStatusRequest {
  readonly UserPoolId: string;
  readonly Username: string;
  readonly DeviceKey: string;
  readonly DeviceRememberedStatus: string;
}

interface AdminUpdateDeviceStatusResponse {
}

interface AdminUpdateUserAttributesRequest {
  readonly UserPoolId: string;
  readonly Username: string;
  readonly UserAttributes: [];
  readonly ClientMetadata: {[key: string]: any};
}

interface AdminUpdateUserAttributesResponse {
}

interface AdminUserGlobalSignOutRequest {
  readonly UserPoolId: string;
  readonly Username: string;
}

interface AdminUserGlobalSignOutResponse {
}

interface AliasExistsException {
  readonly message: string;
}

interface AnalyticsConfigurationType {
  readonly ApplicationId: string;
  readonly ApplicationArn: string;
  readonly RoleArn: string;
  readonly ExternalId: string;
  readonly UserDataShared: boolean;
}

interface AnalyticsMetadataType {
  readonly AnalyticsEndpointId: string;
}

interface AssociateSoftwareTokenRequest {
  readonly AccessToken: string;
  readonly Session: string;
}

interface AssociateSoftwareTokenResponse {
  readonly SecretCode: string;
  readonly Session: string;
}

interface AttributeType {
  readonly Name: string;
  readonly Value: string;
}

interface AuthEventType {
  readonly EventId: string;
  readonly EventType: string;
  readonly CreationDate: Date;
  readonly EventResponse: string;
  readonly EventRisk: EventRiskType;
  readonly ChallengeResponses: [];
  readonly EventContextData: EventContextDataType;
  readonly EventFeedback: EventFeedbackType;
}

interface AuthenticationResultType {
  readonly AccessToken: string;
  readonly ExpiresIn: number;
  readonly TokenType: string;
  readonly RefreshToken: string;
  readonly IdToken: string;
  readonly NewDeviceMetadata: NewDeviceMetadataType;
}

interface ChallengeResponseType {
  readonly ChallengeName: string;
  readonly ChallengeResponse: string;
}

interface ChangePasswordRequest {
  readonly PreviousPassword: string;
  readonly ProposedPassword: string;
  readonly AccessToken: string;
}

interface ChangePasswordResponse {
}

interface CodeDeliveryDetailsType {
  readonly Destination: string;
  readonly DeliveryMedium: string;
  readonly AttributeName: string;
}

interface CodeDeliveryFailureException {
  readonly message: string;
}

interface CodeMismatchException {
  readonly message: string;
}

interface CompromisedCredentialsActionsType {
  readonly EventAction: string;
}

interface CompromisedCredentialsRiskConfigurationType {
  readonly EventFilter: [];
  readonly Actions: CompromisedCredentialsActionsType;
}

interface ConcurrentModificationException {
  readonly message: string;
}

interface ConfirmDeviceRequest {
  readonly AccessToken: string;
  readonly DeviceKey: string;
  readonly DeviceSecretVerifierConfig: DeviceSecretVerifierConfigType;
  readonly DeviceName: string;
}

interface ConfirmDeviceResponse {
  readonly UserConfirmationNecessary: boolean;
}

interface ConfirmForgotPasswordRequest {
  readonly ClientId: string;
  readonly SecretHash: string;
  readonly Username: string;
  readonly ConfirmationCode: string;
  readonly Password: string;
  readonly AnalyticsMetadata: AnalyticsMetadataType;
  readonly UserContextData: UserContextDataType;
  readonly ClientMetadata: {[key: string]: any};
}

interface ConfirmForgotPasswordResponse {
}

interface ConfirmSignUpRequest {
  readonly ClientId: string;
  readonly SecretHash: string;
  readonly Username: string;
  readonly ConfirmationCode: string;
  readonly ForceAliasCreation: boolean;
  readonly AnalyticsMetadata: AnalyticsMetadataType;
  readonly UserContextData: UserContextDataType;
  readonly ClientMetadata: {[key: string]: any};
}

interface ConfirmSignUpResponse {
}

interface ContextDataType {
  readonly IpAddress: string;
  readonly ServerName: string;
  readonly ServerPath: string;
  readonly HttpHeaders: [];
  readonly EncodedData: string;
}

interface CreateGroupRequest {
  readonly GroupName: string;
  readonly UserPoolId: string;
  readonly Description: string;
  readonly RoleArn: string;
  readonly Precedence: number;
}

interface CreateGroupResponse {
  readonly Group: GroupType;
}

interface CreateIdentityProviderRequest {
  readonly UserPoolId: string;
  readonly ProviderName: string;
  readonly ProviderType: string;
  readonly ProviderDetails: {[key: string]: any};
  readonly AttributeMapping: {[key: string]: any};
  readonly IdpIdentifiers: [];
}

interface CreateIdentityProviderResponse {
  readonly IdentityProvider: IdentityProviderType;
}

interface CreateResourceServerRequest {
  readonly UserPoolId: string;
  readonly Identifier: string;
  readonly Name: string;
  readonly Scopes: [];
}

interface CreateResourceServerResponse {
  readonly ResourceServer: ResourceServerType;
}

interface CreateUserImportJobRequest {
  readonly JobName: string;
  readonly UserPoolId: string;
  readonly CloudWatchLogsRoleArn: string;
}

interface CreateUserImportJobResponse {
  readonly UserImportJob: UserImportJobType;
}

interface CreateUserPoolClientRequest {
  readonly UserPoolId: string;
  readonly ClientName: string;
  readonly GenerateSecret: boolean;
  readonly RefreshTokenValidity: number;
  readonly AccessTokenValidity: number;
  readonly IdTokenValidity: number;
  readonly TokenValidityUnits: TokenValidityUnitsType;
  readonly ReadAttributes: [];
  readonly WriteAttributes: [];
  readonly ExplicitAuthFlows: [];
  readonly SupportedIdentityProviders: [];
  readonly CallbackURLs: [];
  readonly LogoutURLs: [];
  readonly DefaultRedirectURI: string;
  readonly AllowedOAuthFlows: [];
  readonly AllowedOAuthScopes: [];
  readonly AllowedOAuthFlowsUserPoolClient: boolean;
  readonly AnalyticsConfiguration: AnalyticsConfigurationType;
  readonly PreventUserExistenceErrors: string;
  readonly EnableTokenRevocation: boolean;
}

interface CreateUserPoolClientResponse {
  readonly UserPoolClient: UserPoolClientType;
}

interface CreateUserPoolDomainRequest {
  readonly Domain: string;
  readonly UserPoolId: string;
  readonly CustomDomainConfig: CustomDomainConfigType;
}

interface CreateUserPoolDomainResponse {
  readonly CloudFrontDomain: string;
}

interface CreateUserPoolRequest {
  readonly PoolName: string;
  readonly Policies: UserPoolPolicyType;
  readonly LambdaConfig: LambdaConfigType;
  readonly AutoVerifiedAttributes: [];
  readonly AliasAttributes: [];
  readonly UsernameAttributes: [];
  readonly SmsVerificationMessage: string;
  readonly EmailVerificationMessage: string;
  readonly EmailVerificationSubject: string;
  readonly VerificationMessageTemplate: VerificationMessageTemplateType;
  readonly SmsAuthenticationMessage: string;
  readonly MfaConfiguration: string;
  readonly DeviceConfiguration: DeviceConfigurationType;
  readonly EmailConfiguration: EmailConfigurationType;
  readonly SmsConfiguration: SmsConfigurationType;
  readonly UserPoolTags: {[key: string]: any};
  readonly AdminCreateUserConfig: AdminCreateUserConfigType;
  readonly Schema: [];
  readonly UserPoolAddOns: UserPoolAddOnsType;
  readonly UsernameConfiguration: UsernameConfigurationType;
  readonly AccountRecoverySetting: AccountRecoverySettingType;
}

interface CreateUserPoolResponse {
  readonly UserPool: UserPoolType;
}

interface CustomDomainConfigType {
  readonly CertificateArn: string;
}

interface CustomEmailLambdaVersionConfigType {
  readonly LambdaVersion: string;
  readonly LambdaArn: string;
}

interface CustomSMSLambdaVersionConfigType {
  readonly LambdaVersion: string;
  readonly LambdaArn: string;
}

interface DeleteGroupRequest {
  readonly GroupName: string;
  readonly UserPoolId: string;
}

interface DeleteIdentityProviderRequest {
  readonly UserPoolId: string;
  readonly ProviderName: string;
}

interface DeleteResourceServerRequest {
  readonly UserPoolId: string;
  readonly Identifier: string;
}

interface DeleteUserAttributesRequest {
  readonly UserAttributeNames: [];
  readonly AccessToken: string;
}

interface DeleteUserAttributesResponse {
}

interface DeleteUserPoolClientRequest {
  readonly UserPoolId: string;
  readonly ClientId: string;
}

interface DeleteUserPoolDomainRequest {
  readonly Domain: string;
  readonly UserPoolId: string;
}

interface DeleteUserPoolDomainResponse {
}

interface DeleteUserPoolRequest {
  readonly UserPoolId: string;
}

interface DeleteUserRequest {
  readonly AccessToken: string;
}

interface DescribeIdentityProviderRequest {
  readonly UserPoolId: string;
  readonly ProviderName: string;
}

interface DescribeIdentityProviderResponse {
  readonly IdentityProvider: IdentityProviderType;
}

interface DescribeResourceServerRequest {
  readonly UserPoolId: string;
  readonly Identifier: string;
}

interface DescribeResourceServerResponse {
  readonly ResourceServer: ResourceServerType;
}

interface DescribeRiskConfigurationRequest {
  readonly UserPoolId: string;
  readonly ClientId: string;
}

interface DescribeRiskConfigurationResponse {
  readonly RiskConfiguration: RiskConfigurationType;
}

interface DescribeUserImportJobRequest {
  readonly UserPoolId: string;
  readonly JobId: string;
}

interface DescribeUserImportJobResponse {
  readonly UserImportJob: UserImportJobType;
}

interface DescribeUserPoolClientRequest {
  readonly UserPoolId: string;
  readonly ClientId: string;
}

interface DescribeUserPoolClientResponse {
  readonly UserPoolClient: UserPoolClientType;
}

interface DescribeUserPoolDomainRequest {
  readonly Domain: string;
}

interface DescribeUserPoolDomainResponse {
  readonly DomainDescription: DomainDescriptionType;
}

interface DescribeUserPoolRequest {
  readonly UserPoolId: string;
}

interface DescribeUserPoolResponse {
  readonly UserPool: UserPoolType;
}

interface DeviceConfigurationType {
  readonly ChallengeRequiredOnNewDevice: boolean;
  readonly DeviceOnlyRememberedOnUserPrompt: boolean;
}

interface DeviceSecretVerifierConfigType {
  readonly PasswordVerifier: string;
  readonly Salt: string;
}

interface DeviceType {
  readonly DeviceKey: string;
  readonly DeviceAttributes: [];
  readonly DeviceCreateDate: Date;
  readonly DeviceLastModifiedDate: Date;
  readonly DeviceLastAuthenticatedDate: Date;
}

interface DomainDescriptionType {
  readonly UserPoolId: string;
  readonly AWSAccountId: string;
  readonly Domain: string;
  readonly S3Bucket: string;
  readonly CloudFrontDistribution: string;
  readonly Version: string;
  readonly Status: string;
  readonly CustomDomainConfig: CustomDomainConfigType;
}

interface DuplicateProviderException {
  readonly message: string;
}

interface EmailConfigurationType {
  readonly SourceArn: string;
  readonly ReplyToEmailAddress: string;
  readonly EmailSendingAccount: string;
  readonly From: string;
  readonly ConfigurationSet: string;
}

interface EnableSoftwareTokenMFAException {
  readonly message: string;
}

interface EventContextDataType {
  readonly IpAddress: string;
  readonly DeviceName: string;
  readonly Timezone: string;
  readonly City: string;
  readonly Country: string;
}

interface EventFeedbackType {
  readonly FeedbackValue: string;
  readonly Provider: string;
  readonly FeedbackDate: Date;
}

interface EventRiskType {
  readonly RiskDecision: string;
  readonly RiskLevel: string;
  readonly CompromisedCredentialsDetected: boolean;
}

interface ExpiredCodeException {
  readonly message: string;
}

interface ForgetDeviceRequest {
  readonly AccessToken: string;
  readonly DeviceKey: string;
}

interface ForgotPasswordRequest {
  readonly ClientId: string;
  readonly SecretHash: string;
  readonly UserContextData: UserContextDataType;
  readonly Username: string;
  readonly AnalyticsMetadata: AnalyticsMetadataType;
  readonly ClientMetadata: {[key: string]: any};
}

interface ForgotPasswordResponse {
  readonly CodeDeliveryDetails: CodeDeliveryDetailsType;
}

interface GetCSVHeaderRequest {
  readonly UserPoolId: string;
}

interface GetCSVHeaderResponse {
  readonly UserPoolId: string;
  readonly CSVHeader: [];
}

interface GetDeviceRequest {
  readonly DeviceKey: string;
  readonly AccessToken: string;
}

interface GetDeviceResponse {
  readonly Device: DeviceType;
}

interface GetGroupRequest {
  readonly GroupName: string;
  readonly UserPoolId: string;
}

interface GetGroupResponse {
  readonly Group: GroupType;
}

interface GetIdentityProviderByIdentifierRequest {
  readonly UserPoolId: string;
  readonly IdpIdentifier: string;
}

interface GetIdentityProviderByIdentifierResponse {
  readonly IdentityProvider: IdentityProviderType;
}

interface GetSigningCertificateRequest {
  readonly UserPoolId: string;
}

interface GetSigningCertificateResponse {
  readonly Certificate: string;
}

interface GetUICustomizationRequest {
  readonly UserPoolId: string;
  readonly ClientId: string;
}

interface GetUICustomizationResponse {
  readonly UICustomization: UICustomizationType;
}

interface GetUserAttributeVerificationCodeRequest {
  readonly AccessToken: string;
  readonly AttributeName: string;
  readonly ClientMetadata: {[key: string]: any};
}

interface GetUserAttributeVerificationCodeResponse {
  readonly CodeDeliveryDetails: CodeDeliveryDetailsType;
}

interface GetUserPoolMfaConfigRequest {
  readonly UserPoolId: string;
}

interface GetUserPoolMfaConfigResponse {
  readonly SmsMfaConfiguration: SmsMfaConfigType;
  readonly SoftwareTokenMfaConfiguration: SoftwareTokenMfaConfigType;
  readonly MfaConfiguration: string;
}

interface GetUserRequest {
  readonly AccessToken: string;
}

interface GetUserResponse {
  readonly Username: string;
  readonly UserAttributes: [];
  readonly MFAOptions: [];
  readonly PreferredMfaSetting: string;
  readonly UserMFASettingList: [];
}

interface GlobalSignOutRequest {
  readonly AccessToken: string;
}

interface GlobalSignOutResponse {
}

interface GroupExistsException {
  readonly message: string;
}

interface GroupType {
  readonly GroupName: string;
  readonly UserPoolId: string;
  readonly Description: string;
  readonly RoleArn: string;
  readonly Precedence: number;
  readonly LastModifiedDate: Date;
  readonly CreationDate: Date;
}

interface HttpHeader {
  readonly headerName: string;
  readonly headerValue: string;
}

interface IdentityProviderType {
  readonly UserPoolId: string;
  readonly ProviderName: string;
  readonly ProviderType: string;
  readonly ProviderDetails: {[key: string]: any};
  readonly AttributeMapping: {[key: string]: any};
  readonly IdpIdentifiers: [];
  readonly LastModifiedDate: Date;
  readonly CreationDate: Date;
}

interface InitiateAuthRequest {
  readonly AuthFlow: string;
  readonly AuthParameters: {[key: string]: any};
  readonly ClientMetadata: {[key: string]: any};
  readonly ClientId: string;
  readonly AnalyticsMetadata: AnalyticsMetadataType;
  readonly UserContextData: UserContextDataType;
}

interface InitiateAuthResponse {
  readonly ChallengeName: string;
  readonly Session: string;
  readonly ChallengeParameters: {[key: string]: any};
  readonly AuthenticationResult: AuthenticationResultType;
}

interface InternalErrorException {
  readonly message: string;
}

interface InvalidEmailRoleAccessPolicyException {
  readonly message: string;
}

interface InvalidLambdaResponseException {
  readonly message: string;
}

interface InvalidOAuthFlowException {
  readonly message: string;
}

interface InvalidParameterException {
  readonly message: string;
}

interface InvalidPasswordException {
  readonly message: string;
}

interface InvalidSmsRoleAccessPolicyException {
  readonly message: string;
}

interface InvalidSmsRoleTrustRelationshipException {
  readonly message: string;
}

interface InvalidUserPoolConfigurationException {
  readonly message: string;
}

interface LambdaConfigType {
  readonly PreSignUp: string;
  readonly CustomMessage: string;
  readonly PostConfirmation: string;
  readonly PreAuthentication: string;
  readonly PostAuthentication: string;
  readonly DefineAuthChallenge: string;
  readonly CreateAuthChallenge: string;
  readonly VerifyAuthChallengeResponse: string;
  readonly PreTokenGeneration: string;
  readonly UserMigration: string;
  readonly CustomSMSSender: CustomSMSLambdaVersionConfigType;
  readonly CustomEmailSender: CustomEmailLambdaVersionConfigType;
  readonly KMSKeyID: string;
}

interface LimitExceededException {
  readonly message: string;
}

interface ListDevicesRequest {
  readonly AccessToken: string;
  readonly Limit: number;
  readonly PaginationToken: string;
}

interface ListDevicesResponse {
  readonly Devices: [];
  readonly PaginationToken: string;
}

interface ListGroupsRequest {
  readonly UserPoolId: string;
  readonly Limit: number;
  readonly NextToken: string;
}

interface ListGroupsResponse {
  readonly Groups: [];
  readonly NextToken: string;
}

interface ListIdentityProvidersRequest {
  readonly UserPoolId: string;
  readonly MaxResults: number;
  readonly NextToken: string;
}

interface ListIdentityProvidersResponse {
  readonly Providers: [];
  readonly NextToken: string;
}

interface ListResourceServersRequest {
  readonly UserPoolId: string;
  readonly MaxResults: number;
  readonly NextToken: string;
}

interface ListResourceServersResponse {
  readonly ResourceServers: [];
  readonly NextToken: string;
}

interface ListTagsForResourceRequest {
  readonly ResourceArn: string;
}

interface ListTagsForResourceResponse {
  readonly Tags: {[key: string]: any};
}

interface ListUserImportJobsRequest {
  readonly UserPoolId: string;
  readonly MaxResults: number;
  readonly PaginationToken: string;
}

interface ListUserImportJobsResponse {
  readonly UserImportJobs: [];
  readonly PaginationToken: string;
}

interface ListUserPoolClientsRequest {
  readonly UserPoolId: string;
  readonly MaxResults: number;
  readonly NextToken: string;
}

interface ListUserPoolClientsResponse {
  readonly UserPoolClients: [];
  readonly NextToken: string;
}

interface ListUserPoolsRequest {
  readonly NextToken: string;
  readonly MaxResults: number;
}

interface ListUserPoolsResponse {
  readonly UserPools: [];
  readonly NextToken: string;
}

interface ListUsersInGroupRequest {
  readonly UserPoolId: string;
  readonly GroupName: string;
  readonly Limit: number;
  readonly NextToken: string;
}

interface ListUsersInGroupResponse {
  readonly Users: [];
  readonly NextToken: string;
}

interface ListUsersRequest {
  readonly UserPoolId: string;
  readonly AttributesToGet: [];
  readonly Limit: number;
  readonly PaginationToken: string;
  readonly Filter: string;
}

interface ListUsersResponse {
  readonly Users: [];
  readonly PaginationToken: string;
}

interface MFAMethodNotFoundException {
  readonly message: string;
}

interface MFAOptionType {
  readonly DeliveryMedium: string;
  readonly AttributeName: string;
}

interface MessageTemplateType {
  readonly SMSMessage: string;
  readonly EmailMessage: string;
  readonly EmailSubject: string;
}

interface NewDeviceMetadataType {
  readonly DeviceKey: string;
  readonly DeviceGroupKey: string;
}

interface NotAuthorizedException {
  readonly message: string;
}

interface NotifyConfigurationType {
  readonly From: string;
  readonly ReplyTo: string;
  readonly SourceArn: string;
  readonly BlockEmail: NotifyEmailType;
  readonly NoActionEmail: NotifyEmailType;
  readonly MfaEmail: NotifyEmailType;
}

interface NotifyEmailType {
  readonly Subject: string;
  readonly HtmlBody: string;
  readonly TextBody: string;
}

interface NumberAttributeConstraintsType {
  readonly MinValue: string;
  readonly MaxValue: string;
}

interface PasswordPolicyType {
  readonly MinimumLength: number;
  readonly RequireUppercase: boolean;
  readonly RequireLowercase: boolean;
  readonly RequireNumbers: boolean;
  readonly RequireSymbols: boolean;
  readonly TemporaryPasswordValidityDays: number;
}

interface PasswordResetRequiredException {
  readonly message: string;
}

interface PreconditionNotMetException {
  readonly message: string;
}

interface ProviderDescription {
  readonly ProviderName: string;
  readonly ProviderType: string;
  readonly LastModifiedDate: Date;
  readonly CreationDate: Date;
}

interface ProviderUserIdentifierType {
  readonly ProviderName: string;
  readonly ProviderAttributeName: string;
  readonly ProviderAttributeValue: string;
}

interface RecoveryOptionType {
  readonly Priority: number;
  readonly Name: string;
}

interface ResendConfirmationCodeRequest {
  readonly ClientId: string;
  readonly SecretHash: string;
  readonly UserContextData: UserContextDataType;
  readonly Username: string;
  readonly AnalyticsMetadata: AnalyticsMetadataType;
  readonly ClientMetadata: {[key: string]: any};
}

interface ResendConfirmationCodeResponse {
  readonly CodeDeliveryDetails: CodeDeliveryDetailsType;
}

interface ResourceNotFoundException {
  readonly message: string;
}

interface ResourceServerScopeType {
  readonly ScopeName: string;
  readonly ScopeDescription: string;
}

interface ResourceServerType {
  readonly UserPoolId: string;
  readonly Identifier: string;
  readonly Name: string;
  readonly Scopes: [];
}

interface RespondToAuthChallengeRequest {
  readonly ClientId: string;
  readonly ChallengeName: string;
  readonly Session: string;
  readonly ChallengeResponses: {[key: string]: any};
  readonly AnalyticsMetadata: AnalyticsMetadataType;
  readonly UserContextData: UserContextDataType;
  readonly ClientMetadata: {[key: string]: any};
}

interface RespondToAuthChallengeResponse {
  readonly ChallengeName: string;
  readonly Session: string;
  readonly ChallengeParameters: {[key: string]: any};
  readonly AuthenticationResult: AuthenticationResultType;
}

interface RevokeTokenRequest {
  readonly Token: string;
  readonly ClientId: string;
  readonly ClientSecret: string;
}

interface RevokeTokenResponse {
}

interface RiskConfigurationType {
  readonly UserPoolId: string;
  readonly ClientId: string;
  readonly CompromisedCredentialsRiskConfiguration: CompromisedCredentialsRiskConfigurationType;
  readonly AccountTakeoverRiskConfiguration: AccountTakeoverRiskConfigurationType;
  readonly RiskExceptionConfiguration: RiskExceptionConfigurationType;
  readonly LastModifiedDate: Date;
}

interface RiskExceptionConfigurationType {
  readonly BlockedIPRangeList: [];
  readonly SkippedIPRangeList: [];
}

interface SMSMfaSettingsType {
  readonly Enabled: boolean;
  readonly PreferredMfa: boolean;
}

interface SchemaAttributeType {
  readonly Name: string;
  readonly AttributeDataType: string;
  readonly DeveloperOnlyAttribute: boolean;
  readonly Mutable: boolean;
  readonly Required: boolean;
  readonly NumberAttributeConstraints: NumberAttributeConstraintsType;
  readonly StringAttributeConstraints: StringAttributeConstraintsType;
}

interface ScopeDoesNotExistException {
  readonly message: string;
}

interface SetRiskConfigurationRequest {
  readonly UserPoolId: string;
  readonly ClientId: string;
  readonly CompromisedCredentialsRiskConfiguration: CompromisedCredentialsRiskConfigurationType;
  readonly AccountTakeoverRiskConfiguration: AccountTakeoverRiskConfigurationType;
  readonly RiskExceptionConfiguration: RiskExceptionConfigurationType;
}

interface SetRiskConfigurationResponse {
  readonly RiskConfiguration: RiskConfigurationType;
}

interface SetUICustomizationRequest {
  readonly UserPoolId: string;
  readonly ClientId: string;
  readonly CSS: string;
  readonly ImageFile: unknown;
}

interface SetUICustomizationResponse {
  readonly UICustomization: UICustomizationType;
}

interface SetUserMFAPreferenceRequest {
  readonly SMSMfaSettings: SMSMfaSettingsType;
  readonly SoftwareTokenMfaSettings: SoftwareTokenMfaSettingsType;
  readonly AccessToken: string;
}

interface SetUserMFAPreferenceResponse {
}

interface SetUserPoolMfaConfigRequest {
  readonly UserPoolId: string;
  readonly SmsMfaConfiguration: SmsMfaConfigType;
  readonly SoftwareTokenMfaConfiguration: SoftwareTokenMfaConfigType;
  readonly MfaConfiguration: string;
}

interface SetUserPoolMfaConfigResponse {
  readonly SmsMfaConfiguration: SmsMfaConfigType;
  readonly SoftwareTokenMfaConfiguration: SoftwareTokenMfaConfigType;
  readonly MfaConfiguration: string;
}

interface SetUserSettingsRequest {
  readonly AccessToken: string;
  readonly MFAOptions: [];
}

interface SetUserSettingsResponse {
}

interface SignUpRequest {
  readonly ClientId: string;
  readonly SecretHash: string;
  readonly Username: string;
  readonly Password: string;
  readonly UserAttributes: [];
  readonly ValidationData: [];
  readonly AnalyticsMetadata: AnalyticsMetadataType;
  readonly UserContextData: UserContextDataType;
  readonly ClientMetadata: {[key: string]: any};
}

interface SignUpResponse {
  readonly UserConfirmed: boolean;
  readonly CodeDeliveryDetails: CodeDeliveryDetailsType;
  readonly UserSub: string;
}

interface SmsConfigurationType {
  readonly SnsCallerArn: string;
  readonly ExternalId: string;
}

interface SmsMfaConfigType {
  readonly SmsAuthenticationMessage: string;
  readonly SmsConfiguration: SmsConfigurationType;
}

interface SoftwareTokenMFANotFoundException {
  readonly message: string;
}

interface SoftwareTokenMfaConfigType {
  readonly Enabled: boolean;
}

interface SoftwareTokenMfaSettingsType {
  readonly Enabled: boolean;
  readonly PreferredMfa: boolean;
}

interface StartUserImportJobRequest {
  readonly UserPoolId: string;
  readonly JobId: string;
}

interface StartUserImportJobResponse {
  readonly UserImportJob: UserImportJobType;
}

interface StopUserImportJobRequest {
  readonly UserPoolId: string;
  readonly JobId: string;
}

interface StopUserImportJobResponse {
  readonly UserImportJob: UserImportJobType;
}

interface StringAttributeConstraintsType {
  readonly MinLength: string;
  readonly MaxLength: string;
}

interface TagResourceRequest {
  readonly ResourceArn: string;
  readonly Tags: {[key: string]: any};
}

interface TagResourceResponse {
}

interface TokenValidityUnitsType {
  readonly AccessToken: string;
  readonly IdToken: string;
  readonly RefreshToken: string;
}

interface TooManyFailedAttemptsException {
  readonly message: string;
}

interface TooManyRequestsException {
  readonly message: string;
}

interface UICustomizationType {
  readonly UserPoolId: string;
  readonly ClientId: string;
  readonly ImageUrl: string;
  readonly CSS: string;
  readonly CSSVersion: string;
  readonly LastModifiedDate: Date;
  readonly CreationDate: Date;
}

interface UnauthorizedException {
  readonly message: string;
}

interface UnexpectedLambdaException {
  readonly message: string;
}

interface UnsupportedIdentityProviderException {
  readonly message: string;
}

interface UnsupportedOperationException {
  readonly message: string;
}

interface UnsupportedTokenTypeException {
  readonly message: string;
}

interface UnsupportedUserStateException {
  readonly message: string;
}

interface UntagResourceRequest {
  readonly ResourceArn: string;
  readonly TagKeys: [];
}

interface UntagResourceResponse {
}

interface UpdateAuthEventFeedbackRequest {
  readonly UserPoolId: string;
  readonly Username: string;
  readonly EventId: string;
  readonly FeedbackToken: string;
  readonly FeedbackValue: string;
}

interface UpdateAuthEventFeedbackResponse {
}

interface UpdateDeviceStatusRequest {
  readonly AccessToken: string;
  readonly DeviceKey: string;
  readonly DeviceRememberedStatus: string;
}

interface UpdateDeviceStatusResponse {
}

interface UpdateGroupRequest {
  readonly GroupName: string;
  readonly UserPoolId: string;
  readonly Description: string;
  readonly RoleArn: string;
  readonly Precedence: number;
}

interface UpdateGroupResponse {
  readonly Group: GroupType;
}

interface UpdateIdentityProviderRequest {
  readonly UserPoolId: string;
  readonly ProviderName: string;
  readonly ProviderDetails: {[key: string]: any};
  readonly AttributeMapping: {[key: string]: any};
  readonly IdpIdentifiers: [];
}

interface UpdateIdentityProviderResponse {
  readonly IdentityProvider: IdentityProviderType;
}

interface UpdateResourceServerRequest {
  readonly UserPoolId: string;
  readonly Identifier: string;
  readonly Name: string;
  readonly Scopes: [];
}

interface UpdateResourceServerResponse {
  readonly ResourceServer: ResourceServerType;
}

interface UpdateUserAttributesRequest {
  readonly UserAttributes: [];
  readonly AccessToken: string;
  readonly ClientMetadata: {[key: string]: any};
}

interface UpdateUserAttributesResponse {
  readonly CodeDeliveryDetailsList: [];
}

interface UpdateUserPoolClientRequest {
  readonly UserPoolId: string;
  readonly ClientId: string;
  readonly ClientName: string;
  readonly RefreshTokenValidity: number;
  readonly AccessTokenValidity: number;
  readonly IdTokenValidity: number;
  readonly TokenValidityUnits: TokenValidityUnitsType;
  readonly ReadAttributes: [];
  readonly WriteAttributes: [];
  readonly ExplicitAuthFlows: [];
  readonly SupportedIdentityProviders: [];
  readonly CallbackURLs: [];
  readonly LogoutURLs: [];
  readonly DefaultRedirectURI: string;
  readonly AllowedOAuthFlows: [];
  readonly AllowedOAuthScopes: [];
  readonly AllowedOAuthFlowsUserPoolClient: boolean;
  readonly AnalyticsConfiguration: AnalyticsConfigurationType;
  readonly PreventUserExistenceErrors: string;
  readonly EnableTokenRevocation: boolean;
}

interface UpdateUserPoolClientResponse {
  readonly UserPoolClient: UserPoolClientType;
}

interface UpdateUserPoolDomainRequest {
  readonly Domain: string;
  readonly UserPoolId: string;
  readonly CustomDomainConfig: CustomDomainConfigType;
}

interface UpdateUserPoolDomainResponse {
  readonly CloudFrontDomain: string;
}

interface UpdateUserPoolRequest {
  readonly UserPoolId: string;
  readonly Policies: UserPoolPolicyType;
  readonly LambdaConfig: LambdaConfigType;
  readonly AutoVerifiedAttributes: [];
  readonly SmsVerificationMessage: string;
  readonly EmailVerificationMessage: string;
  readonly EmailVerificationSubject: string;
  readonly VerificationMessageTemplate: VerificationMessageTemplateType;
  readonly SmsAuthenticationMessage: string;
  readonly MfaConfiguration: string;
  readonly DeviceConfiguration: DeviceConfigurationType;
  readonly EmailConfiguration: EmailConfigurationType;
  readonly SmsConfiguration: SmsConfigurationType;
  readonly UserPoolTags: {[key: string]: any};
  readonly AdminCreateUserConfig: AdminCreateUserConfigType;
  readonly UserPoolAddOns: UserPoolAddOnsType;
  readonly AccountRecoverySetting: AccountRecoverySettingType;
}

interface UpdateUserPoolResponse {
}

interface UserContextDataType {
  readonly EncodedData: string;
}

interface UserImportInProgressException {
  readonly message: string;
}

interface UserImportJobType {
  readonly JobName: string;
  readonly JobId: string;
  readonly UserPoolId: string;
  readonly PreSignedUrl: string;
  readonly CreationDate: Date;
  readonly StartDate: Date;
  readonly CompletionDate: Date;
  readonly Status: string;
  readonly CloudWatchLogsRoleArn: string;
  readonly ImportedUsers: number;
  readonly SkippedUsers: number;
  readonly FailedUsers: number;
  readonly CompletionMessage: string;
}

interface UserLambdaValidationException {
  readonly message: string;
}

interface UserNotConfirmedException {
  readonly message: string;
}

interface UserNotFoundException {
  readonly message: string;
}

interface UserPoolAddOnNotEnabledException {
  readonly message: string;
}

interface UserPoolAddOnsType {
  readonly AdvancedSecurityMode: string;
}

interface UserPoolClientDescription {
  readonly ClientId: string;
  readonly UserPoolId: string;
  readonly ClientName: string;
}

interface UserPoolClientType {
  readonly UserPoolId: string;
  readonly ClientName: string;
  readonly ClientId: string;
  readonly ClientSecret: string;
  readonly LastModifiedDate: Date;
  readonly CreationDate: Date;
  readonly RefreshTokenValidity: number;
  readonly AccessTokenValidity: number;
  readonly IdTokenValidity: number;
  readonly TokenValidityUnits: TokenValidityUnitsType;
  readonly ReadAttributes: [];
  readonly WriteAttributes: [];
  readonly ExplicitAuthFlows: [];
  readonly SupportedIdentityProviders: [];
  readonly CallbackURLs: [];
  readonly LogoutURLs: [];
  readonly DefaultRedirectURI: string;
  readonly AllowedOAuthFlows: [];
  readonly AllowedOAuthScopes: [];
  readonly AllowedOAuthFlowsUserPoolClient: boolean;
  readonly AnalyticsConfiguration: AnalyticsConfigurationType;
  readonly PreventUserExistenceErrors: string;
  readonly EnableTokenRevocation: boolean;
}

interface UserPoolDescriptionType {
  readonly Id: string;
  readonly Name: string;
  readonly LambdaConfig: LambdaConfigType;
  readonly Status: string;
  readonly LastModifiedDate: Date;
  readonly CreationDate: Date;
}

interface UserPoolPolicyType {
  readonly PasswordPolicy: PasswordPolicyType;
}

interface UserPoolTaggingException {
  readonly message: string;
}

interface UserPoolType {
  readonly Id: string;
  readonly Name: string;
  readonly Policies: UserPoolPolicyType;
  readonly LambdaConfig: LambdaConfigType;
  readonly Status: string;
  readonly LastModifiedDate: Date;
  readonly CreationDate: Date;
  readonly SchemaAttributes: [];
  readonly AutoVerifiedAttributes: [];
  readonly AliasAttributes: [];
  readonly UsernameAttributes: [];
  readonly SmsVerificationMessage: string;
  readonly EmailVerificationMessage: string;
  readonly EmailVerificationSubject: string;
  readonly VerificationMessageTemplate: VerificationMessageTemplateType;
  readonly SmsAuthenticationMessage: string;
  readonly MfaConfiguration: string;
  readonly DeviceConfiguration: DeviceConfigurationType;
  readonly EstimatedNumberOfUsers: number;
  readonly EmailConfiguration: EmailConfigurationType;
  readonly SmsConfiguration: SmsConfigurationType;
  readonly UserPoolTags: {[key: string]: any};
  readonly SmsConfigurationFailure: string;
  readonly EmailConfigurationFailure: string;
  readonly Domain: string;
  readonly CustomDomain: string;
  readonly AdminCreateUserConfig: AdminCreateUserConfigType;
  readonly UserPoolAddOns: UserPoolAddOnsType;
  readonly UsernameConfiguration: UsernameConfigurationType;
  readonly Arn: string;
  readonly AccountRecoverySetting: AccountRecoverySettingType;
}

interface UserType {
  readonly Username: string;
  readonly Attributes: [];
  readonly UserCreateDate: Date;
  readonly UserLastModifiedDate: Date;
  readonly Enabled: boolean;
  readonly UserStatus: string;
  readonly MFAOptions: [];
}

interface UsernameConfigurationType {
  readonly CaseSensitive: boolean;
}

interface UsernameExistsException {
  readonly message: string;
}

interface VerificationMessageTemplateType {
  readonly SmsMessage: string;
  readonly EmailMessage: string;
  readonly EmailSubject: string;
  readonly EmailMessageByLink: string;
  readonly EmailSubjectByLink: string;
  readonly DefaultEmailOption: string;
}

interface VerifySoftwareTokenRequest {
  readonly AccessToken: string;
  readonly Session: string;
  readonly UserCode: string;
  readonly FriendlyDeviceName: string;
}

interface VerifySoftwareTokenResponse {
  readonly Status: string;
  readonly Session: string;
}

interface VerifyUserAttributeRequest {
  readonly AccessToken: string;
  readonly AttributeName: string;
  readonly Code: string;
}

interface VerifyUserAttributeResponse {
}

