/**
 * STOP. This file is autogenerated. DO NOT EDIT by hand
 */
export interface AddCustomAttributes {
  readonly UserPoolId: string;
  readonly CustomAttributes: [];
}

export interface AdminAddUserToGroup {
  readonly UserPoolId: string;
  readonly Username: string;
  readonly GroupName: string;
}

export interface AdminConfirmSignUp {
  readonly UserPoolId: string;
  readonly Username: string;
  readonly ClientMetadata?: {[key: string]: any};
}

export interface AdminCreateUser {
  readonly UserPoolId: string;
  readonly Username: string;
  readonly UserAttributes?: [];
  readonly ValidationData?: [];
  readonly TemporaryPassword?: string;
  readonly ForceAliasCreation?: boolean;
  readonly MessageAction?: string;
  readonly DesiredDeliveryMediums?: [];
  readonly ClientMetadata?: {[key: string]: any};
}

export interface AdminDeleteUser {
  readonly UserPoolId: string;
  readonly Username: string;
}

export interface AdminDeleteUserAttributes {
  readonly UserPoolId: string;
  readonly Username: string;
  readonly UserAttributeNames: [];
}

export interface AdminDisableProviderForUser {
  readonly UserPoolId: string;
  readonly User: ProviderUserIdentifierType;
}

export interface AdminDisableUser {
  readonly UserPoolId: string;
  readonly Username: string;
}

export interface AdminEnableUser {
  readonly UserPoolId: string;
  readonly Username: string;
}

export interface AdminForgetDevice {
  readonly UserPoolId: string;
  readonly Username: string;
  readonly DeviceKey: string;
}

export interface AdminGetDevice {
  readonly DeviceKey: string;
  readonly UserPoolId: string;
  readonly Username: string;
}

export interface AdminGetUser {
  readonly UserPoolId: string;
  readonly Username: string;
}

export interface AdminInitiateAuth {
  readonly UserPoolId: string;
  readonly ClientId: string;
  readonly AuthFlow: string;
  readonly AuthParameters?: {[key: string]: any};
  readonly ClientMetadata?: {[key: string]: any};
  readonly AnalyticsMetadata?: AnalyticsMetadataType;
  readonly ContextData?: ContextDataType;
}

export interface AdminLinkProviderForUser {
  readonly UserPoolId: string;
  readonly DestinationUser: ProviderUserIdentifierType;
  readonly SourceUser: ProviderUserIdentifierType;
}

export interface AdminListDevices {
  readonly UserPoolId: string;
  readonly Username: string;
  readonly Limit?: number;
  readonly PaginationToken?: string;
}

export interface AdminListGroupsForUser {
  readonly Username: string;
  readonly UserPoolId: string;
  readonly Limit?: number;
  readonly NextToken?: string;
}

export interface AdminListUserAuthEvents {
  readonly UserPoolId: string;
  readonly Username: string;
  readonly MaxResults?: number;
  readonly NextToken?: string;
}

export interface AdminRemoveUserFromGroup {
  readonly UserPoolId: string;
  readonly Username: string;
  readonly GroupName: string;
}

export interface AdminResetUserPassword {
  readonly UserPoolId: string;
  readonly Username: string;
  readonly ClientMetadata?: {[key: string]: any};
}

export interface AdminRespondToAuthChallenge {
  readonly UserPoolId: string;
  readonly ClientId: string;
  readonly ChallengeName: string;
  readonly ChallengeResponses?: {[key: string]: any};
  readonly Session?: string;
  readonly AnalyticsMetadata?: AnalyticsMetadataType;
  readonly ContextData?: ContextDataType;
  readonly ClientMetadata?: {[key: string]: any};
}

export interface AdminSetUserMFAPreference {
  readonly SMSMfaSettings?: SMSMfaSettingsType;
  readonly SoftwareTokenMfaSettings?: SoftwareTokenMfaSettingsType;
  readonly Username: string;
  readonly UserPoolId: string;
}

export interface AdminSetUserPassword {
  readonly UserPoolId: string;
  readonly Username: string;
  readonly Password: string;
  readonly Permanent?: boolean;
}

export interface AdminSetUserSettings {
  readonly UserPoolId: string;
  readonly Username: string;
  readonly MFAOptions: [];
}

export interface AdminUpdateAuthEventFeedback {
  readonly UserPoolId: string;
  readonly Username: string;
  readonly EventId: string;
  readonly FeedbackValue: string;
}

export interface AdminUpdateDeviceStatus {
  readonly UserPoolId: string;
  readonly Username: string;
  readonly DeviceKey: string;
  readonly DeviceRememberedStatus?: string;
}

export interface AdminUpdateUserAttributes {
  readonly UserPoolId: string;
  readonly Username: string;
  readonly UserAttributes: [];
  readonly ClientMetadata?: {[key: string]: any};
}

export interface AdminUserGlobalSignOut {
  readonly UserPoolId: string;
  readonly Username: string;
}

export interface AssociateSoftwareToken {
  readonly AccessToken?: string;
  readonly Session?: string;
}

export interface ChangePassword {
  readonly PreviousPassword: string;
  readonly ProposedPassword: string;
  readonly AccessToken: string;
}

export interface ConfirmDevice {
  readonly AccessToken: string;
  readonly DeviceKey: string;
  readonly DeviceSecretVerifierConfig?: DeviceSecretVerifierConfigType;
  readonly DeviceName?: string;
}

export interface ConfirmForgotPassword {
  readonly ClientId: string;
  readonly SecretHash?: string;
  readonly Username: string;
  readonly ConfirmationCode: string;
  readonly Password: string;
  readonly AnalyticsMetadata?: AnalyticsMetadataType;
  readonly UserContextData?: UserContextDataType;
  readonly ClientMetadata?: {[key: string]: any};
}

export interface ConfirmSignUp {
  readonly ClientId: string;
  readonly SecretHash?: string;
  readonly Username: string;
  readonly ConfirmationCode: string;
  readonly ForceAliasCreation?: boolean;
  readonly AnalyticsMetadata?: AnalyticsMetadataType;
  readonly UserContextData?: UserContextDataType;
  readonly ClientMetadata?: {[key: string]: any};
}

export interface CreateGroup {
  readonly GroupName: string;
  readonly UserPoolId: string;
  readonly Description?: string;
  readonly RoleArn?: string;
  readonly Precedence?: number;
}

export interface CreateIdentityProvider {
  readonly UserPoolId: string;
  readonly ProviderName: string;
  readonly ProviderType: string;
  readonly ProviderDetails: {[key: string]: any};
  readonly AttributeMapping?: {[key: string]: any};
  readonly IdpIdentifiers?: [];
}

export interface CreateResourceServer {
  readonly UserPoolId: string;
  readonly Identifier: string;
  readonly Name: string;
  readonly Scopes?: [];
}

export interface CreateUserImportJob {
  readonly JobName: string;
  readonly UserPoolId: string;
  readonly CloudWatchLogsRoleArn: string;
}

export interface CreateUserPool {
  readonly PoolName: string;
  readonly Policies?: UserPoolPolicyType;
  readonly LambdaConfig?: LambdaConfigType;
  readonly AutoVerifiedAttributes?: [];
  readonly AliasAttributes?: [];
  readonly UsernameAttributes?: [];
  readonly SmsVerificationMessage?: string;
  readonly EmailVerificationMessage?: string;
  readonly EmailVerificationSubject?: string;
  readonly VerificationMessageTemplate?: VerificationMessageTemplateType;
  readonly SmsAuthenticationMessage?: string;
  readonly MfaConfiguration?: string;
  readonly DeviceConfiguration?: DeviceConfigurationType;
  readonly EmailConfiguration?: EmailConfigurationType;
  readonly SmsConfiguration?: SmsConfigurationType;
  readonly UserPoolTags?: {[key: string]: any};
  readonly AdminCreateUserConfig?: AdminCreateUserConfigType;
  readonly Schema?: [];
  readonly UserPoolAddOns?: UserPoolAddOnsType;
  readonly UsernameConfiguration?: UsernameConfigurationType;
  readonly AccountRecoverySetting?: AccountRecoverySettingType;
}

export interface CreateUserPoolClient {
  readonly UserPoolId: string;
  readonly ClientName: string;
  readonly GenerateSecret?: boolean;
  readonly RefreshTokenValidity?: number;
  readonly AccessTokenValidity?: number;
  readonly IdTokenValidity?: number;
  readonly TokenValidityUnits?: TokenValidityUnitsType;
  readonly ReadAttributes?: [];
  readonly WriteAttributes?: [];
  readonly ExplicitAuthFlows?: [];
  readonly SupportedIdentityProviders?: [];
  readonly CallbackURLs?: [];
  readonly LogoutURLs?: [];
  readonly DefaultRedirectURI?: string;
  readonly AllowedOAuthFlows?: [];
  readonly AllowedOAuthScopes?: [];
  readonly AllowedOAuthFlowsUserPoolClient?: boolean;
  readonly AnalyticsConfiguration?: AnalyticsConfigurationType;
  readonly PreventUserExistenceErrors?: string;
  readonly EnableTokenRevocation?: boolean;
}

export interface CreateUserPoolDomain {
  readonly Domain: string;
  readonly UserPoolId: string;
  readonly CustomDomainConfig?: CustomDomainConfigType;
}

export interface DeleteGroup {
  readonly GroupName: string;
  readonly UserPoolId: string;
}

export interface DeleteIdentityProvider {
  readonly UserPoolId: string;
  readonly ProviderName: string;
}

export interface DeleteResourceServer {
  readonly UserPoolId: string;
  readonly Identifier: string;
}

export interface DeleteUser {
  readonly AccessToken: string;
}

export interface DeleteUserAttributes {
  readonly UserAttributeNames: [];
  readonly AccessToken: string;
}

export interface DeleteUserPool {
  readonly UserPoolId: string;
}

export interface DeleteUserPoolClient {
  readonly UserPoolId: string;
  readonly ClientId: string;
}

export interface DeleteUserPoolDomain {
  readonly Domain: string;
  readonly UserPoolId: string;
}

export interface DescribeIdentityProvider {
  readonly UserPoolId: string;
  readonly ProviderName: string;
}

export interface DescribeResourceServer {
  readonly UserPoolId: string;
  readonly Identifier: string;
}

export interface DescribeRiskConfiguration {
  readonly UserPoolId: string;
  readonly ClientId?: string;
}

export interface DescribeUserImportJob {
  readonly UserPoolId: string;
  readonly JobId: string;
}

export interface DescribeUserPool {
  readonly UserPoolId: string;
}

export interface DescribeUserPoolClient {
  readonly UserPoolId: string;
  readonly ClientId: string;
}

export interface DescribeUserPoolDomain {
  readonly Domain: string;
}

export interface ForgetDevice {
  readonly AccessToken?: string;
  readonly DeviceKey: string;
}

export interface ForgotPassword {
  readonly ClientId: string;
  readonly SecretHash?: string;
  readonly UserContextData?: UserContextDataType;
  readonly Username: string;
  readonly AnalyticsMetadata?: AnalyticsMetadataType;
  readonly ClientMetadata?: {[key: string]: any};
}

export interface GetCSVHeader {
  readonly UserPoolId: string;
}

export interface GetDevice {
  readonly DeviceKey: string;
  readonly AccessToken?: string;
}

export interface GetGroup {
  readonly GroupName: string;
  readonly UserPoolId: string;
}

export interface GetIdentityProviderByIdentifier {
  readonly UserPoolId: string;
  readonly IdpIdentifier: string;
}

export interface GetSigningCertificate {
  readonly UserPoolId: string;
}

export interface GetUICustomization {
  readonly UserPoolId: string;
  readonly ClientId?: string;
}

export interface GetUser {
  readonly AccessToken: string;
}

export interface GetUserAttributeVerificationCode {
  readonly AccessToken: string;
  readonly AttributeName: string;
  readonly ClientMetadata?: {[key: string]: any};
}

export interface GetUserPoolMfaConfig {
  readonly UserPoolId: string;
}

export interface GlobalSignOut {
  readonly AccessToken: string;
}

export interface InitiateAuth {
  readonly AuthFlow: string;
  readonly AuthParameters?: {[key: string]: any};
  readonly ClientMetadata?: {[key: string]: any};
  readonly ClientId: string;
  readonly AnalyticsMetadata?: AnalyticsMetadataType;
  readonly UserContextData?: UserContextDataType;
}

export interface ListDevices {
  readonly AccessToken: string;
  readonly Limit?: number;
  readonly PaginationToken?: string;
}

export interface ListGroups {
  readonly UserPoolId: string;
  readonly Limit?: number;
  readonly NextToken?: string;
}

export interface ListIdentityProviders {
  readonly UserPoolId: string;
  readonly MaxResults?: number;
  readonly NextToken?: string;
}

export interface ListResourceServers {
  readonly UserPoolId: string;
  readonly MaxResults?: number;
  readonly NextToken?: string;
}

export interface ListTagsForResource {
  readonly ResourceArn: string;
}

export interface ListUserImportJobs {
  readonly UserPoolId: string;
  readonly MaxResults: number;
  readonly PaginationToken?: string;
}

export interface ListUserPoolClients {
  readonly UserPoolId: string;
  readonly MaxResults?: number;
  readonly NextToken?: string;
}

export interface ListUserPools {
  readonly NextToken?: string;
  readonly MaxResults: number;
}

export interface ListUsers {
  readonly UserPoolId: string;
  readonly AttributesToGet?: [];
  readonly Limit?: number;
  readonly PaginationToken?: string;
  readonly Filter?: string;
}

export interface ListUsersInGroup {
  readonly UserPoolId: string;
  readonly GroupName: string;
  readonly Limit?: number;
  readonly NextToken?: string;
}

export interface ResendConfirmationCode {
  readonly ClientId: string;
  readonly SecretHash?: string;
  readonly UserContextData?: UserContextDataType;
  readonly Username: string;
  readonly AnalyticsMetadata?: AnalyticsMetadataType;
  readonly ClientMetadata?: {[key: string]: any};
}

export interface RespondToAuthChallenge {
  readonly ClientId: string;
  readonly ChallengeName: string;
  readonly Session?: string;
  readonly ChallengeResponses?: {[key: string]: any};
  readonly AnalyticsMetadata?: AnalyticsMetadataType;
  readonly UserContextData?: UserContextDataType;
  readonly ClientMetadata?: {[key: string]: any};
}

export interface RevokeToken {
  readonly Token: string;
  readonly ClientId: string;
  readonly ClientSecret?: string;
}

export interface SetRiskConfiguration {
  readonly UserPoolId: string;
  readonly ClientId?: string;
  readonly CompromisedCredentialsRiskConfiguration?: CompromisedCredentialsRiskConfigurationType;
  readonly AccountTakeoverRiskConfiguration?: AccountTakeoverRiskConfigurationType;
  readonly RiskExceptionConfiguration?: RiskExceptionConfigurationType;
}

export interface SetUICustomization {
  readonly UserPoolId: string;
  readonly ClientId?: string;
  readonly CSS?: string;
  readonly ImageFile?: unknown;
}

export interface SetUserMFAPreference {
  readonly SMSMfaSettings?: SMSMfaSettingsType;
  readonly SoftwareTokenMfaSettings?: SoftwareTokenMfaSettingsType;
  readonly AccessToken: string;
}

export interface SetUserPoolMfaConfig {
  readonly UserPoolId: string;
  readonly SmsMfaConfiguration?: SmsMfaConfigType;
  readonly SoftwareTokenMfaConfiguration?: SoftwareTokenMfaConfigType;
  readonly MfaConfiguration?: string;
}

export interface SetUserSettings {
  readonly AccessToken: string;
  readonly MFAOptions: [];
}

export interface SignUp {
  readonly ClientId: string;
  readonly SecretHash?: string;
  readonly Username: string;
  readonly Password: string;
  readonly UserAttributes?: [];
  readonly ValidationData?: [];
  readonly AnalyticsMetadata?: AnalyticsMetadataType;
  readonly UserContextData?: UserContextDataType;
  readonly ClientMetadata?: {[key: string]: any};
}

export interface StartUserImportJob {
  readonly UserPoolId: string;
  readonly JobId: string;
}

export interface StopUserImportJob {
  readonly UserPoolId: string;
  readonly JobId: string;
}

export interface TagResource {
  readonly ResourceArn: string;
  readonly Tags: {[key: string]: any};
}

export interface UntagResource {
  readonly ResourceArn: string;
  readonly TagKeys: [];
}

export interface UpdateAuthEventFeedback {
  readonly UserPoolId: string;
  readonly Username: string;
  readonly EventId: string;
  readonly FeedbackToken: string;
  readonly FeedbackValue: string;
}

export interface UpdateDeviceStatus {
  readonly AccessToken: string;
  readonly DeviceKey: string;
  readonly DeviceRememberedStatus?: string;
}

export interface UpdateGroup {
  readonly GroupName: string;
  readonly UserPoolId: string;
  readonly Description?: string;
  readonly RoleArn?: string;
  readonly Precedence?: number;
}

export interface UpdateIdentityProvider {
  readonly UserPoolId: string;
  readonly ProviderName: string;
  readonly ProviderDetails?: {[key: string]: any};
  readonly AttributeMapping?: {[key: string]: any};
  readonly IdpIdentifiers?: [];
}

export interface UpdateResourceServer {
  readonly UserPoolId: string;
  readonly Identifier: string;
  readonly Name: string;
  readonly Scopes?: [];
}

export interface UpdateUserAttributes {
  readonly UserAttributes: [];
  readonly AccessToken: string;
  readonly ClientMetadata?: {[key: string]: any};
}

export interface UpdateUserPool {
  readonly UserPoolId: string;
  readonly Policies?: UserPoolPolicyType;
  readonly LambdaConfig?: LambdaConfigType;
  readonly AutoVerifiedAttributes?: [];
  readonly SmsVerificationMessage?: string;
  readonly EmailVerificationMessage?: string;
  readonly EmailVerificationSubject?: string;
  readonly VerificationMessageTemplate?: VerificationMessageTemplateType;
  readonly SmsAuthenticationMessage?: string;
  readonly MfaConfiguration?: string;
  readonly DeviceConfiguration?: DeviceConfigurationType;
  readonly EmailConfiguration?: EmailConfigurationType;
  readonly SmsConfiguration?: SmsConfigurationType;
  readonly UserPoolTags?: {[key: string]: any};
  readonly AdminCreateUserConfig?: AdminCreateUserConfigType;
  readonly UserPoolAddOns?: UserPoolAddOnsType;
  readonly AccountRecoverySetting?: AccountRecoverySettingType;
}

export interface UpdateUserPoolClient {
  readonly UserPoolId: string;
  readonly ClientId: string;
  readonly ClientName?: string;
  readonly RefreshTokenValidity?: number;
  readonly AccessTokenValidity?: number;
  readonly IdTokenValidity?: number;
  readonly TokenValidityUnits?: TokenValidityUnitsType;
  readonly ReadAttributes?: [];
  readonly WriteAttributes?: [];
  readonly ExplicitAuthFlows?: [];
  readonly SupportedIdentityProviders?: [];
  readonly CallbackURLs?: [];
  readonly LogoutURLs?: [];
  readonly DefaultRedirectURI?: string;
  readonly AllowedOAuthFlows?: [];
  readonly AllowedOAuthScopes?: [];
  readonly AllowedOAuthFlowsUserPoolClient?: boolean;
  readonly AnalyticsConfiguration?: AnalyticsConfigurationType;
  readonly PreventUserExistenceErrors?: string;
  readonly EnableTokenRevocation?: boolean;
}

export interface UpdateUserPoolDomain {
  readonly Domain: string;
  readonly UserPoolId: string;
  readonly CustomDomainConfig: CustomDomainConfigType;
}

export interface VerifySoftwareToken {
  readonly AccessToken?: string;
  readonly Session?: string;
  readonly UserCode: string;
  readonly FriendlyDeviceName?: string;
}

export interface VerifyUserAttribute {
  readonly AccessToken: string;
  readonly AttributeName: string;
  readonly Code: string;
}

export interface AccountRecoverySettingType {
  readonly RecoveryMechanisms?: [];
}

export interface AccountTakeoverActionType {
  readonly Notify: boolean;
  readonly EventAction: string;
}

export interface AccountTakeoverActionsType {
  readonly LowAction?: AccountTakeoverActionType;
  readonly MediumAction?: AccountTakeoverActionType;
  readonly HighAction?: AccountTakeoverActionType;
}

export interface AccountTakeoverRiskConfigurationType {
  readonly NotifyConfiguration?: NotifyConfigurationType;
  readonly Actions: AccountTakeoverActionsType;
}

export interface AddCustomAttributesRequest {
  readonly UserPoolId: string;
  readonly CustomAttributes: [];
}

export interface AddCustomAttributesResponse {
}

export interface AdminAddUserToGroupRequest {
  readonly UserPoolId: string;
  readonly Username: string;
  readonly GroupName: string;
}

export interface AdminConfirmSignUpRequest {
  readonly UserPoolId: string;
  readonly Username: string;
  readonly ClientMetadata?: {[key: string]: any};
}

export interface AdminConfirmSignUpResponse {
}

export interface AdminCreateUserConfigType {
  readonly AllowAdminCreateUserOnly?: boolean;
  readonly UnusedAccountValidityDays?: number;
  readonly InviteMessageTemplate?: MessageTemplateType;
}

export interface AdminCreateUserRequest {
  readonly UserPoolId: string;
  readonly Username: string;
  readonly UserAttributes?: [];
  readonly ValidationData?: [];
  readonly TemporaryPassword?: string;
  readonly ForceAliasCreation?: boolean;
  readonly MessageAction?: string;
  readonly DesiredDeliveryMediums?: [];
  readonly ClientMetadata?: {[key: string]: any};
}

export interface AdminCreateUserResponse {
  readonly User?: UserType;
}

export interface AdminDeleteUserAttributesRequest {
  readonly UserPoolId: string;
  readonly Username: string;
  readonly UserAttributeNames: [];
}

export interface AdminDeleteUserAttributesResponse {
}

export interface AdminDeleteUserRequest {
  readonly UserPoolId: string;
  readonly Username: string;
}

export interface AdminDisableProviderForUserRequest {
  readonly UserPoolId: string;
  readonly User: ProviderUserIdentifierType;
}

export interface AdminDisableProviderForUserResponse {
}

export interface AdminDisableUserRequest {
  readonly UserPoolId: string;
  readonly Username: string;
}

export interface AdminDisableUserResponse {
}

export interface AdminEnableUserRequest {
  readonly UserPoolId: string;
  readonly Username: string;
}

export interface AdminEnableUserResponse {
}

export interface AdminForgetDeviceRequest {
  readonly UserPoolId: string;
  readonly Username: string;
  readonly DeviceKey: string;
}

export interface AdminGetDeviceRequest {
  readonly DeviceKey: string;
  readonly UserPoolId: string;
  readonly Username: string;
}

export interface AdminGetDeviceResponse {
  readonly Device: DeviceType;
}

export interface AdminGetUserRequest {
  readonly UserPoolId: string;
  readonly Username: string;
}

export interface AdminGetUserResponse {
  readonly Username: string;
  readonly UserAttributes?: [];
  readonly UserCreateDate?: Date;
  readonly UserLastModifiedDate?: Date;
  readonly Enabled?: boolean;
  readonly UserStatus?: string;
  readonly MFAOptions?: [];
  readonly PreferredMfaSetting?: string;
  readonly UserMFASettingList?: [];
}

export interface AdminInitiateAuthRequest {
  readonly UserPoolId: string;
  readonly ClientId: string;
  readonly AuthFlow: string;
  readonly AuthParameters?: {[key: string]: any};
  readonly ClientMetadata?: {[key: string]: any};
  readonly AnalyticsMetadata?: AnalyticsMetadataType;
  readonly ContextData?: ContextDataType;
}

export interface AdminInitiateAuthResponse {
  readonly ChallengeName?: string;
  readonly Session?: string;
  readonly ChallengeParameters?: {[key: string]: any};
  readonly AuthenticationResult?: AuthenticationResultType;
}

export interface AdminLinkProviderForUserRequest {
  readonly UserPoolId: string;
  readonly DestinationUser: ProviderUserIdentifierType;
  readonly SourceUser: ProviderUserIdentifierType;
}

export interface AdminLinkProviderForUserResponse {
}

export interface AdminListDevicesRequest {
  readonly UserPoolId: string;
  readonly Username: string;
  readonly Limit?: number;
  readonly PaginationToken?: string;
}

export interface AdminListDevicesResponse {
  readonly Devices?: [];
  readonly PaginationToken?: string;
}

export interface AdminListGroupsForUserRequest {
  readonly Username: string;
  readonly UserPoolId: string;
  readonly Limit?: number;
  readonly NextToken?: string;
}

export interface AdminListGroupsForUserResponse {
  readonly Groups?: [];
  readonly NextToken?: string;
}

export interface AdminListUserAuthEventsRequest {
  readonly UserPoolId: string;
  readonly Username: string;
  readonly MaxResults?: number;
  readonly NextToken?: string;
}

export interface AdminListUserAuthEventsResponse {
  readonly AuthEvents?: [];
  readonly NextToken?: string;
}

export interface AdminRemoveUserFromGroupRequest {
  readonly UserPoolId: string;
  readonly Username: string;
  readonly GroupName: string;
}

export interface AdminResetUserPasswordRequest {
  readonly UserPoolId: string;
  readonly Username: string;
  readonly ClientMetadata?: {[key: string]: any};
}

export interface AdminResetUserPasswordResponse {
}

export interface AdminRespondToAuthChallengeRequest {
  readonly UserPoolId: string;
  readonly ClientId: string;
  readonly ChallengeName: string;
  readonly ChallengeResponses?: {[key: string]: any};
  readonly Session?: string;
  readonly AnalyticsMetadata?: AnalyticsMetadataType;
  readonly ContextData?: ContextDataType;
  readonly ClientMetadata?: {[key: string]: any};
}

export interface AdminRespondToAuthChallengeResponse {
  readonly ChallengeName?: string;
  readonly Session?: string;
  readonly ChallengeParameters?: {[key: string]: any};
  readonly AuthenticationResult?: AuthenticationResultType;
}

export interface AdminSetUserMFAPreferenceRequest {
  readonly SMSMfaSettings?: SMSMfaSettingsType;
  readonly SoftwareTokenMfaSettings?: SoftwareTokenMfaSettingsType;
  readonly Username: string;
  readonly UserPoolId: string;
}

export interface AdminSetUserMFAPreferenceResponse {
}

export interface AdminSetUserPasswordRequest {
  readonly UserPoolId: string;
  readonly Username: string;
  readonly Password: string;
  readonly Permanent?: boolean;
}

export interface AdminSetUserPasswordResponse {
}

export interface AdminSetUserSettingsRequest {
  readonly UserPoolId: string;
  readonly Username: string;
  readonly MFAOptions: [];
}

export interface AdminSetUserSettingsResponse {
}

export interface AdminUpdateAuthEventFeedbackRequest {
  readonly UserPoolId: string;
  readonly Username: string;
  readonly EventId: string;
  readonly FeedbackValue: string;
}

export interface AdminUpdateAuthEventFeedbackResponse {
}

export interface AdminUpdateDeviceStatusRequest {
  readonly UserPoolId: string;
  readonly Username: string;
  readonly DeviceKey: string;
  readonly DeviceRememberedStatus?: string;
}

export interface AdminUpdateDeviceStatusResponse {
}

export interface AdminUpdateUserAttributesRequest {
  readonly UserPoolId: string;
  readonly Username: string;
  readonly UserAttributes: [];
  readonly ClientMetadata?: {[key: string]: any};
}

export interface AdminUpdateUserAttributesResponse {
}

export interface AdminUserGlobalSignOutRequest {
  readonly UserPoolId: string;
  readonly Username: string;
}

export interface AdminUserGlobalSignOutResponse {
}

export interface AliasExistsException {
  readonly message?: string;
}

export interface AnalyticsConfigurationType {
  readonly ApplicationId?: string;
  readonly ApplicationArn?: string;
  readonly RoleArn?: string;
  readonly ExternalId?: string;
  readonly UserDataShared?: boolean;
}

export interface AnalyticsMetadataType {
  readonly AnalyticsEndpointId?: string;
}

export interface AssociateSoftwareTokenRequest {
  readonly AccessToken?: string;
  readonly Session?: string;
}

export interface AssociateSoftwareTokenResponse {
  readonly SecretCode?: string;
  readonly Session?: string;
}

export interface AttributeType {
  readonly Name: string;
  readonly Value?: string;
}

export interface AuthEventType {
  readonly EventId?: string;
  readonly EventType?: string;
  readonly CreationDate?: Date;
  readonly EventResponse?: string;
  readonly EventRisk?: EventRiskType;
  readonly ChallengeResponses?: [];
  readonly EventContextData?: EventContextDataType;
  readonly EventFeedback?: EventFeedbackType;
}

export interface AuthenticationResultType {
  readonly AccessToken?: string;
  readonly ExpiresIn?: number;
  readonly TokenType?: string;
  readonly RefreshToken?: string;
  readonly IdToken?: string;
  readonly NewDeviceMetadata?: NewDeviceMetadataType;
}

export interface ChallengeResponseType {
  readonly ChallengeName?: string;
  readonly ChallengeResponse?: string;
}

export interface ChangePasswordRequest {
  readonly PreviousPassword: string;
  readonly ProposedPassword: string;
  readonly AccessToken: string;
}

export interface ChangePasswordResponse {
}

export interface CodeDeliveryDetailsType {
  readonly Destination?: string;
  readonly DeliveryMedium?: string;
  readonly AttributeName?: string;
}

export interface CodeDeliveryFailureException {
  readonly message?: string;
}

export interface CodeMismatchException {
  readonly message?: string;
}

export interface CompromisedCredentialsActionsType {
  readonly EventAction: string;
}

export interface CompromisedCredentialsRiskConfigurationType {
  readonly EventFilter?: [];
  readonly Actions: CompromisedCredentialsActionsType;
}

export interface ConcurrentModificationException {
  readonly message?: string;
}

export interface ConfirmDeviceRequest {
  readonly AccessToken: string;
  readonly DeviceKey: string;
  readonly DeviceSecretVerifierConfig?: DeviceSecretVerifierConfigType;
  readonly DeviceName?: string;
}

export interface ConfirmDeviceResponse {
  readonly UserConfirmationNecessary?: boolean;
}

export interface ConfirmForgotPasswordRequest {
  readonly ClientId: string;
  readonly SecretHash?: string;
  readonly Username: string;
  readonly ConfirmationCode: string;
  readonly Password: string;
  readonly AnalyticsMetadata?: AnalyticsMetadataType;
  readonly UserContextData?: UserContextDataType;
  readonly ClientMetadata?: {[key: string]: any};
}

export interface ConfirmForgotPasswordResponse {
}

export interface ConfirmSignUpRequest {
  readonly ClientId: string;
  readonly SecretHash?: string;
  readonly Username: string;
  readonly ConfirmationCode: string;
  readonly ForceAliasCreation?: boolean;
  readonly AnalyticsMetadata?: AnalyticsMetadataType;
  readonly UserContextData?: UserContextDataType;
  readonly ClientMetadata?: {[key: string]: any};
}

export interface ConfirmSignUpResponse {
}

export interface ContextDataType {
  readonly IpAddress: string;
  readonly ServerName: string;
  readonly ServerPath: string;
  readonly HttpHeaders: [];
  readonly EncodedData?: string;
}

export interface CreateGroupRequest {
  readonly GroupName: string;
  readonly UserPoolId: string;
  readonly Description?: string;
  readonly RoleArn?: string;
  readonly Precedence?: number;
}

export interface CreateGroupResponse {
  readonly Group?: GroupType;
}

export interface CreateIdentityProviderRequest {
  readonly UserPoolId: string;
  readonly ProviderName: string;
  readonly ProviderType: string;
  readonly ProviderDetails: {[key: string]: any};
  readonly AttributeMapping?: {[key: string]: any};
  readonly IdpIdentifiers?: [];
}

export interface CreateIdentityProviderResponse {
  readonly IdentityProvider: IdentityProviderType;
}

export interface CreateResourceServerRequest {
  readonly UserPoolId: string;
  readonly Identifier: string;
  readonly Name: string;
  readonly Scopes?: [];
}

export interface CreateResourceServerResponse {
  readonly ResourceServer: ResourceServerType;
}

export interface CreateUserImportJobRequest {
  readonly JobName: string;
  readonly UserPoolId: string;
  readonly CloudWatchLogsRoleArn: string;
}

export interface CreateUserImportJobResponse {
  readonly UserImportJob?: UserImportJobType;
}

export interface CreateUserPoolClientRequest {
  readonly UserPoolId: string;
  readonly ClientName: string;
  readonly GenerateSecret?: boolean;
  readonly RefreshTokenValidity?: number;
  readonly AccessTokenValidity?: number;
  readonly IdTokenValidity?: number;
  readonly TokenValidityUnits?: TokenValidityUnitsType;
  readonly ReadAttributes?: [];
  readonly WriteAttributes?: [];
  readonly ExplicitAuthFlows?: [];
  readonly SupportedIdentityProviders?: [];
  readonly CallbackURLs?: [];
  readonly LogoutURLs?: [];
  readonly DefaultRedirectURI?: string;
  readonly AllowedOAuthFlows?: [];
  readonly AllowedOAuthScopes?: [];
  readonly AllowedOAuthFlowsUserPoolClient?: boolean;
  readonly AnalyticsConfiguration?: AnalyticsConfigurationType;
  readonly PreventUserExistenceErrors?: string;
  readonly EnableTokenRevocation?: boolean;
}

export interface CreateUserPoolClientResponse {
  readonly UserPoolClient?: UserPoolClientType;
}

export interface CreateUserPoolDomainRequest {
  readonly Domain: string;
  readonly UserPoolId: string;
  readonly CustomDomainConfig?: CustomDomainConfigType;
}

export interface CreateUserPoolDomainResponse {
  readonly CloudFrontDomain?: string;
}

export interface CreateUserPoolRequest {
  readonly PoolName: string;
  readonly Policies?: UserPoolPolicyType;
  readonly LambdaConfig?: LambdaConfigType;
  readonly AutoVerifiedAttributes?: [];
  readonly AliasAttributes?: [];
  readonly UsernameAttributes?: [];
  readonly SmsVerificationMessage?: string;
  readonly EmailVerificationMessage?: string;
  readonly EmailVerificationSubject?: string;
  readonly VerificationMessageTemplate?: VerificationMessageTemplateType;
  readonly SmsAuthenticationMessage?: string;
  readonly MfaConfiguration?: string;
  readonly DeviceConfiguration?: DeviceConfigurationType;
  readonly EmailConfiguration?: EmailConfigurationType;
  readonly SmsConfiguration?: SmsConfigurationType;
  readonly UserPoolTags?: {[key: string]: any};
  readonly AdminCreateUserConfig?: AdminCreateUserConfigType;
  readonly Schema?: [];
  readonly UserPoolAddOns?: UserPoolAddOnsType;
  readonly UsernameConfiguration?: UsernameConfigurationType;
  readonly AccountRecoverySetting?: AccountRecoverySettingType;
}

export interface CreateUserPoolResponse {
  readonly UserPool?: UserPoolType;
}

export interface CustomDomainConfigType {
  readonly CertificateArn: string;
}

export interface CustomEmailLambdaVersionConfigType {
  readonly LambdaVersion: string;
  readonly LambdaArn: string;
}

export interface CustomSMSLambdaVersionConfigType {
  readonly LambdaVersion: string;
  readonly LambdaArn: string;
}

export interface DeleteGroupRequest {
  readonly GroupName: string;
  readonly UserPoolId: string;
}

export interface DeleteIdentityProviderRequest {
  readonly UserPoolId: string;
  readonly ProviderName: string;
}

export interface DeleteResourceServerRequest {
  readonly UserPoolId: string;
  readonly Identifier: string;
}

export interface DeleteUserAttributesRequest {
  readonly UserAttributeNames: [];
  readonly AccessToken: string;
}

export interface DeleteUserAttributesResponse {
}

export interface DeleteUserPoolClientRequest {
  readonly UserPoolId: string;
  readonly ClientId: string;
}

export interface DeleteUserPoolDomainRequest {
  readonly Domain: string;
  readonly UserPoolId: string;
}

export interface DeleteUserPoolDomainResponse {
}

export interface DeleteUserPoolRequest {
  readonly UserPoolId: string;
}

export interface DeleteUserRequest {
  readonly AccessToken: string;
}

export interface DescribeIdentityProviderRequest {
  readonly UserPoolId: string;
  readonly ProviderName: string;
}

export interface DescribeIdentityProviderResponse {
  readonly IdentityProvider: IdentityProviderType;
}

export interface DescribeResourceServerRequest {
  readonly UserPoolId: string;
  readonly Identifier: string;
}

export interface DescribeResourceServerResponse {
  readonly ResourceServer: ResourceServerType;
}

export interface DescribeRiskConfigurationRequest {
  readonly UserPoolId: string;
  readonly ClientId?: string;
}

export interface DescribeRiskConfigurationResponse {
  readonly RiskConfiguration: RiskConfigurationType;
}

export interface DescribeUserImportJobRequest {
  readonly UserPoolId: string;
  readonly JobId: string;
}

export interface DescribeUserImportJobResponse {
  readonly UserImportJob?: UserImportJobType;
}

export interface DescribeUserPoolClientRequest {
  readonly UserPoolId: string;
  readonly ClientId: string;
}

export interface DescribeUserPoolClientResponse {
  readonly UserPoolClient?: UserPoolClientType;
}

export interface DescribeUserPoolDomainRequest {
  readonly Domain: string;
}

export interface DescribeUserPoolDomainResponse {
  readonly DomainDescription?: DomainDescriptionType;
}

export interface DescribeUserPoolRequest {
  readonly UserPoolId: string;
}

export interface DescribeUserPoolResponse {
  readonly UserPool?: UserPoolType;
}

export interface DeviceConfigurationType {
  readonly ChallengeRequiredOnNewDevice?: boolean;
  readonly DeviceOnlyRememberedOnUserPrompt?: boolean;
}

export interface DeviceSecretVerifierConfigType {
  readonly PasswordVerifier?: string;
  readonly Salt?: string;
}

export interface DeviceType {
  readonly DeviceKey?: string;
  readonly DeviceAttributes?: [];
  readonly DeviceCreateDate?: Date;
  readonly DeviceLastModifiedDate?: Date;
  readonly DeviceLastAuthenticatedDate?: Date;
}

export interface DomainDescriptionType {
  readonly UserPoolId?: string;
  readonly AWSAccountId?: string;
  readonly Domain?: string;
  readonly S3Bucket?: string;
  readonly CloudFrontDistribution?: string;
  readonly Version?: string;
  readonly Status?: string;
  readonly CustomDomainConfig?: CustomDomainConfigType;
}

export interface DuplicateProviderException {
  readonly message?: string;
}

export interface EmailConfigurationType {
  readonly SourceArn?: string;
  readonly ReplyToEmailAddress?: string;
  readonly EmailSendingAccount?: string;
  readonly From?: string;
  readonly ConfigurationSet?: string;
}

export interface EnableSoftwareTokenMFAException {
  readonly message?: string;
}

export interface EventContextDataType {
  readonly IpAddress?: string;
  readonly DeviceName?: string;
  readonly Timezone?: string;
  readonly City?: string;
  readonly Country?: string;
}

export interface EventFeedbackType {
  readonly FeedbackValue: string;
  readonly Provider: string;
  readonly FeedbackDate?: Date;
}

export interface EventRiskType {
  readonly RiskDecision?: string;
  readonly RiskLevel?: string;
  readonly CompromisedCredentialsDetected?: boolean;
}

export interface ExpiredCodeException {
  readonly message?: string;
}

export interface ForgetDeviceRequest {
  readonly AccessToken?: string;
  readonly DeviceKey: string;
}

export interface ForgotPasswordRequest {
  readonly ClientId: string;
  readonly SecretHash?: string;
  readonly UserContextData?: UserContextDataType;
  readonly Username: string;
  readonly AnalyticsMetadata?: AnalyticsMetadataType;
  readonly ClientMetadata?: {[key: string]: any};
}

export interface ForgotPasswordResponse {
  readonly CodeDeliveryDetails?: CodeDeliveryDetailsType;
}

export interface GetCSVHeaderRequest {
  readonly UserPoolId: string;
}

export interface GetCSVHeaderResponse {
  readonly UserPoolId?: string;
  readonly CSVHeader?: [];
}

export interface GetDeviceRequest {
  readonly DeviceKey: string;
  readonly AccessToken?: string;
}

export interface GetDeviceResponse {
  readonly Device: DeviceType;
}

export interface GetGroupRequest {
  readonly GroupName: string;
  readonly UserPoolId: string;
}

export interface GetGroupResponse {
  readonly Group?: GroupType;
}

export interface GetIdentityProviderByIdentifierRequest {
  readonly UserPoolId: string;
  readonly IdpIdentifier: string;
}

export interface GetIdentityProviderByIdentifierResponse {
  readonly IdentityProvider: IdentityProviderType;
}

export interface GetSigningCertificateRequest {
  readonly UserPoolId: string;
}

export interface GetSigningCertificateResponse {
  readonly Certificate?: string;
}

export interface GetUICustomizationRequest {
  readonly UserPoolId: string;
  readonly ClientId?: string;
}

export interface GetUICustomizationResponse {
  readonly UICustomization: UICustomizationType;
}

export interface GetUserAttributeVerificationCodeRequest {
  readonly AccessToken: string;
  readonly AttributeName: string;
  readonly ClientMetadata?: {[key: string]: any};
}

export interface GetUserAttributeVerificationCodeResponse {
  readonly CodeDeliveryDetails?: CodeDeliveryDetailsType;
}

export interface GetUserPoolMfaConfigRequest {
  readonly UserPoolId: string;
}

export interface GetUserPoolMfaConfigResponse {
  readonly SmsMfaConfiguration?: SmsMfaConfigType;
  readonly SoftwareTokenMfaConfiguration?: SoftwareTokenMfaConfigType;
  readonly MfaConfiguration?: string;
}

export interface GetUserRequest {
  readonly AccessToken: string;
}

export interface GetUserResponse {
  readonly Username: string;
  readonly UserAttributes: [];
  readonly MFAOptions?: [];
  readonly PreferredMfaSetting?: string;
  readonly UserMFASettingList?: [];
}

export interface GlobalSignOutRequest {
  readonly AccessToken: string;
}

export interface GlobalSignOutResponse {
}

export interface GroupExistsException {
  readonly message?: string;
}

export interface GroupType {
  readonly GroupName?: string;
  readonly UserPoolId?: string;
  readonly Description?: string;
  readonly RoleArn?: string;
  readonly Precedence?: number;
  readonly LastModifiedDate?: Date;
  readonly CreationDate?: Date;
}

export interface HttpHeader {
  readonly headerName?: string;
  readonly headerValue?: string;
}

export interface IdentityProviderType {
  readonly UserPoolId?: string;
  readonly ProviderName?: string;
  readonly ProviderType?: string;
  readonly ProviderDetails?: {[key: string]: any};
  readonly AttributeMapping?: {[key: string]: any};
  readonly IdpIdentifiers?: [];
  readonly LastModifiedDate?: Date;
  readonly CreationDate?: Date;
}

export interface InitiateAuthRequest {
  readonly AuthFlow: string;
  readonly AuthParameters?: {[key: string]: any};
  readonly ClientMetadata?: {[key: string]: any};
  readonly ClientId: string;
  readonly AnalyticsMetadata?: AnalyticsMetadataType;
  readonly UserContextData?: UserContextDataType;
}

export interface InitiateAuthResponse {
  readonly ChallengeName?: string;
  readonly Session?: string;
  readonly ChallengeParameters?: {[key: string]: any};
  readonly AuthenticationResult?: AuthenticationResultType;
}

export interface InternalErrorException {
  readonly message?: string;
}

export interface InvalidEmailRoleAccessPolicyException {
  readonly message?: string;
}

export interface InvalidLambdaResponseException {
  readonly message?: string;
}

export interface InvalidOAuthFlowException {
  readonly message?: string;
}

export interface InvalidParameterException {
  readonly message?: string;
}

export interface InvalidPasswordException {
  readonly message?: string;
}

export interface InvalidSmsRoleAccessPolicyException {
  readonly message?: string;
}

export interface InvalidSmsRoleTrustRelationshipException {
  readonly message?: string;
}

export interface InvalidUserPoolConfigurationException {
  readonly message?: string;
}

export interface LambdaConfigType {
  readonly PreSignUp?: string;
  readonly CustomMessage?: string;
  readonly PostConfirmation?: string;
  readonly PreAuthentication?: string;
  readonly PostAuthentication?: string;
  readonly DefineAuthChallenge?: string;
  readonly CreateAuthChallenge?: string;
  readonly VerifyAuthChallengeResponse?: string;
  readonly PreTokenGeneration?: string;
  readonly UserMigration?: string;
  readonly CustomSMSSender?: CustomSMSLambdaVersionConfigType;
  readonly CustomEmailSender?: CustomEmailLambdaVersionConfigType;
  readonly KMSKeyID?: string;
}

export interface LimitExceededException {
  readonly message?: string;
}

export interface ListDevicesRequest {
  readonly AccessToken: string;
  readonly Limit?: number;
  readonly PaginationToken?: string;
}

export interface ListDevicesResponse {
  readonly Devices?: [];
  readonly PaginationToken?: string;
}

export interface ListGroupsRequest {
  readonly UserPoolId: string;
  readonly Limit?: number;
  readonly NextToken?: string;
}

export interface ListGroupsResponse {
  readonly Groups?: [];
  readonly NextToken?: string;
}

export interface ListIdentityProvidersRequest {
  readonly UserPoolId: string;
  readonly MaxResults?: number;
  readonly NextToken?: string;
}

export interface ListIdentityProvidersResponse {
  readonly Providers: [];
  readonly NextToken?: string;
}

export interface ListResourceServersRequest {
  readonly UserPoolId: string;
  readonly MaxResults?: number;
  readonly NextToken?: string;
}

export interface ListResourceServersResponse {
  readonly ResourceServers: [];
  readonly NextToken?: string;
}

export interface ListTagsForResourceRequest {
  readonly ResourceArn: string;
}

export interface ListTagsForResourceResponse {
  readonly Tags?: {[key: string]: any};
}

export interface ListUserImportJobsRequest {
  readonly UserPoolId: string;
  readonly MaxResults: number;
  readonly PaginationToken?: string;
}

export interface ListUserImportJobsResponse {
  readonly UserImportJobs?: [];
  readonly PaginationToken?: string;
}

export interface ListUserPoolClientsRequest {
  readonly UserPoolId: string;
  readonly MaxResults?: number;
  readonly NextToken?: string;
}

export interface ListUserPoolClientsResponse {
  readonly UserPoolClients?: [];
  readonly NextToken?: string;
}

export interface ListUserPoolsRequest {
  readonly NextToken?: string;
  readonly MaxResults: number;
}

export interface ListUserPoolsResponse {
  readonly UserPools?: [];
  readonly NextToken?: string;
}

export interface ListUsersInGroupRequest {
  readonly UserPoolId: string;
  readonly GroupName: string;
  readonly Limit?: number;
  readonly NextToken?: string;
}

export interface ListUsersInGroupResponse {
  readonly Users?: [];
  readonly NextToken?: string;
}

export interface ListUsersRequest {
  readonly UserPoolId: string;
  readonly AttributesToGet?: [];
  readonly Limit?: number;
  readonly PaginationToken?: string;
  readonly Filter?: string;
}

export interface ListUsersResponse {
  readonly Users?: [];
  readonly PaginationToken?: string;
}

export interface MFAMethodNotFoundException {
  readonly message?: string;
}

export interface MFAOptionType {
  readonly DeliveryMedium?: string;
  readonly AttributeName?: string;
}

export interface MessageTemplateType {
  readonly SMSMessage?: string;
  readonly EmailMessage?: string;
  readonly EmailSubject?: string;
}

export interface NewDeviceMetadataType {
  readonly DeviceKey?: string;
  readonly DeviceGroupKey?: string;
}

export interface NotAuthorizedException {
  readonly message?: string;
}

export interface NotifyConfigurationType {
  readonly From?: string;
  readonly ReplyTo?: string;
  readonly SourceArn: string;
  readonly BlockEmail?: NotifyEmailType;
  readonly NoActionEmail?: NotifyEmailType;
  readonly MfaEmail?: NotifyEmailType;
}

export interface NotifyEmailType {
  readonly Subject: string;
  readonly HtmlBody?: string;
  readonly TextBody?: string;
}

export interface NumberAttributeConstraintsType {
  readonly MinValue?: string;
  readonly MaxValue?: string;
}

export interface PasswordPolicyType {
  readonly MinimumLength?: number;
  readonly RequireUppercase?: boolean;
  readonly RequireLowercase?: boolean;
  readonly RequireNumbers?: boolean;
  readonly RequireSymbols?: boolean;
  readonly TemporaryPasswordValidityDays?: number;
}

export interface PasswordResetRequiredException {
  readonly message?: string;
}

export interface PreconditionNotMetException {
  readonly message?: string;
}

export interface ProviderDescription {
  readonly ProviderName?: string;
  readonly ProviderType?: string;
  readonly LastModifiedDate?: Date;
  readonly CreationDate?: Date;
}

export interface ProviderUserIdentifierType {
  readonly ProviderName?: string;
  readonly ProviderAttributeName?: string;
  readonly ProviderAttributeValue?: string;
}

export interface RecoveryOptionType {
  readonly Priority: number;
  readonly Name: string;
}

export interface ResendConfirmationCodeRequest {
  readonly ClientId: string;
  readonly SecretHash?: string;
  readonly UserContextData?: UserContextDataType;
  readonly Username: string;
  readonly AnalyticsMetadata?: AnalyticsMetadataType;
  readonly ClientMetadata?: {[key: string]: any};
}

export interface ResendConfirmationCodeResponse {
  readonly CodeDeliveryDetails?: CodeDeliveryDetailsType;
}

export interface ResourceNotFoundException {
  readonly message?: string;
}

export interface ResourceServerScopeType {
  readonly ScopeName: string;
  readonly ScopeDescription: string;
}

export interface ResourceServerType {
  readonly UserPoolId?: string;
  readonly Identifier?: string;
  readonly Name?: string;
  readonly Scopes?: [];
}

export interface RespondToAuthChallengeRequest {
  readonly ClientId: string;
  readonly ChallengeName: string;
  readonly Session?: string;
  readonly ChallengeResponses?: {[key: string]: any};
  readonly AnalyticsMetadata?: AnalyticsMetadataType;
  readonly UserContextData?: UserContextDataType;
  readonly ClientMetadata?: {[key: string]: any};
}

export interface RespondToAuthChallengeResponse {
  readonly ChallengeName?: string;
  readonly Session?: string;
  readonly ChallengeParameters?: {[key: string]: any};
  readonly AuthenticationResult?: AuthenticationResultType;
}

export interface RevokeTokenRequest {
  readonly Token: string;
  readonly ClientId: string;
  readonly ClientSecret?: string;
}

export interface RevokeTokenResponse {
}

export interface RiskConfigurationType {
  readonly UserPoolId?: string;
  readonly ClientId?: string;
  readonly CompromisedCredentialsRiskConfiguration?: CompromisedCredentialsRiskConfigurationType;
  readonly AccountTakeoverRiskConfiguration?: AccountTakeoverRiskConfigurationType;
  readonly RiskExceptionConfiguration?: RiskExceptionConfigurationType;
  readonly LastModifiedDate?: Date;
}

export interface RiskExceptionConfigurationType {
  readonly BlockedIPRangeList?: [];
  readonly SkippedIPRangeList?: [];
}

export interface SMSMfaSettingsType {
  readonly Enabled?: boolean;
  readonly PreferredMfa?: boolean;
}

export interface SchemaAttributeType {
  readonly Name?: string;
  readonly AttributeDataType?: string;
  readonly DeveloperOnlyAttribute?: boolean;
  readonly Mutable?: boolean;
  readonly Required?: boolean;
  readonly NumberAttributeConstraints?: NumberAttributeConstraintsType;
  readonly StringAttributeConstraints?: StringAttributeConstraintsType;
}

export interface ScopeDoesNotExistException {
  readonly message?: string;
}

export interface SetRiskConfigurationRequest {
  readonly UserPoolId: string;
  readonly ClientId?: string;
  readonly CompromisedCredentialsRiskConfiguration?: CompromisedCredentialsRiskConfigurationType;
  readonly AccountTakeoverRiskConfiguration?: AccountTakeoverRiskConfigurationType;
  readonly RiskExceptionConfiguration?: RiskExceptionConfigurationType;
}

export interface SetRiskConfigurationResponse {
  readonly RiskConfiguration: RiskConfigurationType;
}

export interface SetUICustomizationRequest {
  readonly UserPoolId: string;
  readonly ClientId?: string;
  readonly CSS?: string;
  readonly ImageFile?: unknown;
}

export interface SetUICustomizationResponse {
  readonly UICustomization: UICustomizationType;
}

export interface SetUserMFAPreferenceRequest {
  readonly SMSMfaSettings?: SMSMfaSettingsType;
  readonly SoftwareTokenMfaSettings?: SoftwareTokenMfaSettingsType;
  readonly AccessToken: string;
}

export interface SetUserMFAPreferenceResponse {
}

export interface SetUserPoolMfaConfigRequest {
  readonly UserPoolId: string;
  readonly SmsMfaConfiguration?: SmsMfaConfigType;
  readonly SoftwareTokenMfaConfiguration?: SoftwareTokenMfaConfigType;
  readonly MfaConfiguration?: string;
}

export interface SetUserPoolMfaConfigResponse {
  readonly SmsMfaConfiguration?: SmsMfaConfigType;
  readonly SoftwareTokenMfaConfiguration?: SoftwareTokenMfaConfigType;
  readonly MfaConfiguration?: string;
}

export interface SetUserSettingsRequest {
  readonly AccessToken: string;
  readonly MFAOptions: [];
}

export interface SetUserSettingsResponse {
}

export interface SignUpRequest {
  readonly ClientId: string;
  readonly SecretHash?: string;
  readonly Username: string;
  readonly Password: string;
  readonly UserAttributes?: [];
  readonly ValidationData?: [];
  readonly AnalyticsMetadata?: AnalyticsMetadataType;
  readonly UserContextData?: UserContextDataType;
  readonly ClientMetadata?: {[key: string]: any};
}

export interface SignUpResponse {
  readonly UserConfirmed: boolean;
  readonly CodeDeliveryDetails?: CodeDeliveryDetailsType;
  readonly UserSub: string;
}

export interface SmsConfigurationType {
  readonly SnsCallerArn: string;
  readonly ExternalId?: string;
}

export interface SmsMfaConfigType {
  readonly SmsAuthenticationMessage?: string;
  readonly SmsConfiguration?: SmsConfigurationType;
}

export interface SoftwareTokenMFANotFoundException {
  readonly message?: string;
}

export interface SoftwareTokenMfaConfigType {
  readonly Enabled?: boolean;
}

export interface SoftwareTokenMfaSettingsType {
  readonly Enabled?: boolean;
  readonly PreferredMfa?: boolean;
}

export interface StartUserImportJobRequest {
  readonly UserPoolId: string;
  readonly JobId: string;
}

export interface StartUserImportJobResponse {
  readonly UserImportJob?: UserImportJobType;
}

export interface StopUserImportJobRequest {
  readonly UserPoolId: string;
  readonly JobId: string;
}

export interface StopUserImportJobResponse {
  readonly UserImportJob?: UserImportJobType;
}

export interface StringAttributeConstraintsType {
  readonly MinLength?: string;
  readonly MaxLength?: string;
}

export interface TagResourceRequest {
  readonly ResourceArn: string;
  readonly Tags: {[key: string]: any};
}

export interface TagResourceResponse {
}

export interface TokenValidityUnitsType {
  readonly AccessToken?: string;
  readonly IdToken?: string;
  readonly RefreshToken?: string;
}

export interface TooManyFailedAttemptsException {
  readonly message?: string;
}

export interface TooManyRequestsException {
  readonly message?: string;
}

export interface UICustomizationType {
  readonly UserPoolId?: string;
  readonly ClientId?: string;
  readonly ImageUrl?: string;
  readonly CSS?: string;
  readonly CSSVersion?: string;
  readonly LastModifiedDate?: Date;
  readonly CreationDate?: Date;
}

export interface UnauthorizedException {
  readonly message?: string;
}

export interface UnexpectedLambdaException {
  readonly message?: string;
}

export interface UnsupportedIdentityProviderException {
  readonly message?: string;
}

export interface UnsupportedOperationException {
  readonly message?: string;
}

export interface UnsupportedTokenTypeException {
  readonly message?: string;
}

export interface UnsupportedUserStateException {
  readonly message?: string;
}

export interface UntagResourceRequest {
  readonly ResourceArn: string;
  readonly TagKeys: [];
}

export interface UntagResourceResponse {
}

export interface UpdateAuthEventFeedbackRequest {
  readonly UserPoolId: string;
  readonly Username: string;
  readonly EventId: string;
  readonly FeedbackToken: string;
  readonly FeedbackValue: string;
}

export interface UpdateAuthEventFeedbackResponse {
}

export interface UpdateDeviceStatusRequest {
  readonly AccessToken: string;
  readonly DeviceKey: string;
  readonly DeviceRememberedStatus?: string;
}

export interface UpdateDeviceStatusResponse {
}

export interface UpdateGroupRequest {
  readonly GroupName: string;
  readonly UserPoolId: string;
  readonly Description?: string;
  readonly RoleArn?: string;
  readonly Precedence?: number;
}

export interface UpdateGroupResponse {
  readonly Group?: GroupType;
}

export interface UpdateIdentityProviderRequest {
  readonly UserPoolId: string;
  readonly ProviderName: string;
  readonly ProviderDetails?: {[key: string]: any};
  readonly AttributeMapping?: {[key: string]: any};
  readonly IdpIdentifiers?: [];
}

export interface UpdateIdentityProviderResponse {
  readonly IdentityProvider: IdentityProviderType;
}

export interface UpdateResourceServerRequest {
  readonly UserPoolId: string;
  readonly Identifier: string;
  readonly Name: string;
  readonly Scopes?: [];
}

export interface UpdateResourceServerResponse {
  readonly ResourceServer: ResourceServerType;
}

export interface UpdateUserAttributesRequest {
  readonly UserAttributes: [];
  readonly AccessToken: string;
  readonly ClientMetadata?: {[key: string]: any};
}

export interface UpdateUserAttributesResponse {
  readonly CodeDeliveryDetailsList?: [];
}

export interface UpdateUserPoolClientRequest {
  readonly UserPoolId: string;
  readonly ClientId: string;
  readonly ClientName?: string;
  readonly RefreshTokenValidity?: number;
  readonly AccessTokenValidity?: number;
  readonly IdTokenValidity?: number;
  readonly TokenValidityUnits?: TokenValidityUnitsType;
  readonly ReadAttributes?: [];
  readonly WriteAttributes?: [];
  readonly ExplicitAuthFlows?: [];
  readonly SupportedIdentityProviders?: [];
  readonly CallbackURLs?: [];
  readonly LogoutURLs?: [];
  readonly DefaultRedirectURI?: string;
  readonly AllowedOAuthFlows?: [];
  readonly AllowedOAuthScopes?: [];
  readonly AllowedOAuthFlowsUserPoolClient?: boolean;
  readonly AnalyticsConfiguration?: AnalyticsConfigurationType;
  readonly PreventUserExistenceErrors?: string;
  readonly EnableTokenRevocation?: boolean;
}

export interface UpdateUserPoolClientResponse {
  readonly UserPoolClient?: UserPoolClientType;
}

export interface UpdateUserPoolDomainRequest {
  readonly Domain: string;
  readonly UserPoolId: string;
  readonly CustomDomainConfig: CustomDomainConfigType;
}

export interface UpdateUserPoolDomainResponse {
  readonly CloudFrontDomain?: string;
}

export interface UpdateUserPoolRequest {
  readonly UserPoolId: string;
  readonly Policies?: UserPoolPolicyType;
  readonly LambdaConfig?: LambdaConfigType;
  readonly AutoVerifiedAttributes?: [];
  readonly SmsVerificationMessage?: string;
  readonly EmailVerificationMessage?: string;
  readonly EmailVerificationSubject?: string;
  readonly VerificationMessageTemplate?: VerificationMessageTemplateType;
  readonly SmsAuthenticationMessage?: string;
  readonly MfaConfiguration?: string;
  readonly DeviceConfiguration?: DeviceConfigurationType;
  readonly EmailConfiguration?: EmailConfigurationType;
  readonly SmsConfiguration?: SmsConfigurationType;
  readonly UserPoolTags?: {[key: string]: any};
  readonly AdminCreateUserConfig?: AdminCreateUserConfigType;
  readonly UserPoolAddOns?: UserPoolAddOnsType;
  readonly AccountRecoverySetting?: AccountRecoverySettingType;
}

export interface UpdateUserPoolResponse {
}

export interface UserContextDataType {
  readonly EncodedData?: string;
}

export interface UserImportInProgressException {
  readonly message?: string;
}

export interface UserImportJobType {
  readonly JobName?: string;
  readonly JobId?: string;
  readonly UserPoolId?: string;
  readonly PreSignedUrl?: string;
  readonly CreationDate?: Date;
  readonly StartDate?: Date;
  readonly CompletionDate?: Date;
  readonly Status?: string;
  readonly CloudWatchLogsRoleArn?: string;
  readonly ImportedUsers?: number;
  readonly SkippedUsers?: number;
  readonly FailedUsers?: number;
  readonly CompletionMessage?: string;
}

export interface UserLambdaValidationException {
  readonly message?: string;
}

export interface UserNotConfirmedException {
  readonly message?: string;
}

export interface UserNotFoundException {
  readonly message?: string;
}

export interface UserPoolAddOnNotEnabledException {
  readonly message?: string;
}

export interface UserPoolAddOnsType {
  readonly AdvancedSecurityMode: string;
}

export interface UserPoolClientDescription {
  readonly ClientId?: string;
  readonly UserPoolId?: string;
  readonly ClientName?: string;
}

export interface UserPoolClientType {
  readonly UserPoolId?: string;
  readonly ClientName?: string;
  readonly ClientId?: string;
  readonly ClientSecret?: string;
  readonly LastModifiedDate?: Date;
  readonly CreationDate?: Date;
  readonly RefreshTokenValidity?: number;
  readonly AccessTokenValidity?: number;
  readonly IdTokenValidity?: number;
  readonly TokenValidityUnits?: TokenValidityUnitsType;
  readonly ReadAttributes?: [];
  readonly WriteAttributes?: [];
  readonly ExplicitAuthFlows?: [];
  readonly SupportedIdentityProviders?: [];
  readonly CallbackURLs?: [];
  readonly LogoutURLs?: [];
  readonly DefaultRedirectURI?: string;
  readonly AllowedOAuthFlows?: [];
  readonly AllowedOAuthScopes?: [];
  readonly AllowedOAuthFlowsUserPoolClient?: boolean;
  readonly AnalyticsConfiguration?: AnalyticsConfigurationType;
  readonly PreventUserExistenceErrors?: string;
  readonly EnableTokenRevocation?: boolean;
}

export interface UserPoolDescriptionType {
  readonly Id?: string;
  readonly Name?: string;
  readonly LambdaConfig?: LambdaConfigType;
  readonly Status?: string;
  readonly LastModifiedDate?: Date;
  readonly CreationDate?: Date;
}

export interface UserPoolPolicyType {
  readonly PasswordPolicy?: PasswordPolicyType;
}

export interface UserPoolTaggingException {
  readonly message?: string;
}

export interface UserPoolType {
  readonly Id?: string;
  readonly Name?: string;
  readonly Policies?: UserPoolPolicyType;
  readonly LambdaConfig?: LambdaConfigType;
  readonly Status?: string;
  readonly LastModifiedDate?: Date;
  readonly CreationDate?: Date;
  readonly SchemaAttributes?: [];
  readonly AutoVerifiedAttributes?: [];
  readonly AliasAttributes?: [];
  readonly UsernameAttributes?: [];
  readonly SmsVerificationMessage?: string;
  readonly EmailVerificationMessage?: string;
  readonly EmailVerificationSubject?: string;
  readonly VerificationMessageTemplate?: VerificationMessageTemplateType;
  readonly SmsAuthenticationMessage?: string;
  readonly MfaConfiguration?: string;
  readonly DeviceConfiguration?: DeviceConfigurationType;
  readonly EstimatedNumberOfUsers?: number;
  readonly EmailConfiguration?: EmailConfigurationType;
  readonly SmsConfiguration?: SmsConfigurationType;
  readonly UserPoolTags?: {[key: string]: any};
  readonly SmsConfigurationFailure?: string;
  readonly EmailConfigurationFailure?: string;
  readonly Domain?: string;
  readonly CustomDomain?: string;
  readonly AdminCreateUserConfig?: AdminCreateUserConfigType;
  readonly UserPoolAddOns?: UserPoolAddOnsType;
  readonly UsernameConfiguration?: UsernameConfigurationType;
  readonly Arn?: string;
  readonly AccountRecoverySetting?: AccountRecoverySettingType;
}

export interface UserType {
  readonly Username?: string;
  readonly Attributes?: [];
  readonly UserCreateDate?: Date;
  readonly UserLastModifiedDate?: Date;
  readonly Enabled?: boolean;
  readonly UserStatus?: string;
  readonly MFAOptions?: [];
}

export interface UsernameConfigurationType {
  readonly CaseSensitive: boolean;
}

export interface UsernameExistsException {
  readonly message?: string;
}

export interface VerificationMessageTemplateType {
  readonly SmsMessage?: string;
  readonly EmailMessage?: string;
  readonly EmailSubject?: string;
  readonly EmailMessageByLink?: string;
  readonly EmailSubjectByLink?: string;
  readonly DefaultEmailOption?: string;
}

export interface VerifySoftwareTokenRequest {
  readonly AccessToken?: string;
  readonly Session?: string;
  readonly UserCode: string;
  readonly FriendlyDeviceName?: string;
}

export interface VerifySoftwareTokenResponse {
  readonly Status?: string;
  readonly Session?: string;
}

export interface VerifyUserAttributeRequest {
  readonly AccessToken: string;
  readonly AttributeName: string;
  readonly Code: string;
}

export interface VerifyUserAttributeResponse {
}


