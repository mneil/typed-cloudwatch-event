/**
 * STOP. This file is autogenerated. DO NOT EDIT by hand
 */
export interface AbortMultipartUpload {
  readonly Bucket: string;
  readonly Key: string;
  readonly UploadId: string;
  readonly RequestPayer?: string;
  readonly ExpectedBucketOwner?: string;
}
export interface CompleteMultipartUpload {
  readonly Bucket: string;
  readonly Key: string;
  readonly MultipartUpload?: CompletedMultipartUpload;
  readonly UploadId: string;
  readonly RequestPayer?: string;
  readonly ExpectedBucketOwner?: string;
}
export interface CopyObject {
  readonly ACL?: string;
  readonly Bucket: string;
  readonly CacheControl?: string;
  readonly ContentDisposition?: string;
  readonly ContentEncoding?: string;
  readonly ContentLanguage?: string;
  readonly ContentType?: string;
  readonly CopySource: string;
  readonly CopySourceIfMatch?: string;
  readonly CopySourceIfModifiedSince?: Date;
  readonly CopySourceIfNoneMatch?: string;
  readonly CopySourceIfUnmodifiedSince?: Date;
  readonly Expires?: Date;
  readonly GrantFullControl?: string;
  readonly GrantRead?: string;
  readonly GrantReadACP?: string;
  readonly GrantWriteACP?: string;
  readonly Key: string;
  readonly Metadata?: {[key: string]: any};
  readonly MetadataDirective?: string;
  readonly TaggingDirective?: string;
  readonly ServerSideEncryption?: string;
  readonly StorageClass?: string;
  readonly WebsiteRedirectLocation?: string;
  readonly SSECustomerAlgorithm?: string;
  readonly SSECustomerKey?: string;
  readonly SSECustomerKeyMD5?: string;
  readonly SSEKMSKeyId?: string;
  readonly SSEKMSEncryptionContext?: string;
  readonly BucketKeyEnabled?: boolean;
  readonly CopySourceSSECustomerAlgorithm?: string;
  readonly CopySourceSSECustomerKey?: string;
  readonly CopySourceSSECustomerKeyMD5?: string;
  readonly RequestPayer?: string;
  readonly Tagging?: string;
  readonly ObjectLockMode?: string;
  readonly ObjectLockRetainUntilDate?: Date;
  readonly ObjectLockLegalHoldStatus?: string;
  readonly ExpectedBucketOwner?: string;
  readonly ExpectedSourceBucketOwner?: string;
}
export interface CreateBucket {
  readonly ACL?: string;
  readonly Bucket: string;
  readonly CreateBucketConfiguration?: CreateBucketConfiguration;
  readonly GrantFullControl?: string;
  readonly GrantRead?: string;
  readonly GrantReadACP?: string;
  readonly GrantWrite?: string;
  readonly GrantWriteACP?: string;
  readonly ObjectLockEnabledForBucket?: boolean;
  readonly ObjectOwnership?: string;
}
export interface CreateMultipartUpload {
  readonly ACL?: string;
  readonly Bucket: string;
  readonly CacheControl?: string;
  readonly ContentDisposition?: string;
  readonly ContentEncoding?: string;
  readonly ContentLanguage?: string;
  readonly ContentType?: string;
  readonly Expires?: Date;
  readonly GrantFullControl?: string;
  readonly GrantRead?: string;
  readonly GrantReadACP?: string;
  readonly GrantWriteACP?: string;
  readonly Key: string;
  readonly Metadata?: {[key: string]: any};
  readonly ServerSideEncryption?: string;
  readonly StorageClass?: string;
  readonly WebsiteRedirectLocation?: string;
  readonly SSECustomerAlgorithm?: string;
  readonly SSECustomerKey?: string;
  readonly SSECustomerKeyMD5?: string;
  readonly SSEKMSKeyId?: string;
  readonly SSEKMSEncryptionContext?: string;
  readonly BucketKeyEnabled?: boolean;
  readonly RequestPayer?: string;
  readonly Tagging?: string;
  readonly ObjectLockMode?: string;
  readonly ObjectLockRetainUntilDate?: Date;
  readonly ObjectLockLegalHoldStatus?: string;
  readonly ExpectedBucketOwner?: string;
}
export interface DeleteBucket {
  readonly Bucket: string;
  readonly ExpectedBucketOwner?: string;
}
export interface DeleteBucketAnalyticsConfiguration {
  readonly Bucket: string;
  readonly Id: string;
  readonly ExpectedBucketOwner?: string;
}
export interface DeleteBucketCors {
  readonly Bucket: string;
  readonly ExpectedBucketOwner?: string;
}
export interface DeleteBucketEncryption {
  readonly Bucket: string;
  readonly ExpectedBucketOwner?: string;
}
export interface DeleteBucketIntelligentTieringConfiguration {
  readonly Bucket: string;
  readonly Id: string;
}
export interface DeleteBucketInventoryConfiguration {
  readonly Bucket: string;
  readonly Id: string;
  readonly ExpectedBucketOwner?: string;
}
export interface DeleteBucketLifecycle {
  readonly Bucket: string;
  readonly ExpectedBucketOwner?: string;
}
export interface DeleteBucketMetricsConfiguration {
  readonly Bucket: string;
  readonly Id: string;
  readonly ExpectedBucketOwner?: string;
}
export interface DeleteBucketOwnershipControls {
  readonly Bucket: string;
  readonly ExpectedBucketOwner?: string;
}
export interface DeleteBucketPolicy {
  readonly Bucket: string;
  readonly ExpectedBucketOwner?: string;
}
export interface DeleteBucketReplication {
  readonly Bucket: string;
  readonly ExpectedBucketOwner?: string;
}
export interface DeleteBucketTagging {
  readonly Bucket: string;
  readonly ExpectedBucketOwner?: string;
}
export interface DeleteBucketWebsite {
  readonly Bucket: string;
  readonly ExpectedBucketOwner?: string;
}
export interface DeleteObject {
  readonly Bucket: string;
  readonly Key: string;
  readonly MFA?: string;
  readonly VersionId?: string;
  readonly RequestPayer?: string;
  readonly BypassGovernanceRetention?: boolean;
  readonly ExpectedBucketOwner?: string;
}
export interface DeleteObjectTagging {
  readonly Bucket: string;
  readonly Key: string;
  readonly VersionId?: string;
  readonly ExpectedBucketOwner?: string;
}
export interface DeleteObjects {
  readonly Bucket: string;
  readonly Delete: Delete;
  readonly MFA?: string;
  readonly RequestPayer?: string;
  readonly BypassGovernanceRetention?: boolean;
  readonly ExpectedBucketOwner?: string;
}
export interface DeletePublicAccessBlock {
  readonly Bucket: string;
  readonly ExpectedBucketOwner?: string;
}
export interface GetBucketAccelerateConfiguration {
  readonly Bucket: string;
  readonly ExpectedBucketOwner?: string;
}
export interface GetBucketAcl {
  readonly Bucket: string;
  readonly ExpectedBucketOwner?: string;
}
export interface GetBucketAnalyticsConfiguration {
  readonly Bucket: string;
  readonly Id: string;
  readonly ExpectedBucketOwner?: string;
}
export interface GetBucketCors {
  readonly Bucket: string;
  readonly ExpectedBucketOwner?: string;
}
export interface GetBucketEncryption {
  readonly Bucket: string;
  readonly ExpectedBucketOwner?: string;
}
export interface GetBucketIntelligentTieringConfiguration {
  readonly Bucket: string;
  readonly Id: string;
}
export interface GetBucketInventoryConfiguration {
  readonly Bucket: string;
  readonly Id: string;
  readonly ExpectedBucketOwner?: string;
}
export interface GetBucketLifecycle {
  readonly Bucket: string;
  readonly ExpectedBucketOwner?: string;
}
export interface GetBucketLifecycleConfiguration {
  readonly Bucket: string;
  readonly ExpectedBucketOwner?: string;
}
export interface GetBucketLocation {
  readonly Bucket: string;
  readonly ExpectedBucketOwner?: string;
}
export interface GetBucketLogging {
  readonly Bucket: string;
  readonly ExpectedBucketOwner?: string;
}
export interface GetBucketMetricsConfiguration {
  readonly Bucket: string;
  readonly Id: string;
  readonly ExpectedBucketOwner?: string;
}
export interface GetBucketNotification {
  readonly Bucket: string;
  readonly ExpectedBucketOwner?: string;
}
export interface GetBucketNotificationConfiguration {
  readonly Bucket: string;
  readonly ExpectedBucketOwner?: string;
}
export interface GetBucketOwnershipControls {
  readonly Bucket: string;
  readonly ExpectedBucketOwner?: string;
}
export interface GetBucketPolicy {
  readonly Bucket: string;
  readonly ExpectedBucketOwner?: string;
}
export interface GetBucketPolicyStatus {
  readonly Bucket: string;
  readonly ExpectedBucketOwner?: string;
}
export interface GetBucketReplication {
  readonly Bucket: string;
  readonly ExpectedBucketOwner?: string;
}
export interface GetBucketRequestPayment {
  readonly Bucket: string;
  readonly ExpectedBucketOwner?: string;
}
export interface GetBucketTagging {
  readonly Bucket: string;
  readonly ExpectedBucketOwner?: string;
}
export interface GetBucketVersioning {
  readonly Bucket: string;
  readonly ExpectedBucketOwner?: string;
}
export interface GetBucketWebsite {
  readonly Bucket: string;
  readonly ExpectedBucketOwner?: string;
}
export interface GetObject {
  readonly Bucket: string;
  readonly IfMatch?: string;
  readonly IfModifiedSince?: Date;
  readonly IfNoneMatch?: string;
  readonly IfUnmodifiedSince?: Date;
  readonly Key: string;
  readonly Range?: string;
  readonly ResponseCacheControl?: string;
  readonly ResponseContentDisposition?: string;
  readonly ResponseContentEncoding?: string;
  readonly ResponseContentLanguage?: string;
  readonly ResponseContentType?: string;
  readonly ResponseExpires?: Date;
  readonly VersionId?: string;
  readonly SSECustomerAlgorithm?: string;
  readonly SSECustomerKey?: string;
  readonly SSECustomerKeyMD5?: string;
  readonly RequestPayer?: string;
  readonly PartNumber?: number;
  readonly ExpectedBucketOwner?: string;
}
export interface GetObjectAcl {
  readonly Bucket: string;
  readonly Key: string;
  readonly VersionId?: string;
  readonly RequestPayer?: string;
  readonly ExpectedBucketOwner?: string;
}
export interface GetObjectLegalHold {
  readonly Bucket: string;
  readonly Key: string;
  readonly VersionId?: string;
  readonly RequestPayer?: string;
  readonly ExpectedBucketOwner?: string;
}
export interface GetObjectLockConfiguration {
  readonly Bucket: string;
  readonly ExpectedBucketOwner?: string;
}
export interface GetObjectRetention {
  readonly Bucket: string;
  readonly Key: string;
  readonly VersionId?: string;
  readonly RequestPayer?: string;
  readonly ExpectedBucketOwner?: string;
}
export interface GetObjectTagging {
  readonly Bucket: string;
  readonly Key: string;
  readonly VersionId?: string;
  readonly ExpectedBucketOwner?: string;
  readonly RequestPayer?: string;
}
export interface GetObjectTorrent {
  readonly Bucket: string;
  readonly Key: string;
  readonly RequestPayer?: string;
  readonly ExpectedBucketOwner?: string;
}
export interface GetPublicAccessBlock {
  readonly Bucket: string;
  readonly ExpectedBucketOwner?: string;
}
export interface HeadBucket {
  readonly Bucket: string;
  readonly ExpectedBucketOwner?: string;
}
export interface HeadObject {
  readonly Bucket: string;
  readonly IfMatch?: string;
  readonly IfModifiedSince?: Date;
  readonly IfNoneMatch?: string;
  readonly IfUnmodifiedSince?: Date;
  readonly Key: string;
  readonly Range?: string;
  readonly VersionId?: string;
  readonly SSECustomerAlgorithm?: string;
  readonly SSECustomerKey?: string;
  readonly SSECustomerKeyMD5?: string;
  readonly RequestPayer?: string;
  readonly PartNumber?: number;
  readonly ExpectedBucketOwner?: string;
}
export interface ListBucketAnalyticsConfigurations {
  readonly Bucket: string;
  readonly ContinuationToken?: string;
  readonly ExpectedBucketOwner?: string;
}
export interface ListBucketIntelligentTieringConfigurations {
  readonly Bucket: string;
  readonly ContinuationToken?: string;
}
export interface ListBucketInventoryConfigurations {
  readonly Bucket: string;
  readonly ContinuationToken?: string;
  readonly ExpectedBucketOwner?: string;
}
export interface ListBucketMetricsConfigurations {
  readonly Bucket: string;
  readonly ContinuationToken?: string;
  readonly ExpectedBucketOwner?: string;
}
export interface ListMultipartUploads {
  readonly Bucket: string;
  readonly Delimiter?: string;
  readonly EncodingType?: string;
  readonly KeyMarker?: string;
  readonly MaxUploads?: number;
  readonly Prefix?: string;
  readonly UploadIdMarker?: string;
  readonly ExpectedBucketOwner?: string;
}
export interface ListObjectVersions {
  readonly Bucket: string;
  readonly Delimiter?: string;
  readonly EncodingType?: string;
  readonly KeyMarker?: string;
  readonly MaxKeys?: number;
  readonly Prefix?: string;
  readonly VersionIdMarker?: string;
  readonly ExpectedBucketOwner?: string;
}
export interface ListObjects {
  readonly Bucket: string;
  readonly Delimiter?: string;
  readonly EncodingType?: string;
  readonly Marker?: string;
  readonly MaxKeys?: number;
  readonly Prefix?: string;
  readonly RequestPayer?: string;
  readonly ExpectedBucketOwner?: string;
}
export interface ListObjectsV2 {
  readonly Bucket: string;
  readonly Delimiter?: string;
  readonly EncodingType?: string;
  readonly MaxKeys?: number;
  readonly Prefix?: string;
  readonly ContinuationToken?: string;
  readonly FetchOwner?: boolean;
  readonly StartAfter?: string;
  readonly RequestPayer?: string;
  readonly ExpectedBucketOwner?: string;
}
export interface ListParts {
  readonly Bucket: string;
  readonly Key: string;
  readonly MaxParts?: number;
  readonly PartNumberMarker?: number;
  readonly UploadId: string;
  readonly RequestPayer?: string;
  readonly ExpectedBucketOwner?: string;
}
export interface PutBucketAccelerateConfiguration {
  readonly Bucket: string;
  readonly AccelerateConfiguration: AccelerateConfiguration;
  readonly ExpectedBucketOwner?: string;
}
export interface PutBucketAcl {
  readonly ACL?: string;
  readonly AccessControlPolicy?: AccessControlPolicy;
  readonly Bucket: string;
  readonly ContentMD5?: string;
  readonly GrantFullControl?: string;
  readonly GrantRead?: string;
  readonly GrantReadACP?: string;
  readonly GrantWrite?: string;
  readonly GrantWriteACP?: string;
  readonly ExpectedBucketOwner?: string;
}
export interface PutBucketAnalyticsConfiguration {
  readonly Bucket: string;
  readonly Id: string;
  readonly AnalyticsConfiguration: AnalyticsConfiguration;
  readonly ExpectedBucketOwner?: string;
}
export interface PutBucketCors {
  readonly Bucket: string;
  readonly CORSConfiguration: CORSConfiguration;
  readonly ContentMD5?: string;
  readonly ExpectedBucketOwner?: string;
}
export interface PutBucketEncryption {
  readonly Bucket: string;
  readonly ContentMD5?: string;
  readonly ServerSideEncryptionConfiguration: ServerSideEncryptionConfiguration;
  readonly ExpectedBucketOwner?: string;
}
export interface PutBucketIntelligentTieringConfiguration {
  readonly Bucket: string;
  readonly Id: string;
  readonly IntelligentTieringConfiguration: IntelligentTieringConfiguration;
}
export interface PutBucketInventoryConfiguration {
  readonly Bucket: string;
  readonly Id: string;
  readonly InventoryConfiguration: InventoryConfiguration;
  readonly ExpectedBucketOwner?: string;
}
export interface PutBucketLifecycle {
  readonly Bucket: string;
  readonly ContentMD5?: string;
  readonly LifecycleConfiguration?: LifecycleConfiguration;
  readonly ExpectedBucketOwner?: string;
}
export interface PutBucketLifecycleConfiguration {
  readonly Bucket: string;
  readonly LifecycleConfiguration?: BucketLifecycleConfiguration;
  readonly ExpectedBucketOwner?: string;
}
export interface PutBucketLogging {
  readonly Bucket: string;
  readonly BucketLoggingStatus: BucketLoggingStatus;
  readonly ContentMD5?: string;
  readonly ExpectedBucketOwner?: string;
}
export interface PutBucketMetricsConfiguration {
  readonly Bucket: string;
  readonly Id: string;
  readonly MetricsConfiguration: MetricsConfiguration;
  readonly ExpectedBucketOwner?: string;
}
export interface PutBucketNotification {
  readonly Bucket: string;
  readonly ContentMD5?: string;
  readonly NotificationConfiguration: NotificationConfigurationDeprecated;
  readonly ExpectedBucketOwner?: string;
}
export interface PutBucketNotificationConfiguration {
  readonly Bucket: string;
  readonly NotificationConfiguration: NotificationConfiguration;
  readonly ExpectedBucketOwner?: string;
  readonly SkipDestinationValidation?: boolean;
}
export interface PutBucketOwnershipControls {
  readonly Bucket: string;
  readonly ContentMD5?: string;
  readonly ExpectedBucketOwner?: string;
  readonly OwnershipControls: OwnershipControls;
}
export interface PutBucketPolicy {
  readonly Bucket: string;
  readonly ContentMD5?: string;
  readonly ConfirmRemoveSelfBucketAccess?: boolean;
  readonly Policy: string;
  readonly ExpectedBucketOwner?: string;
}
export interface PutBucketReplication {
  readonly Bucket: string;
  readonly ContentMD5?: string;
  readonly ReplicationConfiguration: ReplicationConfiguration;
  readonly Token?: string;
  readonly ExpectedBucketOwner?: string;
}
export interface PutBucketRequestPayment {
  readonly Bucket: string;
  readonly ContentMD5?: string;
  readonly RequestPaymentConfiguration: RequestPaymentConfiguration;
  readonly ExpectedBucketOwner?: string;
}
export interface PutBucketTagging {
  readonly Bucket: string;
  readonly ContentMD5?: string;
  readonly Tagging: Tagging;
  readonly ExpectedBucketOwner?: string;
}
export interface PutBucketVersioning {
  readonly Bucket: string;
  readonly ContentMD5?: string;
  readonly MFA?: string;
  readonly VersioningConfiguration: VersioningConfiguration;
  readonly ExpectedBucketOwner?: string;
}
export interface PutBucketWebsite {
  readonly Bucket: string;
  readonly ContentMD5?: string;
  readonly WebsiteConfiguration: WebsiteConfiguration;
  readonly ExpectedBucketOwner?: string;
}
export interface PutObject {
  readonly ACL?: string;
  readonly Body?: unknown;
  readonly Bucket: string;
  readonly CacheControl?: string;
  readonly ContentDisposition?: string;
  readonly ContentEncoding?: string;
  readonly ContentLanguage?: string;
  readonly ContentLength?: number;
  readonly ContentMD5?: string;
  readonly ContentType?: string;
  readonly Expires?: Date;
  readonly GrantFullControl?: string;
  readonly GrantRead?: string;
  readonly GrantReadACP?: string;
  readonly GrantWriteACP?: string;
  readonly Key: string;
  readonly Metadata?: {[key: string]: any};
  readonly ServerSideEncryption?: string;
  readonly StorageClass?: string;
  readonly WebsiteRedirectLocation?: string;
  readonly SSECustomerAlgorithm?: string;
  readonly SSECustomerKey?: string;
  readonly SSECustomerKeyMD5?: string;
  readonly SSEKMSKeyId?: string;
  readonly SSEKMSEncryptionContext?: string;
  readonly BucketKeyEnabled?: boolean;
  readonly RequestPayer?: string;
  readonly Tagging?: string;
  readonly ObjectLockMode?: string;
  readonly ObjectLockRetainUntilDate?: Date;
  readonly ObjectLockLegalHoldStatus?: string;
  readonly ExpectedBucketOwner?: string;
}
export interface PutObjectAcl {
  readonly ACL?: string;
  readonly AccessControlPolicy?: AccessControlPolicy;
  readonly Bucket: string;
  readonly ContentMD5?: string;
  readonly GrantFullControl?: string;
  readonly GrantRead?: string;
  readonly GrantReadACP?: string;
  readonly GrantWrite?: string;
  readonly GrantWriteACP?: string;
  readonly Key: string;
  readonly RequestPayer?: string;
  readonly VersionId?: string;
  readonly ExpectedBucketOwner?: string;
}
export interface PutObjectLegalHold {
  readonly Bucket: string;
  readonly Key: string;
  readonly LegalHold?: ObjectLockLegalHold;
  readonly RequestPayer?: string;
  readonly VersionId?: string;
  readonly ContentMD5?: string;
  readonly ExpectedBucketOwner?: string;
}
export interface PutObjectLockConfiguration {
  readonly Bucket: string;
  readonly ObjectLockConfiguration?: ObjectLockConfiguration;
  readonly RequestPayer?: string;
  readonly Token?: string;
  readonly ContentMD5?: string;
  readonly ExpectedBucketOwner?: string;
}
export interface PutObjectRetention {
  readonly Bucket: string;
  readonly Key: string;
  readonly Retention?: ObjectLockRetention;
  readonly RequestPayer?: string;
  readonly VersionId?: string;
  readonly BypassGovernanceRetention?: boolean;
  readonly ContentMD5?: string;
  readonly ExpectedBucketOwner?: string;
}
export interface PutObjectTagging {
  readonly Bucket: string;
  readonly Key: string;
  readonly VersionId?: string;
  readonly ContentMD5?: string;
  readonly Tagging: Tagging;
  readonly ExpectedBucketOwner?: string;
  readonly RequestPayer?: string;
}
export interface PutPublicAccessBlock {
  readonly Bucket: string;
  readonly ContentMD5?: string;
  readonly PublicAccessBlockConfiguration: PublicAccessBlockConfiguration;
  readonly ExpectedBucketOwner?: string;
}
export interface RestoreObject {
  readonly Bucket: string;
  readonly Key: string;
  readonly VersionId?: string;
  readonly RestoreRequest?: RestoreRequest;
  readonly RequestPayer?: string;
  readonly ExpectedBucketOwner?: string;
}
export interface SelectObjectContent {
  readonly Bucket: string;
  readonly Key: string;
  readonly SSECustomerAlgorithm?: string;
  readonly SSECustomerKey?: string;
  readonly SSECustomerKeyMD5?: string;
  readonly Expression: string;
  readonly ExpressionType: string;
  readonly RequestProgress?: RequestProgress;
  readonly InputSerialization: InputSerialization;
  readonly OutputSerialization: OutputSerialization;
  readonly ScanRange?: ScanRange;
  readonly ExpectedBucketOwner?: string;
}
export interface UploadPart {
  readonly Body?: unknown;
  readonly Bucket: string;
  readonly ContentLength?: number;
  readonly ContentMD5?: string;
  readonly Key: string;
  readonly PartNumber: number;
  readonly UploadId: string;
  readonly SSECustomerAlgorithm?: string;
  readonly SSECustomerKey?: string;
  readonly SSECustomerKeyMD5?: string;
  readonly RequestPayer?: string;
  readonly ExpectedBucketOwner?: string;
}
export interface UploadPartCopy {
  readonly Bucket: string;
  readonly CopySource: string;
  readonly CopySourceIfMatch?: string;
  readonly CopySourceIfModifiedSince?: Date;
  readonly CopySourceIfNoneMatch?: string;
  readonly CopySourceIfUnmodifiedSince?: Date;
  readonly CopySourceRange?: string;
  readonly Key: string;
  readonly PartNumber: number;
  readonly UploadId: string;
  readonly SSECustomerAlgorithm?: string;
  readonly SSECustomerKey?: string;
  readonly SSECustomerKeyMD5?: string;
  readonly CopySourceSSECustomerAlgorithm?: string;
  readonly CopySourceSSECustomerKey?: string;
  readonly CopySourceSSECustomerKeyMD5?: string;
  readonly RequestPayer?: string;
  readonly ExpectedBucketOwner?: string;
  readonly ExpectedSourceBucketOwner?: string;
}
export interface WriteGetObjectResponse {
  readonly RequestRoute: string;
  readonly RequestToken: string;
  readonly Body?: unknown;
  readonly StatusCode?: number;
  readonly ErrorCode?: string;
  readonly ErrorMessage?: string;
  readonly AcceptRanges?: string;
  readonly CacheControl?: string;
  readonly ContentDisposition?: string;
  readonly ContentEncoding?: string;
  readonly ContentLanguage?: string;
  readonly ContentLength?: number;
  readonly ContentRange?: string;
  readonly ContentType?: string;
  readonly DeleteMarker?: boolean;
  readonly ETag?: string;
  readonly Expires?: Date;
  readonly Expiration?: string;
  readonly LastModified?: Date;
  readonly MissingMeta?: number;
  readonly Metadata?: {[key: string]: any};
  readonly ObjectLockMode?: string;
  readonly ObjectLockLegalHoldStatus?: string;
  readonly ObjectLockRetainUntilDate?: Date;
  readonly PartsCount?: number;
  readonly ReplicationStatus?: string;
  readonly RequestCharged?: string;
  readonly Restore?: string;
  readonly ServerSideEncryption?: string;
  readonly SSECustomerAlgorithm?: string;
  readonly SSEKMSKeyId?: string;
  readonly SSECustomerKeyMD5?: string;
  readonly StorageClass?: string;
  readonly TagCount?: number;
  readonly VersionId?: string;
  readonly BucketKeyEnabled?: boolean;
}



interface AbortIncompleteMultipartUpload {
  readonly DaysAfterInitiation: number;
}

interface AbortMultipartUploadOutput {
  readonly RequestCharged: string;
}

interface AbortMultipartUploadRequest {
  readonly Bucket: string;
  readonly Key: string;
  readonly UploadId: string;
  readonly RequestPayer: string;
  readonly ExpectedBucketOwner: string;
}

interface AccelerateConfiguration {
  readonly Status: string;
}

interface AccessControlPolicy {
  readonly Grants: [];
  readonly Owner: Owner;
}

interface AccessControlTranslation {
  readonly Owner: string;
}

interface AnalyticsAndOperator {
  readonly Prefix: string;
  readonly Tags: [];
}

interface AnalyticsConfiguration {
  readonly Id: string;
  readonly Filter: AnalyticsFilter;
  readonly StorageClassAnalysis: StorageClassAnalysis;
}

interface AnalyticsExportDestination {
  readonly S3BucketDestination: AnalyticsS3BucketDestination;
}

interface AnalyticsFilter {
  readonly Prefix: string;
  readonly Tag: Tag;
  readonly And: AnalyticsAndOperator;
}

interface AnalyticsS3BucketDestination {
  readonly Format: string;
  readonly BucketAccountId: string;
  readonly Bucket: string;
  readonly Prefix: string;
}

interface Bucket {
  readonly Name: string;
  readonly CreationDate: Date;
}

interface BucketAlreadyExists {
}

interface BucketAlreadyOwnedByYou {
}

interface BucketLifecycleConfiguration {
  readonly Rules: [];
}

interface BucketLoggingStatus {
  readonly LoggingEnabled: LoggingEnabled;
}

interface CORSConfiguration {
  readonly CORSRules: [];
}

interface CORSRule {
  readonly ID: string;
  readonly AllowedHeaders: [];
  readonly AllowedMethods: [];
  readonly AllowedOrigins: [];
  readonly ExposeHeaders: [];
  readonly MaxAgeSeconds: number;
}

interface CSVInput {
  readonly FileHeaderInfo: string;
  readonly Comments: string;
  readonly QuoteEscapeCharacter: string;
  readonly RecordDelimiter: string;
  readonly FieldDelimiter: string;
  readonly QuoteCharacter: string;
  readonly AllowQuotedRecordDelimiter: boolean;
}

interface CSVOutput {
  readonly QuoteFields: string;
  readonly QuoteEscapeCharacter: string;
  readonly RecordDelimiter: string;
  readonly FieldDelimiter: string;
  readonly QuoteCharacter: string;
}

interface CloudFunctionConfiguration {
  readonly Id: string;
  readonly Event: string;
  readonly Events: [];
  readonly CloudFunction: string;
  readonly InvocationRole: string;
}

interface CommonPrefix {
  readonly Prefix: string;
}

interface CompleteMultipartUploadOutput {
  readonly Location: string;
  readonly Bucket: string;
  readonly Key: string;
  readonly Expiration: string;
  readonly ETag: string;
  readonly ServerSideEncryption: string;
  readonly VersionId: string;
  readonly SSEKMSKeyId: string;
  readonly BucketKeyEnabled: boolean;
  readonly RequestCharged: string;
}

interface CompleteMultipartUploadRequest {
  readonly Bucket: string;
  readonly Key: string;
  readonly MultipartUpload: CompletedMultipartUpload;
  readonly UploadId: string;
  readonly RequestPayer: string;
  readonly ExpectedBucketOwner: string;
}

interface CompletedMultipartUpload {
  readonly Parts: [];
}

interface CompletedPart {
  readonly ETag: string;
  readonly PartNumber: number;
}

interface Condition {
  readonly HttpErrorCodeReturnedEquals: string;
  readonly KeyPrefixEquals: string;
}

interface ContinuationEvent {
}

interface CopyObjectOutput {
  readonly CopyObjectResult: CopyObjectResult;
  readonly Expiration: string;
  readonly CopySourceVersionId: string;
  readonly VersionId: string;
  readonly ServerSideEncryption: string;
  readonly SSECustomerAlgorithm: string;
  readonly SSECustomerKeyMD5: string;
  readonly SSEKMSKeyId: string;
  readonly SSEKMSEncryptionContext: string;
  readonly BucketKeyEnabled: boolean;
  readonly RequestCharged: string;
}

interface CopyObjectRequest {
  readonly ACL: string;
  readonly Bucket: string;
  readonly CacheControl: string;
  readonly ContentDisposition: string;
  readonly ContentEncoding: string;
  readonly ContentLanguage: string;
  readonly ContentType: string;
  readonly CopySource: string;
  readonly CopySourceIfMatch: string;
  readonly CopySourceIfModifiedSince: Date;
  readonly CopySourceIfNoneMatch: string;
  readonly CopySourceIfUnmodifiedSince: Date;
  readonly Expires: Date;
  readonly GrantFullControl: string;
  readonly GrantRead: string;
  readonly GrantReadACP: string;
  readonly GrantWriteACP: string;
  readonly Key: string;
  readonly Metadata: {[key: string]: any};
  readonly MetadataDirective: string;
  readonly TaggingDirective: string;
  readonly ServerSideEncryption: string;
  readonly StorageClass: string;
  readonly WebsiteRedirectLocation: string;
  readonly SSECustomerAlgorithm: string;
  readonly SSECustomerKey: string;
  readonly SSECustomerKeyMD5: string;
  readonly SSEKMSKeyId: string;
  readonly SSEKMSEncryptionContext: string;
  readonly BucketKeyEnabled: boolean;
  readonly CopySourceSSECustomerAlgorithm: string;
  readonly CopySourceSSECustomerKey: string;
  readonly CopySourceSSECustomerKeyMD5: string;
  readonly RequestPayer: string;
  readonly Tagging: string;
  readonly ObjectLockMode: string;
  readonly ObjectLockRetainUntilDate: Date;
  readonly ObjectLockLegalHoldStatus: string;
  readonly ExpectedBucketOwner: string;
  readonly ExpectedSourceBucketOwner: string;
}

interface CopyObjectResult {
  readonly ETag: string;
  readonly LastModified: Date;
}

interface CopyPartResult {
  readonly ETag: string;
  readonly LastModified: Date;
}

interface CreateBucketConfiguration {
  readonly LocationConstraint: string;
}

interface CreateBucketOutput {
  readonly Location: string;
}

interface CreateBucketRequest {
  readonly ACL: string;
  readonly Bucket: string;
  readonly CreateBucketConfiguration: CreateBucketConfiguration;
  readonly GrantFullControl: string;
  readonly GrantRead: string;
  readonly GrantReadACP: string;
  readonly GrantWrite: string;
  readonly GrantWriteACP: string;
  readonly ObjectLockEnabledForBucket: boolean;
  readonly ObjectOwnership: string;
}

interface CreateMultipartUploadOutput {
  readonly AbortDate: Date;
  readonly AbortRuleId: string;
  readonly Bucket: string;
  readonly Key: string;
  readonly UploadId: string;
  readonly ServerSideEncryption: string;
  readonly SSECustomerAlgorithm: string;
  readonly SSECustomerKeyMD5: string;
  readonly SSEKMSKeyId: string;
  readonly SSEKMSEncryptionContext: string;
  readonly BucketKeyEnabled: boolean;
  readonly RequestCharged: string;
}

interface CreateMultipartUploadRequest {
  readonly ACL: string;
  readonly Bucket: string;
  readonly CacheControl: string;
  readonly ContentDisposition: string;
  readonly ContentEncoding: string;
  readonly ContentLanguage: string;
  readonly ContentType: string;
  readonly Expires: Date;
  readonly GrantFullControl: string;
  readonly GrantRead: string;
  readonly GrantReadACP: string;
  readonly GrantWriteACP: string;
  readonly Key: string;
  readonly Metadata: {[key: string]: any};
  readonly ServerSideEncryption: string;
  readonly StorageClass: string;
  readonly WebsiteRedirectLocation: string;
  readonly SSECustomerAlgorithm: string;
  readonly SSECustomerKey: string;
  readonly SSECustomerKeyMD5: string;
  readonly SSEKMSKeyId: string;
  readonly SSEKMSEncryptionContext: string;
  readonly BucketKeyEnabled: boolean;
  readonly RequestPayer: string;
  readonly Tagging: string;
  readonly ObjectLockMode: string;
  readonly ObjectLockRetainUntilDate: Date;
  readonly ObjectLockLegalHoldStatus: string;
  readonly ExpectedBucketOwner: string;
}

interface DefaultRetention {
  readonly Mode: string;
  readonly Days: number;
  readonly Years: number;
}

interface Delete {
  readonly Objects: [];
  readonly Quiet: boolean;
}

interface DeleteBucketAnalyticsConfigurationRequest {
  readonly Bucket: string;
  readonly Id: string;
  readonly ExpectedBucketOwner: string;
}

interface DeleteBucketCorsRequest {
  readonly Bucket: string;
  readonly ExpectedBucketOwner: string;
}

interface DeleteBucketEncryptionRequest {
  readonly Bucket: string;
  readonly ExpectedBucketOwner: string;
}

interface DeleteBucketIntelligentTieringConfigurationRequest {
  readonly Bucket: string;
  readonly Id: string;
}

interface DeleteBucketInventoryConfigurationRequest {
  readonly Bucket: string;
  readonly Id: string;
  readonly ExpectedBucketOwner: string;
}

interface DeleteBucketLifecycleRequest {
  readonly Bucket: string;
  readonly ExpectedBucketOwner: string;
}

interface DeleteBucketMetricsConfigurationRequest {
  readonly Bucket: string;
  readonly Id: string;
  readonly ExpectedBucketOwner: string;
}

interface DeleteBucketOwnershipControlsRequest {
  readonly Bucket: string;
  readonly ExpectedBucketOwner: string;
}

interface DeleteBucketPolicyRequest {
  readonly Bucket: string;
  readonly ExpectedBucketOwner: string;
}

interface DeleteBucketReplicationRequest {
  readonly Bucket: string;
  readonly ExpectedBucketOwner: string;
}

interface DeleteBucketRequest {
  readonly Bucket: string;
  readonly ExpectedBucketOwner: string;
}

interface DeleteBucketTaggingRequest {
  readonly Bucket: string;
  readonly ExpectedBucketOwner: string;
}

interface DeleteBucketWebsiteRequest {
  readonly Bucket: string;
  readonly ExpectedBucketOwner: string;
}

interface DeleteMarkerEntry {
  readonly Owner: Owner;
  readonly Key: string;
  readonly VersionId: string;
  readonly IsLatest: boolean;
  readonly LastModified: Date;
}

interface DeleteMarkerReplication {
  readonly Status: string;
}

interface DeleteObjectOutput {
  readonly DeleteMarker: boolean;
  readonly VersionId: string;
  readonly RequestCharged: string;
}

interface DeleteObjectRequest {
  readonly Bucket: string;
  readonly Key: string;
  readonly MFA: string;
  readonly VersionId: string;
  readonly RequestPayer: string;
  readonly BypassGovernanceRetention: boolean;
  readonly ExpectedBucketOwner: string;
}

interface DeleteObjectTaggingOutput {
  readonly VersionId: string;
}

interface DeleteObjectTaggingRequest {
  readonly Bucket: string;
  readonly Key: string;
  readonly VersionId: string;
  readonly ExpectedBucketOwner: string;
}

interface DeleteObjectsOutput {
  readonly Deleted: [];
  readonly RequestCharged: string;
  readonly Errors: [];
}

interface DeleteObjectsRequest {
  readonly Bucket: string;
  readonly Delete: Delete;
  readonly MFA: string;
  readonly RequestPayer: string;
  readonly BypassGovernanceRetention: boolean;
  readonly ExpectedBucketOwner: string;
}

interface DeletePublicAccessBlockRequest {
  readonly Bucket: string;
  readonly ExpectedBucketOwner: string;
}

interface DeletedObject {
  readonly Key: string;
  readonly VersionId: string;
  readonly DeleteMarker: boolean;
  readonly DeleteMarkerVersionId: string;
}

interface Destination {
  readonly Bucket: string;
  readonly Account: string;
  readonly StorageClass: string;
  readonly AccessControlTranslation: AccessControlTranslation;
  readonly EncryptionConfiguration: EncryptionConfiguration;
  readonly ReplicationTime: ReplicationTime;
  readonly Metrics: Metrics;
}

interface Encryption {
  readonly EncryptionType: string;
  readonly KMSKeyId: string;
  readonly KMSContext: string;
}

interface EncryptionConfiguration {
  readonly ReplicaKmsKeyID: string;
}

interface EndEvent {
}

interface Error {
  readonly Key: string;
  readonly VersionId: string;
  readonly Code: string;
  readonly Message: string;
}

interface ErrorDocument {
  readonly Key: string;
}

interface EventBridgeConfiguration {
}

interface ExistingObjectReplication {
  readonly Status: string;
}

interface FilterRule {
  readonly Name: string;
  readonly Value: string;
}

interface GetBucketAccelerateConfigurationOutput {
  readonly Status: string;
}

interface GetBucketAccelerateConfigurationRequest {
  readonly Bucket: string;
  readonly ExpectedBucketOwner: string;
}

interface GetBucketAclOutput {
  readonly Owner: Owner;
  readonly Grants: [];
}

interface GetBucketAclRequest {
  readonly Bucket: string;
  readonly ExpectedBucketOwner: string;
}

interface GetBucketAnalyticsConfigurationOutput {
  readonly AnalyticsConfiguration: AnalyticsConfiguration;
}

interface GetBucketAnalyticsConfigurationRequest {
  readonly Bucket: string;
  readonly Id: string;
  readonly ExpectedBucketOwner: string;
}

interface GetBucketCorsOutput {
  readonly CORSRules: [];
}

interface GetBucketCorsRequest {
  readonly Bucket: string;
  readonly ExpectedBucketOwner: string;
}

interface GetBucketEncryptionOutput {
  readonly ServerSideEncryptionConfiguration: ServerSideEncryptionConfiguration;
}

interface GetBucketEncryptionRequest {
  readonly Bucket: string;
  readonly ExpectedBucketOwner: string;
}

interface GetBucketIntelligentTieringConfigurationOutput {
  readonly IntelligentTieringConfiguration: IntelligentTieringConfiguration;
}

interface GetBucketIntelligentTieringConfigurationRequest {
  readonly Bucket: string;
  readonly Id: string;
}

interface GetBucketInventoryConfigurationOutput {
  readonly InventoryConfiguration: InventoryConfiguration;
}

interface GetBucketInventoryConfigurationRequest {
  readonly Bucket: string;
  readonly Id: string;
  readonly ExpectedBucketOwner: string;
}

interface GetBucketLifecycleConfigurationOutput {
  readonly Rules: [];
}

interface GetBucketLifecycleConfigurationRequest {
  readonly Bucket: string;
  readonly ExpectedBucketOwner: string;
}

interface GetBucketLifecycleOutput {
  readonly Rules: [];
}

interface GetBucketLifecycleRequest {
  readonly Bucket: string;
  readonly ExpectedBucketOwner: string;
}

interface GetBucketLocationOutput {
  readonly LocationConstraint: string;
}

interface GetBucketLocationRequest {
  readonly Bucket: string;
  readonly ExpectedBucketOwner: string;
}

interface GetBucketLoggingOutput {
  readonly LoggingEnabled: LoggingEnabled;
}

interface GetBucketLoggingRequest {
  readonly Bucket: string;
  readonly ExpectedBucketOwner: string;
}

interface GetBucketMetricsConfigurationOutput {
  readonly MetricsConfiguration: MetricsConfiguration;
}

interface GetBucketMetricsConfigurationRequest {
  readonly Bucket: string;
  readonly Id: string;
  readonly ExpectedBucketOwner: string;
}

interface GetBucketNotificationConfigurationRequest {
  readonly Bucket: string;
  readonly ExpectedBucketOwner: string;
}

interface GetBucketOwnershipControlsOutput {
  readonly OwnershipControls: OwnershipControls;
}

interface GetBucketOwnershipControlsRequest {
  readonly Bucket: string;
  readonly ExpectedBucketOwner: string;
}

interface GetBucketPolicyOutput {
  readonly Policy: string;
}

interface GetBucketPolicyRequest {
  readonly Bucket: string;
  readonly ExpectedBucketOwner: string;
}

interface GetBucketPolicyStatusOutput {
  readonly PolicyStatus: PolicyStatus;
}

interface GetBucketPolicyStatusRequest {
  readonly Bucket: string;
  readonly ExpectedBucketOwner: string;
}

interface GetBucketReplicationOutput {
  readonly ReplicationConfiguration: ReplicationConfiguration;
}

interface GetBucketReplicationRequest {
  readonly Bucket: string;
  readonly ExpectedBucketOwner: string;
}

interface GetBucketRequestPaymentOutput {
  readonly Payer: string;
}

interface GetBucketRequestPaymentRequest {
  readonly Bucket: string;
  readonly ExpectedBucketOwner: string;
}

interface GetBucketTaggingOutput {
  readonly TagSet: [];
}

interface GetBucketTaggingRequest {
  readonly Bucket: string;
  readonly ExpectedBucketOwner: string;
}

interface GetBucketVersioningOutput {
  readonly Status: string;
  readonly MFADelete: string;
}

interface GetBucketVersioningRequest {
  readonly Bucket: string;
  readonly ExpectedBucketOwner: string;
}

interface GetBucketWebsiteOutput {
  readonly RedirectAllRequestsTo: RedirectAllRequestsTo;
  readonly IndexDocument: IndexDocument;
  readonly ErrorDocument: ErrorDocument;
  readonly RoutingRules: [];
}

interface GetBucketWebsiteRequest {
  readonly Bucket: string;
  readonly ExpectedBucketOwner: string;
}

interface GetObjectAclOutput {
  readonly Owner: Owner;
  readonly Grants: [];
  readonly RequestCharged: string;
}

interface GetObjectAclRequest {
  readonly Bucket: string;
  readonly Key: string;
  readonly VersionId: string;
  readonly RequestPayer: string;
  readonly ExpectedBucketOwner: string;
}

interface GetObjectLegalHoldOutput {
  readonly LegalHold: ObjectLockLegalHold;
}

interface GetObjectLegalHoldRequest {
  readonly Bucket: string;
  readonly Key: string;
  readonly VersionId: string;
  readonly RequestPayer: string;
  readonly ExpectedBucketOwner: string;
}

interface GetObjectLockConfigurationOutput {
  readonly ObjectLockConfiguration: ObjectLockConfiguration;
}

interface GetObjectLockConfigurationRequest {
  readonly Bucket: string;
  readonly ExpectedBucketOwner: string;
}

interface GetObjectOutput {
  readonly Body: unknown;
  readonly DeleteMarker: boolean;
  readonly AcceptRanges: string;
  readonly Expiration: string;
  readonly Restore: string;
  readonly LastModified: Date;
  readonly ContentLength: number;
  readonly ETag: string;
  readonly MissingMeta: number;
  readonly VersionId: string;
  readonly CacheControl: string;
  readonly ContentDisposition: string;
  readonly ContentEncoding: string;
  readonly ContentLanguage: string;
  readonly ContentRange: string;
  readonly ContentType: string;
  readonly Expires: Date;
  readonly WebsiteRedirectLocation: string;
  readonly ServerSideEncryption: string;
  readonly Metadata: {[key: string]: any};
  readonly SSECustomerAlgorithm: string;
  readonly SSECustomerKeyMD5: string;
  readonly SSEKMSKeyId: string;
  readonly BucketKeyEnabled: boolean;
  readonly StorageClass: string;
  readonly RequestCharged: string;
  readonly ReplicationStatus: string;
  readonly PartsCount: number;
  readonly TagCount: number;
  readonly ObjectLockMode: string;
  readonly ObjectLockRetainUntilDate: Date;
  readonly ObjectLockLegalHoldStatus: string;
}

interface GetObjectRequest {
  readonly Bucket: string;
  readonly IfMatch: string;
  readonly IfModifiedSince: Date;
  readonly IfNoneMatch: string;
  readonly IfUnmodifiedSince: Date;
  readonly Key: string;
  readonly Range: string;
  readonly ResponseCacheControl: string;
  readonly ResponseContentDisposition: string;
  readonly ResponseContentEncoding: string;
  readonly ResponseContentLanguage: string;
  readonly ResponseContentType: string;
  readonly ResponseExpires: Date;
  readonly VersionId: string;
  readonly SSECustomerAlgorithm: string;
  readonly SSECustomerKey: string;
  readonly SSECustomerKeyMD5: string;
  readonly RequestPayer: string;
  readonly PartNumber: number;
  readonly ExpectedBucketOwner: string;
}

interface GetObjectRetentionOutput {
  readonly Retention: ObjectLockRetention;
}

interface GetObjectRetentionRequest {
  readonly Bucket: string;
  readonly Key: string;
  readonly VersionId: string;
  readonly RequestPayer: string;
  readonly ExpectedBucketOwner: string;
}

interface GetObjectTaggingOutput {
  readonly VersionId: string;
  readonly TagSet: [];
}

interface GetObjectTaggingRequest {
  readonly Bucket: string;
  readonly Key: string;
  readonly VersionId: string;
  readonly ExpectedBucketOwner: string;
  readonly RequestPayer: string;
}

interface GetObjectTorrentOutput {
  readonly Body: unknown;
  readonly RequestCharged: string;
}

interface GetObjectTorrentRequest {
  readonly Bucket: string;
  readonly Key: string;
  readonly RequestPayer: string;
  readonly ExpectedBucketOwner: string;
}

interface GetPublicAccessBlockOutput {
  readonly PublicAccessBlockConfiguration: PublicAccessBlockConfiguration;
}

interface GetPublicAccessBlockRequest {
  readonly Bucket: string;
  readonly ExpectedBucketOwner: string;
}

interface GlacierJobParameters {
  readonly Tier: string;
}

interface Grant {
  readonly Grantee: Grantee;
  readonly Permission: string;
}

interface Grantee {
  readonly DisplayName: string;
  readonly EmailAddress: string;
  readonly ID: string;
  readonly Type: string;
  readonly URI: string;
}

interface HeadBucketRequest {
  readonly Bucket: string;
  readonly ExpectedBucketOwner: string;
}

interface HeadObjectOutput {
  readonly DeleteMarker: boolean;
  readonly AcceptRanges: string;
  readonly Expiration: string;
  readonly Restore: string;
  readonly ArchiveStatus: string;
  readonly LastModified: Date;
  readonly ContentLength: number;
  readonly ETag: string;
  readonly MissingMeta: number;
  readonly VersionId: string;
  readonly CacheControl: string;
  readonly ContentDisposition: string;
  readonly ContentEncoding: string;
  readonly ContentLanguage: string;
  readonly ContentType: string;
  readonly Expires: Date;
  readonly WebsiteRedirectLocation: string;
  readonly ServerSideEncryption: string;
  readonly Metadata: {[key: string]: any};
  readonly SSECustomerAlgorithm: string;
  readonly SSECustomerKeyMD5: string;
  readonly SSEKMSKeyId: string;
  readonly BucketKeyEnabled: boolean;
  readonly StorageClass: string;
  readonly RequestCharged: string;
  readonly ReplicationStatus: string;
  readonly PartsCount: number;
  readonly ObjectLockMode: string;
  readonly ObjectLockRetainUntilDate: Date;
  readonly ObjectLockLegalHoldStatus: string;
}

interface HeadObjectRequest {
  readonly Bucket: string;
  readonly IfMatch: string;
  readonly IfModifiedSince: Date;
  readonly IfNoneMatch: string;
  readonly IfUnmodifiedSince: Date;
  readonly Key: string;
  readonly Range: string;
  readonly VersionId: string;
  readonly SSECustomerAlgorithm: string;
  readonly SSECustomerKey: string;
  readonly SSECustomerKeyMD5: string;
  readonly RequestPayer: string;
  readonly PartNumber: number;
  readonly ExpectedBucketOwner: string;
}

interface IndexDocument {
  readonly Suffix: string;
}

interface Initiator {
  readonly ID: string;
  readonly DisplayName: string;
}

interface InputSerialization {
  readonly CSV: CSVInput;
  readonly CompressionType: string;
  readonly JSON: JSONInput;
  readonly Parquet: ParquetInput;
}

interface IntelligentTieringAndOperator {
  readonly Prefix: string;
  readonly Tags: [];
}

interface IntelligentTieringConfiguration {
  readonly Id: string;
  readonly Filter: IntelligentTieringFilter;
  readonly Status: string;
  readonly Tierings: [];
}

interface IntelligentTieringFilter {
  readonly Prefix: string;
  readonly Tag: Tag;
  readonly And: IntelligentTieringAndOperator;
}

interface InvalidObjectState {
  readonly StorageClass: string;
  readonly AccessTier: string;
}

interface InventoryConfiguration {
  readonly Destination: InventoryDestination;
  readonly IsEnabled: boolean;
  readonly Filter: InventoryFilter;
  readonly Id: string;
  readonly IncludedObjectVersions: string;
  readonly OptionalFields: [];
  readonly Schedule: InventorySchedule;
}

interface InventoryDestination {
  readonly S3BucketDestination: InventoryS3BucketDestination;
}

interface InventoryEncryption {
  readonly SSES3: SSES3;
  readonly SSEKMS: SSEKMS;
}

interface InventoryFilter {
  readonly Prefix: string;
}

interface InventoryS3BucketDestination {
  readonly AccountId: string;
  readonly Bucket: string;
  readonly Format: string;
  readonly Prefix: string;
  readonly Encryption: InventoryEncryption;
}

interface InventorySchedule {
  readonly Frequency: string;
}

interface JSONInput {
  readonly Type: string;
}

interface JSONOutput {
  readonly RecordDelimiter: string;
}

interface LambdaFunctionConfiguration {
  readonly Id: string;
  readonly LambdaFunctionArn: string;
  readonly Events: [];
  readonly Filter: NotificationConfigurationFilter;
}

interface LifecycleConfiguration {
  readonly Rules: [];
}

interface LifecycleExpiration {
  readonly Date: Date;
  readonly Days: number;
  readonly ExpiredObjectDeleteMarker: boolean;
}

interface LifecycleRule {
  readonly Expiration: LifecycleExpiration;
  readonly ID: string;
  readonly Prefix: string;
  readonly Filter: LifecycleRuleFilter;
  readonly Status: string;
  readonly Transitions: [];
  readonly NoncurrentVersionTransitions: [];
  readonly NoncurrentVersionExpiration: NoncurrentVersionExpiration;
  readonly AbortIncompleteMultipartUpload: AbortIncompleteMultipartUpload;
}

interface LifecycleRuleAndOperator {
  readonly Prefix: string;
  readonly Tags: [];
  readonly ObjectSizeGreaterThan: number;
  readonly ObjectSizeLessThan: number;
}

interface LifecycleRuleFilter {
  readonly Prefix: string;
  readonly Tag: Tag;
  readonly ObjectSizeGreaterThan: number;
  readonly ObjectSizeLessThan: number;
  readonly And: LifecycleRuleAndOperator;
}

interface ListBucketAnalyticsConfigurationsOutput {
  readonly IsTruncated: boolean;
  readonly ContinuationToken: string;
  readonly NextContinuationToken: string;
  readonly AnalyticsConfigurationList: [];
}

interface ListBucketAnalyticsConfigurationsRequest {
  readonly Bucket: string;
  readonly ContinuationToken: string;
  readonly ExpectedBucketOwner: string;
}

interface ListBucketIntelligentTieringConfigurationsOutput {
  readonly IsTruncated: boolean;
  readonly ContinuationToken: string;
  readonly NextContinuationToken: string;
  readonly IntelligentTieringConfigurationList: [];
}

interface ListBucketIntelligentTieringConfigurationsRequest {
  readonly Bucket: string;
  readonly ContinuationToken: string;
}

interface ListBucketInventoryConfigurationsOutput {
  readonly ContinuationToken: string;
  readonly InventoryConfigurationList: [];
  readonly IsTruncated: boolean;
  readonly NextContinuationToken: string;
}

interface ListBucketInventoryConfigurationsRequest {
  readonly Bucket: string;
  readonly ContinuationToken: string;
  readonly ExpectedBucketOwner: string;
}

interface ListBucketMetricsConfigurationsOutput {
  readonly IsTruncated: boolean;
  readonly ContinuationToken: string;
  readonly NextContinuationToken: string;
  readonly MetricsConfigurationList: [];
}

interface ListBucketMetricsConfigurationsRequest {
  readonly Bucket: string;
  readonly ContinuationToken: string;
  readonly ExpectedBucketOwner: string;
}

interface ListBucketsOutput {
  readonly Buckets: [];
  readonly Owner: Owner;
}

interface ListMultipartUploadsOutput {
  readonly Bucket: string;
  readonly KeyMarker: string;
  readonly UploadIdMarker: string;
  readonly NextKeyMarker: string;
  readonly Prefix: string;
  readonly Delimiter: string;
  readonly NextUploadIdMarker: string;
  readonly MaxUploads: number;
  readonly IsTruncated: boolean;
  readonly Uploads: [];
  readonly CommonPrefixes: [];
  readonly EncodingType: string;
}

interface ListMultipartUploadsRequest {
  readonly Bucket: string;
  readonly Delimiter: string;
  readonly EncodingType: string;
  readonly KeyMarker: string;
  readonly MaxUploads: number;
  readonly Prefix: string;
  readonly UploadIdMarker: string;
  readonly ExpectedBucketOwner: string;
}

interface ListObjectVersionsOutput {
  readonly IsTruncated: boolean;
  readonly KeyMarker: string;
  readonly VersionIdMarker: string;
  readonly NextKeyMarker: string;
  readonly NextVersionIdMarker: string;
  readonly Versions: [];
  readonly DeleteMarkers: [];
  readonly Name: string;
  readonly Prefix: string;
  readonly Delimiter: string;
  readonly MaxKeys: number;
  readonly CommonPrefixes: [];
  readonly EncodingType: string;
}

interface ListObjectVersionsRequest {
  readonly Bucket: string;
  readonly Delimiter: string;
  readonly EncodingType: string;
  readonly KeyMarker: string;
  readonly MaxKeys: number;
  readonly Prefix: string;
  readonly VersionIdMarker: string;
  readonly ExpectedBucketOwner: string;
}

interface ListObjectsOutput {
  readonly IsTruncated: boolean;
  readonly Marker: string;
  readonly NextMarker: string;
  readonly Contents: [];
  readonly Name: string;
  readonly Prefix: string;
  readonly Delimiter: string;
  readonly MaxKeys: number;
  readonly CommonPrefixes: [];
  readonly EncodingType: string;
}

interface ListObjectsRequest {
  readonly Bucket: string;
  readonly Delimiter: string;
  readonly EncodingType: string;
  readonly Marker: string;
  readonly MaxKeys: number;
  readonly Prefix: string;
  readonly RequestPayer: string;
  readonly ExpectedBucketOwner: string;
}

interface ListObjectsV2Output {
  readonly IsTruncated: boolean;
  readonly Contents: [];
  readonly Name: string;
  readonly Prefix: string;
  readonly Delimiter: string;
  readonly MaxKeys: number;
  readonly CommonPrefixes: [];
  readonly EncodingType: string;
  readonly KeyCount: number;
  readonly ContinuationToken: string;
  readonly NextContinuationToken: string;
  readonly StartAfter: string;
}

interface ListObjectsV2Request {
  readonly Bucket: string;
  readonly Delimiter: string;
  readonly EncodingType: string;
  readonly MaxKeys: number;
  readonly Prefix: string;
  readonly ContinuationToken: string;
  readonly FetchOwner: boolean;
  readonly StartAfter: string;
  readonly RequestPayer: string;
  readonly ExpectedBucketOwner: string;
}

interface ListPartsOutput {
  readonly AbortDate: Date;
  readonly AbortRuleId: string;
  readonly Bucket: string;
  readonly Key: string;
  readonly UploadId: string;
  readonly PartNumberMarker: number;
  readonly NextPartNumberMarker: number;
  readonly MaxParts: number;
  readonly IsTruncated: boolean;
  readonly Parts: [];
  readonly Initiator: Initiator;
  readonly Owner: Owner;
  readonly StorageClass: string;
  readonly RequestCharged: string;
}

interface ListPartsRequest {
  readonly Bucket: string;
  readonly Key: string;
  readonly MaxParts: number;
  readonly PartNumberMarker: number;
  readonly UploadId: string;
  readonly RequestPayer: string;
  readonly ExpectedBucketOwner: string;
}

interface LoggingEnabled {
  readonly TargetBucket: string;
  readonly TargetGrants: [];
  readonly TargetPrefix: string;
}

interface MetadataEntry {
  readonly Name: string;
  readonly Value: string;
}

interface Metrics {
  readonly Status: string;
  readonly EventThreshold: ReplicationTimeValue;
}

interface MetricsAndOperator {
  readonly Prefix: string;
  readonly Tags: [];
  readonly AccessPointArn: string;
}

interface MetricsConfiguration {
  readonly Id: string;
  readonly Filter: MetricsFilter;
}

interface MetricsFilter {
  readonly Prefix: string;
  readonly Tag: Tag;
  readonly AccessPointArn: string;
  readonly And: MetricsAndOperator;
}

interface MultipartUpload {
  readonly UploadId: string;
  readonly Key: string;
  readonly Initiated: Date;
  readonly StorageClass: string;
  readonly Owner: Owner;
  readonly Initiator: Initiator;
}

interface NoSuchBucket {
}

interface NoSuchKey {
}

interface NoSuchUpload {
}

interface NoncurrentVersionExpiration {
  readonly NoncurrentDays: number;
  readonly NewerNoncurrentVersions: number;
}

interface NoncurrentVersionTransition {
  readonly NoncurrentDays: number;
  readonly StorageClass: string;
  readonly NewerNoncurrentVersions: number;
}

interface NotificationConfiguration {
  readonly TopicConfigurations: [];
  readonly QueueConfigurations: [];
  readonly LambdaFunctionConfigurations: [];
  readonly EventBridgeConfiguration: EventBridgeConfiguration;
}

interface NotificationConfigurationDeprecated {
  readonly TopicConfiguration: TopicConfigurationDeprecated;
  readonly QueueConfiguration: QueueConfigurationDeprecated;
  readonly CloudFunctionConfiguration: CloudFunctionConfiguration;
}

interface NotificationConfigurationFilter {
  readonly Key: S3KeyFilter;
}

interface Object {
  readonly Key: string;
  readonly LastModified: Date;
  readonly ETag: string;
  readonly Size: number;
  readonly StorageClass: string;
  readonly Owner: Owner;
}

interface ObjectAlreadyInActiveTierError {
}

interface ObjectIdentifier {
  readonly Key: string;
  readonly VersionId: string;
}

interface ObjectLockConfiguration {
  readonly ObjectLockEnabled: string;
  readonly Rule: ObjectLockRule;
}

interface ObjectLockLegalHold {
  readonly Status: string;
}

interface ObjectLockRetention {
  readonly Mode: string;
  readonly RetainUntilDate: Date;
}

interface ObjectLockRule {
  readonly DefaultRetention: DefaultRetention;
}

interface ObjectNotInActiveTierError {
}

interface ObjectVersion {
  readonly ETag: string;
  readonly Size: number;
  readonly StorageClass: string;
  readonly Key: string;
  readonly VersionId: string;
  readonly IsLatest: boolean;
  readonly LastModified: Date;
  readonly Owner: Owner;
}

interface OutputLocation {
  readonly S3: S3Location;
}

interface OutputSerialization {
  readonly CSV: CSVOutput;
  readonly JSON: JSONOutput;
}

interface Owner {
  readonly DisplayName: string;
  readonly ID: string;
}

interface OwnershipControls {
  readonly Rules: [];
}

interface OwnershipControlsRule {
  readonly ObjectOwnership: string;
}

interface ParquetInput {
}

interface Part {
  readonly PartNumber: number;
  readonly LastModified: Date;
  readonly ETag: string;
  readonly Size: number;
}

interface PolicyStatus {
  readonly IsPublic: boolean;
}

interface Progress {
  readonly BytesScanned: number;
  readonly BytesProcessed: number;
  readonly BytesReturned: number;
}

interface ProgressEvent {
  readonly Details: Progress;
}

interface PublicAccessBlockConfiguration {
  readonly BlockPublicAcls: boolean;
  readonly IgnorePublicAcls: boolean;
  readonly BlockPublicPolicy: boolean;
  readonly RestrictPublicBuckets: boolean;
}

interface PutBucketAccelerateConfigurationRequest {
  readonly Bucket: string;
  readonly AccelerateConfiguration: AccelerateConfiguration;
  readonly ExpectedBucketOwner: string;
}

interface PutBucketAclRequest {
  readonly ACL: string;
  readonly AccessControlPolicy: AccessControlPolicy;
  readonly Bucket: string;
  readonly ContentMD5: string;
  readonly GrantFullControl: string;
  readonly GrantRead: string;
  readonly GrantReadACP: string;
  readonly GrantWrite: string;
  readonly GrantWriteACP: string;
  readonly ExpectedBucketOwner: string;
}

interface PutBucketAnalyticsConfigurationRequest {
  readonly Bucket: string;
  readonly Id: string;
  readonly AnalyticsConfiguration: AnalyticsConfiguration;
  readonly ExpectedBucketOwner: string;
}

interface PutBucketCorsRequest {
  readonly Bucket: string;
  readonly CORSConfiguration: CORSConfiguration;
  readonly ContentMD5: string;
  readonly ExpectedBucketOwner: string;
}

interface PutBucketEncryptionRequest {
  readonly Bucket: string;
  readonly ContentMD5: string;
  readonly ServerSideEncryptionConfiguration: ServerSideEncryptionConfiguration;
  readonly ExpectedBucketOwner: string;
}

interface PutBucketIntelligentTieringConfigurationRequest {
  readonly Bucket: string;
  readonly Id: string;
  readonly IntelligentTieringConfiguration: IntelligentTieringConfiguration;
}

interface PutBucketInventoryConfigurationRequest {
  readonly Bucket: string;
  readonly Id: string;
  readonly InventoryConfiguration: InventoryConfiguration;
  readonly ExpectedBucketOwner: string;
}

interface PutBucketLifecycleConfigurationRequest {
  readonly Bucket: string;
  readonly LifecycleConfiguration: BucketLifecycleConfiguration;
  readonly ExpectedBucketOwner: string;
}

interface PutBucketLifecycleRequest {
  readonly Bucket: string;
  readonly ContentMD5: string;
  readonly LifecycleConfiguration: LifecycleConfiguration;
  readonly ExpectedBucketOwner: string;
}

interface PutBucketLoggingRequest {
  readonly Bucket: string;
  readonly BucketLoggingStatus: BucketLoggingStatus;
  readonly ContentMD5: string;
  readonly ExpectedBucketOwner: string;
}

interface PutBucketMetricsConfigurationRequest {
  readonly Bucket: string;
  readonly Id: string;
  readonly MetricsConfiguration: MetricsConfiguration;
  readonly ExpectedBucketOwner: string;
}

interface PutBucketNotificationConfigurationRequest {
  readonly Bucket: string;
  readonly NotificationConfiguration: NotificationConfiguration;
  readonly ExpectedBucketOwner: string;
  readonly SkipDestinationValidation: boolean;
}

interface PutBucketNotificationRequest {
  readonly Bucket: string;
  readonly ContentMD5: string;
  readonly NotificationConfiguration: NotificationConfigurationDeprecated;
  readonly ExpectedBucketOwner: string;
}

interface PutBucketOwnershipControlsRequest {
  readonly Bucket: string;
  readonly ContentMD5: string;
  readonly ExpectedBucketOwner: string;
  readonly OwnershipControls: OwnershipControls;
}

interface PutBucketPolicyRequest {
  readonly Bucket: string;
  readonly ContentMD5: string;
  readonly ConfirmRemoveSelfBucketAccess: boolean;
  readonly Policy: string;
  readonly ExpectedBucketOwner: string;
}

interface PutBucketReplicationRequest {
  readonly Bucket: string;
  readonly ContentMD5: string;
  readonly ReplicationConfiguration: ReplicationConfiguration;
  readonly Token: string;
  readonly ExpectedBucketOwner: string;
}

interface PutBucketRequestPaymentRequest {
  readonly Bucket: string;
  readonly ContentMD5: string;
  readonly RequestPaymentConfiguration: RequestPaymentConfiguration;
  readonly ExpectedBucketOwner: string;
}

interface PutBucketTaggingRequest {
  readonly Bucket: string;
  readonly ContentMD5: string;
  readonly Tagging: Tagging;
  readonly ExpectedBucketOwner: string;
}

interface PutBucketVersioningRequest {
  readonly Bucket: string;
  readonly ContentMD5: string;
  readonly MFA: string;
  readonly VersioningConfiguration: VersioningConfiguration;
  readonly ExpectedBucketOwner: string;
}

interface PutBucketWebsiteRequest {
  readonly Bucket: string;
  readonly ContentMD5: string;
  readonly WebsiteConfiguration: WebsiteConfiguration;
  readonly ExpectedBucketOwner: string;
}

interface PutObjectAclOutput {
  readonly RequestCharged: string;
}

interface PutObjectAclRequest {
  readonly ACL: string;
  readonly AccessControlPolicy: AccessControlPolicy;
  readonly Bucket: string;
  readonly ContentMD5: string;
  readonly GrantFullControl: string;
  readonly GrantRead: string;
  readonly GrantReadACP: string;
  readonly GrantWrite: string;
  readonly GrantWriteACP: string;
  readonly Key: string;
  readonly RequestPayer: string;
  readonly VersionId: string;
  readonly ExpectedBucketOwner: string;
}

interface PutObjectLegalHoldOutput {
  readonly RequestCharged: string;
}

interface PutObjectLegalHoldRequest {
  readonly Bucket: string;
  readonly Key: string;
  readonly LegalHold: ObjectLockLegalHold;
  readonly RequestPayer: string;
  readonly VersionId: string;
  readonly ContentMD5: string;
  readonly ExpectedBucketOwner: string;
}

interface PutObjectLockConfigurationOutput {
  readonly RequestCharged: string;
}

interface PutObjectLockConfigurationRequest {
  readonly Bucket: string;
  readonly ObjectLockConfiguration: ObjectLockConfiguration;
  readonly RequestPayer: string;
  readonly Token: string;
  readonly ContentMD5: string;
  readonly ExpectedBucketOwner: string;
}

interface PutObjectOutput {
  readonly Expiration: string;
  readonly ETag: string;
  readonly ServerSideEncryption: string;
  readonly VersionId: string;
  readonly SSECustomerAlgorithm: string;
  readonly SSECustomerKeyMD5: string;
  readonly SSEKMSKeyId: string;
  readonly SSEKMSEncryptionContext: string;
  readonly BucketKeyEnabled: boolean;
  readonly RequestCharged: string;
}

interface PutObjectRequest {
  readonly ACL: string;
  readonly Body: unknown;
  readonly Bucket: string;
  readonly CacheControl: string;
  readonly ContentDisposition: string;
  readonly ContentEncoding: string;
  readonly ContentLanguage: string;
  readonly ContentLength: number;
  readonly ContentMD5: string;
  readonly ContentType: string;
  readonly Expires: Date;
  readonly GrantFullControl: string;
  readonly GrantRead: string;
  readonly GrantReadACP: string;
  readonly GrantWriteACP: string;
  readonly Key: string;
  readonly Metadata: {[key: string]: any};
  readonly ServerSideEncryption: string;
  readonly StorageClass: string;
  readonly WebsiteRedirectLocation: string;
  readonly SSECustomerAlgorithm: string;
  readonly SSECustomerKey: string;
  readonly SSECustomerKeyMD5: string;
  readonly SSEKMSKeyId: string;
  readonly SSEKMSEncryptionContext: string;
  readonly BucketKeyEnabled: boolean;
  readonly RequestPayer: string;
  readonly Tagging: string;
  readonly ObjectLockMode: string;
  readonly ObjectLockRetainUntilDate: Date;
  readonly ObjectLockLegalHoldStatus: string;
  readonly ExpectedBucketOwner: string;
}

interface PutObjectRetentionOutput {
  readonly RequestCharged: string;
}

interface PutObjectRetentionRequest {
  readonly Bucket: string;
  readonly Key: string;
  readonly Retention: ObjectLockRetention;
  readonly RequestPayer: string;
  readonly VersionId: string;
  readonly BypassGovernanceRetention: boolean;
  readonly ContentMD5: string;
  readonly ExpectedBucketOwner: string;
}

interface PutObjectTaggingOutput {
  readonly VersionId: string;
}

interface PutObjectTaggingRequest {
  readonly Bucket: string;
  readonly Key: string;
  readonly VersionId: string;
  readonly ContentMD5: string;
  readonly Tagging: Tagging;
  readonly ExpectedBucketOwner: string;
  readonly RequestPayer: string;
}

interface PutPublicAccessBlockRequest {
  readonly Bucket: string;
  readonly ContentMD5: string;
  readonly PublicAccessBlockConfiguration: PublicAccessBlockConfiguration;
  readonly ExpectedBucketOwner: string;
}

interface QueueConfiguration {
  readonly Id: string;
  readonly QueueArn: string;
  readonly Events: [];
  readonly Filter: NotificationConfigurationFilter;
}

interface QueueConfigurationDeprecated {
  readonly Id: string;
  readonly Event: string;
  readonly Events: [];
  readonly Queue: string;
}

interface RecordsEvent {
  readonly Payload: unknown;
}

interface Redirect {
  readonly HostName: string;
  readonly HttpRedirectCode: string;
  readonly Protocol: string;
  readonly ReplaceKeyPrefixWith: string;
  readonly ReplaceKeyWith: string;
}

interface RedirectAllRequestsTo {
  readonly HostName: string;
  readonly Protocol: string;
}

interface ReplicaModifications {
  readonly Status: string;
}

interface ReplicationConfiguration {
  readonly Role: string;
  readonly Rules: [];
}

interface ReplicationRule {
  readonly ID: string;
  readonly Priority: number;
  readonly Prefix: string;
  readonly Filter: ReplicationRuleFilter;
  readonly Status: string;
  readonly SourceSelectionCriteria: SourceSelectionCriteria;
  readonly ExistingObjectReplication: ExistingObjectReplication;
  readonly Destination: Destination;
  readonly DeleteMarkerReplication: DeleteMarkerReplication;
}

interface ReplicationRuleAndOperator {
  readonly Prefix: string;
  readonly Tags: [];
}

interface ReplicationRuleFilter {
  readonly Prefix: string;
  readonly Tag: Tag;
  readonly And: ReplicationRuleAndOperator;
}

interface ReplicationTime {
  readonly Status: string;
  readonly Time: ReplicationTimeValue;
}

interface ReplicationTimeValue {
  readonly Minutes: number;
}

interface RequestPaymentConfiguration {
  readonly Payer: string;
}

interface RequestProgress {
  readonly Enabled: boolean;
}

interface RestoreObjectOutput {
  readonly RequestCharged: string;
  readonly RestoreOutputPath: string;
}

interface RestoreObjectRequest {
  readonly Bucket: string;
  readonly Key: string;
  readonly VersionId: string;
  readonly RestoreRequest: RestoreRequest;
  readonly RequestPayer: string;
  readonly ExpectedBucketOwner: string;
}

interface RestoreRequest {
  readonly Days: number;
  readonly GlacierJobParameters: GlacierJobParameters;
  readonly Type: string;
  readonly Tier: string;
  readonly Description: string;
  readonly SelectParameters: SelectParameters;
  readonly OutputLocation: OutputLocation;
}

interface RoutingRule {
  readonly Condition: Condition;
  readonly Redirect: Redirect;
}

interface Rule {
  readonly Expiration: LifecycleExpiration;
  readonly ID: string;
  readonly Prefix: string;
  readonly Status: string;
  readonly Transition: Transition;
  readonly NoncurrentVersionTransition: NoncurrentVersionTransition;
  readonly NoncurrentVersionExpiration: NoncurrentVersionExpiration;
  readonly AbortIncompleteMultipartUpload: AbortIncompleteMultipartUpload;
}

interface S3KeyFilter {
  readonly FilterRules: [];
}

interface S3Location {
  readonly BucketName: string;
  readonly Prefix: string;
  readonly Encryption: Encryption;
  readonly CannedACL: string;
  readonly AccessControlList: [];
  readonly Tagging: Tagging;
  readonly UserMetadata: [];
  readonly StorageClass: string;
}

interface SSEKMS {
  readonly KeyId: string;
}

interface SSES3 {
}

interface ScanRange {
  readonly Start: number;
  readonly End: number;
}

interface SelectObjectContentEventStream {
  readonly Records: RecordsEvent;
  readonly Stats: StatsEvent;
  readonly Progress: ProgressEvent;
  readonly Cont: ContinuationEvent;
  readonly End: EndEvent;
}

interface SelectObjectContentOutput {
  readonly Payload: SelectObjectContentEventStream;
}

interface SelectObjectContentRequest {
  readonly Bucket: string;
  readonly Key: string;
  readonly SSECustomerAlgorithm: string;
  readonly SSECustomerKey: string;
  readonly SSECustomerKeyMD5: string;
  readonly Expression: string;
  readonly ExpressionType: string;
  readonly RequestProgress: RequestProgress;
  readonly InputSerialization: InputSerialization;
  readonly OutputSerialization: OutputSerialization;
  readonly ScanRange: ScanRange;
  readonly ExpectedBucketOwner: string;
}

interface SelectParameters {
  readonly InputSerialization: InputSerialization;
  readonly ExpressionType: string;
  readonly Expression: string;
  readonly OutputSerialization: OutputSerialization;
}

interface ServerSideEncryptionByDefault {
  readonly SSEAlgorithm: string;
  readonly KMSMasterKeyID: string;
}

interface ServerSideEncryptionConfiguration {
  readonly Rules: [];
}

interface ServerSideEncryptionRule {
  readonly ApplyServerSideEncryptionByDefault: ServerSideEncryptionByDefault;
  readonly BucketKeyEnabled: boolean;
}

interface SourceSelectionCriteria {
  readonly SseKmsEncryptedObjects: SseKmsEncryptedObjects;
  readonly ReplicaModifications: ReplicaModifications;
}

interface SseKmsEncryptedObjects {
  readonly Status: string;
}

interface Stats {
  readonly BytesScanned: number;
  readonly BytesProcessed: number;
  readonly BytesReturned: number;
}

interface StatsEvent {
  readonly Details: Stats;
}

interface StorageClassAnalysis {
  readonly DataExport: StorageClassAnalysisDataExport;
}

interface StorageClassAnalysisDataExport {
  readonly OutputSchemaVersion: string;
  readonly Destination: AnalyticsExportDestination;
}

interface Tag {
  readonly Key: string;
  readonly Value: string;
}

interface Tagging {
  readonly TagSet: [];
}

interface TargetGrant {
  readonly Grantee: Grantee;
  readonly Permission: string;
}

interface Tiering {
  readonly Days: number;
  readonly AccessTier: string;
}

interface TopicConfiguration {
  readonly Id: string;
  readonly TopicArn: string;
  readonly Events: [];
  readonly Filter: NotificationConfigurationFilter;
}

interface TopicConfigurationDeprecated {
  readonly Id: string;
  readonly Events: [];
  readonly Event: string;
  readonly Topic: string;
}

interface Transition {
  readonly Date: Date;
  readonly Days: number;
  readonly StorageClass: string;
}

interface UploadPartCopyOutput {
  readonly CopySourceVersionId: string;
  readonly CopyPartResult: CopyPartResult;
  readonly ServerSideEncryption: string;
  readonly SSECustomerAlgorithm: string;
  readonly SSECustomerKeyMD5: string;
  readonly SSEKMSKeyId: string;
  readonly BucketKeyEnabled: boolean;
  readonly RequestCharged: string;
}

interface UploadPartCopyRequest {
  readonly Bucket: string;
  readonly CopySource: string;
  readonly CopySourceIfMatch: string;
  readonly CopySourceIfModifiedSince: Date;
  readonly CopySourceIfNoneMatch: string;
  readonly CopySourceIfUnmodifiedSince: Date;
  readonly CopySourceRange: string;
  readonly Key: string;
  readonly PartNumber: number;
  readonly UploadId: string;
  readonly SSECustomerAlgorithm: string;
  readonly SSECustomerKey: string;
  readonly SSECustomerKeyMD5: string;
  readonly CopySourceSSECustomerAlgorithm: string;
  readonly CopySourceSSECustomerKey: string;
  readonly CopySourceSSECustomerKeyMD5: string;
  readonly RequestPayer: string;
  readonly ExpectedBucketOwner: string;
  readonly ExpectedSourceBucketOwner: string;
}

interface UploadPartOutput {
  readonly ServerSideEncryption: string;
  readonly ETag: string;
  readonly SSECustomerAlgorithm: string;
  readonly SSECustomerKeyMD5: string;
  readonly SSEKMSKeyId: string;
  readonly BucketKeyEnabled: boolean;
  readonly RequestCharged: string;
}

interface UploadPartRequest {
  readonly Body: unknown;
  readonly Bucket: string;
  readonly ContentLength: number;
  readonly ContentMD5: string;
  readonly Key: string;
  readonly PartNumber: number;
  readonly UploadId: string;
  readonly SSECustomerAlgorithm: string;
  readonly SSECustomerKey: string;
  readonly SSECustomerKeyMD5: string;
  readonly RequestPayer: string;
  readonly ExpectedBucketOwner: string;
}

interface VersioningConfiguration {
  readonly MFADelete: string;
  readonly Status: string;
}

interface WebsiteConfiguration {
  readonly ErrorDocument: ErrorDocument;
  readonly IndexDocument: IndexDocument;
  readonly RedirectAllRequestsTo: RedirectAllRequestsTo;
  readonly RoutingRules: [];
}

interface WriteGetObjectResponseRequest {
  readonly RequestRoute: string;
  readonly RequestToken: string;
  readonly Body: unknown;
  readonly StatusCode: number;
  readonly ErrorCode: string;
  readonly ErrorMessage: string;
  readonly AcceptRanges: string;
  readonly CacheControl: string;
  readonly ContentDisposition: string;
  readonly ContentEncoding: string;
  readonly ContentLanguage: string;
  readonly ContentLength: number;
  readonly ContentRange: string;
  readonly ContentType: string;
  readonly DeleteMarker: boolean;
  readonly ETag: string;
  readonly Expires: Date;
  readonly Expiration: string;
  readonly LastModified: Date;
  readonly MissingMeta: number;
  readonly Metadata: {[key: string]: any};
  readonly ObjectLockMode: string;
  readonly ObjectLockLegalHoldStatus: string;
  readonly ObjectLockRetainUntilDate: Date;
  readonly PartsCount: number;
  readonly ReplicationStatus: string;
  readonly RequestCharged: string;
  readonly Restore: string;
  readonly ServerSideEncryption: string;
  readonly SSECustomerAlgorithm: string;
  readonly SSEKMSKeyId: string;
  readonly SSECustomerKeyMD5: string;
  readonly StorageClass: string;
  readonly TagCount: number;
  readonly VersionId: string;
  readonly BucketKeyEnabled: boolean;
}

