/**
 * STOP. This file is autogenerated. DO NOT EDIT by hand
 */
export interface AcceptEulas {
  readonly clientToken?: string;
  readonly eulaIds?: [];
  readonly studioId: string;
}

export interface CreateLaunchProfile {
  readonly clientToken?: string;
  readonly description?: string;
  readonly ec2SubnetIds: [];
  readonly launchProfileProtocolVersions: [];
  readonly name: string;
  readonly streamConfiguration: StreamConfigurationCreate;
  readonly studioComponentIds: [];
  readonly studioId: string;
  readonly tags?: {[key: string]: any};
}

export interface CreateStreamingImage {
  readonly clientToken?: string;
  readonly description?: string;
  readonly ec2ImageId: string;
  readonly name: string;
  readonly studioId: string;
  readonly tags?: {[key: string]: any};
}

export interface CreateStreamingSession {
  readonly clientToken?: string;
  readonly ec2InstanceType?: string;
  readonly launchProfileId?: string;
  readonly ownedBy?: string;
  readonly streamingImageId?: string;
  readonly studioId: string;
  readonly tags?: {[key: string]: any};
}

export interface CreateStreamingSessionStream {
  readonly clientToken?: string;
  readonly expirationInSeconds?: number;
  readonly sessionId: string;
  readonly studioId: string;
}

export interface CreateStudio {
  readonly adminRoleArn: string;
  readonly clientToken?: string;
  readonly displayName: string;
  readonly studioEncryptionConfiguration?: StudioEncryptionConfiguration;
  readonly studioName: string;
  readonly tags?: {[key: string]: any};
  readonly userRoleArn: string;
}

export interface CreateStudioComponent {
  readonly clientToken?: string;
  readonly configuration?: StudioComponentConfiguration;
  readonly description?: string;
  readonly ec2SecurityGroupIds?: [];
  readonly initializationScripts?: [];
  readonly name: string;
  readonly scriptParameters?: [];
  readonly studioId: string;
  readonly subtype?: string;
  readonly tags?: {[key: string]: any};
  readonly type: string;
}

export interface DeleteLaunchProfile {
  readonly clientToken?: string;
  readonly launchProfileId: string;
  readonly studioId: string;
}

export interface DeleteLaunchProfileMember {
  readonly clientToken?: string;
  readonly launchProfileId: string;
  readonly principalId: string;
  readonly studioId: string;
}

export interface DeleteStreamingImage {
  readonly clientToken?: string;
  readonly streamingImageId: string;
  readonly studioId: string;
}

export interface DeleteStreamingSession {
  readonly clientToken?: string;
  readonly sessionId: string;
  readonly studioId: string;
}

export interface DeleteStudio {
  readonly clientToken?: string;
  readonly studioId: string;
}

export interface DeleteStudioComponent {
  readonly clientToken?: string;
  readonly studioComponentId: string;
  readonly studioId: string;
}

export interface DeleteStudioMember {
  readonly clientToken?: string;
  readonly principalId: string;
  readonly studioId: string;
}

export interface GetEula {
  readonly eulaId: string;
}

export interface GetLaunchProfile {
  readonly launchProfileId: string;
  readonly studioId: string;
}

export interface GetLaunchProfileDetails {
  readonly launchProfileId: string;
  readonly studioId: string;
}

export interface GetLaunchProfileInitialization {
  readonly launchProfileId: string;
  readonly launchProfileProtocolVersions: [];
  readonly launchPurpose: string;
  readonly platform: string;
  readonly studioId: string;
}

export interface GetLaunchProfileMember {
  readonly launchProfileId: string;
  readonly principalId: string;
  readonly studioId: string;
}

export interface GetStreamingImage {
  readonly streamingImageId: string;
  readonly studioId: string;
}

export interface GetStreamingSession {
  readonly sessionId: string;
  readonly studioId: string;
}

export interface GetStreamingSessionStream {
  readonly sessionId: string;
  readonly streamId: string;
  readonly studioId: string;
}

export interface GetStudio {
  readonly studioId: string;
}

export interface GetStudioComponent {
  readonly studioComponentId: string;
  readonly studioId: string;
}

export interface GetStudioMember {
  readonly principalId: string;
  readonly studioId: string;
}

export interface ListEulaAcceptances {
  readonly eulaIds?: [];
  readonly nextToken?: string;
  readonly studioId: string;
}

export interface ListEulas {
  readonly eulaIds?: [];
  readonly nextToken?: string;
}

export interface ListLaunchProfileMembers {
  readonly launchProfileId: string;
  readonly maxResults?: number;
  readonly nextToken?: string;
  readonly studioId: string;
}

export interface ListLaunchProfiles {
  readonly maxResults?: number;
  readonly nextToken?: string;
  readonly principalId?: string;
  readonly states?: [];
  readonly studioId: string;
}

export interface ListStreamingImages {
  readonly nextToken?: string;
  readonly owner?: string;
  readonly studioId: string;
}

export interface ListStreamingSessions {
  readonly createdBy?: string;
  readonly nextToken?: string;
  readonly ownedBy?: string;
  readonly sessionIds?: string;
  readonly studioId: string;
}

export interface ListStudioComponents {
  readonly maxResults?: number;
  readonly nextToken?: string;
  readonly states?: [];
  readonly studioId: string;
  readonly types?: [];
}

export interface ListStudioMembers {
  readonly maxResults?: number;
  readonly nextToken?: string;
  readonly studioId: string;
}

export interface ListStudios {
  readonly nextToken?: string;
}

export interface ListTagsForResource {
  readonly resourceArn: string;
}

export interface PutLaunchProfileMembers {
  readonly clientToken?: string;
  readonly identityStoreId: string;
  readonly launchProfileId: string;
  readonly members: [];
  readonly studioId: string;
}

export interface PutStudioMembers {
  readonly clientToken?: string;
  readonly identityStoreId: string;
  readonly members: [];
  readonly studioId: string;
}

export interface StartStreamingSession {
  readonly clientToken?: string;
  readonly sessionId: string;
  readonly studioId: string;
}

export interface StartStudioSSOConfigurationRepair {
  readonly clientToken?: string;
  readonly studioId: string;
}

export interface StopStreamingSession {
  readonly clientToken?: string;
  readonly sessionId: string;
  readonly studioId: string;
}

export interface TagResource {
  readonly resourceArn: string;
  readonly tags?: {[key: string]: any};
}

export interface UntagResource {
  readonly resourceArn: string;
  readonly tagKeys: [];
}

export interface UpdateLaunchProfile {
  readonly clientToken?: string;
  readonly description?: string;
  readonly launchProfileId: string;
  readonly launchProfileProtocolVersions?: [];
  readonly name?: string;
  readonly streamConfiguration?: StreamConfigurationCreate;
  readonly studioComponentIds?: [];
  readonly studioId: string;
}

export interface UpdateLaunchProfileMember {
  readonly clientToken?: string;
  readonly launchProfileId: string;
  readonly persona: string;
  readonly principalId: string;
  readonly studioId: string;
}

export interface UpdateStreamingImage {
  readonly clientToken?: string;
  readonly description?: string;
  readonly name?: string;
  readonly streamingImageId: string;
  readonly studioId: string;
}

export interface UpdateStudio {
  readonly adminRoleArn?: string;
  readonly clientToken?: string;
  readonly displayName?: string;
  readonly studioId: string;
  readonly userRoleArn?: string;
}

export interface UpdateStudioComponent {
  readonly clientToken?: string;
  readonly configuration?: StudioComponentConfiguration;
  readonly description?: string;
  readonly ec2SecurityGroupIds?: [];
  readonly initializationScripts?: [];
  readonly name?: string;
  readonly scriptParameters?: [];
  readonly studioComponentId: string;
  readonly studioId: string;
  readonly subtype?: string;
  readonly type?: string;
}

export interface AcceptEulasRequest {
  readonly clientToken?: string;
  readonly eulaIds?: [];
  readonly studioId: string;
}

export interface AcceptEulasResponse {
  readonly eulaAcceptances?: [];
}

export interface AccessDeniedException {
  readonly code?: string;
  readonly context?: {[key: string]: any};
  readonly message?: string;
}

export interface ActiveDirectoryComputerAttribute {
  readonly name?: string;
  readonly value?: string;
}

export interface ActiveDirectoryConfiguration {
  readonly computerAttributes?: [];
  readonly directoryId?: string;
  readonly organizationalUnitDistinguishedName?: string;
}

export interface ComputeFarmConfiguration {
  readonly activeDirectoryUser?: string;
  readonly endpoint?: string;
}

export interface ConflictException {
  readonly code?: string;
  readonly context?: {[key: string]: any};
  readonly message?: string;
}

export interface CreateLaunchProfileRequest {
  readonly clientToken?: string;
  readonly description?: string;
  readonly ec2SubnetIds: [];
  readonly launchProfileProtocolVersions: [];
  readonly name: string;
  readonly streamConfiguration: StreamConfigurationCreate;
  readonly studioComponentIds: [];
  readonly studioId: string;
  readonly tags?: {[key: string]: any};
}

export interface CreateLaunchProfileResponse {
  readonly launchProfile?: LaunchProfile;
}

export interface CreateStreamingImageRequest {
  readonly clientToken?: string;
  readonly description?: string;
  readonly ec2ImageId: string;
  readonly name: string;
  readonly studioId: string;
  readonly tags?: {[key: string]: any};
}

export interface CreateStreamingImageResponse {
  readonly streamingImage?: StreamingImage;
}

export interface CreateStreamingSessionRequest {
  readonly clientToken?: string;
  readonly ec2InstanceType?: string;
  readonly launchProfileId?: string;
  readonly ownedBy?: string;
  readonly streamingImageId?: string;
  readonly studioId: string;
  readonly tags?: {[key: string]: any};
}

export interface CreateStreamingSessionResponse {
  readonly session?: StreamingSession;
}

export interface CreateStreamingSessionStreamRequest {
  readonly clientToken?: string;
  readonly expirationInSeconds?: number;
  readonly sessionId: string;
  readonly studioId: string;
}

export interface CreateStreamingSessionStreamResponse {
  readonly stream?: StreamingSessionStream;
}

export interface CreateStudioComponentRequest {
  readonly clientToken?: string;
  readonly configuration?: StudioComponentConfiguration;
  readonly description?: string;
  readonly ec2SecurityGroupIds?: [];
  readonly initializationScripts?: [];
  readonly name: string;
  readonly scriptParameters?: [];
  readonly studioId: string;
  readonly subtype?: string;
  readonly tags?: {[key: string]: any};
  readonly type: string;
}

export interface CreateStudioComponentResponse {
  readonly studioComponent?: StudioComponent;
}

export interface CreateStudioRequest {
  readonly adminRoleArn: string;
  readonly clientToken?: string;
  readonly displayName: string;
  readonly studioEncryptionConfiguration?: StudioEncryptionConfiguration;
  readonly studioName: string;
  readonly tags?: {[key: string]: any};
  readonly userRoleArn: string;
}

export interface CreateStudioResponse {
  readonly studio?: Studio;
}

export interface DeleteLaunchProfileMemberRequest {
  readonly clientToken?: string;
  readonly launchProfileId: string;
  readonly principalId: string;
  readonly studioId: string;
}

export interface DeleteLaunchProfileMemberResponse {
}

export interface DeleteLaunchProfileRequest {
  readonly clientToken?: string;
  readonly launchProfileId: string;
  readonly studioId: string;
}

export interface DeleteLaunchProfileResponse {
  readonly launchProfile?: LaunchProfile;
}

export interface DeleteStreamingImageRequest {
  readonly clientToken?: string;
  readonly streamingImageId: string;
  readonly studioId: string;
}

export interface DeleteStreamingImageResponse {
  readonly streamingImage?: StreamingImage;
}

export interface DeleteStreamingSessionRequest {
  readonly clientToken?: string;
  readonly sessionId: string;
  readonly studioId: string;
}

export interface DeleteStreamingSessionResponse {
  readonly session?: StreamingSession;
}

export interface DeleteStudioComponentRequest {
  readonly clientToken?: string;
  readonly studioComponentId: string;
  readonly studioId: string;
}

export interface DeleteStudioComponentResponse {
  readonly studioComponent?: StudioComponent;
}

export interface DeleteStudioMemberRequest {
  readonly clientToken?: string;
  readonly principalId: string;
  readonly studioId: string;
}

export interface DeleteStudioMemberResponse {
}

export interface DeleteStudioRequest {
  readonly clientToken?: string;
  readonly studioId: string;
}

export interface DeleteStudioResponse {
  readonly studio: Studio;
}

export interface Eula {
  readonly content?: string;
  readonly createdAt?: Date;
  readonly eulaId?: string;
  readonly name?: string;
  readonly updatedAt?: Date;
}

export interface EulaAcceptance {
  readonly acceptedAt?: Date;
  readonly acceptedBy?: string;
  readonly accepteeId?: string;
  readonly eulaAcceptanceId?: string;
  readonly eulaId?: string;
}

export interface GetEulaRequest {
  readonly eulaId: string;
}

export interface GetEulaResponse {
  readonly eula?: Eula;
}

export interface GetLaunchProfileDetailsRequest {
  readonly launchProfileId: string;
  readonly studioId: string;
}

export interface GetLaunchProfileDetailsResponse {
  readonly launchProfile?: LaunchProfile;
  readonly streamingImages?: [];
  readonly studioComponentSummaries?: [];
}

export interface GetLaunchProfileInitializationRequest {
  readonly launchProfileId: string;
  readonly launchProfileProtocolVersions: [];
  readonly launchPurpose: string;
  readonly platform: string;
  readonly studioId: string;
}

export interface GetLaunchProfileInitializationResponse {
  readonly launchProfileInitialization?: LaunchProfileInitialization;
}

export interface GetLaunchProfileMemberRequest {
  readonly launchProfileId: string;
  readonly principalId: string;
  readonly studioId: string;
}

export interface GetLaunchProfileMemberResponse {
  readonly member?: LaunchProfileMembership;
}

export interface GetLaunchProfileRequest {
  readonly launchProfileId: string;
  readonly studioId: string;
}

export interface GetLaunchProfileResponse {
  readonly launchProfile?: LaunchProfile;
}

export interface GetStreamingImageRequest {
  readonly streamingImageId: string;
  readonly studioId: string;
}

export interface GetStreamingImageResponse {
  readonly streamingImage?: StreamingImage;
}

export interface GetStreamingSessionRequest {
  readonly sessionId: string;
  readonly studioId: string;
}

export interface GetStreamingSessionResponse {
  readonly session?: StreamingSession;
}

export interface GetStreamingSessionStreamRequest {
  readonly sessionId: string;
  readonly streamId: string;
  readonly studioId: string;
}

export interface GetStreamingSessionStreamResponse {
  readonly stream?: StreamingSessionStream;
}

export interface GetStudioComponentRequest {
  readonly studioComponentId: string;
  readonly studioId: string;
}

export interface GetStudioComponentResponse {
  readonly studioComponent?: StudioComponent;
}

export interface GetStudioMemberRequest {
  readonly principalId: string;
  readonly studioId: string;
}

export interface GetStudioMemberResponse {
  readonly member?: StudioMembership;
}

export interface GetStudioRequest {
  readonly studioId: string;
}

export interface GetStudioResponse {
  readonly studio: Studio;
}

export interface InternalServerErrorException {
  readonly code?: string;
  readonly context?: {[key: string]: any};
  readonly message?: string;
}

export interface LaunchProfile {
  readonly arn?: string;
  readonly createdAt?: Date;
  readonly createdBy?: string;
  readonly description?: string;
  readonly ec2SubnetIds?: [];
  readonly launchProfileId?: string;
  readonly launchProfileProtocolVersions?: [];
  readonly name?: string;
  readonly state?: string;
  readonly statusCode?: string;
  readonly statusMessage?: string;
  readonly streamConfiguration?: StreamConfiguration;
  readonly studioComponentIds?: [];
  readonly tags?: {[key: string]: any};
  readonly updatedAt?: Date;
  readonly updatedBy?: string;
}

export interface LaunchProfileInitialization {
  readonly activeDirectory?: LaunchProfileInitializationActiveDirectory;
  readonly ec2SecurityGroupIds?: [];
  readonly launchProfileId?: string;
  readonly launchProfileProtocolVersion?: string;
  readonly launchPurpose?: string;
  readonly name?: string;
  readonly platform?: string;
  readonly systemInitializationScripts?: [];
  readonly userInitializationScripts?: [];
}

export interface LaunchProfileInitializationActiveDirectory {
  readonly computerAttributes?: [];
  readonly directoryId?: string;
  readonly directoryName?: string;
  readonly dnsIpAddresses?: [];
  readonly organizationalUnitDistinguishedName?: string;
  readonly studioComponentId?: string;
  readonly studioComponentName?: string;
}

export interface LaunchProfileInitializationScript {
  readonly script?: string;
  readonly studioComponentId?: string;
  readonly studioComponentName?: string;
}

export interface LaunchProfileMembership {
  readonly identityStoreId?: string;
  readonly persona?: string;
  readonly principalId?: string;
  readonly sid?: string;
}

export interface LicenseServiceConfiguration {
  readonly endpoint?: string;
}

export interface ListEulaAcceptancesRequest {
  readonly eulaIds?: [];
  readonly nextToken?: string;
  readonly studioId: string;
}

export interface ListEulaAcceptancesResponse {
  readonly eulaAcceptances?: [];
  readonly nextToken?: string;
}

export interface ListEulasRequest {
  readonly eulaIds?: [];
  readonly nextToken?: string;
}

export interface ListEulasResponse {
  readonly eulas?: [];
  readonly nextToken?: string;
}

export interface ListLaunchProfileMembersRequest {
  readonly launchProfileId: string;
  readonly maxResults?: number;
  readonly nextToken?: string;
  readonly studioId: string;
}

export interface ListLaunchProfileMembersResponse {
  readonly members?: [];
  readonly nextToken?: string;
}

export interface ListLaunchProfilesRequest {
  readonly maxResults?: number;
  readonly nextToken?: string;
  readonly principalId?: string;
  readonly states?: [];
  readonly studioId: string;
}

export interface ListLaunchProfilesResponse {
  readonly launchProfiles?: [];
  readonly nextToken?: string;
}

export interface ListStreamingImagesRequest {
  readonly nextToken?: string;
  readonly owner?: string;
  readonly studioId: string;
}

export interface ListStreamingImagesResponse {
  readonly nextToken?: string;
  readonly streamingImages?: [];
}

export interface ListStreamingSessionsRequest {
  readonly createdBy?: string;
  readonly nextToken?: string;
  readonly ownedBy?: string;
  readonly sessionIds?: string;
  readonly studioId: string;
}

export interface ListStreamingSessionsResponse {
  readonly nextToken?: string;
  readonly sessions?: [];
}

export interface ListStudioComponentsRequest {
  readonly maxResults?: number;
  readonly nextToken?: string;
  readonly states?: [];
  readonly studioId: string;
  readonly types?: [];
}

export interface ListStudioComponentsResponse {
  readonly nextToken?: string;
  readonly studioComponents?: [];
}

export interface ListStudioMembersRequest {
  readonly maxResults?: number;
  readonly nextToken?: string;
  readonly studioId: string;
}

export interface ListStudioMembersResponse {
  readonly members?: [];
  readonly nextToken?: string;
}

export interface ListStudiosRequest {
  readonly nextToken?: string;
}

export interface ListStudiosResponse {
  readonly nextToken?: string;
  readonly studios: [];
}

export interface ListTagsForResourceRequest {
  readonly resourceArn: string;
}

export interface ListTagsForResourceResponse {
  readonly tags?: {[key: string]: any};
}

export interface NewLaunchProfileMember {
  readonly persona: string;
  readonly principalId: string;
}

export interface NewStudioMember {
  readonly persona: string;
  readonly principalId: string;
}

export interface PutLaunchProfileMembersRequest {
  readonly clientToken?: string;
  readonly identityStoreId: string;
  readonly launchProfileId: string;
  readonly members: [];
  readonly studioId: string;
}

export interface PutLaunchProfileMembersResponse {
}

export interface PutStudioMembersRequest {
  readonly clientToken?: string;
  readonly identityStoreId: string;
  readonly members: [];
  readonly studioId: string;
}

export interface PutStudioMembersResponse {
}

export interface ResourceNotFoundException {
  readonly code?: string;
  readonly context?: {[key: string]: any};
  readonly message?: string;
}

export interface ScriptParameterKeyValue {
  readonly key?: string;
  readonly value?: string;
}

export interface ServiceQuotaExceededException {
  readonly code?: string;
  readonly context?: {[key: string]: any};
  readonly message?: string;
}

export interface SharedFileSystemConfiguration {
  readonly endpoint?: string;
  readonly fileSystemId?: string;
  readonly linuxMountPoint?: string;
  readonly shareName?: string;
  readonly windowsMountDrive?: string;
}

export interface StartStreamingSessionRequest {
  readonly clientToken?: string;
  readonly sessionId: string;
  readonly studioId: string;
}

export interface StartStreamingSessionResponse {
  readonly session?: StreamingSession;
}

export interface StartStudioSSOConfigurationRepairRequest {
  readonly clientToken?: string;
  readonly studioId: string;
}

export interface StartStudioSSOConfigurationRepairResponse {
  readonly studio: Studio;
}

export interface StopStreamingSessionRequest {
  readonly clientToken?: string;
  readonly sessionId: string;
  readonly studioId: string;
}

export interface StopStreamingSessionResponse {
  readonly session?: StreamingSession;
}

export interface StreamConfiguration {
  readonly clipboardMode: string;
  readonly ec2InstanceTypes: [];
  readonly maxSessionLengthInMinutes?: number;
  readonly maxStoppedSessionLengthInMinutes?: number;
  readonly streamingImageIds: [];
}

export interface StreamConfigurationCreate {
  readonly clipboardMode: string;
  readonly ec2InstanceTypes: [];
  readonly maxSessionLengthInMinutes?: number;
  readonly maxStoppedSessionLengthInMinutes?: number;
  readonly streamingImageIds: [];
}

export interface StreamingImage {
  readonly arn?: string;
  readonly description?: string;
  readonly ec2ImageId?: string;
  readonly encryptionConfiguration?: StreamingImageEncryptionConfiguration;
  readonly eulaIds?: [];
  readonly name?: string;
  readonly owner?: string;
  readonly platform?: string;
  readonly state?: string;
  readonly statusCode?: string;
  readonly statusMessage?: string;
  readonly streamingImageId?: string;
  readonly tags?: {[key: string]: any};
}

export interface StreamingImageEncryptionConfiguration {
  readonly keyArn?: string;
  readonly keyType: string;
}

export interface StreamingSession {
  readonly arn?: string;
  readonly createdAt?: Date;
  readonly createdBy?: string;
  readonly ec2InstanceType?: string;
  readonly launchProfileId?: string;
  readonly ownedBy?: string;
  readonly sessionId?: string;
  readonly startedAt?: Date;
  readonly startedBy?: string;
  readonly state?: string;
  readonly statusCode?: string;
  readonly statusMessage?: string;
  readonly stopAt?: Date;
  readonly stoppedAt?: Date;
  readonly stoppedBy?: string;
  readonly streamingImageId?: string;
  readonly tags?: {[key: string]: any};
  readonly terminateAt?: Date;
  readonly updatedAt?: Date;
  readonly updatedBy?: string;
}

export interface StreamingSessionStream {
  readonly createdAt?: Date;
  readonly createdBy?: string;
  readonly expiresAt?: Date;
  readonly ownedBy?: string;
  readonly state?: string;
  readonly statusCode?: string;
  readonly streamId?: string;
  readonly url?: string;
}

export interface Studio {
  readonly adminRoleArn?: string;
  readonly arn?: string;
  readonly createdAt?: Date;
  readonly displayName?: string;
  readonly homeRegion?: string;
  readonly ssoClientId?: string;
  readonly state?: string;
  readonly statusCode?: string;
  readonly statusMessage?: string;
  readonly studioEncryptionConfiguration?: StudioEncryptionConfiguration;
  readonly studioId?: string;
  readonly studioName?: string;
  readonly studioUrl?: string;
  readonly tags?: {[key: string]: any};
  readonly updatedAt?: Date;
  readonly userRoleArn?: string;
}

export interface StudioComponent {
  readonly arn?: string;
  readonly configuration?: StudioComponentConfiguration;
  readonly createdAt?: Date;
  readonly createdBy?: string;
  readonly description?: string;
  readonly ec2SecurityGroupIds?: [];
  readonly initializationScripts?: [];
  readonly name?: string;
  readonly scriptParameters?: [];
  readonly state?: string;
  readonly statusCode?: string;
  readonly statusMessage?: string;
  readonly studioComponentId?: string;
  readonly subtype?: string;
  readonly tags?: {[key: string]: any};
  readonly type?: string;
  readonly updatedAt?: Date;
  readonly updatedBy?: string;
}

export interface StudioComponentConfiguration {
  readonly activeDirectoryConfiguration?: ActiveDirectoryConfiguration;
  readonly computeFarmConfiguration?: ComputeFarmConfiguration;
  readonly licenseServiceConfiguration?: LicenseServiceConfiguration;
  readonly sharedFileSystemConfiguration?: SharedFileSystemConfiguration;
}

export interface StudioComponentInitializationScript {
  readonly launchProfileProtocolVersion?: string;
  readonly platform?: string;
  readonly runContext?: string;
  readonly script?: string;
}

export interface StudioComponentSummary {
  readonly createdAt?: Date;
  readonly createdBy?: string;
  readonly description?: string;
  readonly name?: string;
  readonly studioComponentId?: string;
  readonly subtype?: string;
  readonly type?: string;
  readonly updatedAt?: Date;
  readonly updatedBy?: string;
}

export interface StudioEncryptionConfiguration {
  readonly keyArn?: string;
  readonly keyType: string;
}

export interface StudioMembership {
  readonly identityStoreId?: string;
  readonly persona?: string;
  readonly principalId?: string;
  readonly sid?: string;
}

export interface TagResourceRequest {
  readonly resourceArn: string;
  readonly tags?: {[key: string]: any};
}

export interface TagResourceResponse {
}

export interface ThrottlingException {
  readonly code?: string;
  readonly context?: {[key: string]: any};
  readonly message?: string;
}

export interface UntagResourceRequest {
  readonly resourceArn: string;
  readonly tagKeys: [];
}

export interface UntagResourceResponse {
}

export interface UpdateLaunchProfileMemberRequest {
  readonly clientToken?: string;
  readonly launchProfileId: string;
  readonly persona: string;
  readonly principalId: string;
  readonly studioId: string;
}

export interface UpdateLaunchProfileMemberResponse {
  readonly member?: LaunchProfileMembership;
}

export interface UpdateLaunchProfileRequest {
  readonly clientToken?: string;
  readonly description?: string;
  readonly launchProfileId: string;
  readonly launchProfileProtocolVersions?: [];
  readonly name?: string;
  readonly streamConfiguration?: StreamConfigurationCreate;
  readonly studioComponentIds?: [];
  readonly studioId: string;
}

export interface UpdateLaunchProfileResponse {
  readonly launchProfile?: LaunchProfile;
}

export interface UpdateStreamingImageRequest {
  readonly clientToken?: string;
  readonly description?: string;
  readonly name?: string;
  readonly streamingImageId: string;
  readonly studioId: string;
}

export interface UpdateStreamingImageResponse {
  readonly streamingImage?: StreamingImage;
}

export interface UpdateStudioComponentRequest {
  readonly clientToken?: string;
  readonly configuration?: StudioComponentConfiguration;
  readonly description?: string;
  readonly ec2SecurityGroupIds?: [];
  readonly initializationScripts?: [];
  readonly name?: string;
  readonly scriptParameters?: [];
  readonly studioComponentId: string;
  readonly studioId: string;
  readonly subtype?: string;
  readonly type?: string;
}

export interface UpdateStudioComponentResponse {
  readonly studioComponent?: StudioComponent;
}

export interface UpdateStudioRequest {
  readonly adminRoleArn?: string;
  readonly clientToken?: string;
  readonly displayName?: string;
  readonly studioId: string;
  readonly userRoleArn?: string;
}

export interface UpdateStudioResponse {
  readonly studio: Studio;
}

export interface ValidationException {
  readonly code?: string;
  readonly context?: {[key: string]: any};
  readonly message?: string;
}


