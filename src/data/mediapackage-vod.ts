/**
 * STOP. This file is autogenerated. DO NOT EDIT by hand
 */
export interface ConfigureLogs {
  readonly EgressAccessLogs: EgressAccessLogs;
  readonly Id: string;
}
export interface CreateAsset {
  readonly Id: string;
  readonly PackagingGroupId: string;
  readonly ResourceId: string;
  readonly SourceArn: string;
  readonly SourceRoleArn: string;
  readonly Tags: {[key: string]: any};
}
export interface CreatePackagingConfiguration {
  readonly CmafPackage: CmafPackage;
  readonly DashPackage: DashPackage;
  readonly HlsPackage: HlsPackage;
  readonly Id: string;
  readonly MssPackage: MssPackage;
  readonly PackagingGroupId: string;
  readonly Tags: {[key: string]: any};
}
export interface CreatePackagingGroup {
  readonly Authorization: Authorization;
  readonly EgressAccessLogs: EgressAccessLogs;
  readonly Id: string;
  readonly Tags: {[key: string]: any};
}
export interface DeleteAsset {
  readonly Id: string;
}
export interface DeletePackagingConfiguration {
  readonly Id: string;
}
export interface DeletePackagingGroup {
  readonly Id: string;
}
export interface DescribeAsset {
  readonly Id: string;
}
export interface DescribePackagingConfiguration {
  readonly Id: string;
}
export interface DescribePackagingGroup {
  readonly Id: string;
}
export interface ListAssets {
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly PackagingGroupId: string;
}
export interface ListPackagingConfigurations {
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly PackagingGroupId: string;
}
export interface ListPackagingGroups {
  readonly MaxResults: number;
  readonly NextToken: string;
}
export interface ListTagsForResource {
  readonly ResourceArn: string;
}
export interface TagResource {
  readonly ResourceArn: string;
  readonly Tags: {[key: string]: any};
}
export interface UntagResource {
  readonly ResourceArn: string;
  readonly TagKeys: [];
}
export interface UpdatePackagingGroup {
  readonly Authorization: Authorization;
  readonly Id: string;
}



interface Asset {
  readonly Arn: string;
  readonly CreatedAt: string;
  readonly EgressEndpoints: [];
  readonly Id: string;
  readonly PackagingGroupId: string;
  readonly ResourceId: string;
  readonly SourceArn: string;
  readonly SourceRoleArn: string;
  readonly Tags: {[key: string]: any};
}

interface AssetCreateParameters {
  readonly Id: string;
  readonly PackagingGroupId: string;
  readonly ResourceId: string;
  readonly SourceArn: string;
  readonly SourceRoleArn: string;
  readonly Tags: {[key: string]: any};
}

interface AssetList {
  readonly Assets: [];
  readonly NextToken: string;
}

interface AssetShallow {
  readonly Arn: string;
  readonly CreatedAt: string;
  readonly Id: string;
  readonly PackagingGroupId: string;
  readonly ResourceId: string;
  readonly SourceArn: string;
  readonly SourceRoleArn: string;
  readonly Tags: {[key: string]: any};
}

interface Authorization {
  readonly CdnIdentifierSecret: string;
  readonly SecretsRoleArn: string;
}

interface CmafEncryption {
  readonly ConstantInitializationVector: string;
  readonly SpekeKeyProvider: SpekeKeyProvider;
}

interface CmafPackage {
  readonly Encryption: CmafEncryption;
  readonly HlsManifests: [];
  readonly IncludeEncoderConfigurationInSegments: boolean;
  readonly SegmentDurationSeconds: number;
}

interface ConfigureLogsParameters {
  readonly EgressAccessLogs: EgressAccessLogs;
}

interface ConfigureLogsRequest {
  readonly EgressAccessLogs: EgressAccessLogs;
  readonly Id: string;
}

interface ConfigureLogsResponse {
  readonly Arn: string;
  readonly Authorization: Authorization;
  readonly DomainName: string;
  readonly EgressAccessLogs: EgressAccessLogs;
  readonly Id: string;
  readonly Tags: {[key: string]: any};
}

interface CreateAssetRequest {
  readonly Id: string;
  readonly PackagingGroupId: string;
  readonly ResourceId: string;
  readonly SourceArn: string;
  readonly SourceRoleArn: string;
  readonly Tags: {[key: string]: any};
}

interface CreateAssetResponse {
  readonly Arn: string;
  readonly CreatedAt: string;
  readonly EgressEndpoints: [];
  readonly Id: string;
  readonly PackagingGroupId: string;
  readonly ResourceId: string;
  readonly SourceArn: string;
  readonly SourceRoleArn: string;
  readonly Tags: {[key: string]: any};
}

interface CreatePackagingConfigurationRequest {
  readonly CmafPackage: CmafPackage;
  readonly DashPackage: DashPackage;
  readonly HlsPackage: HlsPackage;
  readonly Id: string;
  readonly MssPackage: MssPackage;
  readonly PackagingGroupId: string;
  readonly Tags: {[key: string]: any};
}

interface CreatePackagingConfigurationResponse {
  readonly Arn: string;
  readonly CmafPackage: CmafPackage;
  readonly DashPackage: DashPackage;
  readonly HlsPackage: HlsPackage;
  readonly Id: string;
  readonly MssPackage: MssPackage;
  readonly PackagingGroupId: string;
  readonly Tags: {[key: string]: any};
}

interface CreatePackagingGroupRequest {
  readonly Authorization: Authorization;
  readonly EgressAccessLogs: EgressAccessLogs;
  readonly Id: string;
  readonly Tags: {[key: string]: any};
}

interface CreatePackagingGroupResponse {
  readonly Arn: string;
  readonly Authorization: Authorization;
  readonly DomainName: string;
  readonly EgressAccessLogs: EgressAccessLogs;
  readonly Id: string;
  readonly Tags: {[key: string]: any};
}

interface DashEncryption {
  readonly SpekeKeyProvider: SpekeKeyProvider;
}

interface DashManifest {
  readonly ManifestLayout: string;
  readonly ManifestName: string;
  readonly MinBufferTimeSeconds: number;
  readonly Profile: string;
  readonly StreamSelection: StreamSelection;
}

interface DashPackage {
  readonly DashManifests: [];
  readonly Encryption: DashEncryption;
  readonly IncludeEncoderConfigurationInSegments: boolean;
  readonly PeriodTriggers: [];
  readonly SegmentDurationSeconds: number;
  readonly SegmentTemplateFormat: string;
}

interface DeleteAssetRequest {
  readonly Id: string;
}

interface DeleteAssetResponse {
}

interface DeletePackagingConfigurationRequest {
  readonly Id: string;
}

interface DeletePackagingConfigurationResponse {
}

interface DeletePackagingGroupRequest {
  readonly Id: string;
}

interface DeletePackagingGroupResponse {
}

interface DescribeAssetRequest {
  readonly Id: string;
}

interface DescribeAssetResponse {
  readonly Arn: string;
  readonly CreatedAt: string;
  readonly EgressEndpoints: [];
  readonly Id: string;
  readonly PackagingGroupId: string;
  readonly ResourceId: string;
  readonly SourceArn: string;
  readonly SourceRoleArn: string;
  readonly Tags: {[key: string]: any};
}

interface DescribePackagingConfigurationRequest {
  readonly Id: string;
}

interface DescribePackagingConfigurationResponse {
  readonly Arn: string;
  readonly CmafPackage: CmafPackage;
  readonly DashPackage: DashPackage;
  readonly HlsPackage: HlsPackage;
  readonly Id: string;
  readonly MssPackage: MssPackage;
  readonly PackagingGroupId: string;
  readonly Tags: {[key: string]: any};
}

interface DescribePackagingGroupRequest {
  readonly Id: string;
}

interface DescribePackagingGroupResponse {
  readonly Arn: string;
  readonly Authorization: Authorization;
  readonly DomainName: string;
  readonly EgressAccessLogs: EgressAccessLogs;
  readonly Id: string;
  readonly Tags: {[key: string]: any};
}

interface EgressAccessLogs {
  readonly LogGroupName: string;
}

interface EgressEndpoint {
  readonly PackagingConfigurationId: string;
  readonly Status: string;
  readonly Url: string;
}

interface ForbiddenException {
  readonly Message: string;
}

interface HlsEncryption {
  readonly ConstantInitializationVector: string;
  readonly EncryptionMethod: string;
  readonly SpekeKeyProvider: SpekeKeyProvider;
}

interface HlsManifest {
  readonly AdMarkers: string;
  readonly IncludeIframeOnlyStream: boolean;
  readonly ManifestName: string;
  readonly ProgramDateTimeIntervalSeconds: number;
  readonly RepeatExtXKey: boolean;
  readonly StreamSelection: StreamSelection;
}

interface HlsPackage {
  readonly Encryption: HlsEncryption;
  readonly HlsManifests: [];
  readonly IncludeDvbSubtitles: boolean;
  readonly SegmentDurationSeconds: number;
  readonly UseAudioRenditionGroup: boolean;
}

interface InternalServerErrorException {
  readonly Message: string;
}

interface ListAssetsRequest {
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly PackagingGroupId: string;
}

interface ListAssetsResponse {
  readonly Assets: [];
  readonly NextToken: string;
}

interface ListPackagingConfigurationsRequest {
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly PackagingGroupId: string;
}

interface ListPackagingConfigurationsResponse {
  readonly NextToken: string;
  readonly PackagingConfigurations: [];
}

interface ListPackagingGroupsRequest {
  readonly MaxResults: number;
  readonly NextToken: string;
}

interface ListPackagingGroupsResponse {
  readonly NextToken: string;
  readonly PackagingGroups: [];
}

interface ListTagsForResourceRequest {
  readonly ResourceArn: string;
}

interface ListTagsForResourceResponse {
  readonly Tags: {[key: string]: any};
}

interface MssEncryption {
  readonly SpekeKeyProvider: SpekeKeyProvider;
}

interface MssManifest {
  readonly ManifestName: string;
  readonly StreamSelection: StreamSelection;
}

interface MssPackage {
  readonly Encryption: MssEncryption;
  readonly MssManifests: [];
  readonly SegmentDurationSeconds: number;
}

interface NotFoundException {
  readonly Message: string;
}

interface PackagingConfiguration {
  readonly Arn: string;
  readonly CmafPackage: CmafPackage;
  readonly DashPackage: DashPackage;
  readonly HlsPackage: HlsPackage;
  readonly Id: string;
  readonly MssPackage: MssPackage;
  readonly PackagingGroupId: string;
  readonly Tags: {[key: string]: any};
}

interface PackagingConfigurationCreateParameters {
  readonly CmafPackage: CmafPackage;
  readonly DashPackage: DashPackage;
  readonly HlsPackage: HlsPackage;
  readonly Id: string;
  readonly MssPackage: MssPackage;
  readonly PackagingGroupId: string;
  readonly Tags: {[key: string]: any};
}

interface PackagingConfigurationList {
  readonly NextToken: string;
  readonly PackagingConfigurations: [];
}

interface PackagingGroup {
  readonly Arn: string;
  readonly Authorization: Authorization;
  readonly DomainName: string;
  readonly EgressAccessLogs: EgressAccessLogs;
  readonly Id: string;
  readonly Tags: {[key: string]: any};
}

interface PackagingGroupCreateParameters {
  readonly Authorization: Authorization;
  readonly EgressAccessLogs: EgressAccessLogs;
  readonly Id: string;
  readonly Tags: {[key: string]: any};
}

interface PackagingGroupList {
  readonly NextToken: string;
  readonly PackagingGroups: [];
}

interface PackagingGroupUpdateParameters {
  readonly Authorization: Authorization;
}

interface ServiceUnavailableException {
  readonly Message: string;
}

interface SpekeKeyProvider {
  readonly RoleArn: string;
  readonly SystemIds: [];
  readonly Url: string;
}

interface StreamSelection {
  readonly MaxVideoBitsPerSecond: number;
  readonly MinVideoBitsPerSecond: number;
  readonly StreamOrder: string;
}

interface TagResourceRequest {
  readonly ResourceArn: string;
  readonly Tags: {[key: string]: any};
}

interface TagsModel {
  readonly Tags: {[key: string]: any};
}

interface TooManyRequestsException {
  readonly Message: string;
}

interface UnprocessableEntityException {
  readonly Message: string;
}

interface UntagResourceRequest {
  readonly ResourceArn: string;
  readonly TagKeys: [];
}

interface UpdatePackagingGroupRequest {
  readonly Authorization: Authorization;
  readonly Id: string;
}

interface UpdatePackagingGroupResponse {
  readonly Arn: string;
  readonly Authorization: Authorization;
  readonly DomainName: string;
  readonly EgressAccessLogs: EgressAccessLogs;
  readonly Id: string;
  readonly Tags: {[key: string]: any};
}

