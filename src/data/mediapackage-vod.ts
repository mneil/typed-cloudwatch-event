/**
 * STOP. This file is autogenerated. DO NOT EDIT by hand
 */
export interface ConfigureLogs {
  readonly EgressAccessLogs?: EgressAccessLogs;
  readonly Id: string;
}

export interface CreateAsset {
  readonly Id: string;
  readonly PackagingGroupId: string;
  readonly ResourceId?: string;
  readonly SourceArn: string;
  readonly SourceRoleArn: string;
  readonly Tags?: {[key: string]: any};
}

export interface CreatePackagingConfiguration {
  readonly CmafPackage?: CmafPackage;
  readonly DashPackage?: DashPackage;
  readonly HlsPackage?: HlsPackage;
  readonly Id: string;
  readonly MssPackage?: MssPackage;
  readonly PackagingGroupId: string;
  readonly Tags?: {[key: string]: any};
}

export interface CreatePackagingGroup {
  readonly Authorization?: Authorization;
  readonly EgressAccessLogs?: EgressAccessLogs;
  readonly Id: string;
  readonly Tags?: {[key: string]: any};
}

export interface DeleteAsset {
  readonly Id: string;
}

export interface DeletePackagingConfiguration {
  readonly Id: string;
}

export interface DeletePackagingGroup {
  readonly Id: string;
}

export interface DescribeAsset {
  readonly Id: string;
}

export interface DescribePackagingConfiguration {
  readonly Id: string;
}

export interface DescribePackagingGroup {
  readonly Id: string;
}

export interface ListAssets {
  readonly MaxResults?: number;
  readonly NextToken?: string;
  readonly PackagingGroupId?: string;
}

export interface ListPackagingConfigurations {
  readonly MaxResults?: number;
  readonly NextToken?: string;
  readonly PackagingGroupId?: string;
}

export interface ListPackagingGroups {
  readonly MaxResults?: number;
  readonly NextToken?: string;
}

export interface ListTagsForResource {
  readonly ResourceArn: string;
}

export interface TagResource {
  readonly ResourceArn: string;
  readonly Tags: {[key: string]: any};
}

export interface UntagResource {
  readonly ResourceArn: string;
  readonly TagKeys: [];
}

export interface UpdatePackagingGroup {
  readonly Authorization?: Authorization;
  readonly Id: string;
}

export interface Asset {
  readonly Arn?: string;
  readonly CreatedAt?: string;
  readonly EgressEndpoints?: [];
  readonly Id?: string;
  readonly PackagingGroupId?: string;
  readonly ResourceId?: string;
  readonly SourceArn?: string;
  readonly SourceRoleArn?: string;
  readonly Tags?: {[key: string]: any};
}

export interface AssetCreateParameters {
  readonly Id: string;
  readonly PackagingGroupId: string;
  readonly ResourceId?: string;
  readonly SourceArn: string;
  readonly SourceRoleArn: string;
  readonly Tags?: {[key: string]: any};
}

export interface AssetList {
  readonly Assets?: [];
  readonly NextToken?: string;
}

export interface AssetShallow {
  readonly Arn?: string;
  readonly CreatedAt?: string;
  readonly Id?: string;
  readonly PackagingGroupId?: string;
  readonly ResourceId?: string;
  readonly SourceArn?: string;
  readonly SourceRoleArn?: string;
  readonly Tags?: {[key: string]: any};
}

export interface Authorization {
  readonly CdnIdentifierSecret: string;
  readonly SecretsRoleArn: string;
}

export interface CmafEncryption {
  readonly ConstantInitializationVector?: string;
  readonly SpekeKeyProvider: SpekeKeyProvider;
}

export interface CmafPackage {
  readonly Encryption?: CmafEncryption;
  readonly HlsManifests: [];
  readonly IncludeEncoderConfigurationInSegments?: boolean;
  readonly SegmentDurationSeconds?: number;
}

export interface ConfigureLogsParameters {
  readonly EgressAccessLogs?: EgressAccessLogs;
}

export interface ConfigureLogsRequest {
  readonly EgressAccessLogs?: EgressAccessLogs;
  readonly Id: string;
}

export interface ConfigureLogsResponse {
  readonly Arn?: string;
  readonly Authorization?: Authorization;
  readonly DomainName?: string;
  readonly EgressAccessLogs?: EgressAccessLogs;
  readonly Id?: string;
  readonly Tags?: {[key: string]: any};
}

export interface CreateAssetRequest {
  readonly Id: string;
  readonly PackagingGroupId: string;
  readonly ResourceId?: string;
  readonly SourceArn: string;
  readonly SourceRoleArn: string;
  readonly Tags?: {[key: string]: any};
}

export interface CreateAssetResponse {
  readonly Arn?: string;
  readonly CreatedAt?: string;
  readonly EgressEndpoints?: [];
  readonly Id?: string;
  readonly PackagingGroupId?: string;
  readonly ResourceId?: string;
  readonly SourceArn?: string;
  readonly SourceRoleArn?: string;
  readonly Tags?: {[key: string]: any};
}

export interface CreatePackagingConfigurationRequest {
  readonly CmafPackage?: CmafPackage;
  readonly DashPackage?: DashPackage;
  readonly HlsPackage?: HlsPackage;
  readonly Id: string;
  readonly MssPackage?: MssPackage;
  readonly PackagingGroupId: string;
  readonly Tags?: {[key: string]: any};
}

export interface CreatePackagingConfigurationResponse {
  readonly Arn?: string;
  readonly CmafPackage?: CmafPackage;
  readonly DashPackage?: DashPackage;
  readonly HlsPackage?: HlsPackage;
  readonly Id?: string;
  readonly MssPackage?: MssPackage;
  readonly PackagingGroupId?: string;
  readonly Tags?: {[key: string]: any};
}

export interface CreatePackagingGroupRequest {
  readonly Authorization?: Authorization;
  readonly EgressAccessLogs?: EgressAccessLogs;
  readonly Id: string;
  readonly Tags?: {[key: string]: any};
}

export interface CreatePackagingGroupResponse {
  readonly Arn?: string;
  readonly Authorization?: Authorization;
  readonly DomainName?: string;
  readonly EgressAccessLogs?: EgressAccessLogs;
  readonly Id?: string;
  readonly Tags?: {[key: string]: any};
}

export interface DashEncryption {
  readonly SpekeKeyProvider: SpekeKeyProvider;
}

export interface DashManifest {
  readonly ManifestLayout?: string;
  readonly ManifestName?: string;
  readonly MinBufferTimeSeconds?: number;
  readonly Profile?: string;
  readonly StreamSelection?: StreamSelection;
}

export interface DashPackage {
  readonly DashManifests: [];
  readonly Encryption?: DashEncryption;
  readonly IncludeEncoderConfigurationInSegments?: boolean;
  readonly PeriodTriggers?: [];
  readonly SegmentDurationSeconds?: number;
  readonly SegmentTemplateFormat?: string;
}

export interface DeleteAssetRequest {
  readonly Id: string;
}

export interface DeleteAssetResponse {
}

export interface DeletePackagingConfigurationRequest {
  readonly Id: string;
}

export interface DeletePackagingConfigurationResponse {
}

export interface DeletePackagingGroupRequest {
  readonly Id: string;
}

export interface DeletePackagingGroupResponse {
}

export interface DescribeAssetRequest {
  readonly Id: string;
}

export interface DescribeAssetResponse {
  readonly Arn?: string;
  readonly CreatedAt?: string;
  readonly EgressEndpoints?: [];
  readonly Id?: string;
  readonly PackagingGroupId?: string;
  readonly ResourceId?: string;
  readonly SourceArn?: string;
  readonly SourceRoleArn?: string;
  readonly Tags?: {[key: string]: any};
}

export interface DescribePackagingConfigurationRequest {
  readonly Id: string;
}

export interface DescribePackagingConfigurationResponse {
  readonly Arn?: string;
  readonly CmafPackage?: CmafPackage;
  readonly DashPackage?: DashPackage;
  readonly HlsPackage?: HlsPackage;
  readonly Id?: string;
  readonly MssPackage?: MssPackage;
  readonly PackagingGroupId?: string;
  readonly Tags?: {[key: string]: any};
}

export interface DescribePackagingGroupRequest {
  readonly Id: string;
}

export interface DescribePackagingGroupResponse {
  readonly Arn?: string;
  readonly Authorization?: Authorization;
  readonly DomainName?: string;
  readonly EgressAccessLogs?: EgressAccessLogs;
  readonly Id?: string;
  readonly Tags?: {[key: string]: any};
}

export interface EgressAccessLogs {
  readonly LogGroupName?: string;
}

export interface EgressEndpoint {
  readonly PackagingConfigurationId?: string;
  readonly Status?: string;
  readonly Url?: string;
}

export interface ForbiddenException {
  readonly Message?: string;
}

export interface HlsEncryption {
  readonly ConstantInitializationVector?: string;
  readonly EncryptionMethod?: string;
  readonly SpekeKeyProvider: SpekeKeyProvider;
}

export interface HlsManifest {
  readonly AdMarkers?: string;
  readonly IncludeIframeOnlyStream?: boolean;
  readonly ManifestName?: string;
  readonly ProgramDateTimeIntervalSeconds?: number;
  readonly RepeatExtXKey?: boolean;
  readonly StreamSelection?: StreamSelection;
}

export interface HlsPackage {
  readonly Encryption?: HlsEncryption;
  readonly HlsManifests: [];
  readonly IncludeDvbSubtitles?: boolean;
  readonly SegmentDurationSeconds?: number;
  readonly UseAudioRenditionGroup?: boolean;
}

export interface InternalServerErrorException {
  readonly Message?: string;
}

export interface ListAssetsRequest {
  readonly MaxResults?: number;
  readonly NextToken?: string;
  readonly PackagingGroupId?: string;
}

export interface ListAssetsResponse {
  readonly Assets?: [];
  readonly NextToken?: string;
}

export interface ListPackagingConfigurationsRequest {
  readonly MaxResults?: number;
  readonly NextToken?: string;
  readonly PackagingGroupId?: string;
}

export interface ListPackagingConfigurationsResponse {
  readonly NextToken?: string;
  readonly PackagingConfigurations?: [];
}

export interface ListPackagingGroupsRequest {
  readonly MaxResults?: number;
  readonly NextToken?: string;
}

export interface ListPackagingGroupsResponse {
  readonly NextToken?: string;
  readonly PackagingGroups?: [];
}

export interface ListTagsForResourceRequest {
  readonly ResourceArn: string;
}

export interface ListTagsForResourceResponse {
  readonly Tags?: {[key: string]: any};
}

export interface MssEncryption {
  readonly SpekeKeyProvider: SpekeKeyProvider;
}

export interface MssManifest {
  readonly ManifestName?: string;
  readonly StreamSelection?: StreamSelection;
}

export interface MssPackage {
  readonly Encryption?: MssEncryption;
  readonly MssManifests: [];
  readonly SegmentDurationSeconds?: number;
}

export interface NotFoundException {
  readonly Message?: string;
}

export interface PackagingConfiguration {
  readonly Arn?: string;
  readonly CmafPackage?: CmafPackage;
  readonly DashPackage?: DashPackage;
  readonly HlsPackage?: HlsPackage;
  readonly Id?: string;
  readonly MssPackage?: MssPackage;
  readonly PackagingGroupId?: string;
  readonly Tags?: {[key: string]: any};
}

export interface PackagingConfigurationCreateParameters {
  readonly CmafPackage?: CmafPackage;
  readonly DashPackage?: DashPackage;
  readonly HlsPackage?: HlsPackage;
  readonly Id: string;
  readonly MssPackage?: MssPackage;
  readonly PackagingGroupId: string;
  readonly Tags?: {[key: string]: any};
}

export interface PackagingConfigurationList {
  readonly NextToken?: string;
  readonly PackagingConfigurations?: [];
}

export interface PackagingGroup {
  readonly Arn?: string;
  readonly Authorization?: Authorization;
  readonly DomainName?: string;
  readonly EgressAccessLogs?: EgressAccessLogs;
  readonly Id?: string;
  readonly Tags?: {[key: string]: any};
}

export interface PackagingGroupCreateParameters {
  readonly Authorization?: Authorization;
  readonly EgressAccessLogs?: EgressAccessLogs;
  readonly Id: string;
  readonly Tags?: {[key: string]: any};
}

export interface PackagingGroupList {
  readonly NextToken?: string;
  readonly PackagingGroups?: [];
}

export interface PackagingGroupUpdateParameters {
  readonly Authorization?: Authorization;
}

export interface ServiceUnavailableException {
  readonly Message?: string;
}

export interface SpekeKeyProvider {
  readonly RoleArn: string;
  readonly SystemIds: [];
  readonly Url: string;
}

export interface StreamSelection {
  readonly MaxVideoBitsPerSecond?: number;
  readonly MinVideoBitsPerSecond?: number;
  readonly StreamOrder?: string;
}

export interface TagResourceRequest {
  readonly ResourceArn: string;
  readonly Tags: {[key: string]: any};
}

export interface TagsModel {
  readonly Tags: {[key: string]: any};
}

export interface TooManyRequestsException {
  readonly Message?: string;
}

export interface UnprocessableEntityException {
  readonly Message?: string;
}

export interface UntagResourceRequest {
  readonly ResourceArn: string;
  readonly TagKeys: [];
}

export interface UpdatePackagingGroupRequest {
  readonly Authorization?: Authorization;
  readonly Id: string;
}

export interface UpdatePackagingGroupResponse {
  readonly Arn?: string;
  readonly Authorization?: Authorization;
  readonly DomainName?: string;
  readonly EgressAccessLogs?: EgressAccessLogs;
  readonly Id?: string;
  readonly Tags?: {[key: string]: any};
}


