/**
 * STOP. This file is autogenerated. DO NOT EDIT by hand
 */
export interface AcceptReservedInstancesExchangeQuote {
  readonly DryRun: boolean;
  readonly ReservedInstanceIds: [];
  readonly TargetConfigurations: [];
}
export interface AcceptTransitGatewayMulticastDomainAssociations {
  readonly TransitGatewayMulticastDomainId: string;
  readonly TransitGatewayAttachmentId: string;
  readonly SubnetIds: [];
  readonly DryRun: boolean;
}
export interface AcceptTransitGatewayPeeringAttachment {
  readonly TransitGatewayAttachmentId: string;
  readonly DryRun: boolean;
}
export interface AcceptTransitGatewayVpcAttachment {
  readonly TransitGatewayAttachmentId: string;
  readonly DryRun: boolean;
}
export interface AcceptVpcEndpointConnections {
  readonly DryRun: boolean;
  readonly ServiceId: string;
  readonly VpcEndpointIds: [];
}
export interface AcceptVpcPeeringConnection {
  readonly DryRun: boolean;
  readonly VpcPeeringConnectionId: string;
}
export interface AdvertiseByoipCidr {
  readonly Cidr: string;
  readonly DryRun: boolean;
}
export interface AllocateAddress {
  readonly Domain: string;
  readonly Address: string;
  readonly PublicIpv4Pool: string;
  readonly NetworkBorderGroup: string;
  readonly CustomerOwnedIpv4Pool: string;
  readonly DryRun: boolean;
  readonly TagSpecifications: [];
}
export interface AllocateHosts {
  readonly AutoPlacement: string;
  readonly AvailabilityZone: string;
  readonly ClientToken: string;
  readonly InstanceType: string;
  readonly InstanceFamily: string;
  readonly Quantity: number;
  readonly TagSpecifications: [];
  readonly HostRecovery: string;
}
export interface AllocateIpamPoolCidr {
  readonly DryRun: boolean;
  readonly IpamPoolId: string;
  readonly Cidr: string;
  readonly NetmaskLength: number;
  readonly ClientToken: string;
  readonly Description: string;
  readonly PreviewNextCidr: boolean;
  readonly DisallowedCidrs: [];
}
export interface ApplySecurityGroupsToClientVpnTargetNetwork {
  readonly ClientVpnEndpointId: string;
  readonly VpcId: string;
  readonly SecurityGroupIds: [];
  readonly DryRun: boolean;
}
export interface AssignIpv6Addresses {
  readonly Ipv6AddressCount: number;
  readonly Ipv6Addresses: [];
  readonly Ipv6PrefixCount: number;
  readonly Ipv6Prefixes: [];
  readonly NetworkInterfaceId: string;
}
export interface AssignPrivateIpAddresses {
  readonly AllowReassignment: boolean;
  readonly NetworkInterfaceId: string;
  readonly PrivateIpAddresses: [];
  readonly SecondaryPrivateIpAddressCount: number;
  readonly Ipv4Prefixes: [];
  readonly Ipv4PrefixCount: number;
}
export interface AssociateAddress {
  readonly AllocationId: string;
  readonly InstanceId: string;
  readonly PublicIp: string;
  readonly AllowReassociation: boolean;
  readonly DryRun: boolean;
  readonly NetworkInterfaceId: string;
  readonly PrivateIpAddress: string;
}
export interface AssociateClientVpnTargetNetwork {
  readonly ClientVpnEndpointId: string;
  readonly SubnetId: string;
  readonly ClientToken: string;
  readonly DryRun: boolean;
}
export interface AssociateDhcpOptions {
  readonly DhcpOptionsId: string;
  readonly VpcId: string;
  readonly DryRun: boolean;
}
export interface AssociateEnclaveCertificateIamRole {
  readonly CertificateArn: string;
  readonly RoleArn: string;
  readonly DryRun: boolean;
}
export interface AssociateIamInstanceProfile {
  readonly IamInstanceProfile: IamInstanceProfileSpecification;
  readonly InstanceId: string;
}
export interface AssociateInstanceEventWindow {
  readonly DryRun: boolean;
  readonly InstanceEventWindowId: string;
  readonly AssociationTarget: InstanceEventWindowAssociationRequest;
}
export interface AssociateRouteTable {
  readonly DryRun: boolean;
  readonly RouteTableId: string;
  readonly SubnetId: string;
  readonly GatewayId: string;
}
export interface AssociateSubnetCidrBlock {
  readonly Ipv6CidrBlock: string;
  readonly SubnetId: string;
}
export interface AssociateTransitGatewayMulticastDomain {
  readonly TransitGatewayMulticastDomainId: string;
  readonly TransitGatewayAttachmentId: string;
  readonly SubnetIds: [];
  readonly DryRun: boolean;
}
export interface AssociateTransitGatewayRouteTable {
  readonly TransitGatewayRouteTableId: string;
  readonly TransitGatewayAttachmentId: string;
  readonly DryRun: boolean;
}
export interface AssociateTrunkInterface {
  readonly BranchInterfaceId: string;
  readonly TrunkInterfaceId: string;
  readonly VlanId: number;
  readonly GreKey: number;
  readonly ClientToken: string;
  readonly DryRun: boolean;
}
export interface AssociateVpcCidrBlock {
  readonly AmazonProvidedIpv6CidrBlock: boolean;
  readonly CidrBlock: string;
  readonly VpcId: string;
  readonly Ipv6CidrBlockNetworkBorderGroup: string;
  readonly Ipv6Pool: string;
  readonly Ipv6CidrBlock: string;
  readonly Ipv4IpamPoolId: string;
  readonly Ipv4NetmaskLength: number;
  readonly Ipv6IpamPoolId: string;
  readonly Ipv6NetmaskLength: number;
}
export interface AttachClassicLinkVpc {
  readonly DryRun: boolean;
  readonly Groups: [];
  readonly InstanceId: string;
  readonly VpcId: string;
}
export interface AttachInternetGateway {
  readonly DryRun: boolean;
  readonly InternetGatewayId: string;
  readonly VpcId: string;
}
export interface AttachNetworkInterface {
  readonly DeviceIndex: number;
  readonly DryRun: boolean;
  readonly InstanceId: string;
  readonly NetworkInterfaceId: string;
  readonly NetworkCardIndex: number;
}
export interface AttachVolume {
  readonly Device: string;
  readonly InstanceId: string;
  readonly VolumeId: string;
  readonly DryRun: boolean;
}
export interface AttachVpnGateway {
  readonly VpcId: string;
  readonly VpnGatewayId: string;
  readonly DryRun: boolean;
}
export interface AuthorizeClientVpnIngress {
  readonly ClientVpnEndpointId: string;
  readonly TargetNetworkCidr: string;
  readonly AccessGroupId: string;
  readonly AuthorizeAllGroups: boolean;
  readonly Description: string;
  readonly ClientToken: string;
  readonly DryRun: boolean;
}
export interface AuthorizeSecurityGroupEgress {
  readonly DryRun: boolean;
  readonly GroupId: string;
  readonly IpPermissions: [];
  readonly TagSpecifications: [];
  readonly CidrIp: string;
  readonly FromPort: number;
  readonly IpProtocol: string;
  readonly ToPort: number;
  readonly SourceSecurityGroupName: string;
  readonly SourceSecurityGroupOwnerId: string;
}
export interface AuthorizeSecurityGroupIngress {
  readonly CidrIp: string;
  readonly FromPort: number;
  readonly GroupId: string;
  readonly GroupName: string;
  readonly IpPermissions: [];
  readonly IpProtocol: string;
  readonly SourceSecurityGroupName: string;
  readonly SourceSecurityGroupOwnerId: string;
  readonly ToPort: number;
  readonly DryRun: boolean;
  readonly TagSpecifications: [];
}
export interface BundleInstance {
  readonly InstanceId: string;
  readonly Storage: Storage;
  readonly DryRun: boolean;
}
export interface CancelBundleTask {
  readonly BundleId: string;
  readonly DryRun: boolean;
}
export interface CancelCapacityReservation {
  readonly CapacityReservationId: string;
  readonly DryRun: boolean;
}
export interface CancelCapacityReservationFleets {
  readonly DryRun: boolean;
  readonly CapacityReservationFleetIds: [];
}
export interface CancelConversionTask {
  readonly ConversionTaskId: string;
  readonly DryRun: boolean;
  readonly ReasonMessage: string;
}
export interface CancelExportTask {
  readonly ExportTaskId: string;
}
export interface CancelImportTask {
  readonly CancelReason: string;
  readonly DryRun: boolean;
  readonly ImportTaskId: string;
}
export interface CancelReservedInstancesListing {
  readonly ReservedInstancesListingId: string;
}
export interface CancelSpotFleetRequests {
  readonly DryRun: boolean;
  readonly SpotFleetRequestIds: [];
  readonly TerminateInstances: boolean;
}
export interface CancelSpotInstanceRequests {
  readonly DryRun: boolean;
  readonly SpotInstanceRequestIds: [];
}
export interface ConfirmProductInstance {
  readonly InstanceId: string;
  readonly ProductCode: string;
  readonly DryRun: boolean;
}
export interface CopyFpgaImage {
  readonly DryRun: boolean;
  readonly SourceFpgaImageId: string;
  readonly Description: string;
  readonly Name: string;
  readonly SourceRegion: string;
  readonly ClientToken: string;
}
export interface CopyImage {
  readonly ClientToken: string;
  readonly Description: string;
  readonly Encrypted: boolean;
  readonly KmsKeyId: string;
  readonly Name: string;
  readonly SourceImageId: string;
  readonly SourceRegion: string;
  readonly DestinationOutpostArn: string;
  readonly DryRun: boolean;
}
export interface CopySnapshot {
  readonly Description: string;
  readonly DestinationOutpostArn: string;
  readonly DestinationRegion: string;
  readonly Encrypted: boolean;
  readonly KmsKeyId: string;
  readonly PresignedUrl: string;
  readonly SourceRegion: string;
  readonly SourceSnapshotId: string;
  readonly TagSpecifications: [];
  readonly DryRun: boolean;
}
export interface CreateCapacityReservation {
  readonly ClientToken: string;
  readonly InstanceType: string;
  readonly InstancePlatform: string;
  readonly AvailabilityZone: string;
  readonly AvailabilityZoneId: string;
  readonly Tenancy: string;
  readonly InstanceCount: number;
  readonly EbsOptimized: boolean;
  readonly EphemeralStorage: boolean;
  readonly EndDate: Date;
  readonly EndDateType: string;
  readonly InstanceMatchCriteria: string;
  readonly TagSpecifications: [];
  readonly DryRun: boolean;
  readonly OutpostArn: string;
}
export interface CreateCapacityReservationFleet {
  readonly AllocationStrategy: string;
  readonly ClientToken: string;
  readonly InstanceTypeSpecifications: [];
  readonly Tenancy: string;
  readonly TotalTargetCapacity: number;
  readonly EndDate: Date;
  readonly InstanceMatchCriteria: string;
  readonly TagSpecifications: [];
  readonly DryRun: boolean;
}
export interface CreateCarrierGateway {
  readonly VpcId: string;
  readonly TagSpecifications: [];
  readonly DryRun: boolean;
  readonly ClientToken: string;
}
export interface CreateClientVpnEndpoint {
  readonly ClientCidrBlock: string;
  readonly ServerCertificateArn: string;
  readonly AuthenticationOptions: [];
  readonly ConnectionLogOptions: ConnectionLogOptions;
  readonly DnsServers: [];
  readonly TransportProtocol: string;
  readonly VpnPort: number;
  readonly Description: string;
  readonly SplitTunnel: boolean;
  readonly DryRun: boolean;
  readonly ClientToken: string;
  readonly TagSpecifications: [];
  readonly SecurityGroupIds: [];
  readonly VpcId: string;
  readonly SelfServicePortal: string;
  readonly ClientConnectOptions: ClientConnectOptions;
}
export interface CreateClientVpnRoute {
  readonly ClientVpnEndpointId: string;
  readonly DestinationCidrBlock: string;
  readonly TargetVpcSubnetId: string;
  readonly Description: string;
  readonly ClientToken: string;
  readonly DryRun: boolean;
}
export interface CreateCustomerGateway {
  readonly BgpAsn: number;
  readonly PublicIp: string;
  readonly CertificateArn: string;
  readonly Type: string;
  readonly TagSpecifications: [];
  readonly DeviceName: string;
  readonly DryRun: boolean;
}
export interface CreateDefaultSubnet {
  readonly AvailabilityZone: string;
  readonly DryRun: boolean;
  readonly Ipv6Native: boolean;
}
export interface CreateDefaultVpc {
  readonly DryRun: boolean;
}
export interface CreateDhcpOptions {
  readonly DhcpConfigurations: [];
  readonly TagSpecifications: [];
  readonly DryRun: boolean;
}
export interface CreateEgressOnlyInternetGateway {
  readonly ClientToken: string;
  readonly DryRun: boolean;
  readonly VpcId: string;
  readonly TagSpecifications: [];
}
export interface CreateFleet {
  readonly DryRun: boolean;
  readonly ClientToken: string;
  readonly SpotOptions: SpotOptionsRequest;
  readonly OnDemandOptions: OnDemandOptionsRequest;
  readonly ExcessCapacityTerminationPolicy: string;
  readonly LaunchTemplateConfigs: [];
  readonly TargetCapacitySpecification: TargetCapacitySpecificationRequest;
  readonly TerminateInstancesWithExpiration: boolean;
  readonly Type: string;
  readonly ValidFrom: Date;
  readonly ValidUntil: Date;
  readonly ReplaceUnhealthyInstances: boolean;
  readonly TagSpecifications: [];
  readonly Context: string;
}
export interface CreateFlowLogs {
  readonly DryRun: boolean;
  readonly ClientToken: string;
  readonly DeliverLogsPermissionArn: string;
  readonly LogGroupName: string;
  readonly ResourceIds: [];
  readonly ResourceType: string;
  readonly TrafficType: string;
  readonly LogDestinationType: string;
  readonly LogDestination: string;
  readonly LogFormat: string;
  readonly TagSpecifications: [];
  readonly MaxAggregationInterval: number;
  readonly DestinationOptions: DestinationOptionsRequest;
}
export interface CreateFpgaImage {
  readonly DryRun: boolean;
  readonly InputStorageLocation: StorageLocation;
  readonly LogsStorageLocation: StorageLocation;
  readonly Description: string;
  readonly Name: string;
  readonly ClientToken: string;
  readonly TagSpecifications: [];
}
export interface CreateImage {
  readonly BlockDeviceMappings: [];
  readonly Description: string;
  readonly DryRun: boolean;
  readonly InstanceId: string;
  readonly Name: string;
  readonly NoReboot: boolean;
  readonly TagSpecifications: [];
}
export interface CreateInstanceEventWindow {
  readonly DryRun: boolean;
  readonly Name: string;
  readonly TimeRanges: [];
  readonly CronExpression: string;
  readonly TagSpecifications: [];
}
export interface CreateInstanceExportTask {
  readonly Description: string;
  readonly ExportToS3Task: ExportToS3TaskSpecification;
  readonly InstanceId: string;
  readonly TargetEnvironment: string;
  readonly TagSpecifications: [];
}
export interface CreateInternetGateway {
  readonly TagSpecifications: [];
  readonly DryRun: boolean;
}
export interface CreateIpam {
  readonly DryRun: boolean;
  readonly Description: string;
  readonly OperatingRegions: [];
  readonly TagSpecifications: [];
  readonly ClientToken: string;
}
export interface CreateIpamPool {
  readonly DryRun: boolean;
  readonly IpamScopeId: string;
  readonly Locale: string;
  readonly SourceIpamPoolId: string;
  readonly Description: string;
  readonly AddressFamily: string;
  readonly AutoImport: boolean;
  readonly PubliclyAdvertisable: boolean;
  readonly AllocationMinNetmaskLength: number;
  readonly AllocationMaxNetmaskLength: number;
  readonly AllocationDefaultNetmaskLength: number;
  readonly AllocationResourceTags: [];
  readonly TagSpecifications: [];
  readonly ClientToken: string;
  readonly AwsService: string;
}
export interface CreateIpamScope {
  readonly DryRun: boolean;
  readonly IpamId: string;
  readonly Description: string;
  readonly TagSpecifications: [];
  readonly ClientToken: string;
}
export interface CreateKeyPair {
  readonly KeyName: string;
  readonly DryRun: boolean;
  readonly KeyType: string;
  readonly TagSpecifications: [];
}
export interface CreateLaunchTemplate {
  readonly DryRun: boolean;
  readonly ClientToken: string;
  readonly LaunchTemplateName: string;
  readonly VersionDescription: string;
  readonly LaunchTemplateData: RequestLaunchTemplateData;
  readonly TagSpecifications: [];
}
export interface CreateLaunchTemplateVersion {
  readonly DryRun: boolean;
  readonly ClientToken: string;
  readonly LaunchTemplateId: string;
  readonly LaunchTemplateName: string;
  readonly SourceVersion: string;
  readonly VersionDescription: string;
  readonly LaunchTemplateData: RequestLaunchTemplateData;
}
export interface CreateLocalGatewayRoute {
  readonly DestinationCidrBlock: string;
  readonly LocalGatewayRouteTableId: string;
  readonly LocalGatewayVirtualInterfaceGroupId: string;
  readonly DryRun: boolean;
}
export interface CreateLocalGatewayRouteTableVpcAssociation {
  readonly LocalGatewayRouteTableId: string;
  readonly VpcId: string;
  readonly TagSpecifications: [];
  readonly DryRun: boolean;
}
export interface CreateManagedPrefixList {
  readonly DryRun: boolean;
  readonly PrefixListName: string;
  readonly Entries: [];
  readonly MaxEntries: number;
  readonly TagSpecifications: [];
  readonly AddressFamily: string;
  readonly ClientToken: string;
}
export interface CreateNatGateway {
  readonly AllocationId: string;
  readonly ClientToken: string;
  readonly DryRun: boolean;
  readonly SubnetId: string;
  readonly TagSpecifications: [];
  readonly ConnectivityType: string;
}
export interface CreateNetworkAcl {
  readonly DryRun: boolean;
  readonly VpcId: string;
  readonly TagSpecifications: [];
}
export interface CreateNetworkAclEntry {
  readonly CidrBlock: string;
  readonly DryRun: boolean;
  readonly Egress: boolean;
  readonly IcmpTypeCode: IcmpTypeCode;
  readonly Ipv6CidrBlock: string;
  readonly NetworkAclId: string;
  readonly PortRange: PortRange;
  readonly Protocol: string;
  readonly RuleAction: string;
  readonly RuleNumber: number;
}
export interface CreateNetworkInsightsAccessScope {
  readonly MatchPaths: [];
  readonly ExcludePaths: [];
  readonly ClientToken: string;
  readonly TagSpecifications: [];
  readonly DryRun: boolean;
}
export interface CreateNetworkInsightsPath {
  readonly SourceIp: string;
  readonly DestinationIp: string;
  readonly Source: string;
  readonly Destination: string;
  readonly Protocol: string;
  readonly DestinationPort: number;
  readonly TagSpecifications: [];
  readonly DryRun: boolean;
  readonly ClientToken: string;
}
export interface CreateNetworkInterface {
  readonly Description: string;
  readonly DryRun: boolean;
  readonly Groups: [];
  readonly Ipv6AddressCount: number;
  readonly Ipv6Addresses: [];
  readonly PrivateIpAddress: string;
  readonly PrivateIpAddresses: [];
  readonly SecondaryPrivateIpAddressCount: number;
  readonly Ipv4Prefixes: [];
  readonly Ipv4PrefixCount: number;
  readonly Ipv6Prefixes: [];
  readonly Ipv6PrefixCount: number;
  readonly InterfaceType: string;
  readonly SubnetId: string;
  readonly TagSpecifications: [];
  readonly ClientToken: string;
}
export interface CreateNetworkInterfacePermission {
  readonly NetworkInterfaceId: string;
  readonly AwsAccountId: string;
  readonly AwsService: string;
  readonly Permission: string;
  readonly DryRun: boolean;
}
export interface CreatePlacementGroup {
  readonly DryRun: boolean;
  readonly GroupName: string;
  readonly Strategy: string;
  readonly PartitionCount: number;
  readonly TagSpecifications: [];
}
export interface CreatePublicIpv4Pool {
  readonly DryRun: boolean;
  readonly TagSpecifications: [];
}
export interface CreateReplaceRootVolumeTask {
  readonly InstanceId: string;
  readonly SnapshotId: string;
  readonly ClientToken: string;
  readonly DryRun: boolean;
  readonly TagSpecifications: [];
}
export interface CreateReservedInstancesListing {
  readonly ClientToken: string;
  readonly InstanceCount: number;
  readonly PriceSchedules: [];
  readonly ReservedInstancesId: string;
}
export interface CreateRestoreImageTask {
  readonly Bucket: string;
  readonly ObjectKey: string;
  readonly Name: string;
  readonly TagSpecifications: [];
  readonly DryRun: boolean;
}
export interface CreateRoute {
  readonly DestinationCidrBlock: string;
  readonly DestinationIpv6CidrBlock: string;
  readonly DestinationPrefixListId: string;
  readonly DryRun: boolean;
  readonly VpcEndpointId: string;
  readonly EgressOnlyInternetGatewayId: string;
  readonly GatewayId: string;
  readonly InstanceId: string;
  readonly NatGatewayId: string;
  readonly TransitGatewayId: string;
  readonly LocalGatewayId: string;
  readonly CarrierGatewayId: string;
  readonly NetworkInterfaceId: string;
  readonly RouteTableId: string;
  readonly VpcPeeringConnectionId: string;
  readonly CoreNetworkArn: string;
}
export interface CreateRouteTable {
  readonly DryRun: boolean;
  readonly VpcId: string;
  readonly TagSpecifications: [];
}
export interface CreateSecurityGroup {
  readonly Description: string;
  readonly GroupName: string;
  readonly VpcId: string;
  readonly TagSpecifications: [];
  readonly DryRun: boolean;
}
export interface CreateSnapshot {
  readonly Description: string;
  readonly OutpostArn: string;
  readonly VolumeId: string;
  readonly TagSpecifications: [];
  readonly DryRun: boolean;
}
export interface CreateSnapshots {
  readonly Description: string;
  readonly InstanceSpecification: InstanceSpecification;
  readonly OutpostArn: string;
  readonly TagSpecifications: [];
  readonly DryRun: boolean;
  readonly CopyTagsFromSource: string;
}
export interface CreateSpotDatafeedSubscription {
  readonly Bucket: string;
  readonly DryRun: boolean;
  readonly Prefix: string;
}
export interface CreateStoreImageTask {
  readonly ImageId: string;
  readonly Bucket: string;
  readonly S3ObjectTags: [];
  readonly DryRun: boolean;
}
export interface CreateSubnet {
  readonly TagSpecifications: [];
  readonly AvailabilityZone: string;
  readonly AvailabilityZoneId: string;
  readonly CidrBlock: string;
  readonly Ipv6CidrBlock: string;
  readonly OutpostArn: string;
  readonly VpcId: string;
  readonly DryRun: boolean;
  readonly Ipv6Native: boolean;
}
export interface CreateSubnetCidrReservation {
  readonly TagSpecifications: [];
  readonly SubnetId: string;
  readonly Cidr: string;
  readonly ReservationType: string;
  readonly Description: string;
  readonly DryRun: boolean;
}
export interface CreateTags {
  readonly DryRun: boolean;
  readonly Resources: [];
  readonly Tags: [];
}
export interface CreateTrafficMirrorFilter {
  readonly Description: string;
  readonly TagSpecifications: [];
  readonly DryRun: boolean;
  readonly ClientToken: string;
}
export interface CreateTrafficMirrorFilterRule {
  readonly TrafficMirrorFilterId: string;
  readonly TrafficDirection: string;
  readonly RuleNumber: number;
  readonly RuleAction: string;
  readonly DestinationPortRange: TrafficMirrorPortRangeRequest;
  readonly SourcePortRange: TrafficMirrorPortRangeRequest;
  readonly Protocol: number;
  readonly DestinationCidrBlock: string;
  readonly SourceCidrBlock: string;
  readonly Description: string;
  readonly DryRun: boolean;
  readonly ClientToken: string;
}
export interface CreateTrafficMirrorSession {
  readonly NetworkInterfaceId: string;
  readonly TrafficMirrorTargetId: string;
  readonly TrafficMirrorFilterId: string;
  readonly PacketLength: number;
  readonly SessionNumber: number;
  readonly VirtualNetworkId: number;
  readonly Description: string;
  readonly TagSpecifications: [];
  readonly DryRun: boolean;
  readonly ClientToken: string;
}
export interface CreateTrafficMirrorTarget {
  readonly NetworkInterfaceId: string;
  readonly NetworkLoadBalancerArn: string;
  readonly Description: string;
  readonly TagSpecifications: [];
  readonly DryRun: boolean;
  readonly ClientToken: string;
}
export interface CreateTransitGateway {
  readonly Description: string;
  readonly Options: TransitGatewayRequestOptions;
  readonly TagSpecifications: [];
  readonly DryRun: boolean;
}
export interface CreateTransitGatewayConnect {
  readonly TransportTransitGatewayAttachmentId: string;
  readonly Options: CreateTransitGatewayConnectRequestOptions;
  readonly TagSpecifications: [];
  readonly DryRun: boolean;
}
export interface CreateTransitGatewayConnectPeer {
  readonly TransitGatewayAttachmentId: string;
  readonly TransitGatewayAddress: string;
  readonly PeerAddress: string;
  readonly BgpOptions: TransitGatewayConnectRequestBgpOptions;
  readonly InsideCidrBlocks: [];
  readonly TagSpecifications: [];
  readonly DryRun: boolean;
}
export interface CreateTransitGatewayMulticastDomain {
  readonly TransitGatewayId: string;
  readonly Options: CreateTransitGatewayMulticastDomainRequestOptions;
  readonly TagSpecifications: [];
  readonly DryRun: boolean;
}
export interface CreateTransitGatewayPeeringAttachment {
  readonly TransitGatewayId: string;
  readonly PeerTransitGatewayId: string;
  readonly PeerAccountId: string;
  readonly PeerRegion: string;
  readonly TagSpecifications: [];
  readonly DryRun: boolean;
}
export interface CreateTransitGatewayPrefixListReference {
  readonly TransitGatewayRouteTableId: string;
  readonly PrefixListId: string;
  readonly TransitGatewayAttachmentId: string;
  readonly Blackhole: boolean;
  readonly DryRun: boolean;
}
export interface CreateTransitGatewayRoute {
  readonly DestinationCidrBlock: string;
  readonly TransitGatewayRouteTableId: string;
  readonly TransitGatewayAttachmentId: string;
  readonly Blackhole: boolean;
  readonly DryRun: boolean;
}
export interface CreateTransitGatewayRouteTable {
  readonly TransitGatewayId: string;
  readonly TagSpecifications: [];
  readonly DryRun: boolean;
}
export interface CreateTransitGatewayVpcAttachment {
  readonly TransitGatewayId: string;
  readonly VpcId: string;
  readonly SubnetIds: [];
  readonly Options: CreateTransitGatewayVpcAttachmentRequestOptions;
  readonly TagSpecifications: [];
  readonly DryRun: boolean;
}
export interface CreateVolume {
  readonly AvailabilityZone: string;
  readonly Encrypted: boolean;
  readonly Iops: number;
  readonly KmsKeyId: string;
  readonly OutpostArn: string;
  readonly Size: number;
  readonly SnapshotId: string;
  readonly VolumeType: string;
  readonly DryRun: boolean;
  readonly TagSpecifications: [];
  readonly MultiAttachEnabled: boolean;
  readonly Throughput: number;
  readonly ClientToken: string;
}
export interface CreateVpc {
  readonly CidrBlock: string;
  readonly AmazonProvidedIpv6CidrBlock: boolean;
  readonly Ipv6Pool: string;
  readonly Ipv6CidrBlock: string;
  readonly Ipv4IpamPoolId: string;
  readonly Ipv4NetmaskLength: number;
  readonly Ipv6IpamPoolId: string;
  readonly Ipv6NetmaskLength: number;
  readonly DryRun: boolean;
  readonly InstanceTenancy: string;
  readonly Ipv6CidrBlockNetworkBorderGroup: string;
  readonly TagSpecifications: [];
}
export interface CreateVpcEndpoint {
  readonly DryRun: boolean;
  readonly VpcEndpointType: string;
  readonly VpcId: string;
  readonly ServiceName: string;
  readonly PolicyDocument: string;
  readonly RouteTableIds: [];
  readonly SubnetIds: [];
  readonly SecurityGroupIds: [];
  readonly ClientToken: string;
  readonly PrivateDnsEnabled: boolean;
  readonly TagSpecifications: [];
}
export interface CreateVpcEndpointConnectionNotification {
  readonly DryRun: boolean;
  readonly ServiceId: string;
  readonly VpcEndpointId: string;
  readonly ConnectionNotificationArn: string;
  readonly ConnectionEvents: [];
  readonly ClientToken: string;
}
export interface CreateVpcEndpointServiceConfiguration {
  readonly DryRun: boolean;
  readonly AcceptanceRequired: boolean;
  readonly PrivateDnsName: string;
  readonly NetworkLoadBalancerArns: [];
  readonly GatewayLoadBalancerArns: [];
  readonly ClientToken: string;
  readonly TagSpecifications: [];
}
export interface CreateVpcPeeringConnection {
  readonly DryRun: boolean;
  readonly PeerOwnerId: string;
  readonly PeerVpcId: string;
  readonly VpcId: string;
  readonly PeerRegion: string;
  readonly TagSpecifications: [];
}
export interface CreateVpnConnection {
  readonly CustomerGatewayId: string;
  readonly Type: string;
  readonly VpnGatewayId: string;
  readonly TransitGatewayId: string;
  readonly DryRun: boolean;
  readonly Options: VpnConnectionOptionsSpecification;
  readonly TagSpecifications: [];
}
export interface CreateVpnConnectionRoute {
  readonly DestinationCidrBlock: string;
  readonly VpnConnectionId: string;
}
export interface CreateVpnGateway {
  readonly AvailabilityZone: string;
  readonly Type: string;
  readonly TagSpecifications: [];
  readonly AmazonSideAsn: number;
  readonly DryRun: boolean;
}
export interface DeleteCarrierGateway {
  readonly CarrierGatewayId: string;
  readonly DryRun: boolean;
}
export interface DeleteClientVpnEndpoint {
  readonly ClientVpnEndpointId: string;
  readonly DryRun: boolean;
}
export interface DeleteClientVpnRoute {
  readonly ClientVpnEndpointId: string;
  readonly TargetVpcSubnetId: string;
  readonly DestinationCidrBlock: string;
  readonly DryRun: boolean;
}
export interface DeleteCustomerGateway {
  readonly CustomerGatewayId: string;
  readonly DryRun: boolean;
}
export interface DeleteDhcpOptions {
  readonly DhcpOptionsId: string;
  readonly DryRun: boolean;
}
export interface DeleteEgressOnlyInternetGateway {
  readonly DryRun: boolean;
  readonly EgressOnlyInternetGatewayId: string;
}
export interface DeleteFleets {
  readonly DryRun: boolean;
  readonly FleetIds: [];
  readonly TerminateInstances: boolean;
}
export interface DeleteFlowLogs {
  readonly DryRun: boolean;
  readonly FlowLogIds: [];
}
export interface DeleteFpgaImage {
  readonly DryRun: boolean;
  readonly FpgaImageId: string;
}
export interface DeleteInstanceEventWindow {
  readonly DryRun: boolean;
  readonly ForceDelete: boolean;
  readonly InstanceEventWindowId: string;
}
export interface DeleteInternetGateway {
  readonly DryRun: boolean;
  readonly InternetGatewayId: string;
}
export interface DeleteIpam {
  readonly DryRun: boolean;
  readonly IpamId: string;
}
export interface DeleteIpamPool {
  readonly DryRun: boolean;
  readonly IpamPoolId: string;
}
export interface DeleteIpamScope {
  readonly DryRun: boolean;
  readonly IpamScopeId: string;
}
export interface DeleteKeyPair {
  readonly KeyName: string;
  readonly KeyPairId: string;
  readonly DryRun: boolean;
}
export interface DeleteLaunchTemplate {
  readonly DryRun: boolean;
  readonly LaunchTemplateId: string;
  readonly LaunchTemplateName: string;
}
export interface DeleteLaunchTemplateVersions {
  readonly DryRun: boolean;
  readonly LaunchTemplateId: string;
  readonly LaunchTemplateName: string;
  readonly Versions: [];
}
export interface DeleteLocalGatewayRoute {
  readonly DestinationCidrBlock: string;
  readonly LocalGatewayRouteTableId: string;
  readonly DryRun: boolean;
}
export interface DeleteLocalGatewayRouteTableVpcAssociation {
  readonly LocalGatewayRouteTableVpcAssociationId: string;
  readonly DryRun: boolean;
}
export interface DeleteManagedPrefixList {
  readonly DryRun: boolean;
  readonly PrefixListId: string;
}
export interface DeleteNatGateway {
  readonly DryRun: boolean;
  readonly NatGatewayId: string;
}
export interface DeleteNetworkAcl {
  readonly DryRun: boolean;
  readonly NetworkAclId: string;
}
export interface DeleteNetworkAclEntry {
  readonly DryRun: boolean;
  readonly Egress: boolean;
  readonly NetworkAclId: string;
  readonly RuleNumber: number;
}
export interface DeleteNetworkInsightsAccessScope {
  readonly DryRun: boolean;
  readonly NetworkInsightsAccessScopeId: string;
}
export interface DeleteNetworkInsightsAccessScopeAnalysis {
  readonly NetworkInsightsAccessScopeAnalysisId: string;
  readonly DryRun: boolean;
}
export interface DeleteNetworkInsightsAnalysis {
  readonly DryRun: boolean;
  readonly NetworkInsightsAnalysisId: string;
}
export interface DeleteNetworkInsightsPath {
  readonly DryRun: boolean;
  readonly NetworkInsightsPathId: string;
}
export interface DeleteNetworkInterface {
  readonly DryRun: boolean;
  readonly NetworkInterfaceId: string;
}
export interface DeleteNetworkInterfacePermission {
  readonly NetworkInterfacePermissionId: string;
  readonly Force: boolean;
  readonly DryRun: boolean;
}
export interface DeletePlacementGroup {
  readonly DryRun: boolean;
  readonly GroupName: string;
}
export interface DeletePublicIpv4Pool {
  readonly DryRun: boolean;
  readonly PoolId: string;
}
export interface DeleteQueuedReservedInstances {
  readonly DryRun: boolean;
  readonly ReservedInstancesIds: [];
}
export interface DeleteRoute {
  readonly DestinationCidrBlock: string;
  readonly DestinationIpv6CidrBlock: string;
  readonly DestinationPrefixListId: string;
  readonly DryRun: boolean;
  readonly RouteTableId: string;
}
export interface DeleteRouteTable {
  readonly DryRun: boolean;
  readonly RouteTableId: string;
}
export interface DeleteSecurityGroup {
  readonly GroupId: string;
  readonly GroupName: string;
  readonly DryRun: boolean;
}
export interface DeleteSnapshot {
  readonly SnapshotId: string;
  readonly DryRun: boolean;
}
export interface DeleteSpotDatafeedSubscription {
  readonly DryRun: boolean;
}
export interface DeleteSubnet {
  readonly SubnetId: string;
  readonly DryRun: boolean;
}
export interface DeleteSubnetCidrReservation {
  readonly SubnetCidrReservationId: string;
  readonly DryRun: boolean;
}
export interface DeleteTags {
  readonly DryRun: boolean;
  readonly Resources: [];
  readonly Tags: [];
}
export interface DeleteTrafficMirrorFilter {
  readonly TrafficMirrorFilterId: string;
  readonly DryRun: boolean;
}
export interface DeleteTrafficMirrorFilterRule {
  readonly TrafficMirrorFilterRuleId: string;
  readonly DryRun: boolean;
}
export interface DeleteTrafficMirrorSession {
  readonly TrafficMirrorSessionId: string;
  readonly DryRun: boolean;
}
export interface DeleteTrafficMirrorTarget {
  readonly TrafficMirrorTargetId: string;
  readonly DryRun: boolean;
}
export interface DeleteTransitGateway {
  readonly TransitGatewayId: string;
  readonly DryRun: boolean;
}
export interface DeleteTransitGatewayConnect {
  readonly TransitGatewayAttachmentId: string;
  readonly DryRun: boolean;
}
export interface DeleteTransitGatewayConnectPeer {
  readonly TransitGatewayConnectPeerId: string;
  readonly DryRun: boolean;
}
export interface DeleteTransitGatewayMulticastDomain {
  readonly TransitGatewayMulticastDomainId: string;
  readonly DryRun: boolean;
}
export interface DeleteTransitGatewayPeeringAttachment {
  readonly TransitGatewayAttachmentId: string;
  readonly DryRun: boolean;
}
export interface DeleteTransitGatewayPrefixListReference {
  readonly TransitGatewayRouteTableId: string;
  readonly PrefixListId: string;
  readonly DryRun: boolean;
}
export interface DeleteTransitGatewayRoute {
  readonly TransitGatewayRouteTableId: string;
  readonly DestinationCidrBlock: string;
  readonly DryRun: boolean;
}
export interface DeleteTransitGatewayRouteTable {
  readonly TransitGatewayRouteTableId: string;
  readonly DryRun: boolean;
}
export interface DeleteTransitGatewayVpcAttachment {
  readonly TransitGatewayAttachmentId: string;
  readonly DryRun: boolean;
}
export interface DeleteVolume {
  readonly VolumeId: string;
  readonly DryRun: boolean;
}
export interface DeleteVpc {
  readonly VpcId: string;
  readonly DryRun: boolean;
}
export interface DeleteVpcEndpointConnectionNotifications {
  readonly DryRun: boolean;
  readonly ConnectionNotificationIds: [];
}
export interface DeleteVpcEndpointServiceConfigurations {
  readonly DryRun: boolean;
  readonly ServiceIds: [];
}
export interface DeleteVpcEndpoints {
  readonly DryRun: boolean;
  readonly VpcEndpointIds: [];
}
export interface DeleteVpcPeeringConnection {
  readonly DryRun: boolean;
  readonly VpcPeeringConnectionId: string;
}
export interface DeleteVpnConnection {
  readonly VpnConnectionId: string;
  readonly DryRun: boolean;
}
export interface DeleteVpnConnectionRoute {
  readonly DestinationCidrBlock: string;
  readonly VpnConnectionId: string;
}
export interface DeleteVpnGateway {
  readonly VpnGatewayId: string;
  readonly DryRun: boolean;
}
export interface DeprovisionByoipCidr {
  readonly Cidr: string;
  readonly DryRun: boolean;
}
export interface DeprovisionIpamPoolCidr {
  readonly DryRun: boolean;
  readonly IpamPoolId: string;
  readonly Cidr: string;
}
export interface DeprovisionPublicIpv4PoolCidr {
  readonly DryRun: boolean;
  readonly PoolId: string;
  readonly Cidr: string;
}
export interface DeregisterImage {
  readonly ImageId: string;
  readonly DryRun: boolean;
}
export interface DeregisterInstanceEventNotificationAttributes {
  readonly DryRun: boolean;
  readonly InstanceTagAttribute: DeregisterInstanceTagAttributeRequest;
}
export interface DeregisterTransitGatewayMulticastGroupMembers {
  readonly TransitGatewayMulticastDomainId: string;
  readonly GroupIpAddress: string;
  readonly NetworkInterfaceIds: [];
  readonly DryRun: boolean;
}
export interface DeregisterTransitGatewayMulticastGroupSources {
  readonly TransitGatewayMulticastDomainId: string;
  readonly GroupIpAddress: string;
  readonly NetworkInterfaceIds: [];
  readonly DryRun: boolean;
}
export interface DescribeAccountAttributes {
  readonly AttributeNames: [];
  readonly DryRun: boolean;
}
export interface DescribeAddresses {
  readonly Filters: [];
  readonly PublicIps: [];
  readonly AllocationIds: [];
  readonly DryRun: boolean;
}
export interface DescribeAddressesAttribute {
  readonly AllocationIds: [];
  readonly Attribute: string;
  readonly NextToken: string;
  readonly MaxResults: number;
  readonly DryRun: boolean;
}
export interface DescribeAggregateIdFormat {
  readonly DryRun: boolean;
}
export interface DescribeAvailabilityZones {
  readonly Filters: [];
  readonly ZoneNames: [];
  readonly ZoneIds: [];
  readonly AllAvailabilityZones: boolean;
  readonly DryRun: boolean;
}
export interface DescribeBundleTasks {
  readonly BundleIds: [];
  readonly Filters: [];
  readonly DryRun: boolean;
}
export interface DescribeByoipCidrs {
  readonly DryRun: boolean;
  readonly MaxResults: number;
  readonly NextToken: string;
}
export interface DescribeCapacityReservationFleets {
  readonly CapacityReservationFleetIds: [];
  readonly NextToken: string;
  readonly MaxResults: number;
  readonly Filters: [];
  readonly DryRun: boolean;
}
export interface DescribeCapacityReservations {
  readonly CapacityReservationIds: [];
  readonly NextToken: string;
  readonly MaxResults: number;
  readonly Filters: [];
  readonly DryRun: boolean;
}
export interface DescribeCarrierGateways {
  readonly CarrierGatewayIds: [];
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly DryRun: boolean;
}
export interface DescribeClassicLinkInstances {
  readonly Filters: [];
  readonly DryRun: boolean;
  readonly InstanceIds: [];
  readonly MaxResults: number;
  readonly NextToken: string;
}
export interface DescribeClientVpnAuthorizationRules {
  readonly ClientVpnEndpointId: string;
  readonly DryRun: boolean;
  readonly NextToken: string;
  readonly Filters: [];
  readonly MaxResults: number;
}
export interface DescribeClientVpnConnections {
  readonly ClientVpnEndpointId: string;
  readonly Filters: [];
  readonly NextToken: string;
  readonly MaxResults: number;
  readonly DryRun: boolean;
}
export interface DescribeClientVpnEndpoints {
  readonly ClientVpnEndpointIds: [];
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly Filters: [];
  readonly DryRun: boolean;
}
export interface DescribeClientVpnRoutes {
  readonly ClientVpnEndpointId: string;
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly DryRun: boolean;
}
export interface DescribeClientVpnTargetNetworks {
  readonly ClientVpnEndpointId: string;
  readonly AssociationIds: [];
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly Filters: [];
  readonly DryRun: boolean;
}
export interface DescribeCoipPools {
  readonly PoolIds: [];
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly DryRun: boolean;
}
export interface DescribeConversionTasks {
  readonly ConversionTaskIds: [];
  readonly DryRun: boolean;
}
export interface DescribeCustomerGateways {
  readonly CustomerGatewayIds: [];
  readonly Filters: [];
  readonly DryRun: boolean;
}
export interface DescribeDhcpOptions {
  readonly DhcpOptionsIds: [];
  readonly Filters: [];
  readonly DryRun: boolean;
  readonly NextToken: string;
  readonly MaxResults: number;
}
export interface DescribeEgressOnlyInternetGateways {
  readonly DryRun: boolean;
  readonly EgressOnlyInternetGatewayIds: [];
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly Filters: [];
}
export interface DescribeElasticGpus {
  readonly ElasticGpuIds: [];
  readonly DryRun: boolean;
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
}
export interface DescribeExportImageTasks {
  readonly DryRun: boolean;
  readonly Filters: [];
  readonly ExportImageTaskIds: [];
  readonly MaxResults: number;
  readonly NextToken: string;
}
export interface DescribeExportTasks {
  readonly ExportTaskIds: [];
  readonly Filters: [];
}
export interface DescribeFastSnapshotRestores {
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly DryRun: boolean;
}
export interface DescribeFleetHistory {
  readonly DryRun: boolean;
  readonly EventType: string;
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly FleetId: string;
  readonly StartTime: Date;
}
export interface DescribeFleetInstances {
  readonly DryRun: boolean;
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly FleetId: string;
  readonly Filters: [];
}
export interface DescribeFleets {
  readonly DryRun: boolean;
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly FleetIds: [];
  readonly Filters: [];
}
export interface DescribeFlowLogs {
  readonly DryRun: boolean;
  readonly Filter: [];
  readonly FlowLogIds: [];
  readonly MaxResults: number;
  readonly NextToken: string;
}
export interface DescribeFpgaImageAttribute {
  readonly DryRun: boolean;
  readonly FpgaImageId: string;
  readonly Attribute: string;
}
export interface DescribeFpgaImages {
  readonly DryRun: boolean;
  readonly FpgaImageIds: [];
  readonly Owners: [];
  readonly Filters: [];
  readonly NextToken: string;
  readonly MaxResults: number;
}
export interface DescribeHostReservationOfferings {
  readonly Filter: [];
  readonly MaxDuration: number;
  readonly MaxResults: number;
  readonly MinDuration: number;
  readonly NextToken: string;
  readonly OfferingId: string;
}
export interface DescribeHostReservations {
  readonly Filter: [];
  readonly HostReservationIdSet: [];
  readonly MaxResults: number;
  readonly NextToken: string;
}
export interface DescribeHosts {
  readonly Filter: [];
  readonly HostIds: [];
  readonly MaxResults: number;
  readonly NextToken: string;
}
export interface DescribeIamInstanceProfileAssociations {
  readonly AssociationIds: [];
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
}
export interface DescribeIdFormat {
  readonly Resource: string;
}
export interface DescribeIdentityIdFormat {
  readonly PrincipalArn: string;
  readonly Resource: string;
}
export interface DescribeImageAttribute {
  readonly Attribute: string;
  readonly ImageId: string;
  readonly DryRun: boolean;
}
export interface DescribeImages {
  readonly ExecutableUsers: [];
  readonly Filters: [];
  readonly ImageIds: [];
  readonly Owners: [];
  readonly IncludeDeprecated: boolean;
  readonly DryRun: boolean;
}
export interface DescribeImportImageTasks {
  readonly DryRun: boolean;
  readonly Filters: [];
  readonly ImportTaskIds: [];
  readonly MaxResults: number;
  readonly NextToken: string;
}
export interface DescribeImportSnapshotTasks {
  readonly DryRun: boolean;
  readonly Filters: [];
  readonly ImportTaskIds: [];
  readonly MaxResults: number;
  readonly NextToken: string;
}
export interface DescribeInstanceAttribute {
  readonly Attribute: string;
  readonly DryRun: boolean;
  readonly InstanceId: string;
}
export interface DescribeInstanceCreditSpecifications {
  readonly DryRun: boolean;
  readonly Filters: [];
  readonly InstanceIds: [];
  readonly MaxResults: number;
  readonly NextToken: string;
}
export interface DescribeInstanceEventNotificationAttributes {
  readonly DryRun: boolean;
}
export interface DescribeInstanceEventWindows {
  readonly DryRun: boolean;
  readonly InstanceEventWindowIds: [];
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
}
export interface DescribeInstanceStatus {
  readonly Filters: [];
  readonly InstanceIds: [];
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly DryRun: boolean;
  readonly IncludeAllInstances: boolean;
}
export interface DescribeInstanceTypeOfferings {
  readonly DryRun: boolean;
  readonly LocationType: string;
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
}
export interface DescribeInstanceTypes {
  readonly DryRun: boolean;
  readonly InstanceTypes: [];
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
}
export interface DescribeInstances {
  readonly Filters: [];
  readonly InstanceIds: [];
  readonly DryRun: boolean;
  readonly MaxResults: number;
  readonly NextToken: string;
}
export interface DescribeInternetGateways {
  readonly Filters: [];
  readonly DryRun: boolean;
  readonly InternetGatewayIds: [];
  readonly NextToken: string;
  readonly MaxResults: number;
}
export interface DescribeIpamPools {
  readonly DryRun: boolean;
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly IpamPoolIds: [];
}
export interface DescribeIpamScopes {
  readonly DryRun: boolean;
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly IpamScopeIds: [];
}
export interface DescribeIpams {
  readonly DryRun: boolean;
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly IpamIds: [];
}
export interface DescribeIpv6Pools {
  readonly PoolIds: [];
  readonly NextToken: string;
  readonly MaxResults: number;
  readonly DryRun: boolean;
  readonly Filters: [];
}
export interface DescribeKeyPairs {
  readonly Filters: [];
  readonly KeyNames: [];
  readonly KeyPairIds: [];
  readonly DryRun: boolean;
}
export interface DescribeLaunchTemplateVersions {
  readonly DryRun: boolean;
  readonly LaunchTemplateId: string;
  readonly LaunchTemplateName: string;
  readonly Versions: [];
  readonly MinVersion: string;
  readonly MaxVersion: string;
  readonly NextToken: string;
  readonly MaxResults: number;
  readonly Filters: [];
}
export interface DescribeLaunchTemplates {
  readonly DryRun: boolean;
  readonly LaunchTemplateIds: [];
  readonly LaunchTemplateNames: [];
  readonly Filters: [];
  readonly NextToken: string;
  readonly MaxResults: number;
}
export interface DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations {
  readonly LocalGatewayRouteTableVirtualInterfaceGroupAssociationIds: [];
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly DryRun: boolean;
}
export interface DescribeLocalGatewayRouteTableVpcAssociations {
  readonly LocalGatewayRouteTableVpcAssociationIds: [];
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly DryRun: boolean;
}
export interface DescribeLocalGatewayRouteTables {
  readonly LocalGatewayRouteTableIds: [];
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly DryRun: boolean;
}
export interface DescribeLocalGatewayVirtualInterfaceGroups {
  readonly LocalGatewayVirtualInterfaceGroupIds: [];
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly DryRun: boolean;
}
export interface DescribeLocalGatewayVirtualInterfaces {
  readonly LocalGatewayVirtualInterfaceIds: [];
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly DryRun: boolean;
}
export interface DescribeLocalGateways {
  readonly LocalGatewayIds: [];
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly DryRun: boolean;
}
export interface DescribeManagedPrefixLists {
  readonly DryRun: boolean;
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly PrefixListIds: [];
}
export interface DescribeMovingAddresses {
  readonly Filters: [];
  readonly DryRun: boolean;
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly PublicIps: [];
}
export interface DescribeNatGateways {
  readonly DryRun: boolean;
  readonly Filter: [];
  readonly MaxResults: number;
  readonly NatGatewayIds: [];
  readonly NextToken: string;
}
export interface DescribeNetworkAcls {
  readonly Filters: [];
  readonly DryRun: boolean;
  readonly NetworkAclIds: [];
  readonly NextToken: string;
  readonly MaxResults: number;
}
export interface DescribeNetworkInsightsAccessScopeAnalyses {
  readonly NetworkInsightsAccessScopeAnalysisIds: [];
  readonly NetworkInsightsAccessScopeId: string;
  readonly AnalysisStartTimeBegin: Date;
  readonly AnalysisStartTimeEnd: Date;
  readonly Filters: [];
  readonly MaxResults: number;
  readonly DryRun: boolean;
  readonly NextToken: string;
}
export interface DescribeNetworkInsightsAccessScopes {
  readonly NetworkInsightsAccessScopeIds: [];
  readonly Filters: [];
  readonly MaxResults: number;
  readonly DryRun: boolean;
  readonly NextToken: string;
}
export interface DescribeNetworkInsightsAnalyses {
  readonly NetworkInsightsAnalysisIds: [];
  readonly NetworkInsightsPathId: string;
  readonly AnalysisStartTime: Date;
  readonly AnalysisEndTime: Date;
  readonly Filters: [];
  readonly MaxResults: number;
  readonly DryRun: boolean;
  readonly NextToken: string;
}
export interface DescribeNetworkInsightsPaths {
  readonly NetworkInsightsPathIds: [];
  readonly Filters: [];
  readonly MaxResults: number;
  readonly DryRun: boolean;
  readonly NextToken: string;
}
export interface DescribeNetworkInterfaceAttribute {
  readonly Attribute: string;
  readonly DryRun: boolean;
  readonly NetworkInterfaceId: string;
}
export interface DescribeNetworkInterfacePermissions {
  readonly NetworkInterfacePermissionIds: [];
  readonly Filters: [];
  readonly NextToken: string;
  readonly MaxResults: number;
}
export interface DescribeNetworkInterfaces {
  readonly Filters: [];
  readonly DryRun: boolean;
  readonly NetworkInterfaceIds: [];
  readonly NextToken: string;
  readonly MaxResults: number;
}
export interface DescribePlacementGroups {
  readonly Filters: [];
  readonly DryRun: boolean;
  readonly GroupNames: [];
  readonly GroupIds: [];
}
export interface DescribePrefixLists {
  readonly DryRun: boolean;
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly PrefixListIds: [];
}
export interface DescribePrincipalIdFormat {
  readonly DryRun: boolean;
  readonly Resources: [];
  readonly MaxResults: number;
  readonly NextToken: string;
}
export interface DescribePublicIpv4Pools {
  readonly PoolIds: [];
  readonly NextToken: string;
  readonly MaxResults: number;
  readonly Filters: [];
}
export interface DescribeRegions {
  readonly Filters: [];
  readonly RegionNames: [];
  readonly DryRun: boolean;
  readonly AllRegions: boolean;
}
export interface DescribeReplaceRootVolumeTasks {
  readonly ReplaceRootVolumeTaskIds: [];
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly DryRun: boolean;
}
export interface DescribeReservedInstances {
  readonly Filters: [];
  readonly OfferingClass: string;
  readonly ReservedInstancesIds: [];
  readonly DryRun: boolean;
  readonly OfferingType: string;
}
export interface DescribeReservedInstancesListings {
  readonly Filters: [];
  readonly ReservedInstancesId: string;
  readonly ReservedInstancesListingId: string;
}
export interface DescribeReservedInstancesModifications {
  readonly Filters: [];
  readonly ReservedInstancesModificationIds: [];
  readonly NextToken: string;
}
export interface DescribeReservedInstancesOfferings {
  readonly AvailabilityZone: string;
  readonly Filters: [];
  readonly IncludeMarketplace: boolean;
  readonly InstanceType: string;
  readonly MaxDuration: number;
  readonly MaxInstanceCount: number;
  readonly MinDuration: number;
  readonly OfferingClass: string;
  readonly ProductDescription: string;
  readonly ReservedInstancesOfferingIds: [];
  readonly DryRun: boolean;
  readonly InstanceTenancy: string;
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly OfferingType: string;
}
export interface DescribeRouteTables {
  readonly Filters: [];
  readonly DryRun: boolean;
  readonly RouteTableIds: [];
  readonly NextToken: string;
  readonly MaxResults: number;
}
export interface DescribeScheduledInstanceAvailability {
  readonly DryRun: boolean;
  readonly Filters: [];
  readonly FirstSlotStartTimeRange: SlotDateTimeRangeRequest;
  readonly MaxResults: number;
  readonly MaxSlotDurationInHours: number;
  readonly MinSlotDurationInHours: number;
  readonly NextToken: string;
  readonly Recurrence: ScheduledInstanceRecurrenceRequest;
}
export interface DescribeScheduledInstances {
  readonly DryRun: boolean;
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly ScheduledInstanceIds: [];
  readonly SlotStartTimeRange: SlotStartTimeRangeRequest;
}
export interface DescribeSecurityGroupReferences {
  readonly DryRun: boolean;
  readonly GroupId: [];
}
export interface DescribeSecurityGroupRules {
  readonly Filters: [];
  readonly SecurityGroupRuleIds: [];
  readonly DryRun: boolean;
  readonly NextToken: string;
  readonly MaxResults: number;
}
export interface DescribeSecurityGroups {
  readonly Filters: [];
  readonly GroupIds: [];
  readonly GroupNames: [];
  readonly DryRun: boolean;
  readonly NextToken: string;
  readonly MaxResults: number;
}
export interface DescribeSnapshotAttribute {
  readonly Attribute: string;
  readonly SnapshotId: string;
  readonly DryRun: boolean;
}
export interface DescribeSnapshotTierStatus {
  readonly Filters: [];
  readonly DryRun: boolean;
  readonly NextToken: string;
  readonly MaxResults: number;
}
export interface DescribeSnapshots {
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly OwnerIds: [];
  readonly RestorableByUserIds: [];
  readonly SnapshotIds: [];
  readonly DryRun: boolean;
}
export interface DescribeSpotDatafeedSubscription {
  readonly DryRun: boolean;
}
export interface DescribeSpotFleetInstances {
  readonly DryRun: boolean;
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly SpotFleetRequestId: string;
}
export interface DescribeSpotFleetRequestHistory {
  readonly DryRun: boolean;
  readonly EventType: string;
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly SpotFleetRequestId: string;
  readonly StartTime: Date;
}
export interface DescribeSpotFleetRequests {
  readonly DryRun: boolean;
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly SpotFleetRequestIds: [];
}
export interface DescribeSpotInstanceRequests {
  readonly Filters: [];
  readonly DryRun: boolean;
  readonly SpotInstanceRequestIds: [];
  readonly NextToken: string;
  readonly MaxResults: number;
}
export interface DescribeSpotPriceHistory {
  readonly Filters: [];
  readonly AvailabilityZone: string;
  readonly DryRun: boolean;
  readonly EndTime: Date;
  readonly InstanceTypes: [];
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly ProductDescriptions: [];
  readonly StartTime: Date;
}
export interface DescribeStaleSecurityGroups {
  readonly DryRun: boolean;
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly VpcId: string;
}
export interface DescribeStoreImageTasks {
  readonly ImageIds: [];
  readonly DryRun: boolean;
  readonly Filters: [];
  readonly NextToken: string;
  readonly MaxResults: number;
}
export interface DescribeSubnets {
  readonly Filters: [];
  readonly SubnetIds: [];
  readonly DryRun: boolean;
  readonly NextToken: string;
  readonly MaxResults: number;
}
export interface DescribeTags {
  readonly DryRun: boolean;
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
}
export interface DescribeTrafficMirrorFilters {
  readonly TrafficMirrorFilterIds: [];
  readonly DryRun: boolean;
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
}
export interface DescribeTrafficMirrorSessions {
  readonly TrafficMirrorSessionIds: [];
  readonly DryRun: boolean;
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
}
export interface DescribeTrafficMirrorTargets {
  readonly TrafficMirrorTargetIds: [];
  readonly DryRun: boolean;
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
}
export interface DescribeTransitGatewayAttachments {
  readonly TransitGatewayAttachmentIds: [];
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly DryRun: boolean;
}
export interface DescribeTransitGatewayConnectPeers {
  readonly TransitGatewayConnectPeerIds: [];
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly DryRun: boolean;
}
export interface DescribeTransitGatewayConnects {
  readonly TransitGatewayAttachmentIds: [];
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly DryRun: boolean;
}
export interface DescribeTransitGatewayMulticastDomains {
  readonly TransitGatewayMulticastDomainIds: [];
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly DryRun: boolean;
}
export interface DescribeTransitGatewayPeeringAttachments {
  readonly TransitGatewayAttachmentIds: [];
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly DryRun: boolean;
}
export interface DescribeTransitGatewayRouteTables {
  readonly TransitGatewayRouteTableIds: [];
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly DryRun: boolean;
}
export interface DescribeTransitGatewayVpcAttachments {
  readonly TransitGatewayAttachmentIds: [];
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly DryRun: boolean;
}
export interface DescribeTransitGateways {
  readonly TransitGatewayIds: [];
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly DryRun: boolean;
}
export interface DescribeTrunkInterfaceAssociations {
  readonly AssociationIds: [];
  readonly DryRun: boolean;
  readonly Filters: [];
  readonly NextToken: string;
  readonly MaxResults: number;
}
export interface DescribeVolumeAttribute {
  readonly Attribute: string;
  readonly VolumeId: string;
  readonly DryRun: boolean;
}
export interface DescribeVolumeStatus {
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly VolumeIds: [];
  readonly DryRun: boolean;
}
export interface DescribeVolumes {
  readonly Filters: [];
  readonly VolumeIds: [];
  readonly DryRun: boolean;
  readonly MaxResults: number;
  readonly NextToken: string;
}
export interface DescribeVolumesModifications {
  readonly DryRun: boolean;
  readonly VolumeIds: [];
  readonly Filters: [];
  readonly NextToken: string;
  readonly MaxResults: number;
}
export interface DescribeVpcAttribute {
  readonly Attribute: string;
  readonly VpcId: string;
  readonly DryRun: boolean;
}
export interface DescribeVpcClassicLink {
  readonly Filters: [];
  readonly DryRun: boolean;
  readonly VpcIds: [];
}
export interface DescribeVpcClassicLinkDnsSupport {
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly VpcIds: [];
}
export interface DescribeVpcEndpointConnectionNotifications {
  readonly DryRun: boolean;
  readonly ConnectionNotificationId: string;
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
}
export interface DescribeVpcEndpointConnections {
  readonly DryRun: boolean;
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
}
export interface DescribeVpcEndpointServiceConfigurations {
  readonly DryRun: boolean;
  readonly ServiceIds: [];
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
}
export interface DescribeVpcEndpointServicePermissions {
  readonly DryRun: boolean;
  readonly ServiceId: string;
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
}
export interface DescribeVpcEndpointServices {
  readonly DryRun: boolean;
  readonly ServiceNames: [];
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
}
export interface DescribeVpcEndpoints {
  readonly DryRun: boolean;
  readonly VpcEndpointIds: [];
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
}
export interface DescribeVpcPeeringConnections {
  readonly Filters: [];
  readonly DryRun: boolean;
  readonly VpcPeeringConnectionIds: [];
  readonly NextToken: string;
  readonly MaxResults: number;
}
export interface DescribeVpcs {
  readonly Filters: [];
  readonly VpcIds: [];
  readonly DryRun: boolean;
  readonly NextToken: string;
  readonly MaxResults: number;
}
export interface DescribeVpnConnections {
  readonly Filters: [];
  readonly VpnConnectionIds: [];
  readonly DryRun: boolean;
}
export interface DescribeVpnGateways {
  readonly Filters: [];
  readonly VpnGatewayIds: [];
  readonly DryRun: boolean;
}
export interface DetachClassicLinkVpc {
  readonly DryRun: boolean;
  readonly InstanceId: string;
  readonly VpcId: string;
}
export interface DetachInternetGateway {
  readonly DryRun: boolean;
  readonly InternetGatewayId: string;
  readonly VpcId: string;
}
export interface DetachNetworkInterface {
  readonly AttachmentId: string;
  readonly DryRun: boolean;
  readonly Force: boolean;
}
export interface DetachVolume {
  readonly Device: string;
  readonly Force: boolean;
  readonly InstanceId: string;
  readonly VolumeId: string;
  readonly DryRun: boolean;
}
export interface DetachVpnGateway {
  readonly VpcId: string;
  readonly VpnGatewayId: string;
  readonly DryRun: boolean;
}
export interface DisableEbsEncryptionByDefault {
  readonly DryRun: boolean;
}
export interface DisableFastSnapshotRestores {
  readonly AvailabilityZones: [];
  readonly SourceSnapshotIds: [];
  readonly DryRun: boolean;
}
export interface DisableImageDeprecation {
  readonly ImageId: string;
  readonly DryRun: boolean;
}
export interface DisableIpamOrganizationAdminAccount {
  readonly DryRun: boolean;
  readonly DelegatedAdminAccountId: string;
}
export interface DisableSerialConsoleAccess {
  readonly DryRun: boolean;
}
export interface DisableTransitGatewayRouteTablePropagation {
  readonly TransitGatewayRouteTableId: string;
  readonly TransitGatewayAttachmentId: string;
  readonly DryRun: boolean;
}
export interface DisableVgwRoutePropagation {
  readonly GatewayId: string;
  readonly RouteTableId: string;
  readonly DryRun: boolean;
}
export interface DisableVpcClassicLink {
  readonly DryRun: boolean;
  readonly VpcId: string;
}
export interface DisableVpcClassicLinkDnsSupport {
  readonly VpcId: string;
}
export interface DisassociateAddress {
  readonly AssociationId: string;
  readonly PublicIp: string;
  readonly DryRun: boolean;
}
export interface DisassociateClientVpnTargetNetwork {
  readonly ClientVpnEndpointId: string;
  readonly AssociationId: string;
  readonly DryRun: boolean;
}
export interface DisassociateEnclaveCertificateIamRole {
  readonly CertificateArn: string;
  readonly RoleArn: string;
  readonly DryRun: boolean;
}
export interface DisassociateIamInstanceProfile {
  readonly AssociationId: string;
}
export interface DisassociateInstanceEventWindow {
  readonly DryRun: boolean;
  readonly InstanceEventWindowId: string;
  readonly AssociationTarget: InstanceEventWindowDisassociationRequest;
}
export interface DisassociateRouteTable {
  readonly AssociationId: string;
  readonly DryRun: boolean;
}
export interface DisassociateSubnetCidrBlock {
  readonly AssociationId: string;
}
export interface DisassociateTransitGatewayMulticastDomain {
  readonly TransitGatewayMulticastDomainId: string;
  readonly TransitGatewayAttachmentId: string;
  readonly SubnetIds: [];
  readonly DryRun: boolean;
}
export interface DisassociateTransitGatewayRouteTable {
  readonly TransitGatewayRouteTableId: string;
  readonly TransitGatewayAttachmentId: string;
  readonly DryRun: boolean;
}
export interface DisassociateTrunkInterface {
  readonly AssociationId: string;
  readonly ClientToken: string;
  readonly DryRun: boolean;
}
export interface DisassociateVpcCidrBlock {
  readonly AssociationId: string;
}
export interface EnableEbsEncryptionByDefault {
  readonly DryRun: boolean;
}
export interface EnableFastSnapshotRestores {
  readonly AvailabilityZones: [];
  readonly SourceSnapshotIds: [];
  readonly DryRun: boolean;
}
export interface EnableImageDeprecation {
  readonly ImageId: string;
  readonly DeprecateAt: Date;
  readonly DryRun: boolean;
}
export interface EnableIpamOrganizationAdminAccount {
  readonly DryRun: boolean;
  readonly DelegatedAdminAccountId: string;
}
export interface EnableSerialConsoleAccess {
  readonly DryRun: boolean;
}
export interface EnableTransitGatewayRouteTablePropagation {
  readonly TransitGatewayRouteTableId: string;
  readonly TransitGatewayAttachmentId: string;
  readonly DryRun: boolean;
}
export interface EnableVgwRoutePropagation {
  readonly GatewayId: string;
  readonly RouteTableId: string;
  readonly DryRun: boolean;
}
export interface EnableVolumeIO {
  readonly DryRun: boolean;
  readonly VolumeId: string;
}
export interface EnableVpcClassicLink {
  readonly DryRun: boolean;
  readonly VpcId: string;
}
export interface EnableVpcClassicLinkDnsSupport {
  readonly VpcId: string;
}
export interface ExportClientVpnClientCertificateRevocationList {
  readonly ClientVpnEndpointId: string;
  readonly DryRun: boolean;
}
export interface ExportClientVpnClientConfiguration {
  readonly ClientVpnEndpointId: string;
  readonly DryRun: boolean;
}
export interface ExportImage {
  readonly ClientToken: string;
  readonly Description: string;
  readonly DiskImageFormat: string;
  readonly DryRun: boolean;
  readonly ImageId: string;
  readonly S3ExportLocation: ExportTaskS3LocationRequest;
  readonly RoleName: string;
  readonly TagSpecifications: [];
}
export interface ExportTransitGatewayRoutes {
  readonly TransitGatewayRouteTableId: string;
  readonly Filters: [];
  readonly S3Bucket: string;
  readonly DryRun: boolean;
}
export interface GetAssociatedEnclaveCertificateIamRoles {
  readonly CertificateArn: string;
  readonly DryRun: boolean;
}
export interface GetAssociatedIpv6PoolCidrs {
  readonly PoolId: string;
  readonly NextToken: string;
  readonly MaxResults: number;
  readonly DryRun: boolean;
}
export interface GetCapacityReservationUsage {
  readonly CapacityReservationId: string;
  readonly NextToken: string;
  readonly MaxResults: number;
  readonly DryRun: boolean;
}
export interface GetCoipPoolUsage {
  readonly PoolId: string;
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly DryRun: boolean;
}
export interface GetConsoleOutput {
  readonly InstanceId: string;
  readonly DryRun: boolean;
  readonly Latest: boolean;
}
export interface GetConsoleScreenshot {
  readonly DryRun: boolean;
  readonly InstanceId: string;
  readonly WakeUp: boolean;
}
export interface GetDefaultCreditSpecification {
  readonly DryRun: boolean;
  readonly InstanceFamily: string;
}
export interface GetEbsDefaultKmsKeyId {
  readonly DryRun: boolean;
}
export interface GetEbsEncryptionByDefault {
  readonly DryRun: boolean;
}
export interface GetFlowLogsIntegrationTemplate {
  readonly DryRun: boolean;
  readonly FlowLogId: string;
  readonly ConfigDeliveryS3DestinationArn: string;
  readonly IntegrateServices: IntegrateServices;
}
export interface GetGroupsForCapacityReservation {
  readonly CapacityReservationId: string;
  readonly NextToken: string;
  readonly MaxResults: number;
  readonly DryRun: boolean;
}
export interface GetHostReservationPurchasePreview {
  readonly HostIdSet: [];
  readonly OfferingId: string;
}
export interface GetInstanceTypesFromInstanceRequirements {
  readonly DryRun: boolean;
  readonly ArchitectureTypes: [];
  readonly VirtualizationTypes: [];
  readonly InstanceRequirements: InstanceRequirementsRequest;
  readonly MaxResults: number;
  readonly NextToken: string;
}
export interface GetIpamAddressHistory {
  readonly DryRun: boolean;
  readonly Cidr: string;
  readonly IpamScopeId: string;
  readonly VpcId: string;
  readonly StartTime: Date;
  readonly EndTime: Date;
  readonly MaxResults: number;
  readonly NextToken: string;
}
export interface GetIpamPoolAllocations {
  readonly DryRun: boolean;
  readonly IpamPoolId: string;
  readonly IpamPoolAllocationId: string;
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
}
export interface GetIpamPoolCidrs {
  readonly DryRun: boolean;
  readonly IpamPoolId: string;
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
}
export interface GetIpamResourceCidrs {
  readonly DryRun: boolean;
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly IpamScopeId: string;
  readonly IpamPoolId: string;
  readonly ResourceId: string;
  readonly ResourceType: string;
  readonly ResourceTag: RequestIpamResourceTag;
  readonly ResourceOwner: string;
}
export interface GetLaunchTemplateData {
  readonly DryRun: boolean;
  readonly InstanceId: string;
}
export interface GetManagedPrefixListAssociations {
  readonly DryRun: boolean;
  readonly PrefixListId: string;
  readonly MaxResults: number;
  readonly NextToken: string;
}
export interface GetManagedPrefixListEntries {
  readonly DryRun: boolean;
  readonly PrefixListId: string;
  readonly TargetVersion: number;
  readonly MaxResults: number;
  readonly NextToken: string;
}
export interface GetNetworkInsightsAccessScopeAnalysisFindings {
  readonly NetworkInsightsAccessScopeAnalysisId: string;
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly DryRun: boolean;
}
export interface GetNetworkInsightsAccessScopeContent {
  readonly NetworkInsightsAccessScopeId: string;
  readonly DryRun: boolean;
}
export interface GetPasswordData {
  readonly InstanceId: string;
  readonly DryRun: boolean;
}
export interface GetReservedInstancesExchangeQuote {
  readonly DryRun: boolean;
  readonly ReservedInstanceIds: [];
  readonly TargetConfigurations: [];
}
export interface GetSerialConsoleAccessStatus {
  readonly DryRun: boolean;
}
export interface GetSpotPlacementScores {
  readonly InstanceTypes: [];
  readonly TargetCapacity: number;
  readonly TargetCapacityUnitType: string;
  readonly SingleAvailabilityZone: boolean;
  readonly RegionNames: [];
  readonly InstanceRequirementsWithMetadata: InstanceRequirementsWithMetadataRequest;
  readonly DryRun: boolean;
  readonly MaxResults: number;
  readonly NextToken: string;
}
export interface GetSubnetCidrReservations {
  readonly Filters: [];
  readonly SubnetId: string;
  readonly DryRun: boolean;
  readonly NextToken: string;
  readonly MaxResults: number;
}
export interface GetTransitGatewayAttachmentPropagations {
  readonly TransitGatewayAttachmentId: string;
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly DryRun: boolean;
}
export interface GetTransitGatewayMulticastDomainAssociations {
  readonly TransitGatewayMulticastDomainId: string;
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly DryRun: boolean;
}
export interface GetTransitGatewayPrefixListReferences {
  readonly TransitGatewayRouteTableId: string;
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly DryRun: boolean;
}
export interface GetTransitGatewayRouteTableAssociations {
  readonly TransitGatewayRouteTableId: string;
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly DryRun: boolean;
}
export interface GetTransitGatewayRouteTablePropagations {
  readonly TransitGatewayRouteTableId: string;
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly DryRun: boolean;
}
export interface GetVpnConnectionDeviceSampleConfiguration {
  readonly VpnConnectionId: string;
  readonly VpnConnectionDeviceTypeId: string;
  readonly InternetKeyExchangeVersion: string;
  readonly DryRun: boolean;
}
export interface GetVpnConnectionDeviceTypes {
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly DryRun: boolean;
}
export interface ImportClientVpnClientCertificateRevocationList {
  readonly ClientVpnEndpointId: string;
  readonly CertificateRevocationList: string;
  readonly DryRun: boolean;
}
export interface ImportImage {
  readonly Architecture: string;
  readonly ClientData: ClientData;
  readonly ClientToken: string;
  readonly Description: string;
  readonly DiskContainers: [];
  readonly DryRun: boolean;
  readonly Encrypted: boolean;
  readonly Hypervisor: string;
  readonly KmsKeyId: string;
  readonly LicenseType: string;
  readonly Platform: string;
  readonly RoleName: string;
  readonly LicenseSpecifications: [];
  readonly TagSpecifications: [];
  readonly UsageOperation: string;
  readonly BootMode: string;
}
export interface ImportInstance {
  readonly Description: string;
  readonly DiskImages: [];
  readonly DryRun: boolean;
  readonly LaunchSpecification: ImportInstanceLaunchSpecification;
  readonly Platform: string;
}
export interface ImportKeyPair {
  readonly DryRun: boolean;
  readonly KeyName: string;
  readonly PublicKeyMaterial: unknown;
  readonly TagSpecifications: [];
}
export interface ImportSnapshot {
  readonly ClientData: ClientData;
  readonly ClientToken: string;
  readonly Description: string;
  readonly DiskContainer: SnapshotDiskContainer;
  readonly DryRun: boolean;
  readonly Encrypted: boolean;
  readonly KmsKeyId: string;
  readonly RoleName: string;
  readonly TagSpecifications: [];
}
export interface ImportVolume {
  readonly AvailabilityZone: string;
  readonly Description: string;
  readonly DryRun: boolean;
  readonly Image: DiskImageDetail;
  readonly Volume: VolumeDetail;
}
export interface ListSnapshotsInRecycleBin {
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly SnapshotIds: [];
  readonly DryRun: boolean;
}
export interface ModifyAddressAttribute {
  readonly AllocationId: string;
  readonly DomainName: string;
  readonly DryRun: boolean;
}
export interface ModifyAvailabilityZoneGroup {
  readonly GroupName: string;
  readonly OptInStatus: string;
  readonly DryRun: boolean;
}
export interface ModifyCapacityReservation {
  readonly CapacityReservationId: string;
  readonly InstanceCount: number;
  readonly EndDate: Date;
  readonly EndDateType: string;
  readonly Accept: boolean;
  readonly DryRun: boolean;
  readonly AdditionalInfo: string;
}
export interface ModifyCapacityReservationFleet {
  readonly CapacityReservationFleetId: string;
  readonly TotalTargetCapacity: number;
  readonly EndDate: Date;
  readonly DryRun: boolean;
  readonly RemoveEndDate: boolean;
}
export interface ModifyClientVpnEndpoint {
  readonly ClientVpnEndpointId: string;
  readonly ServerCertificateArn: string;
  readonly ConnectionLogOptions: ConnectionLogOptions;
  readonly DnsServers: DnsServersOptionsModifyStructure;
  readonly VpnPort: number;
  readonly Description: string;
  readonly SplitTunnel: boolean;
  readonly DryRun: boolean;
  readonly SecurityGroupIds: [];
  readonly VpcId: string;
  readonly SelfServicePortal: string;
  readonly ClientConnectOptions: ClientConnectOptions;
}
export interface ModifyDefaultCreditSpecification {
  readonly DryRun: boolean;
  readonly InstanceFamily: string;
  readonly CpuCredits: string;
}
export interface ModifyEbsDefaultKmsKeyId {
  readonly KmsKeyId: string;
  readonly DryRun: boolean;
}
export interface ModifyFleet {
  readonly DryRun: boolean;
  readonly ExcessCapacityTerminationPolicy: string;
  readonly LaunchTemplateConfigs: [];
  readonly FleetId: string;
  readonly TargetCapacitySpecification: TargetCapacitySpecificationRequest;
  readonly Context: string;
}
export interface ModifyFpgaImageAttribute {
  readonly DryRun: boolean;
  readonly FpgaImageId: string;
  readonly Attribute: string;
  readonly OperationType: string;
  readonly UserIds: [];
  readonly UserGroups: [];
  readonly ProductCodes: [];
  readonly LoadPermission: LoadPermissionModifications;
  readonly Description: string;
  readonly Name: string;
}
export interface ModifyHosts {
  readonly AutoPlacement: string;
  readonly HostIds: [];
  readonly HostRecovery: string;
  readonly InstanceType: string;
  readonly InstanceFamily: string;
}
export interface ModifyIdFormat {
  readonly Resource: string;
  readonly UseLongIds: boolean;
}
export interface ModifyIdentityIdFormat {
  readonly PrincipalArn: string;
  readonly Resource: string;
  readonly UseLongIds: boolean;
}
export interface ModifyImageAttribute {
  readonly Attribute: string;
  readonly Description: AttributeValue;
  readonly ImageId: string;
  readonly LaunchPermission: LaunchPermissionModifications;
  readonly OperationType: string;
  readonly ProductCodes: [];
  readonly UserGroups: [];
  readonly UserIds: [];
  readonly Value: string;
  readonly DryRun: boolean;
  readonly OrganizationArns: [];
  readonly OrganizationalUnitArns: [];
}
export interface ModifyInstanceAttribute {
  readonly SourceDestCheck: AttributeBooleanValue;
  readonly Attribute: string;
  readonly BlockDeviceMappings: [];
  readonly DisableApiTermination: AttributeBooleanValue;
  readonly DryRun: boolean;
  readonly EbsOptimized: AttributeBooleanValue;
  readonly EnaSupport: AttributeBooleanValue;
  readonly Groups: [];
  readonly InstanceId: string;
  readonly InstanceInitiatedShutdownBehavior: AttributeValue;
  readonly InstanceType: AttributeValue;
  readonly Kernel: AttributeValue;
  readonly Ramdisk: AttributeValue;
  readonly SriovNetSupport: AttributeValue;
  readonly UserData: BlobAttributeValue;
  readonly Value: string;
}
export interface ModifyInstanceCapacityReservationAttributes {
  readonly InstanceId: string;
  readonly CapacityReservationSpecification: CapacityReservationSpecification;
  readonly DryRun: boolean;
}
export interface ModifyInstanceCreditSpecification {
  readonly DryRun: boolean;
  readonly ClientToken: string;
  readonly InstanceCreditSpecifications: [];
}
export interface ModifyInstanceEventStartTime {
  readonly DryRun: boolean;
  readonly InstanceId: string;
  readonly InstanceEventId: string;
  readonly NotBefore: Date;
}
export interface ModifyInstanceEventWindow {
  readonly DryRun: boolean;
  readonly Name: string;
  readonly InstanceEventWindowId: string;
  readonly TimeRanges: [];
  readonly CronExpression: string;
}
export interface ModifyInstanceMetadataOptions {
  readonly InstanceId: string;
  readonly HttpTokens: string;
  readonly HttpPutResponseHopLimit: number;
  readonly HttpEndpoint: string;
  readonly DryRun: boolean;
  readonly HttpProtocolIpv6: string;
}
export interface ModifyInstancePlacement {
  readonly Affinity: string;
  readonly GroupName: string;
  readonly HostId: string;
  readonly InstanceId: string;
  readonly Tenancy: string;
  readonly PartitionNumber: number;
  readonly HostResourceGroupArn: string;
}
export interface ModifyIpam {
  readonly DryRun: boolean;
  readonly IpamId: string;
  readonly Description: string;
  readonly AddOperatingRegions: [];
  readonly RemoveOperatingRegions: [];
}
export interface ModifyIpamPool {
  readonly DryRun: boolean;
  readonly IpamPoolId: string;
  readonly Description: string;
  readonly AutoImport: boolean;
  readonly AllocationMinNetmaskLength: number;
  readonly AllocationMaxNetmaskLength: number;
  readonly AllocationDefaultNetmaskLength: number;
  readonly ClearAllocationDefaultNetmaskLength: boolean;
  readonly AddAllocationResourceTags: [];
  readonly RemoveAllocationResourceTags: [];
}
export interface ModifyIpamResourceCidr {
  readonly DryRun: boolean;
  readonly ResourceId: string;
  readonly ResourceCidr: string;
  readonly ResourceRegion: string;
  readonly CurrentIpamScopeId: string;
  readonly DestinationIpamScopeId: string;
  readonly Monitored: boolean;
}
export interface ModifyIpamScope {
  readonly DryRun: boolean;
  readonly IpamScopeId: string;
  readonly Description: string;
}
export interface ModifyLaunchTemplate {
  readonly DryRun: boolean;
  readonly ClientToken: string;
  readonly LaunchTemplateId: string;
  readonly LaunchTemplateName: string;
  readonly DefaultVersion: string;
}
export interface ModifyManagedPrefixList {
  readonly DryRun: boolean;
  readonly PrefixListId: string;
  readonly CurrentVersion: number;
  readonly PrefixListName: string;
  readonly AddEntries: [];
  readonly RemoveEntries: [];
  readonly MaxEntries: number;
}
export interface ModifyNetworkInterfaceAttribute {
  readonly Attachment: NetworkInterfaceAttachmentChanges;
  readonly Description: AttributeValue;
  readonly DryRun: boolean;
  readonly Groups: [];
  readonly NetworkInterfaceId: string;
  readonly SourceDestCheck: AttributeBooleanValue;
}
export interface ModifyPrivateDnsNameOptions {
  readonly DryRun: boolean;
  readonly InstanceId: string;
  readonly PrivateDnsHostnameType: string;
  readonly EnableResourceNameDnsARecord: boolean;
  readonly EnableResourceNameDnsAAAARecord: boolean;
}
export interface ModifyReservedInstances {
  readonly ReservedInstancesIds: [];
  readonly ClientToken: string;
  readonly TargetConfigurations: [];
}
export interface ModifySecurityGroupRules {
  readonly GroupId: string;
  readonly SecurityGroupRules: [];
  readonly DryRun: boolean;
}
export interface ModifySnapshotAttribute {
  readonly Attribute: string;
  readonly CreateVolumePermission: CreateVolumePermissionModifications;
  readonly GroupNames: [];
  readonly OperationType: string;
  readonly SnapshotId: string;
  readonly UserIds: [];
  readonly DryRun: boolean;
}
export interface ModifySnapshotTier {
  readonly SnapshotId: string;
  readonly StorageTier: string;
  readonly DryRun: boolean;
}
export interface ModifySpotFleetRequest {
  readonly ExcessCapacityTerminationPolicy: string;
  readonly LaunchTemplateConfigs: [];
  readonly SpotFleetRequestId: string;
  readonly TargetCapacity: number;
  readonly OnDemandTargetCapacity: number;
  readonly Context: string;
}
export interface ModifySubnetAttribute {
  readonly AssignIpv6AddressOnCreation: AttributeBooleanValue;
  readonly MapPublicIpOnLaunch: AttributeBooleanValue;
  readonly SubnetId: string;
  readonly MapCustomerOwnedIpOnLaunch: AttributeBooleanValue;
  readonly CustomerOwnedIpv4Pool: string;
  readonly EnableDns64: AttributeBooleanValue;
  readonly PrivateDnsHostnameTypeOnLaunch: string;
  readonly EnableResourceNameDnsARecordOnLaunch: AttributeBooleanValue;
  readonly EnableResourceNameDnsAAAARecordOnLaunch: AttributeBooleanValue;
  readonly EnableLniAtDeviceIndex: number;
  readonly DisableLniAtDeviceIndex: AttributeBooleanValue;
}
export interface ModifyTrafficMirrorFilterNetworkServices {
  readonly TrafficMirrorFilterId: string;
  readonly AddNetworkServices: [];
  readonly RemoveNetworkServices: [];
  readonly DryRun: boolean;
}
export interface ModifyTrafficMirrorFilterRule {
  readonly TrafficMirrorFilterRuleId: string;
  readonly TrafficDirection: string;
  readonly RuleNumber: number;
  readonly RuleAction: string;
  readonly DestinationPortRange: TrafficMirrorPortRangeRequest;
  readonly SourcePortRange: TrafficMirrorPortRangeRequest;
  readonly Protocol: number;
  readonly DestinationCidrBlock: string;
  readonly SourceCidrBlock: string;
  readonly Description: string;
  readonly RemoveFields: [];
  readonly DryRun: boolean;
}
export interface ModifyTrafficMirrorSession {
  readonly TrafficMirrorSessionId: string;
  readonly TrafficMirrorTargetId: string;
  readonly TrafficMirrorFilterId: string;
  readonly PacketLength: number;
  readonly SessionNumber: number;
  readonly VirtualNetworkId: number;
  readonly Description: string;
  readonly RemoveFields: [];
  readonly DryRun: boolean;
}
export interface ModifyTransitGateway {
  readonly TransitGatewayId: string;
  readonly Description: string;
  readonly Options: ModifyTransitGatewayOptions;
  readonly DryRun: boolean;
}
export interface ModifyTransitGatewayPrefixListReference {
  readonly TransitGatewayRouteTableId: string;
  readonly PrefixListId: string;
  readonly TransitGatewayAttachmentId: string;
  readonly Blackhole: boolean;
  readonly DryRun: boolean;
}
export interface ModifyTransitGatewayVpcAttachment {
  readonly TransitGatewayAttachmentId: string;
  readonly AddSubnetIds: [];
  readonly RemoveSubnetIds: [];
  readonly Options: ModifyTransitGatewayVpcAttachmentRequestOptions;
  readonly DryRun: boolean;
}
export interface ModifyVolume {
  readonly DryRun: boolean;
  readonly VolumeId: string;
  readonly Size: number;
  readonly VolumeType: string;
  readonly Iops: number;
  readonly Throughput: number;
  readonly MultiAttachEnabled: boolean;
}
export interface ModifyVolumeAttribute {
  readonly AutoEnableIO: AttributeBooleanValue;
  readonly VolumeId: string;
  readonly DryRun: boolean;
}
export interface ModifyVpcAttribute {
  readonly EnableDnsHostnames: AttributeBooleanValue;
  readonly EnableDnsSupport: AttributeBooleanValue;
  readonly VpcId: string;
}
export interface ModifyVpcEndpoint {
  readonly DryRun: boolean;
  readonly VpcEndpointId: string;
  readonly ResetPolicy: boolean;
  readonly PolicyDocument: string;
  readonly AddRouteTableIds: [];
  readonly RemoveRouteTableIds: [];
  readonly AddSubnetIds: [];
  readonly RemoveSubnetIds: [];
  readonly AddSecurityGroupIds: [];
  readonly RemoveSecurityGroupIds: [];
  readonly PrivateDnsEnabled: boolean;
}
export interface ModifyVpcEndpointConnectionNotification {
  readonly DryRun: boolean;
  readonly ConnectionNotificationId: string;
  readonly ConnectionNotificationArn: string;
  readonly ConnectionEvents: [];
}
export interface ModifyVpcEndpointServiceConfiguration {
  readonly DryRun: boolean;
  readonly ServiceId: string;
  readonly PrivateDnsName: string;
  readonly RemovePrivateDnsName: boolean;
  readonly AcceptanceRequired: boolean;
  readonly AddNetworkLoadBalancerArns: [];
  readonly RemoveNetworkLoadBalancerArns: [];
  readonly AddGatewayLoadBalancerArns: [];
  readonly RemoveGatewayLoadBalancerArns: [];
}
export interface ModifyVpcEndpointServicePermissions {
  readonly DryRun: boolean;
  readonly ServiceId: string;
  readonly AddAllowedPrincipals: [];
  readonly RemoveAllowedPrincipals: [];
}
export interface ModifyVpcPeeringConnectionOptions {
  readonly AccepterPeeringConnectionOptions: PeeringConnectionOptionsRequest;
  readonly DryRun: boolean;
  readonly RequesterPeeringConnectionOptions: PeeringConnectionOptionsRequest;
  readonly VpcPeeringConnectionId: string;
}
export interface ModifyVpcTenancy {
  readonly VpcId: string;
  readonly InstanceTenancy: string;
  readonly DryRun: boolean;
}
export interface ModifyVpnConnection {
  readonly VpnConnectionId: string;
  readonly TransitGatewayId: string;
  readonly CustomerGatewayId: string;
  readonly VpnGatewayId: string;
  readonly DryRun: boolean;
}
export interface ModifyVpnConnectionOptions {
  readonly VpnConnectionId: string;
  readonly LocalIpv4NetworkCidr: string;
  readonly RemoteIpv4NetworkCidr: string;
  readonly LocalIpv6NetworkCidr: string;
  readonly RemoteIpv6NetworkCidr: string;
  readonly DryRun: boolean;
}
export interface ModifyVpnTunnelCertificate {
  readonly VpnConnectionId: string;
  readonly VpnTunnelOutsideIpAddress: string;
  readonly DryRun: boolean;
}
export interface ModifyVpnTunnelOptions {
  readonly VpnConnectionId: string;
  readonly VpnTunnelOutsideIpAddress: string;
  readonly TunnelOptions: ModifyVpnTunnelOptionsSpecification;
  readonly DryRun: boolean;
}
export interface MonitorInstances {
  readonly InstanceIds: [];
  readonly DryRun: boolean;
}
export interface MoveAddressToVpc {
  readonly DryRun: boolean;
  readonly PublicIp: string;
}
export interface MoveByoipCidrToIpam {
  readonly DryRun: boolean;
  readonly Cidr: string;
  readonly IpamPoolId: string;
  readonly IpamPoolOwner: string;
}
export interface ProvisionByoipCidr {
  readonly Cidr: string;
  readonly CidrAuthorizationContext: CidrAuthorizationContext;
  readonly PubliclyAdvertisable: boolean;
  readonly Description: string;
  readonly DryRun: boolean;
  readonly PoolTagSpecifications: [];
  readonly MultiRegion: boolean;
}
export interface ProvisionIpamPoolCidr {
  readonly DryRun: boolean;
  readonly IpamPoolId: string;
  readonly Cidr: string;
  readonly CidrAuthorizationContext: IpamCidrAuthorizationContext;
}
export interface ProvisionPublicIpv4PoolCidr {
  readonly DryRun: boolean;
  readonly IpamPoolId: string;
  readonly PoolId: string;
  readonly NetmaskLength: number;
}
export interface PurchaseHostReservation {
  readonly ClientToken: string;
  readonly CurrencyCode: string;
  readonly HostIdSet: [];
  readonly LimitPrice: string;
  readonly OfferingId: string;
  readonly TagSpecifications: [];
}
export interface PurchaseReservedInstancesOffering {
  readonly InstanceCount: number;
  readonly ReservedInstancesOfferingId: string;
  readonly DryRun: boolean;
  readonly LimitPrice: ReservedInstanceLimitPrice;
  readonly PurchaseTime: Date;
}
export interface PurchaseScheduledInstances {
  readonly ClientToken: string;
  readonly DryRun: boolean;
  readonly PurchaseRequests: [];
}
export interface RebootInstances {
  readonly InstanceIds: [];
  readonly DryRun: boolean;
}
export interface RegisterImage {
  readonly ImageLocation: string;
  readonly Architecture: string;
  readonly BlockDeviceMappings: [];
  readonly Description: string;
  readonly DryRun: boolean;
  readonly EnaSupport: boolean;
  readonly KernelId: string;
  readonly Name: string;
  readonly BillingProducts: [];
  readonly RamdiskId: string;
  readonly RootDeviceName: string;
  readonly SriovNetSupport: string;
  readonly VirtualizationType: string;
  readonly BootMode: string;
}
export interface RegisterInstanceEventNotificationAttributes {
  readonly DryRun: boolean;
  readonly InstanceTagAttribute: RegisterInstanceTagAttributeRequest;
}
export interface RegisterTransitGatewayMulticastGroupMembers {
  readonly TransitGatewayMulticastDomainId: string;
  readonly GroupIpAddress: string;
  readonly NetworkInterfaceIds: [];
  readonly DryRun: boolean;
}
export interface RegisterTransitGatewayMulticastGroupSources {
  readonly TransitGatewayMulticastDomainId: string;
  readonly GroupIpAddress: string;
  readonly NetworkInterfaceIds: [];
  readonly DryRun: boolean;
}
export interface RejectTransitGatewayMulticastDomainAssociations {
  readonly TransitGatewayMulticastDomainId: string;
  readonly TransitGatewayAttachmentId: string;
  readonly SubnetIds: [];
  readonly DryRun: boolean;
}
export interface RejectTransitGatewayPeeringAttachment {
  readonly TransitGatewayAttachmentId: string;
  readonly DryRun: boolean;
}
export interface RejectTransitGatewayVpcAttachment {
  readonly TransitGatewayAttachmentId: string;
  readonly DryRun: boolean;
}
export interface RejectVpcEndpointConnections {
  readonly DryRun: boolean;
  readonly ServiceId: string;
  readonly VpcEndpointIds: [];
}
export interface RejectVpcPeeringConnection {
  readonly DryRun: boolean;
  readonly VpcPeeringConnectionId: string;
}
export interface ReleaseAddress {
  readonly AllocationId: string;
  readonly PublicIp: string;
  readonly NetworkBorderGroup: string;
  readonly DryRun: boolean;
}
export interface ReleaseHosts {
  readonly HostIds: [];
}
export interface ReleaseIpamPoolAllocation {
  readonly DryRun: boolean;
  readonly IpamPoolId: string;
  readonly Cidr: string;
  readonly IpamPoolAllocationId: string;
}
export interface ReplaceIamInstanceProfileAssociation {
  readonly IamInstanceProfile: IamInstanceProfileSpecification;
  readonly AssociationId: string;
}
export interface ReplaceNetworkAclAssociation {
  readonly AssociationId: string;
  readonly DryRun: boolean;
  readonly NetworkAclId: string;
}
export interface ReplaceNetworkAclEntry {
  readonly CidrBlock: string;
  readonly DryRun: boolean;
  readonly Egress: boolean;
  readonly IcmpTypeCode: IcmpTypeCode;
  readonly Ipv6CidrBlock: string;
  readonly NetworkAclId: string;
  readonly PortRange: PortRange;
  readonly Protocol: string;
  readonly RuleAction: string;
  readonly RuleNumber: number;
}
export interface ReplaceRoute {
  readonly DestinationCidrBlock: string;
  readonly DestinationIpv6CidrBlock: string;
  readonly DestinationPrefixListId: string;
  readonly DryRun: boolean;
  readonly VpcEndpointId: string;
  readonly EgressOnlyInternetGatewayId: string;
  readonly GatewayId: string;
  readonly InstanceId: string;
  readonly LocalTarget: boolean;
  readonly NatGatewayId: string;
  readonly TransitGatewayId: string;
  readonly LocalGatewayId: string;
  readonly CarrierGatewayId: string;
  readonly NetworkInterfaceId: string;
  readonly RouteTableId: string;
  readonly VpcPeeringConnectionId: string;
  readonly CoreNetworkArn: string;
}
export interface ReplaceRouteTableAssociation {
  readonly AssociationId: string;
  readonly DryRun: boolean;
  readonly RouteTableId: string;
}
export interface ReplaceTransitGatewayRoute {
  readonly DestinationCidrBlock: string;
  readonly TransitGatewayRouteTableId: string;
  readonly TransitGatewayAttachmentId: string;
  readonly Blackhole: boolean;
  readonly DryRun: boolean;
}
export interface ReportInstanceStatus {
  readonly Description: string;
  readonly DryRun: boolean;
  readonly EndTime: Date;
  readonly Instances: [];
  readonly ReasonCodes: [];
  readonly StartTime: Date;
  readonly Status: string;
}
export interface RequestSpotFleet {
  readonly DryRun: boolean;
  readonly SpotFleetRequestConfig: SpotFleetRequestConfigData;
}
export interface RequestSpotInstances {
  readonly AvailabilityZoneGroup: string;
  readonly BlockDurationMinutes: number;
  readonly ClientToken: string;
  readonly DryRun: boolean;
  readonly InstanceCount: number;
  readonly LaunchGroup: string;
  readonly LaunchSpecification: RequestSpotLaunchSpecification;
  readonly SpotPrice: string;
  readonly Type: string;
  readonly ValidFrom: Date;
  readonly ValidUntil: Date;
  readonly TagSpecifications: [];
  readonly InstanceInterruptionBehavior: string;
}
export interface ResetAddressAttribute {
  readonly AllocationId: string;
  readonly Attribute: string;
  readonly DryRun: boolean;
}
export interface ResetEbsDefaultKmsKeyId {
  readonly DryRun: boolean;
}
export interface ResetFpgaImageAttribute {
  readonly DryRun: boolean;
  readonly FpgaImageId: string;
  readonly Attribute: string;
}
export interface ResetImageAttribute {
  readonly Attribute: string;
  readonly ImageId: string;
  readonly DryRun: boolean;
}
export interface ResetInstanceAttribute {
  readonly Attribute: string;
  readonly DryRun: boolean;
  readonly InstanceId: string;
}
export interface ResetNetworkInterfaceAttribute {
  readonly DryRun: boolean;
  readonly NetworkInterfaceId: string;
  readonly SourceDestCheck: string;
}
export interface ResetSnapshotAttribute {
  readonly Attribute: string;
  readonly SnapshotId: string;
  readonly DryRun: boolean;
}
export interface RestoreAddressToClassic {
  readonly DryRun: boolean;
  readonly PublicIp: string;
}
export interface RestoreManagedPrefixListVersion {
  readonly DryRun: boolean;
  readonly PrefixListId: string;
  readonly PreviousVersion: number;
  readonly CurrentVersion: number;
}
export interface RestoreSnapshotFromRecycleBin {
  readonly SnapshotId: string;
  readonly DryRun: boolean;
}
export interface RestoreSnapshotTier {
  readonly SnapshotId: string;
  readonly TemporaryRestoreDays: number;
  readonly PermanentRestore: boolean;
  readonly DryRun: boolean;
}
export interface RevokeClientVpnIngress {
  readonly ClientVpnEndpointId: string;
  readonly TargetNetworkCidr: string;
  readonly AccessGroupId: string;
  readonly RevokeAllGroups: boolean;
  readonly DryRun: boolean;
}
export interface RevokeSecurityGroupEgress {
  readonly DryRun: boolean;
  readonly GroupId: string;
  readonly IpPermissions: [];
  readonly SecurityGroupRuleIds: [];
  readonly CidrIp: string;
  readonly FromPort: number;
  readonly IpProtocol: string;
  readonly ToPort: number;
  readonly SourceSecurityGroupName: string;
  readonly SourceSecurityGroupOwnerId: string;
}
export interface RevokeSecurityGroupIngress {
  readonly CidrIp: string;
  readonly FromPort: number;
  readonly GroupId: string;
  readonly GroupName: string;
  readonly IpPermissions: [];
  readonly IpProtocol: string;
  readonly SourceSecurityGroupName: string;
  readonly SourceSecurityGroupOwnerId: string;
  readonly ToPort: number;
  readonly DryRun: boolean;
  readonly SecurityGroupRuleIds: [];
}
export interface RunInstances {
  readonly BlockDeviceMappings: [];
  readonly ImageId: string;
  readonly InstanceType: string;
  readonly Ipv6AddressCount: number;
  readonly Ipv6Addresses: [];
  readonly KernelId: string;
  readonly KeyName: string;
  readonly MaxCount: number;
  readonly MinCount: number;
  readonly Monitoring: RunInstancesMonitoringEnabled;
  readonly Placement: Placement;
  readonly RamdiskId: string;
  readonly SecurityGroupIds: [];
  readonly SecurityGroups: [];
  readonly SubnetId: string;
  readonly UserData: string;
  readonly AdditionalInfo: string;
  readonly ClientToken: string;
  readonly DisableApiTermination: boolean;
  readonly DryRun: boolean;
  readonly EbsOptimized: boolean;
  readonly IamInstanceProfile: IamInstanceProfileSpecification;
  readonly InstanceInitiatedShutdownBehavior: string;
  readonly NetworkInterfaces: [];
  readonly PrivateIpAddress: string;
  readonly ElasticGpuSpecification: [];
  readonly ElasticInferenceAccelerators: [];
  readonly TagSpecifications: [];
  readonly LaunchTemplate: LaunchTemplateSpecification;
  readonly InstanceMarketOptions: InstanceMarketOptionsRequest;
  readonly CreditSpecification: CreditSpecificationRequest;
  readonly CpuOptions: CpuOptionsRequest;
  readonly CapacityReservationSpecification: CapacityReservationSpecification;
  readonly HibernationOptions: HibernationOptionsRequest;
  readonly LicenseSpecifications: [];
  readonly MetadataOptions: InstanceMetadataOptionsRequest;
  readonly EnclaveOptions: EnclaveOptionsRequest;
  readonly PrivateDnsNameOptions: PrivateDnsNameOptionsRequest;
}
export interface RunScheduledInstances {
  readonly ClientToken: string;
  readonly DryRun: boolean;
  readonly InstanceCount: number;
  readonly LaunchSpecification: ScheduledInstancesLaunchSpecification;
  readonly ScheduledInstanceId: string;
}
export interface SearchLocalGatewayRoutes {
  readonly LocalGatewayRouteTableId: string;
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly DryRun: boolean;
}
export interface SearchTransitGatewayMulticastGroups {
  readonly TransitGatewayMulticastDomainId: string;
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly DryRun: boolean;
}
export interface SearchTransitGatewayRoutes {
  readonly TransitGatewayRouteTableId: string;
  readonly Filters: [];
  readonly MaxResults: number;
  readonly DryRun: boolean;
}
export interface SendDiagnosticInterrupt {
  readonly InstanceId: string;
  readonly DryRun: boolean;
}
export interface StartInstances {
  readonly InstanceIds: [];
  readonly AdditionalInfo: string;
  readonly DryRun: boolean;
}
export interface StartNetworkInsightsAccessScopeAnalysis {
  readonly NetworkInsightsAccessScopeId: string;
  readonly DryRun: boolean;
  readonly TagSpecifications: [];
  readonly ClientToken: string;
}
export interface StartNetworkInsightsAnalysis {
  readonly NetworkInsightsPathId: string;
  readonly FilterInArns: [];
  readonly DryRun: boolean;
  readonly TagSpecifications: [];
  readonly ClientToken: string;
}
export interface StartVpcEndpointServicePrivateDnsVerification {
  readonly DryRun: boolean;
  readonly ServiceId: string;
}
export interface StopInstances {
  readonly InstanceIds: [];
  readonly Hibernate: boolean;
  readonly DryRun: boolean;
  readonly Force: boolean;
}
export interface TerminateClientVpnConnections {
  readonly ClientVpnEndpointId: string;
  readonly ConnectionId: string;
  readonly Username: string;
  readonly DryRun: boolean;
}
export interface TerminateInstances {
  readonly InstanceIds: [];
  readonly DryRun: boolean;
}
export interface UnassignIpv6Addresses {
  readonly Ipv6Addresses: [];
  readonly Ipv6Prefixes: [];
  readonly NetworkInterfaceId: string;
}
export interface UnassignPrivateIpAddresses {
  readonly NetworkInterfaceId: string;
  readonly PrivateIpAddresses: [];
  readonly Ipv4Prefixes: [];
}
export interface UnmonitorInstances {
  readonly InstanceIds: [];
  readonly DryRun: boolean;
}
export interface UpdateSecurityGroupRuleDescriptionsEgress {
  readonly DryRun: boolean;
  readonly GroupId: string;
  readonly GroupName: string;
  readonly IpPermissions: [];
  readonly SecurityGroupRuleDescriptions: [];
}
export interface UpdateSecurityGroupRuleDescriptionsIngress {
  readonly DryRun: boolean;
  readonly GroupId: string;
  readonly GroupName: string;
  readonly IpPermissions: [];
  readonly SecurityGroupRuleDescriptions: [];
}
export interface WithdrawByoipCidr {
  readonly Cidr: string;
  readonly DryRun: boolean;
}



interface AcceleratorCount {
  readonly Min: number;
  readonly Max: number;
}

interface AcceleratorCountRequest {
  readonly Min: number;
  readonly Max: number;
}

interface AcceleratorTotalMemoryMiB {
  readonly Min: number;
  readonly Max: number;
}

interface AcceleratorTotalMemoryMiBRequest {
  readonly Min: number;
  readonly Max: number;
}

interface AcceptReservedInstancesExchangeQuoteRequest {
  readonly DryRun: boolean;
  readonly ReservedInstanceIds: [];
  readonly TargetConfigurations: [];
}

interface AcceptReservedInstancesExchangeQuoteResult {
  readonly ExchangeId: string;
}

interface AcceptTransitGatewayMulticastDomainAssociationsRequest {
  readonly TransitGatewayMulticastDomainId: string;
  readonly TransitGatewayAttachmentId: string;
  readonly SubnetIds: [];
  readonly DryRun: boolean;
}

interface AcceptTransitGatewayMulticastDomainAssociationsResult {
  readonly Associations: TransitGatewayMulticastDomainAssociations;
}

interface AcceptTransitGatewayPeeringAttachmentRequest {
  readonly TransitGatewayAttachmentId: string;
  readonly DryRun: boolean;
}

interface AcceptTransitGatewayPeeringAttachmentResult {
  readonly TransitGatewayPeeringAttachment: TransitGatewayPeeringAttachment;
}

interface AcceptTransitGatewayVpcAttachmentRequest {
  readonly TransitGatewayAttachmentId: string;
  readonly DryRun: boolean;
}

interface AcceptTransitGatewayVpcAttachmentResult {
  readonly TransitGatewayVpcAttachment: TransitGatewayVpcAttachment;
}

interface AcceptVpcEndpointConnectionsRequest {
  readonly DryRun: boolean;
  readonly ServiceId: string;
  readonly VpcEndpointIds: [];
}

interface AcceptVpcEndpointConnectionsResult {
  readonly Unsuccessful: [];
}

interface AcceptVpcPeeringConnectionRequest {
  readonly DryRun: boolean;
  readonly VpcPeeringConnectionId: string;
}

interface AcceptVpcPeeringConnectionResult {
  readonly VpcPeeringConnection: VpcPeeringConnection;
}

interface AccessScopeAnalysisFinding {
  readonly NetworkInsightsAccessScopeAnalysisId: string;
  readonly NetworkInsightsAccessScopeId: string;
  readonly FindingId: string;
  readonly FindingComponents: [];
}

interface AccessScopePath {
  readonly Source: PathStatement;
  readonly Destination: PathStatement;
  readonly ThroughResources: [];
}

interface AccessScopePathRequest {
  readonly Source: PathStatementRequest;
  readonly Destination: PathStatementRequest;
  readonly ThroughResources: [];
}

interface AccountAttribute {
  readonly AttributeName: string;
  readonly AttributeValues: [];
}

interface AccountAttributeValue {
  readonly AttributeValue: string;
}

interface ActiveInstance {
  readonly InstanceId: string;
  readonly InstanceType: string;
  readonly SpotInstanceRequestId: string;
  readonly InstanceHealth: string;
}

interface AddIpamOperatingRegion {
  readonly RegionName: string;
}

interface AddPrefixListEntry {
  readonly Cidr: string;
  readonly Description: string;
}

interface Address {
  readonly InstanceId: string;
  readonly PublicIp: string;
  readonly AllocationId: string;
  readonly AssociationId: string;
  readonly Domain: string;
  readonly NetworkInterfaceId: string;
  readonly NetworkInterfaceOwnerId: string;
  readonly PrivateIpAddress: string;
  readonly Tags: [];
  readonly PublicIpv4Pool: string;
  readonly NetworkBorderGroup: string;
  readonly CustomerOwnedIp: string;
  readonly CustomerOwnedIpv4Pool: string;
  readonly CarrierIp: string;
}

interface AddressAttribute {
  readonly PublicIp: string;
  readonly AllocationId: string;
  readonly PtrRecord: string;
  readonly PtrRecordUpdate: PtrUpdateStatus;
}

interface AdvertiseByoipCidrRequest {
  readonly Cidr: string;
  readonly DryRun: boolean;
}

interface AdvertiseByoipCidrResult {
  readonly ByoipCidr: ByoipCidr;
}

interface AllocateAddressRequest {
  readonly Domain: string;
  readonly Address: string;
  readonly PublicIpv4Pool: string;
  readonly NetworkBorderGroup: string;
  readonly CustomerOwnedIpv4Pool: string;
  readonly DryRun: boolean;
  readonly TagSpecifications: [];
}

interface AllocateAddressResult {
  readonly PublicIp: string;
  readonly AllocationId: string;
  readonly PublicIpv4Pool: string;
  readonly NetworkBorderGroup: string;
  readonly Domain: string;
  readonly CustomerOwnedIp: string;
  readonly CustomerOwnedIpv4Pool: string;
  readonly CarrierIp: string;
}

interface AllocateHostsRequest {
  readonly AutoPlacement: string;
  readonly AvailabilityZone: string;
  readonly ClientToken: string;
  readonly InstanceType: string;
  readonly InstanceFamily: string;
  readonly Quantity: number;
  readonly TagSpecifications: [];
  readonly HostRecovery: string;
}

interface AllocateHostsResult {
  readonly HostIds: [];
}

interface AllocateIpamPoolCidrRequest {
  readonly DryRun: boolean;
  readonly IpamPoolId: string;
  readonly Cidr: string;
  readonly NetmaskLength: number;
  readonly ClientToken: string;
  readonly Description: string;
  readonly PreviewNextCidr: boolean;
  readonly DisallowedCidrs: [];
}

interface AllocateIpamPoolCidrResult {
  readonly IpamPoolAllocation: IpamPoolAllocation;
}

interface AllowedPrincipal {
  readonly PrincipalType: string;
  readonly Principal: string;
}

interface AlternatePathHint {
  readonly ComponentId: string;
  readonly ComponentArn: string;
}

interface AnalysisAclRule {
  readonly Cidr: string;
  readonly Egress: boolean;
  readonly PortRange: PortRange;
  readonly Protocol: string;
  readonly RuleAction: string;
  readonly RuleNumber: number;
}

interface AnalysisComponent {
  readonly Id: string;
  readonly Arn: string;
  readonly Name: string;
}

interface AnalysisLoadBalancerListener {
  readonly LoadBalancerPort: number;
  readonly InstancePort: number;
}

interface AnalysisLoadBalancerTarget {
  readonly Address: string;
  readonly AvailabilityZone: string;
  readonly Instance: AnalysisComponent;
  readonly Port: number;
}

interface AnalysisPacketHeader {
  readonly DestinationAddresses: [];
  readonly DestinationPortRanges: [];
  readonly Protocol: string;
  readonly SourceAddresses: [];
  readonly SourcePortRanges: [];
}

interface AnalysisRouteTableRoute {
  readonly DestinationCidr: string;
  readonly DestinationPrefixListId: string;
  readonly EgressOnlyInternetGatewayId: string;
  readonly GatewayId: string;
  readonly InstanceId: string;
  readonly NatGatewayId: string;
  readonly NetworkInterfaceId: string;
  readonly Origin: string;
  readonly TransitGatewayId: string;
  readonly VpcPeeringConnectionId: string;
}

interface AnalysisSecurityGroupRule {
  readonly Cidr: string;
  readonly Direction: string;
  readonly SecurityGroupId: string;
  readonly PortRange: PortRange;
  readonly PrefixListId: string;
  readonly Protocol: string;
}

interface ApplySecurityGroupsToClientVpnTargetNetworkRequest {
  readonly ClientVpnEndpointId: string;
  readonly VpcId: string;
  readonly SecurityGroupIds: [];
  readonly DryRun: boolean;
}

interface ApplySecurityGroupsToClientVpnTargetNetworkResult {
  readonly SecurityGroupIds: [];
}

interface AssignIpv6AddressesRequest {
  readonly Ipv6AddressCount: number;
  readonly Ipv6Addresses: [];
  readonly Ipv6PrefixCount: number;
  readonly Ipv6Prefixes: [];
  readonly NetworkInterfaceId: string;
}

interface AssignIpv6AddressesResult {
  readonly AssignedIpv6Addresses: [];
  readonly AssignedIpv6Prefixes: [];
  readonly NetworkInterfaceId: string;
}

interface AssignPrivateIpAddressesRequest {
  readonly AllowReassignment: boolean;
  readonly NetworkInterfaceId: string;
  readonly PrivateIpAddresses: [];
  readonly SecondaryPrivateIpAddressCount: number;
  readonly Ipv4Prefixes: [];
  readonly Ipv4PrefixCount: number;
}

interface AssignPrivateIpAddressesResult {
  readonly NetworkInterfaceId: string;
  readonly AssignedPrivateIpAddresses: [];
  readonly AssignedIpv4Prefixes: [];
}

interface AssignedPrivateIpAddress {
  readonly PrivateIpAddress: string;
}

interface AssociateAddressRequest {
  readonly AllocationId: string;
  readonly InstanceId: string;
  readonly PublicIp: string;
  readonly AllowReassociation: boolean;
  readonly DryRun: boolean;
  readonly NetworkInterfaceId: string;
  readonly PrivateIpAddress: string;
}

interface AssociateAddressResult {
  readonly AssociationId: string;
}

interface AssociateClientVpnTargetNetworkRequest {
  readonly ClientVpnEndpointId: string;
  readonly SubnetId: string;
  readonly ClientToken: string;
  readonly DryRun: boolean;
}

interface AssociateClientVpnTargetNetworkResult {
  readonly AssociationId: string;
  readonly Status: AssociationStatus;
}

interface AssociateDhcpOptionsRequest {
  readonly DhcpOptionsId: string;
  readonly VpcId: string;
  readonly DryRun: boolean;
}

interface AssociateEnclaveCertificateIamRoleRequest {
  readonly CertificateArn: string;
  readonly RoleArn: string;
  readonly DryRun: boolean;
}

interface AssociateEnclaveCertificateIamRoleResult {
  readonly CertificateS3BucketName: string;
  readonly CertificateS3ObjectKey: string;
  readonly EncryptionKmsKeyId: string;
}

interface AssociateIamInstanceProfileRequest {
  readonly IamInstanceProfile: IamInstanceProfileSpecification;
  readonly InstanceId: string;
}

interface AssociateIamInstanceProfileResult {
  readonly IamInstanceProfileAssociation: IamInstanceProfileAssociation;
}

interface AssociateInstanceEventWindowRequest {
  readonly DryRun: boolean;
  readonly InstanceEventWindowId: string;
  readonly AssociationTarget: InstanceEventWindowAssociationRequest;
}

interface AssociateInstanceEventWindowResult {
  readonly InstanceEventWindow: InstanceEventWindow;
}

interface AssociateRouteTableRequest {
  readonly DryRun: boolean;
  readonly RouteTableId: string;
  readonly SubnetId: string;
  readonly GatewayId: string;
}

interface AssociateRouteTableResult {
  readonly AssociationId: string;
  readonly AssociationState: RouteTableAssociationState;
}

interface AssociateSubnetCidrBlockRequest {
  readonly Ipv6CidrBlock: string;
  readonly SubnetId: string;
}

interface AssociateSubnetCidrBlockResult {
  readonly Ipv6CidrBlockAssociation: SubnetIpv6CidrBlockAssociation;
  readonly SubnetId: string;
}

interface AssociateTransitGatewayMulticastDomainRequest {
  readonly TransitGatewayMulticastDomainId: string;
  readonly TransitGatewayAttachmentId: string;
  readonly SubnetIds: [];
  readonly DryRun: boolean;
}

interface AssociateTransitGatewayMulticastDomainResult {
  readonly Associations: TransitGatewayMulticastDomainAssociations;
}

interface AssociateTransitGatewayRouteTableRequest {
  readonly TransitGatewayRouteTableId: string;
  readonly TransitGatewayAttachmentId: string;
  readonly DryRun: boolean;
}

interface AssociateTransitGatewayRouteTableResult {
  readonly Association: TransitGatewayAssociation;
}

interface AssociateTrunkInterfaceRequest {
  readonly BranchInterfaceId: string;
  readonly TrunkInterfaceId: string;
  readonly VlanId: number;
  readonly GreKey: number;
  readonly ClientToken: string;
  readonly DryRun: boolean;
}

interface AssociateTrunkInterfaceResult {
  readonly InterfaceAssociation: TrunkInterfaceAssociation;
  readonly ClientToken: string;
}

interface AssociateVpcCidrBlockRequest {
  readonly AmazonProvidedIpv6CidrBlock: boolean;
  readonly CidrBlock: string;
  readonly VpcId: string;
  readonly Ipv6CidrBlockNetworkBorderGroup: string;
  readonly Ipv6Pool: string;
  readonly Ipv6CidrBlock: string;
  readonly Ipv4IpamPoolId: string;
  readonly Ipv4NetmaskLength: number;
  readonly Ipv6IpamPoolId: string;
  readonly Ipv6NetmaskLength: number;
}

interface AssociateVpcCidrBlockResult {
  readonly Ipv6CidrBlockAssociation: VpcIpv6CidrBlockAssociation;
  readonly CidrBlockAssociation: VpcCidrBlockAssociation;
  readonly VpcId: string;
}

interface AssociatedRole {
  readonly AssociatedRoleArn: string;
  readonly CertificateS3BucketName: string;
  readonly CertificateS3ObjectKey: string;
  readonly EncryptionKmsKeyId: string;
}

interface AssociatedTargetNetwork {
  readonly NetworkId: string;
  readonly NetworkType: string;
}

interface AssociationStatus {
  readonly Code: string;
  readonly Message: string;
}

interface AthenaIntegration {
  readonly IntegrationResultS3DestinationArn: string;
  readonly PartitionLoadFrequency: string;
  readonly PartitionStartDate: Date;
  readonly PartitionEndDate: Date;
}

interface AttachClassicLinkVpcRequest {
  readonly DryRun: boolean;
  readonly Groups: [];
  readonly InstanceId: string;
  readonly VpcId: string;
}

interface AttachClassicLinkVpcResult {
  readonly Return: boolean;
}

interface AttachInternetGatewayRequest {
  readonly DryRun: boolean;
  readonly InternetGatewayId: string;
  readonly VpcId: string;
}

interface AttachNetworkInterfaceRequest {
  readonly DeviceIndex: number;
  readonly DryRun: boolean;
  readonly InstanceId: string;
  readonly NetworkInterfaceId: string;
  readonly NetworkCardIndex: number;
}

interface AttachNetworkInterfaceResult {
  readonly AttachmentId: string;
  readonly NetworkCardIndex: number;
}

interface AttachVolumeRequest {
  readonly Device: string;
  readonly InstanceId: string;
  readonly VolumeId: string;
  readonly DryRun: boolean;
}

interface AttachVpnGatewayRequest {
  readonly VpcId: string;
  readonly VpnGatewayId: string;
  readonly DryRun: boolean;
}

interface AttachVpnGatewayResult {
  readonly VpcAttachment: VpcAttachment;
}

interface AttributeBooleanValue {
  readonly Value: boolean;
}

interface AttributeValue {
  readonly Value: string;
}

interface AuthorizationRule {
  readonly ClientVpnEndpointId: string;
  readonly Description: string;
  readonly GroupId: string;
  readonly AccessAll: boolean;
  readonly DestinationCidr: string;
  readonly Status: ClientVpnAuthorizationRuleStatus;
}

interface AuthorizeClientVpnIngressRequest {
  readonly ClientVpnEndpointId: string;
  readonly TargetNetworkCidr: string;
  readonly AccessGroupId: string;
  readonly AuthorizeAllGroups: boolean;
  readonly Description: string;
  readonly ClientToken: string;
  readonly DryRun: boolean;
}

interface AuthorizeClientVpnIngressResult {
  readonly Status: ClientVpnAuthorizationRuleStatus;
}

interface AuthorizeSecurityGroupEgressRequest {
  readonly DryRun: boolean;
  readonly GroupId: string;
  readonly IpPermissions: [];
  readonly TagSpecifications: [];
  readonly CidrIp: string;
  readonly FromPort: number;
  readonly IpProtocol: string;
  readonly ToPort: number;
  readonly SourceSecurityGroupName: string;
  readonly SourceSecurityGroupOwnerId: string;
}

interface AuthorizeSecurityGroupEgressResult {
  readonly Return: boolean;
  readonly SecurityGroupRules: [];
}

interface AuthorizeSecurityGroupIngressRequest {
  readonly CidrIp: string;
  readonly FromPort: number;
  readonly GroupId: string;
  readonly GroupName: string;
  readonly IpPermissions: [];
  readonly IpProtocol: string;
  readonly SourceSecurityGroupName: string;
  readonly SourceSecurityGroupOwnerId: string;
  readonly ToPort: number;
  readonly DryRun: boolean;
  readonly TagSpecifications: [];
}

interface AuthorizeSecurityGroupIngressResult {
  readonly Return: boolean;
  readonly SecurityGroupRules: [];
}

interface AvailabilityZone {
  readonly State: string;
  readonly OptInStatus: string;
  readonly Messages: [];
  readonly RegionName: string;
  readonly ZoneName: string;
  readonly ZoneId: string;
  readonly GroupName: string;
  readonly NetworkBorderGroup: string;
  readonly ZoneType: string;
  readonly ParentZoneName: string;
  readonly ParentZoneId: string;
}

interface AvailabilityZoneMessage {
  readonly Message: string;
}

interface AvailableCapacity {
  readonly AvailableInstanceCapacity: [];
  readonly AvailableVCpus: number;
}

interface BaselineEbsBandwidthMbps {
  readonly Min: number;
  readonly Max: number;
}

interface BaselineEbsBandwidthMbpsRequest {
  readonly Min: number;
  readonly Max: number;
}

interface BlobAttributeValue {
  readonly Value: unknown;
}

interface BlockDeviceMapping {
  readonly DeviceName: string;
  readonly VirtualName: string;
  readonly Ebs: EbsBlockDevice;
  readonly NoDevice: string;
}

interface BundleInstanceRequest {
  readonly InstanceId: string;
  readonly Storage: Storage;
  readonly DryRun: boolean;
}

interface BundleInstanceResult {
  readonly BundleTask: BundleTask;
}

interface BundleTask {
  readonly BundleId: string;
  readonly BundleTaskError: BundleTaskError;
  readonly InstanceId: string;
  readonly Progress: string;
  readonly StartTime: Date;
  readonly State: string;
  readonly Storage: Storage;
  readonly UpdateTime: Date;
}

interface BundleTaskError {
  readonly Code: string;
  readonly Message: string;
}

interface ByoipCidr {
  readonly Cidr: string;
  readonly Description: string;
  readonly StatusMessage: string;
  readonly State: string;
}

interface CancelBundleTaskRequest {
  readonly BundleId: string;
  readonly DryRun: boolean;
}

interface CancelBundleTaskResult {
  readonly BundleTask: BundleTask;
}

interface CancelCapacityReservationFleetError {
  readonly Code: string;
  readonly Message: string;
}

interface CancelCapacityReservationFleetsRequest {
  readonly DryRun: boolean;
  readonly CapacityReservationFleetIds: [];
}

interface CancelCapacityReservationFleetsResult {
  readonly SuccessfulFleetCancellations: [];
  readonly FailedFleetCancellations: [];
}

interface CancelCapacityReservationRequest {
  readonly CapacityReservationId: string;
  readonly DryRun: boolean;
}

interface CancelCapacityReservationResult {
  readonly Return: boolean;
}

interface CancelConversionRequest {
  readonly ConversionTaskId: string;
  readonly DryRun: boolean;
  readonly ReasonMessage: string;
}

interface CancelExportTaskRequest {
  readonly ExportTaskId: string;
}

interface CancelImportTaskRequest {
  readonly CancelReason: string;
  readonly DryRun: boolean;
  readonly ImportTaskId: string;
}

interface CancelImportTaskResult {
  readonly ImportTaskId: string;
  readonly PreviousState: string;
  readonly State: string;
}

interface CancelReservedInstancesListingRequest {
  readonly ReservedInstancesListingId: string;
}

interface CancelReservedInstancesListingResult {
  readonly ReservedInstancesListings: [];
}

interface CancelSpotFleetRequestsError {
  readonly Code: string;
  readonly Message: string;
}

interface CancelSpotFleetRequestsErrorItem {
  readonly Error: CancelSpotFleetRequestsError;
  readonly SpotFleetRequestId: string;
}

interface CancelSpotFleetRequestsRequest {
  readonly DryRun: boolean;
  readonly SpotFleetRequestIds: [];
  readonly TerminateInstances: boolean;
}

interface CancelSpotFleetRequestsResponse {
  readonly SuccessfulFleetRequests: [];
  readonly UnsuccessfulFleetRequests: [];
}

interface CancelSpotFleetRequestsSuccessItem {
  readonly CurrentSpotFleetRequestState: string;
  readonly PreviousSpotFleetRequestState: string;
  readonly SpotFleetRequestId: string;
}

interface CancelSpotInstanceRequestsRequest {
  readonly DryRun: boolean;
  readonly SpotInstanceRequestIds: [];
}

interface CancelSpotInstanceRequestsResult {
  readonly CancelledSpotInstanceRequests: [];
}

interface CancelledSpotInstanceRequest {
  readonly SpotInstanceRequestId: string;
  readonly State: string;
}

interface CapacityReservation {
  readonly CapacityReservationId: string;
  readonly OwnerId: string;
  readonly CapacityReservationArn: string;
  readonly AvailabilityZoneId: string;
  readonly InstanceType: string;
  readonly InstancePlatform: string;
  readonly AvailabilityZone: string;
  readonly Tenancy: string;
  readonly TotalInstanceCount: number;
  readonly AvailableInstanceCount: number;
  readonly EbsOptimized: boolean;
  readonly EphemeralStorage: boolean;
  readonly State: string;
  readonly StartDate: Date;
  readonly EndDate: Date;
  readonly EndDateType: string;
  readonly InstanceMatchCriteria: string;
  readonly CreateDate: Date;
  readonly Tags: [];
  readonly OutpostArn: string;
  readonly CapacityReservationFleetId: string;
}

interface CapacityReservationFleet {
  readonly CapacityReservationFleetId: string;
  readonly CapacityReservationFleetArn: string;
  readonly State: string;
  readonly TotalTargetCapacity: number;
  readonly TotalFulfilledCapacity: unknown;
  readonly Tenancy: string;
  readonly EndDate: Date;
  readonly CreateTime: Date;
  readonly InstanceMatchCriteria: string;
  readonly AllocationStrategy: string;
  readonly InstanceTypeSpecifications: [];
  readonly Tags: [];
}

interface CapacityReservationFleetCancellationState {
  readonly CurrentFleetState: string;
  readonly PreviousFleetState: string;
  readonly CapacityReservationFleetId: string;
}

interface CapacityReservationGroup {
  readonly GroupArn: string;
  readonly OwnerId: string;
}

interface CapacityReservationOptions {
  readonly UsageStrategy: string;
}

interface CapacityReservationOptionsRequest {
  readonly UsageStrategy: string;
}

interface CapacityReservationSpecification {
  readonly CapacityReservationPreference: string;
  readonly CapacityReservationTarget: CapacityReservationTarget;
}

interface CapacityReservationSpecificationResponse {
  readonly CapacityReservationPreference: string;
  readonly CapacityReservationTarget: CapacityReservationTargetResponse;
}

interface CapacityReservationTarget {
  readonly CapacityReservationId: string;
  readonly CapacityReservationResourceGroupArn: string;
}

interface CapacityReservationTargetResponse {
  readonly CapacityReservationId: string;
  readonly CapacityReservationResourceGroupArn: string;
}

interface CarrierGateway {
  readonly CarrierGatewayId: string;
  readonly VpcId: string;
  readonly State: string;
  readonly OwnerId: string;
  readonly Tags: [];
}

interface CertificateAuthentication {
  readonly ClientRootCertificateChain: string;
}

interface CertificateAuthenticationRequest {
  readonly ClientRootCertificateChainArn: string;
}

interface CidrAuthorizationContext {
  readonly Message: string;
  readonly Signature: string;
}

interface CidrBlock {
  readonly CidrBlock: string;
}

interface ClassicLinkDnsSupport {
  readonly ClassicLinkDnsSupported: boolean;
  readonly VpcId: string;
}

interface ClassicLinkInstance {
  readonly Groups: [];
  readonly InstanceId: string;
  readonly Tags: [];
  readonly VpcId: string;
}

interface ClassicLoadBalancer {
  readonly Name: string;
}

interface ClassicLoadBalancersConfig {
  readonly ClassicLoadBalancers: [];
}

interface ClientCertificateRevocationListStatus {
  readonly Code: string;
  readonly Message: string;
}

interface ClientConnectOptions {
  readonly Enabled: boolean;
  readonly LambdaFunctionArn: string;
}

interface ClientConnectResponseOptions {
  readonly Enabled: boolean;
  readonly LambdaFunctionArn: string;
  readonly Status: ClientVpnEndpointAttributeStatus;
}

interface ClientData {
  readonly Comment: string;
  readonly UploadEnd: Date;
  readonly UploadSize: unknown;
  readonly UploadStart: Date;
}

interface ClientVpnAuthentication {
  readonly Type: string;
  readonly ActiveDirectory: DirectoryServiceAuthentication;
  readonly MutualAuthentication: CertificateAuthentication;
  readonly FederatedAuthentication: FederatedAuthentication;
}

interface ClientVpnAuthenticationRequest {
  readonly Type: string;
  readonly ActiveDirectory: DirectoryServiceAuthenticationRequest;
  readonly MutualAuthentication: CertificateAuthenticationRequest;
  readonly FederatedAuthentication: FederatedAuthenticationRequest;
}

interface ClientVpnAuthorizationRuleStatus {
  readonly Code: string;
  readonly Message: string;
}

interface ClientVpnConnection {
  readonly ClientVpnEndpointId: string;
  readonly Timestamp: string;
  readonly ConnectionId: string;
  readonly Username: string;
  readonly ConnectionEstablishedTime: string;
  readonly IngressBytes: string;
  readonly EgressBytes: string;
  readonly IngressPackets: string;
  readonly EgressPackets: string;
  readonly ClientIp: string;
  readonly CommonName: string;
  readonly Status: ClientVpnConnectionStatus;
  readonly ConnectionEndTime: string;
  readonly PostureComplianceStatuses: [];
}

interface ClientVpnConnectionStatus {
  readonly Code: string;
  readonly Message: string;
}

interface ClientVpnEndpoint {
  readonly ClientVpnEndpointId: string;
  readonly Description: string;
  readonly Status: ClientVpnEndpointStatus;
  readonly CreationTime: string;
  readonly DeletionTime: string;
  readonly DnsName: string;
  readonly ClientCidrBlock: string;
  readonly DnsServers: [];
  readonly SplitTunnel: boolean;
  readonly VpnProtocol: string;
  readonly TransportProtocol: string;
  readonly VpnPort: number;
  readonly AssociatedTargetNetworks: [];
  readonly ServerCertificateArn: string;
  readonly AuthenticationOptions: [];
  readonly ConnectionLogOptions: ConnectionLogResponseOptions;
  readonly Tags: [];
  readonly SecurityGroupIds: [];
  readonly VpcId: string;
  readonly SelfServicePortalUrl: string;
  readonly ClientConnectOptions: ClientConnectResponseOptions;
}

interface ClientVpnEndpointAttributeStatus {
  readonly Code: string;
  readonly Message: string;
}

interface ClientVpnEndpointStatus {
  readonly Code: string;
  readonly Message: string;
}

interface ClientVpnRoute {
  readonly ClientVpnEndpointId: string;
  readonly DestinationCidr: string;
  readonly TargetSubnet: string;
  readonly Type: string;
  readonly Origin: string;
  readonly Status: ClientVpnRouteStatus;
  readonly Description: string;
}

interface ClientVpnRouteStatus {
  readonly Code: string;
  readonly Message: string;
}

interface CoipAddressUsage {
  readonly AllocationId: string;
  readonly AwsAccountId: string;
  readonly AwsService: string;
  readonly CoIp: string;
}

interface CoipPool {
  readonly PoolId: string;
  readonly PoolCidrs: [];
  readonly LocalGatewayRouteTableId: string;
  readonly Tags: [];
  readonly PoolArn: string;
}

interface ConfirmProductInstanceRequest {
  readonly InstanceId: string;
  readonly ProductCode: string;
  readonly DryRun: boolean;
}

interface ConfirmProductInstanceResult {
  readonly OwnerId: string;
  readonly Return: boolean;
}

interface ConnectionLogOptions {
  readonly Enabled: boolean;
  readonly CloudwatchLogGroup: string;
  readonly CloudwatchLogStream: string;
}

interface ConnectionLogResponseOptions {
  readonly Enabled: boolean;
  readonly CloudwatchLogGroup: string;
  readonly CloudwatchLogStream: string;
}

interface ConnectionNotification {
  readonly ConnectionNotificationId: string;
  readonly ServiceId: string;
  readonly VpcEndpointId: string;
  readonly ConnectionNotificationType: string;
  readonly ConnectionNotificationArn: string;
  readonly ConnectionEvents: [];
  readonly ConnectionNotificationState: string;
}

interface ConversionTask {
  readonly ConversionTaskId: string;
  readonly ExpirationTime: string;
  readonly ImportInstance: ImportInstanceTaskDetails;
  readonly ImportVolume: ImportVolumeTaskDetails;
  readonly State: string;
  readonly StatusMessage: string;
  readonly Tags: [];
}

interface CopyFpgaImageRequest {
  readonly DryRun: boolean;
  readonly SourceFpgaImageId: string;
  readonly Description: string;
  readonly Name: string;
  readonly SourceRegion: string;
  readonly ClientToken: string;
}

interface CopyFpgaImageResult {
  readonly FpgaImageId: string;
}

interface CopyImageRequest {
  readonly ClientToken: string;
  readonly Description: string;
  readonly Encrypted: boolean;
  readonly KmsKeyId: string;
  readonly Name: string;
  readonly SourceImageId: string;
  readonly SourceRegion: string;
  readonly DestinationOutpostArn: string;
  readonly DryRun: boolean;
}

interface CopyImageResult {
  readonly ImageId: string;
}

interface CopySnapshotRequest {
  readonly Description: string;
  readonly DestinationOutpostArn: string;
  readonly DestinationRegion: string;
  readonly Encrypted: boolean;
  readonly KmsKeyId: string;
  readonly PresignedUrl: string;
  readonly SourceRegion: string;
  readonly SourceSnapshotId: string;
  readonly TagSpecifications: [];
  readonly DryRun: boolean;
}

interface CopySnapshotResult {
  readonly SnapshotId: string;
  readonly Tags: [];
}

interface CpuOptions {
  readonly CoreCount: number;
  readonly ThreadsPerCore: number;
}

interface CpuOptionsRequest {
  readonly CoreCount: number;
  readonly ThreadsPerCore: number;
}

interface CreateCapacityReservationFleetRequest {
  readonly AllocationStrategy: string;
  readonly ClientToken: string;
  readonly InstanceTypeSpecifications: [];
  readonly Tenancy: string;
  readonly TotalTargetCapacity: number;
  readonly EndDate: Date;
  readonly InstanceMatchCriteria: string;
  readonly TagSpecifications: [];
  readonly DryRun: boolean;
}

interface CreateCapacityReservationFleetResult {
  readonly CapacityReservationFleetId: string;
  readonly State: string;
  readonly TotalTargetCapacity: number;
  readonly TotalFulfilledCapacity: unknown;
  readonly InstanceMatchCriteria: string;
  readonly AllocationStrategy: string;
  readonly CreateTime: Date;
  readonly EndDate: Date;
  readonly Tenancy: string;
  readonly FleetCapacityReservations: [];
  readonly Tags: [];
}

interface CreateCapacityReservationRequest {
  readonly ClientToken: string;
  readonly InstanceType: string;
  readonly InstancePlatform: string;
  readonly AvailabilityZone: string;
  readonly AvailabilityZoneId: string;
  readonly Tenancy: string;
  readonly InstanceCount: number;
  readonly EbsOptimized: boolean;
  readonly EphemeralStorage: boolean;
  readonly EndDate: Date;
  readonly EndDateType: string;
  readonly InstanceMatchCriteria: string;
  readonly TagSpecifications: [];
  readonly DryRun: boolean;
  readonly OutpostArn: string;
}

interface CreateCapacityReservationResult {
  readonly CapacityReservation: CapacityReservation;
}

interface CreateCarrierGatewayRequest {
  readonly VpcId: string;
  readonly TagSpecifications: [];
  readonly DryRun: boolean;
  readonly ClientToken: string;
}

interface CreateCarrierGatewayResult {
  readonly CarrierGateway: CarrierGateway;
}

interface CreateClientVpnEndpointRequest {
  readonly ClientCidrBlock: string;
  readonly ServerCertificateArn: string;
  readonly AuthenticationOptions: [];
  readonly ConnectionLogOptions: ConnectionLogOptions;
  readonly DnsServers: [];
  readonly TransportProtocol: string;
  readonly VpnPort: number;
  readonly Description: string;
  readonly SplitTunnel: boolean;
  readonly DryRun: boolean;
  readonly ClientToken: string;
  readonly TagSpecifications: [];
  readonly SecurityGroupIds: [];
  readonly VpcId: string;
  readonly SelfServicePortal: string;
  readonly ClientConnectOptions: ClientConnectOptions;
}

interface CreateClientVpnEndpointResult {
  readonly ClientVpnEndpointId: string;
  readonly Status: ClientVpnEndpointStatus;
  readonly DnsName: string;
}

interface CreateClientVpnRouteRequest {
  readonly ClientVpnEndpointId: string;
  readonly DestinationCidrBlock: string;
  readonly TargetVpcSubnetId: string;
  readonly Description: string;
  readonly ClientToken: string;
  readonly DryRun: boolean;
}

interface CreateClientVpnRouteResult {
  readonly Status: ClientVpnRouteStatus;
}

interface CreateCustomerGatewayRequest {
  readonly BgpAsn: number;
  readonly PublicIp: string;
  readonly CertificateArn: string;
  readonly Type: string;
  readonly TagSpecifications: [];
  readonly DeviceName: string;
  readonly DryRun: boolean;
}

interface CreateCustomerGatewayResult {
  readonly CustomerGateway: CustomerGateway;
}

interface CreateDefaultSubnetRequest {
  readonly AvailabilityZone: string;
  readonly DryRun: boolean;
  readonly Ipv6Native: boolean;
}

interface CreateDefaultSubnetResult {
  readonly Subnet: Subnet;
}

interface CreateDefaultVpcRequest {
  readonly DryRun: boolean;
}

interface CreateDefaultVpcResult {
  readonly Vpc: Vpc;
}

interface CreateDhcpOptionsRequest {
  readonly DhcpConfigurations: [];
  readonly TagSpecifications: [];
  readonly DryRun: boolean;
}

interface CreateDhcpOptionsResult {
  readonly DhcpOptions: DhcpOptions;
}

interface CreateEgressOnlyInternetGatewayRequest {
  readonly ClientToken: string;
  readonly DryRun: boolean;
  readonly VpcId: string;
  readonly TagSpecifications: [];
}

interface CreateEgressOnlyInternetGatewayResult {
  readonly ClientToken: string;
  readonly EgressOnlyInternetGateway: EgressOnlyInternetGateway;
}

interface CreateFleetError {
  readonly LaunchTemplateAndOverrides: LaunchTemplateAndOverridesResponse;
  readonly Lifecycle: string;
  readonly ErrorCode: string;
  readonly ErrorMessage: string;
}

interface CreateFleetInstance {
  readonly LaunchTemplateAndOverrides: LaunchTemplateAndOverridesResponse;
  readonly Lifecycle: string;
  readonly InstanceIds: [];
  readonly InstanceType: string;
  readonly Platform: string;
}

interface CreateFleetRequest {
  readonly DryRun: boolean;
  readonly ClientToken: string;
  readonly SpotOptions: SpotOptionsRequest;
  readonly OnDemandOptions: OnDemandOptionsRequest;
  readonly ExcessCapacityTerminationPolicy: string;
  readonly LaunchTemplateConfigs: [];
  readonly TargetCapacitySpecification: TargetCapacitySpecificationRequest;
  readonly TerminateInstancesWithExpiration: boolean;
  readonly Type: string;
  readonly ValidFrom: Date;
  readonly ValidUntil: Date;
  readonly ReplaceUnhealthyInstances: boolean;
  readonly TagSpecifications: [];
  readonly Context: string;
}

interface CreateFleetResult {
  readonly FleetId: string;
  readonly Errors: [];
  readonly Instances: [];
}

interface CreateFlowLogsRequest {
  readonly DryRun: boolean;
  readonly ClientToken: string;
  readonly DeliverLogsPermissionArn: string;
  readonly LogGroupName: string;
  readonly ResourceIds: [];
  readonly ResourceType: string;
  readonly TrafficType: string;
  readonly LogDestinationType: string;
  readonly LogDestination: string;
  readonly LogFormat: string;
  readonly TagSpecifications: [];
  readonly MaxAggregationInterval: number;
  readonly DestinationOptions: DestinationOptionsRequest;
}

interface CreateFlowLogsResult {
  readonly ClientToken: string;
  readonly FlowLogIds: [];
  readonly Unsuccessful: [];
}

interface CreateFpgaImageRequest {
  readonly DryRun: boolean;
  readonly InputStorageLocation: StorageLocation;
  readonly LogsStorageLocation: StorageLocation;
  readonly Description: string;
  readonly Name: string;
  readonly ClientToken: string;
  readonly TagSpecifications: [];
}

interface CreateFpgaImageResult {
  readonly FpgaImageId: string;
  readonly FpgaImageGlobalId: string;
}

interface CreateImageRequest {
  readonly BlockDeviceMappings: [];
  readonly Description: string;
  readonly DryRun: boolean;
  readonly InstanceId: string;
  readonly Name: string;
  readonly NoReboot: boolean;
  readonly TagSpecifications: [];
}

interface CreateImageResult {
  readonly ImageId: string;
}

interface CreateInstanceEventWindowRequest {
  readonly DryRun: boolean;
  readonly Name: string;
  readonly TimeRanges: [];
  readonly CronExpression: string;
  readonly TagSpecifications: [];
}

interface CreateInstanceEventWindowResult {
  readonly InstanceEventWindow: InstanceEventWindow;
}

interface CreateInstanceExportTaskRequest {
  readonly Description: string;
  readonly ExportToS3Task: ExportToS3TaskSpecification;
  readonly InstanceId: string;
  readonly TargetEnvironment: string;
  readonly TagSpecifications: [];
}

interface CreateInstanceExportTaskResult {
  readonly ExportTask: ExportTask;
}

interface CreateInternetGatewayRequest {
  readonly TagSpecifications: [];
  readonly DryRun: boolean;
}

interface CreateInternetGatewayResult {
  readonly InternetGateway: InternetGateway;
}

interface CreateIpamPoolRequest {
  readonly DryRun: boolean;
  readonly IpamScopeId: string;
  readonly Locale: string;
  readonly SourceIpamPoolId: string;
  readonly Description: string;
  readonly AddressFamily: string;
  readonly AutoImport: boolean;
  readonly PubliclyAdvertisable: boolean;
  readonly AllocationMinNetmaskLength: number;
  readonly AllocationMaxNetmaskLength: number;
  readonly AllocationDefaultNetmaskLength: number;
  readonly AllocationResourceTags: [];
  readonly TagSpecifications: [];
  readonly ClientToken: string;
  readonly AwsService: string;
}

interface CreateIpamPoolResult {
  readonly IpamPool: IpamPool;
}

interface CreateIpamRequest {
  readonly DryRun: boolean;
  readonly Description: string;
  readonly OperatingRegions: [];
  readonly TagSpecifications: [];
  readonly ClientToken: string;
}

interface CreateIpamResult {
  readonly Ipam: Ipam;
}

interface CreateIpamScopeRequest {
  readonly DryRun: boolean;
  readonly IpamId: string;
  readonly Description: string;
  readonly TagSpecifications: [];
  readonly ClientToken: string;
}

interface CreateIpamScopeResult {
  readonly IpamScope: IpamScope;
}

interface CreateKeyPairRequest {
  readonly KeyName: string;
  readonly DryRun: boolean;
  readonly KeyType: string;
  readonly TagSpecifications: [];
}

interface CreateLaunchTemplateRequest {
  readonly DryRun: boolean;
  readonly ClientToken: string;
  readonly LaunchTemplateName: string;
  readonly VersionDescription: string;
  readonly LaunchTemplateData: RequestLaunchTemplateData;
  readonly TagSpecifications: [];
}

interface CreateLaunchTemplateResult {
  readonly LaunchTemplate: LaunchTemplate;
  readonly Warning: ValidationWarning;
}

interface CreateLaunchTemplateVersionRequest {
  readonly DryRun: boolean;
  readonly ClientToken: string;
  readonly LaunchTemplateId: string;
  readonly LaunchTemplateName: string;
  readonly SourceVersion: string;
  readonly VersionDescription: string;
  readonly LaunchTemplateData: RequestLaunchTemplateData;
}

interface CreateLaunchTemplateVersionResult {
  readonly LaunchTemplateVersion: LaunchTemplateVersion;
  readonly Warning: ValidationWarning;
}

interface CreateLocalGatewayRouteRequest {
  readonly DestinationCidrBlock: string;
  readonly LocalGatewayRouteTableId: string;
  readonly LocalGatewayVirtualInterfaceGroupId: string;
  readonly DryRun: boolean;
}

interface CreateLocalGatewayRouteResult {
  readonly Route: LocalGatewayRoute;
}

interface CreateLocalGatewayRouteTableVpcAssociationRequest {
  readonly LocalGatewayRouteTableId: string;
  readonly VpcId: string;
  readonly TagSpecifications: [];
  readonly DryRun: boolean;
}

interface CreateLocalGatewayRouteTableVpcAssociationResult {
  readonly LocalGatewayRouteTableVpcAssociation: LocalGatewayRouteTableVpcAssociation;
}

interface CreateManagedPrefixListRequest {
  readonly DryRun: boolean;
  readonly PrefixListName: string;
  readonly Entries: [];
  readonly MaxEntries: number;
  readonly TagSpecifications: [];
  readonly AddressFamily: string;
  readonly ClientToken: string;
}

interface CreateManagedPrefixListResult {
  readonly PrefixList: ManagedPrefixList;
}

interface CreateNatGatewayRequest {
  readonly AllocationId: string;
  readonly ClientToken: string;
  readonly DryRun: boolean;
  readonly SubnetId: string;
  readonly TagSpecifications: [];
  readonly ConnectivityType: string;
}

interface CreateNatGatewayResult {
  readonly ClientToken: string;
  readonly NatGateway: NatGateway;
}

interface CreateNetworkAclEntryRequest {
  readonly CidrBlock: string;
  readonly DryRun: boolean;
  readonly Egress: boolean;
  readonly IcmpTypeCode: IcmpTypeCode;
  readonly Ipv6CidrBlock: string;
  readonly NetworkAclId: string;
  readonly PortRange: PortRange;
  readonly Protocol: string;
  readonly RuleAction: string;
  readonly RuleNumber: number;
}

interface CreateNetworkAclRequest {
  readonly DryRun: boolean;
  readonly VpcId: string;
  readonly TagSpecifications: [];
}

interface CreateNetworkAclResult {
  readonly NetworkAcl: NetworkAcl;
}

interface CreateNetworkInsightsAccessScopeRequest {
  readonly MatchPaths: [];
  readonly ExcludePaths: [];
  readonly ClientToken: string;
  readonly TagSpecifications: [];
  readonly DryRun: boolean;
}

interface CreateNetworkInsightsAccessScopeResult {
  readonly NetworkInsightsAccessScope: NetworkInsightsAccessScope;
  readonly NetworkInsightsAccessScopeContent: NetworkInsightsAccessScopeContent;
}

interface CreateNetworkInsightsPathRequest {
  readonly SourceIp: string;
  readonly DestinationIp: string;
  readonly Source: string;
  readonly Destination: string;
  readonly Protocol: string;
  readonly DestinationPort: number;
  readonly TagSpecifications: [];
  readonly DryRun: boolean;
  readonly ClientToken: string;
}

interface CreateNetworkInsightsPathResult {
  readonly NetworkInsightsPath: NetworkInsightsPath;
}

interface CreateNetworkInterfacePermissionRequest {
  readonly NetworkInterfaceId: string;
  readonly AwsAccountId: string;
  readonly AwsService: string;
  readonly Permission: string;
  readonly DryRun: boolean;
}

interface CreateNetworkInterfacePermissionResult {
  readonly InterfacePermission: NetworkInterfacePermission;
}

interface CreateNetworkInterfaceRequest {
  readonly Description: string;
  readonly DryRun: boolean;
  readonly Groups: [];
  readonly Ipv6AddressCount: number;
  readonly Ipv6Addresses: [];
  readonly PrivateIpAddress: string;
  readonly PrivateIpAddresses: [];
  readonly SecondaryPrivateIpAddressCount: number;
  readonly Ipv4Prefixes: [];
  readonly Ipv4PrefixCount: number;
  readonly Ipv6Prefixes: [];
  readonly Ipv6PrefixCount: number;
  readonly InterfaceType: string;
  readonly SubnetId: string;
  readonly TagSpecifications: [];
  readonly ClientToken: string;
}

interface CreateNetworkInterfaceResult {
  readonly NetworkInterface: NetworkInterface;
  readonly ClientToken: string;
}

interface CreatePlacementGroupRequest {
  readonly DryRun: boolean;
  readonly GroupName: string;
  readonly Strategy: string;
  readonly PartitionCount: number;
  readonly TagSpecifications: [];
}

interface CreatePlacementGroupResult {
  readonly PlacementGroup: PlacementGroup;
}

interface CreatePublicIpv4PoolRequest {
  readonly DryRun: boolean;
  readonly TagSpecifications: [];
}

interface CreatePublicIpv4PoolResult {
  readonly PoolId: string;
}

interface CreateReplaceRootVolumeTaskRequest {
  readonly InstanceId: string;
  readonly SnapshotId: string;
  readonly ClientToken: string;
  readonly DryRun: boolean;
  readonly TagSpecifications: [];
}

interface CreateReplaceRootVolumeTaskResult {
  readonly ReplaceRootVolumeTask: ReplaceRootVolumeTask;
}

interface CreateReservedInstancesListingRequest {
  readonly ClientToken: string;
  readonly InstanceCount: number;
  readonly PriceSchedules: [];
  readonly ReservedInstancesId: string;
}

interface CreateReservedInstancesListingResult {
  readonly ReservedInstancesListings: [];
}

interface CreateRestoreImageTaskRequest {
  readonly Bucket: string;
  readonly ObjectKey: string;
  readonly Name: string;
  readonly TagSpecifications: [];
  readonly DryRun: boolean;
}

interface CreateRestoreImageTaskResult {
  readonly ImageId: string;
}

interface CreateRouteRequest {
  readonly DestinationCidrBlock: string;
  readonly DestinationIpv6CidrBlock: string;
  readonly DestinationPrefixListId: string;
  readonly DryRun: boolean;
  readonly VpcEndpointId: string;
  readonly EgressOnlyInternetGatewayId: string;
  readonly GatewayId: string;
  readonly InstanceId: string;
  readonly NatGatewayId: string;
  readonly TransitGatewayId: string;
  readonly LocalGatewayId: string;
  readonly CarrierGatewayId: string;
  readonly NetworkInterfaceId: string;
  readonly RouteTableId: string;
  readonly VpcPeeringConnectionId: string;
  readonly CoreNetworkArn: string;
}

interface CreateRouteResult {
  readonly Return: boolean;
}

interface CreateRouteTableRequest {
  readonly DryRun: boolean;
  readonly VpcId: string;
  readonly TagSpecifications: [];
}

interface CreateRouteTableResult {
  readonly RouteTable: RouteTable;
}

interface CreateSecurityGroupRequest {
  readonly Description: string;
  readonly GroupName: string;
  readonly VpcId: string;
  readonly TagSpecifications: [];
  readonly DryRun: boolean;
}

interface CreateSecurityGroupResult {
  readonly GroupId: string;
  readonly Tags: [];
}

interface CreateSnapshotRequest {
  readonly Description: string;
  readonly OutpostArn: string;
  readonly VolumeId: string;
  readonly TagSpecifications: [];
  readonly DryRun: boolean;
}

interface CreateSnapshotsRequest {
  readonly Description: string;
  readonly InstanceSpecification: InstanceSpecification;
  readonly OutpostArn: string;
  readonly TagSpecifications: [];
  readonly DryRun: boolean;
  readonly CopyTagsFromSource: string;
}

interface CreateSnapshotsResult {
  readonly Snapshots: [];
}

interface CreateSpotDatafeedSubscriptionRequest {
  readonly Bucket: string;
  readonly DryRun: boolean;
  readonly Prefix: string;
}

interface CreateSpotDatafeedSubscriptionResult {
  readonly SpotDatafeedSubscription: SpotDatafeedSubscription;
}

interface CreateStoreImageTaskRequest {
  readonly ImageId: string;
  readonly Bucket: string;
  readonly S3ObjectTags: [];
  readonly DryRun: boolean;
}

interface CreateStoreImageTaskResult {
  readonly ObjectKey: string;
}

interface CreateSubnetCidrReservationRequest {
  readonly TagSpecifications: [];
  readonly SubnetId: string;
  readonly Cidr: string;
  readonly ReservationType: string;
  readonly Description: string;
  readonly DryRun: boolean;
}

interface CreateSubnetCidrReservationResult {
  readonly SubnetCidrReservation: SubnetCidrReservation;
}

interface CreateSubnetRequest {
  readonly TagSpecifications: [];
  readonly AvailabilityZone: string;
  readonly AvailabilityZoneId: string;
  readonly CidrBlock: string;
  readonly Ipv6CidrBlock: string;
  readonly OutpostArn: string;
  readonly VpcId: string;
  readonly DryRun: boolean;
  readonly Ipv6Native: boolean;
}

interface CreateSubnetResult {
  readonly Subnet: Subnet;
}

interface CreateTagsRequest {
  readonly DryRun: boolean;
  readonly Resources: [];
  readonly Tags: [];
}

interface CreateTrafficMirrorFilterRequest {
  readonly Description: string;
  readonly TagSpecifications: [];
  readonly DryRun: boolean;
  readonly ClientToken: string;
}

interface CreateTrafficMirrorFilterResult {
  readonly TrafficMirrorFilter: TrafficMirrorFilter;
  readonly ClientToken: string;
}

interface CreateTrafficMirrorFilterRuleRequest {
  readonly TrafficMirrorFilterId: string;
  readonly TrafficDirection: string;
  readonly RuleNumber: number;
  readonly RuleAction: string;
  readonly DestinationPortRange: TrafficMirrorPortRangeRequest;
  readonly SourcePortRange: TrafficMirrorPortRangeRequest;
  readonly Protocol: number;
  readonly DestinationCidrBlock: string;
  readonly SourceCidrBlock: string;
  readonly Description: string;
  readonly DryRun: boolean;
  readonly ClientToken: string;
}

interface CreateTrafficMirrorFilterRuleResult {
  readonly TrafficMirrorFilterRule: TrafficMirrorFilterRule;
  readonly ClientToken: string;
}

interface CreateTrafficMirrorSessionRequest {
  readonly NetworkInterfaceId: string;
  readonly TrafficMirrorTargetId: string;
  readonly TrafficMirrorFilterId: string;
  readonly PacketLength: number;
  readonly SessionNumber: number;
  readonly VirtualNetworkId: number;
  readonly Description: string;
  readonly TagSpecifications: [];
  readonly DryRun: boolean;
  readonly ClientToken: string;
}

interface CreateTrafficMirrorSessionResult {
  readonly TrafficMirrorSession: TrafficMirrorSession;
  readonly ClientToken: string;
}

interface CreateTrafficMirrorTargetRequest {
  readonly NetworkInterfaceId: string;
  readonly NetworkLoadBalancerArn: string;
  readonly Description: string;
  readonly TagSpecifications: [];
  readonly DryRun: boolean;
  readonly ClientToken: string;
}

interface CreateTrafficMirrorTargetResult {
  readonly TrafficMirrorTarget: TrafficMirrorTarget;
  readonly ClientToken: string;
}

interface CreateTransitGatewayConnectPeerRequest {
  readonly TransitGatewayAttachmentId: string;
  readonly TransitGatewayAddress: string;
  readonly PeerAddress: string;
  readonly BgpOptions: TransitGatewayConnectRequestBgpOptions;
  readonly InsideCidrBlocks: [];
  readonly TagSpecifications: [];
  readonly DryRun: boolean;
}

interface CreateTransitGatewayConnectPeerResult {
  readonly TransitGatewayConnectPeer: TransitGatewayConnectPeer;
}

interface CreateTransitGatewayConnectRequest {
  readonly TransportTransitGatewayAttachmentId: string;
  readonly Options: CreateTransitGatewayConnectRequestOptions;
  readonly TagSpecifications: [];
  readonly DryRun: boolean;
}

interface CreateTransitGatewayConnectRequestOptions {
  readonly Protocol: string;
}

interface CreateTransitGatewayConnectResult {
  readonly TransitGatewayConnect: TransitGatewayConnect;
}

interface CreateTransitGatewayMulticastDomainRequest {
  readonly TransitGatewayId: string;
  readonly Options: CreateTransitGatewayMulticastDomainRequestOptions;
  readonly TagSpecifications: [];
  readonly DryRun: boolean;
}

interface CreateTransitGatewayMulticastDomainRequestOptions {
  readonly Igmpv2Support: string;
  readonly StaticSourcesSupport: string;
  readonly AutoAcceptSharedAssociations: string;
}

interface CreateTransitGatewayMulticastDomainResult {
  readonly TransitGatewayMulticastDomain: TransitGatewayMulticastDomain;
}

interface CreateTransitGatewayPeeringAttachmentRequest {
  readonly TransitGatewayId: string;
  readonly PeerTransitGatewayId: string;
  readonly PeerAccountId: string;
  readonly PeerRegion: string;
  readonly TagSpecifications: [];
  readonly DryRun: boolean;
}

interface CreateTransitGatewayPeeringAttachmentResult {
  readonly TransitGatewayPeeringAttachment: TransitGatewayPeeringAttachment;
}

interface CreateTransitGatewayPrefixListReferenceRequest {
  readonly TransitGatewayRouteTableId: string;
  readonly PrefixListId: string;
  readonly TransitGatewayAttachmentId: string;
  readonly Blackhole: boolean;
  readonly DryRun: boolean;
}

interface CreateTransitGatewayPrefixListReferenceResult {
  readonly TransitGatewayPrefixListReference: TransitGatewayPrefixListReference;
}

interface CreateTransitGatewayRequest {
  readonly Description: string;
  readonly Options: TransitGatewayRequestOptions;
  readonly TagSpecifications: [];
  readonly DryRun: boolean;
}

interface CreateTransitGatewayResult {
  readonly TransitGateway: TransitGateway;
}

interface CreateTransitGatewayRouteRequest {
  readonly DestinationCidrBlock: string;
  readonly TransitGatewayRouteTableId: string;
  readonly TransitGatewayAttachmentId: string;
  readonly Blackhole: boolean;
  readonly DryRun: boolean;
}

interface CreateTransitGatewayRouteResult {
  readonly Route: TransitGatewayRoute;
}

interface CreateTransitGatewayRouteTableRequest {
  readonly TransitGatewayId: string;
  readonly TagSpecifications: [];
  readonly DryRun: boolean;
}

interface CreateTransitGatewayRouteTableResult {
  readonly TransitGatewayRouteTable: TransitGatewayRouteTable;
}

interface CreateTransitGatewayVpcAttachmentRequest {
  readonly TransitGatewayId: string;
  readonly VpcId: string;
  readonly SubnetIds: [];
  readonly Options: CreateTransitGatewayVpcAttachmentRequestOptions;
  readonly TagSpecifications: [];
  readonly DryRun: boolean;
}

interface CreateTransitGatewayVpcAttachmentRequestOptions {
  readonly DnsSupport: string;
  readonly Ipv6Support: string;
  readonly ApplianceModeSupport: string;
}

interface CreateTransitGatewayVpcAttachmentResult {
  readonly TransitGatewayVpcAttachment: TransitGatewayVpcAttachment;
}

interface CreateVolumePermission {
  readonly Group: string;
  readonly UserId: string;
}

interface CreateVolumePermissionModifications {
  readonly Add: [];
  readonly Remove: [];
}

interface CreateVolumeRequest {
  readonly AvailabilityZone: string;
  readonly Encrypted: boolean;
  readonly Iops: number;
  readonly KmsKeyId: string;
  readonly OutpostArn: string;
  readonly Size: number;
  readonly SnapshotId: string;
  readonly VolumeType: string;
  readonly DryRun: boolean;
  readonly TagSpecifications: [];
  readonly MultiAttachEnabled: boolean;
  readonly Throughput: number;
  readonly ClientToken: string;
}

interface CreateVpcEndpointConnectionNotificationRequest {
  readonly DryRun: boolean;
  readonly ServiceId: string;
  readonly VpcEndpointId: string;
  readonly ConnectionNotificationArn: string;
  readonly ConnectionEvents: [];
  readonly ClientToken: string;
}

interface CreateVpcEndpointConnectionNotificationResult {
  readonly ConnectionNotification: ConnectionNotification;
  readonly ClientToken: string;
}

interface CreateVpcEndpointRequest {
  readonly DryRun: boolean;
  readonly VpcEndpointType: string;
  readonly VpcId: string;
  readonly ServiceName: string;
  readonly PolicyDocument: string;
  readonly RouteTableIds: [];
  readonly SubnetIds: [];
  readonly SecurityGroupIds: [];
  readonly ClientToken: string;
  readonly PrivateDnsEnabled: boolean;
  readonly TagSpecifications: [];
}

interface CreateVpcEndpointResult {
  readonly VpcEndpoint: VpcEndpoint;
  readonly ClientToken: string;
}

interface CreateVpcEndpointServiceConfigurationRequest {
  readonly DryRun: boolean;
  readonly AcceptanceRequired: boolean;
  readonly PrivateDnsName: string;
  readonly NetworkLoadBalancerArns: [];
  readonly GatewayLoadBalancerArns: [];
  readonly ClientToken: string;
  readonly TagSpecifications: [];
}

interface CreateVpcEndpointServiceConfigurationResult {
  readonly ServiceConfiguration: ServiceConfiguration;
  readonly ClientToken: string;
}

interface CreateVpcPeeringConnectionRequest {
  readonly DryRun: boolean;
  readonly PeerOwnerId: string;
  readonly PeerVpcId: string;
  readonly VpcId: string;
  readonly PeerRegion: string;
  readonly TagSpecifications: [];
}

interface CreateVpcPeeringConnectionResult {
  readonly VpcPeeringConnection: VpcPeeringConnection;
}

interface CreateVpcRequest {
  readonly CidrBlock: string;
  readonly AmazonProvidedIpv6CidrBlock: boolean;
  readonly Ipv6Pool: string;
  readonly Ipv6CidrBlock: string;
  readonly Ipv4IpamPoolId: string;
  readonly Ipv4NetmaskLength: number;
  readonly Ipv6IpamPoolId: string;
  readonly Ipv6NetmaskLength: number;
  readonly DryRun: boolean;
  readonly InstanceTenancy: string;
  readonly Ipv6CidrBlockNetworkBorderGroup: string;
  readonly TagSpecifications: [];
}

interface CreateVpcResult {
  readonly Vpc: Vpc;
}

interface CreateVpnConnectionRequest {
  readonly CustomerGatewayId: string;
  readonly Type: string;
  readonly VpnGatewayId: string;
  readonly TransitGatewayId: string;
  readonly DryRun: boolean;
  readonly Options: VpnConnectionOptionsSpecification;
  readonly TagSpecifications: [];
}

interface CreateVpnConnectionResult {
  readonly VpnConnection: VpnConnection;
}

interface CreateVpnConnectionRouteRequest {
  readonly DestinationCidrBlock: string;
  readonly VpnConnectionId: string;
}

interface CreateVpnGatewayRequest {
  readonly AvailabilityZone: string;
  readonly Type: string;
  readonly TagSpecifications: [];
  readonly AmazonSideAsn: number;
  readonly DryRun: boolean;
}

interface CreateVpnGatewayResult {
  readonly VpnGateway: VpnGateway;
}

interface CreditSpecification {
  readonly CpuCredits: string;
}

interface CreditSpecificationRequest {
  readonly CpuCredits: string;
}

interface CustomerGateway {
  readonly BgpAsn: string;
  readonly CustomerGatewayId: string;
  readonly IpAddress: string;
  readonly CertificateArn: string;
  readonly State: string;
  readonly Type: string;
  readonly DeviceName: string;
  readonly Tags: [];
}

interface DeleteCarrierGatewayRequest {
  readonly CarrierGatewayId: string;
  readonly DryRun: boolean;
}

interface DeleteCarrierGatewayResult {
  readonly CarrierGateway: CarrierGateway;
}

interface DeleteClientVpnEndpointRequest {
  readonly ClientVpnEndpointId: string;
  readonly DryRun: boolean;
}

interface DeleteClientVpnEndpointResult {
  readonly Status: ClientVpnEndpointStatus;
}

interface DeleteClientVpnRouteRequest {
  readonly ClientVpnEndpointId: string;
  readonly TargetVpcSubnetId: string;
  readonly DestinationCidrBlock: string;
  readonly DryRun: boolean;
}

interface DeleteClientVpnRouteResult {
  readonly Status: ClientVpnRouteStatus;
}

interface DeleteCustomerGatewayRequest {
  readonly CustomerGatewayId: string;
  readonly DryRun: boolean;
}

interface DeleteDhcpOptionsRequest {
  readonly DhcpOptionsId: string;
  readonly DryRun: boolean;
}

interface DeleteEgressOnlyInternetGatewayRequest {
  readonly DryRun: boolean;
  readonly EgressOnlyInternetGatewayId: string;
}

interface DeleteEgressOnlyInternetGatewayResult {
  readonly ReturnCode: boolean;
}

interface DeleteFleetError {
  readonly Code: string;
  readonly Message: string;
}

interface DeleteFleetErrorItem {
  readonly Error: DeleteFleetError;
  readonly FleetId: string;
}

interface DeleteFleetSuccessItem {
  readonly CurrentFleetState: string;
  readonly PreviousFleetState: string;
  readonly FleetId: string;
}

interface DeleteFleetsRequest {
  readonly DryRun: boolean;
  readonly FleetIds: [];
  readonly TerminateInstances: boolean;
}

interface DeleteFleetsResult {
  readonly SuccessfulFleetDeletions: [];
  readonly UnsuccessfulFleetDeletions: [];
}

interface DeleteFlowLogsRequest {
  readonly DryRun: boolean;
  readonly FlowLogIds: [];
}

interface DeleteFlowLogsResult {
  readonly Unsuccessful: [];
}

interface DeleteFpgaImageRequest {
  readonly DryRun: boolean;
  readonly FpgaImageId: string;
}

interface DeleteFpgaImageResult {
  readonly Return: boolean;
}

interface DeleteInstanceEventWindowRequest {
  readonly DryRun: boolean;
  readonly ForceDelete: boolean;
  readonly InstanceEventWindowId: string;
}

interface DeleteInstanceEventWindowResult {
  readonly InstanceEventWindowState: InstanceEventWindowStateChange;
}

interface DeleteInternetGatewayRequest {
  readonly DryRun: boolean;
  readonly InternetGatewayId: string;
}

interface DeleteIpamPoolRequest {
  readonly DryRun: boolean;
  readonly IpamPoolId: string;
}

interface DeleteIpamPoolResult {
  readonly IpamPool: IpamPool;
}

interface DeleteIpamRequest {
  readonly DryRun: boolean;
  readonly IpamId: string;
}

interface DeleteIpamResult {
  readonly Ipam: Ipam;
}

interface DeleteIpamScopeRequest {
  readonly DryRun: boolean;
  readonly IpamScopeId: string;
}

interface DeleteIpamScopeResult {
  readonly IpamScope: IpamScope;
}

interface DeleteKeyPairRequest {
  readonly KeyName: string;
  readonly KeyPairId: string;
  readonly DryRun: boolean;
}

interface DeleteLaunchTemplateRequest {
  readonly DryRun: boolean;
  readonly LaunchTemplateId: string;
  readonly LaunchTemplateName: string;
}

interface DeleteLaunchTemplateResult {
  readonly LaunchTemplate: LaunchTemplate;
}

interface DeleteLaunchTemplateVersionsRequest {
  readonly DryRun: boolean;
  readonly LaunchTemplateId: string;
  readonly LaunchTemplateName: string;
  readonly Versions: [];
}

interface DeleteLaunchTemplateVersionsResponseErrorItem {
  readonly LaunchTemplateId: string;
  readonly LaunchTemplateName: string;
  readonly VersionNumber: number;
  readonly ResponseError: ResponseError;
}

interface DeleteLaunchTemplateVersionsResponseSuccessItem {
  readonly LaunchTemplateId: string;
  readonly LaunchTemplateName: string;
  readonly VersionNumber: number;
}

interface DeleteLaunchTemplateVersionsResult {
  readonly SuccessfullyDeletedLaunchTemplateVersions: [];
  readonly UnsuccessfullyDeletedLaunchTemplateVersions: [];
}

interface DeleteLocalGatewayRouteRequest {
  readonly DestinationCidrBlock: string;
  readonly LocalGatewayRouteTableId: string;
  readonly DryRun: boolean;
}

interface DeleteLocalGatewayRouteResult {
  readonly Route: LocalGatewayRoute;
}

interface DeleteLocalGatewayRouteTableVpcAssociationRequest {
  readonly LocalGatewayRouteTableVpcAssociationId: string;
  readonly DryRun: boolean;
}

interface DeleteLocalGatewayRouteTableVpcAssociationResult {
  readonly LocalGatewayRouteTableVpcAssociation: LocalGatewayRouteTableVpcAssociation;
}

interface DeleteManagedPrefixListRequest {
  readonly DryRun: boolean;
  readonly PrefixListId: string;
}

interface DeleteManagedPrefixListResult {
  readonly PrefixList: ManagedPrefixList;
}

interface DeleteNatGatewayRequest {
  readonly DryRun: boolean;
  readonly NatGatewayId: string;
}

interface DeleteNatGatewayResult {
  readonly NatGatewayId: string;
}

interface DeleteNetworkAclEntryRequest {
  readonly DryRun: boolean;
  readonly Egress: boolean;
  readonly NetworkAclId: string;
  readonly RuleNumber: number;
}

interface DeleteNetworkAclRequest {
  readonly DryRun: boolean;
  readonly NetworkAclId: string;
}

interface DeleteNetworkInsightsAccessScopeAnalysisRequest {
  readonly NetworkInsightsAccessScopeAnalysisId: string;
  readonly DryRun: boolean;
}

interface DeleteNetworkInsightsAccessScopeAnalysisResult {
  readonly NetworkInsightsAccessScopeAnalysisId: string;
}

interface DeleteNetworkInsightsAccessScopeRequest {
  readonly DryRun: boolean;
  readonly NetworkInsightsAccessScopeId: string;
}

interface DeleteNetworkInsightsAccessScopeResult {
  readonly NetworkInsightsAccessScopeId: string;
}

interface DeleteNetworkInsightsAnalysisRequest {
  readonly DryRun: boolean;
  readonly NetworkInsightsAnalysisId: string;
}

interface DeleteNetworkInsightsAnalysisResult {
  readonly NetworkInsightsAnalysisId: string;
}

interface DeleteNetworkInsightsPathRequest {
  readonly DryRun: boolean;
  readonly NetworkInsightsPathId: string;
}

interface DeleteNetworkInsightsPathResult {
  readonly NetworkInsightsPathId: string;
}

interface DeleteNetworkInterfacePermissionRequest {
  readonly NetworkInterfacePermissionId: string;
  readonly Force: boolean;
  readonly DryRun: boolean;
}

interface DeleteNetworkInterfacePermissionResult {
  readonly Return: boolean;
}

interface DeleteNetworkInterfaceRequest {
  readonly DryRun: boolean;
  readonly NetworkInterfaceId: string;
}

interface DeletePlacementGroupRequest {
  readonly DryRun: boolean;
  readonly GroupName: string;
}

interface DeletePublicIpv4PoolRequest {
  readonly DryRun: boolean;
  readonly PoolId: string;
}

interface DeletePublicIpv4PoolResult {
  readonly ReturnValue: boolean;
}

interface DeleteQueuedReservedInstancesError {
  readonly Code: string;
  readonly Message: string;
}

interface DeleteQueuedReservedInstancesRequest {
  readonly DryRun: boolean;
  readonly ReservedInstancesIds: [];
}

interface DeleteQueuedReservedInstancesResult {
  readonly SuccessfulQueuedPurchaseDeletions: [];
  readonly FailedQueuedPurchaseDeletions: [];
}

interface DeleteRouteRequest {
  readonly DestinationCidrBlock: string;
  readonly DestinationIpv6CidrBlock: string;
  readonly DestinationPrefixListId: string;
  readonly DryRun: boolean;
  readonly RouteTableId: string;
}

interface DeleteRouteTableRequest {
  readonly DryRun: boolean;
  readonly RouteTableId: string;
}

interface DeleteSecurityGroupRequest {
  readonly GroupId: string;
  readonly GroupName: string;
  readonly DryRun: boolean;
}

interface DeleteSnapshotRequest {
  readonly SnapshotId: string;
  readonly DryRun: boolean;
}

interface DeleteSpotDatafeedSubscriptionRequest {
  readonly DryRun: boolean;
}

interface DeleteSubnetCidrReservationRequest {
  readonly SubnetCidrReservationId: string;
  readonly DryRun: boolean;
}

interface DeleteSubnetCidrReservationResult {
  readonly DeletedSubnetCidrReservation: SubnetCidrReservation;
}

interface DeleteSubnetRequest {
  readonly SubnetId: string;
  readonly DryRun: boolean;
}

interface DeleteTagsRequest {
  readonly DryRun: boolean;
  readonly Resources: [];
  readonly Tags: [];
}

interface DeleteTrafficMirrorFilterRequest {
  readonly TrafficMirrorFilterId: string;
  readonly DryRun: boolean;
}

interface DeleteTrafficMirrorFilterResult {
  readonly TrafficMirrorFilterId: string;
}

interface DeleteTrafficMirrorFilterRuleRequest {
  readonly TrafficMirrorFilterRuleId: string;
  readonly DryRun: boolean;
}

interface DeleteTrafficMirrorFilterRuleResult {
  readonly TrafficMirrorFilterRuleId: string;
}

interface DeleteTrafficMirrorSessionRequest {
  readonly TrafficMirrorSessionId: string;
  readonly DryRun: boolean;
}

interface DeleteTrafficMirrorSessionResult {
  readonly TrafficMirrorSessionId: string;
}

interface DeleteTrafficMirrorTargetRequest {
  readonly TrafficMirrorTargetId: string;
  readonly DryRun: boolean;
}

interface DeleteTrafficMirrorTargetResult {
  readonly TrafficMirrorTargetId: string;
}

interface DeleteTransitGatewayConnectPeerRequest {
  readonly TransitGatewayConnectPeerId: string;
  readonly DryRun: boolean;
}

interface DeleteTransitGatewayConnectPeerResult {
  readonly TransitGatewayConnectPeer: TransitGatewayConnectPeer;
}

interface DeleteTransitGatewayConnectRequest {
  readonly TransitGatewayAttachmentId: string;
  readonly DryRun: boolean;
}

interface DeleteTransitGatewayConnectResult {
  readonly TransitGatewayConnect: TransitGatewayConnect;
}

interface DeleteTransitGatewayMulticastDomainRequest {
  readonly TransitGatewayMulticastDomainId: string;
  readonly DryRun: boolean;
}

interface DeleteTransitGatewayMulticastDomainResult {
  readonly TransitGatewayMulticastDomain: TransitGatewayMulticastDomain;
}

interface DeleteTransitGatewayPeeringAttachmentRequest {
  readonly TransitGatewayAttachmentId: string;
  readonly DryRun: boolean;
}

interface DeleteTransitGatewayPeeringAttachmentResult {
  readonly TransitGatewayPeeringAttachment: TransitGatewayPeeringAttachment;
}

interface DeleteTransitGatewayPrefixListReferenceRequest {
  readonly TransitGatewayRouteTableId: string;
  readonly PrefixListId: string;
  readonly DryRun: boolean;
}

interface DeleteTransitGatewayPrefixListReferenceResult {
  readonly TransitGatewayPrefixListReference: TransitGatewayPrefixListReference;
}

interface DeleteTransitGatewayRequest {
  readonly TransitGatewayId: string;
  readonly DryRun: boolean;
}

interface DeleteTransitGatewayResult {
  readonly TransitGateway: TransitGateway;
}

interface DeleteTransitGatewayRouteRequest {
  readonly TransitGatewayRouteTableId: string;
  readonly DestinationCidrBlock: string;
  readonly DryRun: boolean;
}

interface DeleteTransitGatewayRouteResult {
  readonly Route: TransitGatewayRoute;
}

interface DeleteTransitGatewayRouteTableRequest {
  readonly TransitGatewayRouteTableId: string;
  readonly DryRun: boolean;
}

interface DeleteTransitGatewayRouteTableResult {
  readonly TransitGatewayRouteTable: TransitGatewayRouteTable;
}

interface DeleteTransitGatewayVpcAttachmentRequest {
  readonly TransitGatewayAttachmentId: string;
  readonly DryRun: boolean;
}

interface DeleteTransitGatewayVpcAttachmentResult {
  readonly TransitGatewayVpcAttachment: TransitGatewayVpcAttachment;
}

interface DeleteVolumeRequest {
  readonly VolumeId: string;
  readonly DryRun: boolean;
}

interface DeleteVpcEndpointConnectionNotificationsRequest {
  readonly DryRun: boolean;
  readonly ConnectionNotificationIds: [];
}

interface DeleteVpcEndpointConnectionNotificationsResult {
  readonly Unsuccessful: [];
}

interface DeleteVpcEndpointServiceConfigurationsRequest {
  readonly DryRun: boolean;
  readonly ServiceIds: [];
}

interface DeleteVpcEndpointServiceConfigurationsResult {
  readonly Unsuccessful: [];
}

interface DeleteVpcEndpointsRequest {
  readonly DryRun: boolean;
  readonly VpcEndpointIds: [];
}

interface DeleteVpcEndpointsResult {
  readonly Unsuccessful: [];
}

interface DeleteVpcPeeringConnectionRequest {
  readonly DryRun: boolean;
  readonly VpcPeeringConnectionId: string;
}

interface DeleteVpcPeeringConnectionResult {
  readonly Return: boolean;
}

interface DeleteVpcRequest {
  readonly VpcId: string;
  readonly DryRun: boolean;
}

interface DeleteVpnConnectionRequest {
  readonly VpnConnectionId: string;
  readonly DryRun: boolean;
}

interface DeleteVpnConnectionRouteRequest {
  readonly DestinationCidrBlock: string;
  readonly VpnConnectionId: string;
}

interface DeleteVpnGatewayRequest {
  readonly VpnGatewayId: string;
  readonly DryRun: boolean;
}

interface DeprovisionByoipCidrRequest {
  readonly Cidr: string;
  readonly DryRun: boolean;
}

interface DeprovisionByoipCidrResult {
  readonly ByoipCidr: ByoipCidr;
}

interface DeprovisionIpamPoolCidrRequest {
  readonly DryRun: boolean;
  readonly IpamPoolId: string;
  readonly Cidr: string;
}

interface DeprovisionIpamPoolCidrResult {
  readonly IpamPoolCidr: IpamPoolCidr;
}

interface DeprovisionPublicIpv4PoolCidrRequest {
  readonly DryRun: boolean;
  readonly PoolId: string;
  readonly Cidr: string;
}

interface DeprovisionPublicIpv4PoolCidrResult {
  readonly PoolId: string;
  readonly DeprovisionedAddresses: [];
}

interface DeregisterImageRequest {
  readonly ImageId: string;
  readonly DryRun: boolean;
}

interface DeregisterInstanceEventNotificationAttributesRequest {
  readonly DryRun: boolean;
  readonly InstanceTagAttribute: DeregisterInstanceTagAttributeRequest;
}

interface DeregisterInstanceEventNotificationAttributesResult {
  readonly InstanceTagAttribute: InstanceTagNotificationAttribute;
}

interface DeregisterInstanceTagAttributeRequest {
  readonly IncludeAllTagsOfInstance: boolean;
  readonly InstanceTagKeys: [];
}

interface DeregisterTransitGatewayMulticastGroupMembersRequest {
  readonly TransitGatewayMulticastDomainId: string;
  readonly GroupIpAddress: string;
  readonly NetworkInterfaceIds: [];
  readonly DryRun: boolean;
}

interface DeregisterTransitGatewayMulticastGroupMembersResult {
  readonly DeregisteredMulticastGroupMembers: TransitGatewayMulticastDeregisteredGroupMembers;
}

interface DeregisterTransitGatewayMulticastGroupSourcesRequest {
  readonly TransitGatewayMulticastDomainId: string;
  readonly GroupIpAddress: string;
  readonly NetworkInterfaceIds: [];
  readonly DryRun: boolean;
}

interface DeregisterTransitGatewayMulticastGroupSourcesResult {
  readonly DeregisteredMulticastGroupSources: TransitGatewayMulticastDeregisteredGroupSources;
}

interface DescribeAccountAttributesRequest {
  readonly AttributeNames: [];
  readonly DryRun: boolean;
}

interface DescribeAccountAttributesResult {
  readonly AccountAttributes: [];
}

interface DescribeAddressesAttributeRequest {
  readonly AllocationIds: [];
  readonly Attribute: string;
  readonly NextToken: string;
  readonly MaxResults: number;
  readonly DryRun: boolean;
}

interface DescribeAddressesAttributeResult {
  readonly Addresses: [];
  readonly NextToken: string;
}

interface DescribeAddressesRequest {
  readonly Filters: [];
  readonly PublicIps: [];
  readonly AllocationIds: [];
  readonly DryRun: boolean;
}

interface DescribeAddressesResult {
  readonly Addresses: [];
}

interface DescribeAggregateIdFormatRequest {
  readonly DryRun: boolean;
}

interface DescribeAggregateIdFormatResult {
  readonly UseLongIdsAggregated: boolean;
  readonly Statuses: [];
}

interface DescribeAvailabilityZonesRequest {
  readonly Filters: [];
  readonly ZoneNames: [];
  readonly ZoneIds: [];
  readonly AllAvailabilityZones: boolean;
  readonly DryRun: boolean;
}

interface DescribeAvailabilityZonesResult {
  readonly AvailabilityZones: [];
}

interface DescribeBundleTasksRequest {
  readonly BundleIds: [];
  readonly Filters: [];
  readonly DryRun: boolean;
}

interface DescribeBundleTasksResult {
  readonly BundleTasks: [];
}

interface DescribeByoipCidrsRequest {
  readonly DryRun: boolean;
  readonly MaxResults: number;
  readonly NextToken: string;
}

interface DescribeByoipCidrsResult {
  readonly ByoipCidrs: [];
  readonly NextToken: string;
}

interface DescribeCapacityReservationFleetsRequest {
  readonly CapacityReservationFleetIds: [];
  readonly NextToken: string;
  readonly MaxResults: number;
  readonly Filters: [];
  readonly DryRun: boolean;
}

interface DescribeCapacityReservationFleetsResult {
  readonly CapacityReservationFleets: [];
  readonly NextToken: string;
}

interface DescribeCapacityReservationsRequest {
  readonly CapacityReservationIds: [];
  readonly NextToken: string;
  readonly MaxResults: number;
  readonly Filters: [];
  readonly DryRun: boolean;
}

interface DescribeCapacityReservationsResult {
  readonly NextToken: string;
  readonly CapacityReservations: [];
}

interface DescribeCarrierGatewaysRequest {
  readonly CarrierGatewayIds: [];
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly DryRun: boolean;
}

interface DescribeCarrierGatewaysResult {
  readonly CarrierGateways: [];
  readonly NextToken: string;
}

interface DescribeClassicLinkInstancesRequest {
  readonly Filters: [];
  readonly DryRun: boolean;
  readonly InstanceIds: [];
  readonly MaxResults: number;
  readonly NextToken: string;
}

interface DescribeClassicLinkInstancesResult {
  readonly Instances: [];
  readonly NextToken: string;
}

interface DescribeClientVpnAuthorizationRulesRequest {
  readonly ClientVpnEndpointId: string;
  readonly DryRun: boolean;
  readonly NextToken: string;
  readonly Filters: [];
  readonly MaxResults: number;
}

interface DescribeClientVpnAuthorizationRulesResult {
  readonly AuthorizationRules: [];
  readonly NextToken: string;
}

interface DescribeClientVpnConnectionsRequest {
  readonly ClientVpnEndpointId: string;
  readonly Filters: [];
  readonly NextToken: string;
  readonly MaxResults: number;
  readonly DryRun: boolean;
}

interface DescribeClientVpnConnectionsResult {
  readonly Connections: [];
  readonly NextToken: string;
}

interface DescribeClientVpnEndpointsRequest {
  readonly ClientVpnEndpointIds: [];
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly Filters: [];
  readonly DryRun: boolean;
}

interface DescribeClientVpnEndpointsResult {
  readonly ClientVpnEndpoints: [];
  readonly NextToken: string;
}

interface DescribeClientVpnRoutesRequest {
  readonly ClientVpnEndpointId: string;
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly DryRun: boolean;
}

interface DescribeClientVpnRoutesResult {
  readonly Routes: [];
  readonly NextToken: string;
}

interface DescribeClientVpnTargetNetworksRequest {
  readonly ClientVpnEndpointId: string;
  readonly AssociationIds: [];
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly Filters: [];
  readonly DryRun: boolean;
}

interface DescribeClientVpnTargetNetworksResult {
  readonly ClientVpnTargetNetworks: [];
  readonly NextToken: string;
}

interface DescribeCoipPoolsRequest {
  readonly PoolIds: [];
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly DryRun: boolean;
}

interface DescribeCoipPoolsResult {
  readonly CoipPools: [];
  readonly NextToken: string;
}

interface DescribeConversionTasksRequest {
  readonly ConversionTaskIds: [];
  readonly DryRun: boolean;
}

interface DescribeConversionTasksResult {
  readonly ConversionTasks: [];
}

interface DescribeCustomerGatewaysRequest {
  readonly CustomerGatewayIds: [];
  readonly Filters: [];
  readonly DryRun: boolean;
}

interface DescribeCustomerGatewaysResult {
  readonly CustomerGateways: [];
}

interface DescribeDhcpOptionsRequest {
  readonly DhcpOptionsIds: [];
  readonly Filters: [];
  readonly DryRun: boolean;
  readonly NextToken: string;
  readonly MaxResults: number;
}

interface DescribeDhcpOptionsResult {
  readonly DhcpOptions: [];
  readonly NextToken: string;
}

interface DescribeEgressOnlyInternetGatewaysRequest {
  readonly DryRun: boolean;
  readonly EgressOnlyInternetGatewayIds: [];
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly Filters: [];
}

interface DescribeEgressOnlyInternetGatewaysResult {
  readonly EgressOnlyInternetGateways: [];
  readonly NextToken: string;
}

interface DescribeElasticGpusRequest {
  readonly ElasticGpuIds: [];
  readonly DryRun: boolean;
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
}

interface DescribeElasticGpusResult {
  readonly ElasticGpuSet: [];
  readonly MaxResults: number;
  readonly NextToken: string;
}

interface DescribeExportImageTasksRequest {
  readonly DryRun: boolean;
  readonly Filters: [];
  readonly ExportImageTaskIds: [];
  readonly MaxResults: number;
  readonly NextToken: string;
}

interface DescribeExportImageTasksResult {
  readonly ExportImageTasks: [];
  readonly NextToken: string;
}

interface DescribeExportTasksRequest {
  readonly ExportTaskIds: [];
  readonly Filters: [];
}

interface DescribeExportTasksResult {
  readonly ExportTasks: [];
}

interface DescribeFastSnapshotRestoreSuccessItem {
  readonly SnapshotId: string;
  readonly AvailabilityZone: string;
  readonly State: string;
  readonly StateTransitionReason: string;
  readonly OwnerId: string;
  readonly OwnerAlias: string;
  readonly EnablingTime: Date;
  readonly OptimizingTime: Date;
  readonly EnabledTime: Date;
  readonly DisablingTime: Date;
  readonly DisabledTime: Date;
}

interface DescribeFastSnapshotRestoresRequest {
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly DryRun: boolean;
}

interface DescribeFastSnapshotRestoresResult {
  readonly FastSnapshotRestores: [];
  readonly NextToken: string;
}

interface DescribeFleetError {
  readonly LaunchTemplateAndOverrides: LaunchTemplateAndOverridesResponse;
  readonly Lifecycle: string;
  readonly ErrorCode: string;
  readonly ErrorMessage: string;
}

interface DescribeFleetHistoryRequest {
  readonly DryRun: boolean;
  readonly EventType: string;
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly FleetId: string;
  readonly StartTime: Date;
}

interface DescribeFleetHistoryResult {
  readonly HistoryRecords: [];
  readonly LastEvaluatedTime: Date;
  readonly NextToken: string;
  readonly FleetId: string;
  readonly StartTime: Date;
}

interface DescribeFleetInstancesRequest {
  readonly DryRun: boolean;
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly FleetId: string;
  readonly Filters: [];
}

interface DescribeFleetInstancesResult {
  readonly ActiveInstances: [];
  readonly NextToken: string;
  readonly FleetId: string;
}

interface DescribeFleetsInstances {
  readonly LaunchTemplateAndOverrides: LaunchTemplateAndOverridesResponse;
  readonly Lifecycle: string;
  readonly InstanceIds: [];
  readonly InstanceType: string;
  readonly Platform: string;
}

interface DescribeFleetsRequest {
  readonly DryRun: boolean;
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly FleetIds: [];
  readonly Filters: [];
}

interface DescribeFleetsResult {
  readonly NextToken: string;
  readonly Fleets: [];
}

interface DescribeFlowLogsRequest {
  readonly DryRun: boolean;
  readonly Filter: [];
  readonly FlowLogIds: [];
  readonly MaxResults: number;
  readonly NextToken: string;
}

interface DescribeFlowLogsResult {
  readonly FlowLogs: [];
  readonly NextToken: string;
}

interface DescribeFpgaImageAttributeRequest {
  readonly DryRun: boolean;
  readonly FpgaImageId: string;
  readonly Attribute: string;
}

interface DescribeFpgaImageAttributeResult {
  readonly FpgaImageAttribute: FpgaImageAttribute;
}

interface DescribeFpgaImagesRequest {
  readonly DryRun: boolean;
  readonly FpgaImageIds: [];
  readonly Owners: [];
  readonly Filters: [];
  readonly NextToken: string;
  readonly MaxResults: number;
}

interface DescribeFpgaImagesResult {
  readonly FpgaImages: [];
  readonly NextToken: string;
}

interface DescribeHostReservationOfferingsRequest {
  readonly Filter: [];
  readonly MaxDuration: number;
  readonly MaxResults: number;
  readonly MinDuration: number;
  readonly NextToken: string;
  readonly OfferingId: string;
}

interface DescribeHostReservationOfferingsResult {
  readonly NextToken: string;
  readonly OfferingSet: [];
}

interface DescribeHostReservationsRequest {
  readonly Filter: [];
  readonly HostReservationIdSet: [];
  readonly MaxResults: number;
  readonly NextToken: string;
}

interface DescribeHostReservationsResult {
  readonly HostReservationSet: [];
  readonly NextToken: string;
}

interface DescribeHostsRequest {
  readonly Filter: [];
  readonly HostIds: [];
  readonly MaxResults: number;
  readonly NextToken: string;
}

interface DescribeHostsResult {
  readonly Hosts: [];
  readonly NextToken: string;
}

interface DescribeIamInstanceProfileAssociationsRequest {
  readonly AssociationIds: [];
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
}

interface DescribeIamInstanceProfileAssociationsResult {
  readonly IamInstanceProfileAssociations: [];
  readonly NextToken: string;
}

interface DescribeIdFormatRequest {
  readonly Resource: string;
}

interface DescribeIdFormatResult {
  readonly Statuses: [];
}

interface DescribeIdentityIdFormatRequest {
  readonly PrincipalArn: string;
  readonly Resource: string;
}

interface DescribeIdentityIdFormatResult {
  readonly Statuses: [];
}

interface DescribeImageAttributeRequest {
  readonly Attribute: string;
  readonly ImageId: string;
  readonly DryRun: boolean;
}

interface DescribeImagesRequest {
  readonly ExecutableUsers: [];
  readonly Filters: [];
  readonly ImageIds: [];
  readonly Owners: [];
  readonly IncludeDeprecated: boolean;
  readonly DryRun: boolean;
}

interface DescribeImagesResult {
  readonly Images: [];
}

interface DescribeImportImageTasksRequest {
  readonly DryRun: boolean;
  readonly Filters: [];
  readonly ImportTaskIds: [];
  readonly MaxResults: number;
  readonly NextToken: string;
}

interface DescribeImportImageTasksResult {
  readonly ImportImageTasks: [];
  readonly NextToken: string;
}

interface DescribeImportSnapshotTasksRequest {
  readonly DryRun: boolean;
  readonly Filters: [];
  readonly ImportTaskIds: [];
  readonly MaxResults: number;
  readonly NextToken: string;
}

interface DescribeImportSnapshotTasksResult {
  readonly ImportSnapshotTasks: [];
  readonly NextToken: string;
}

interface DescribeInstanceAttributeRequest {
  readonly Attribute: string;
  readonly DryRun: boolean;
  readonly InstanceId: string;
}

interface DescribeInstanceCreditSpecificationsRequest {
  readonly DryRun: boolean;
  readonly Filters: [];
  readonly InstanceIds: [];
  readonly MaxResults: number;
  readonly NextToken: string;
}

interface DescribeInstanceCreditSpecificationsResult {
  readonly InstanceCreditSpecifications: [];
  readonly NextToken: string;
}

interface DescribeInstanceEventNotificationAttributesRequest {
  readonly DryRun: boolean;
}

interface DescribeInstanceEventNotificationAttributesResult {
  readonly InstanceTagAttribute: InstanceTagNotificationAttribute;
}

interface DescribeInstanceEventWindowsRequest {
  readonly DryRun: boolean;
  readonly InstanceEventWindowIds: [];
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
}

interface DescribeInstanceEventWindowsResult {
  readonly InstanceEventWindows: [];
  readonly NextToken: string;
}

interface DescribeInstanceStatusRequest {
  readonly Filters: [];
  readonly InstanceIds: [];
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly DryRun: boolean;
  readonly IncludeAllInstances: boolean;
}

interface DescribeInstanceStatusResult {
  readonly InstanceStatuses: [];
  readonly NextToken: string;
}

interface DescribeInstanceTypeOfferingsRequest {
  readonly DryRun: boolean;
  readonly LocationType: string;
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
}

interface DescribeInstanceTypeOfferingsResult {
  readonly InstanceTypeOfferings: [];
  readonly NextToken: string;
}

interface DescribeInstanceTypesRequest {
  readonly DryRun: boolean;
  readonly InstanceTypes: [];
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
}

interface DescribeInstanceTypesResult {
  readonly InstanceTypes: [];
  readonly NextToken: string;
}

interface DescribeInstancesRequest {
  readonly Filters: [];
  readonly InstanceIds: [];
  readonly DryRun: boolean;
  readonly MaxResults: number;
  readonly NextToken: string;
}

interface DescribeInstancesResult {
  readonly Reservations: [];
  readonly NextToken: string;
}

interface DescribeInternetGatewaysRequest {
  readonly Filters: [];
  readonly DryRun: boolean;
  readonly InternetGatewayIds: [];
  readonly NextToken: string;
  readonly MaxResults: number;
}

interface DescribeInternetGatewaysResult {
  readonly InternetGateways: [];
  readonly NextToken: string;
}

interface DescribeIpamPoolsRequest {
  readonly DryRun: boolean;
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly IpamPoolIds: [];
}

interface DescribeIpamPoolsResult {
  readonly NextToken: string;
  readonly IpamPools: [];
}

interface DescribeIpamScopesRequest {
  readonly DryRun: boolean;
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly IpamScopeIds: [];
}

interface DescribeIpamScopesResult {
  readonly NextToken: string;
  readonly IpamScopes: [];
}

interface DescribeIpamsRequest {
  readonly DryRun: boolean;
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly IpamIds: [];
}

interface DescribeIpamsResult {
  readonly NextToken: string;
  readonly Ipams: [];
}

interface DescribeIpv6PoolsRequest {
  readonly PoolIds: [];
  readonly NextToken: string;
  readonly MaxResults: number;
  readonly DryRun: boolean;
  readonly Filters: [];
}

interface DescribeIpv6PoolsResult {
  readonly Ipv6Pools: [];
  readonly NextToken: string;
}

interface DescribeKeyPairsRequest {
  readonly Filters: [];
  readonly KeyNames: [];
  readonly KeyPairIds: [];
  readonly DryRun: boolean;
}

interface DescribeKeyPairsResult {
  readonly KeyPairs: [];
}

interface DescribeLaunchTemplateVersionsRequest {
  readonly DryRun: boolean;
  readonly LaunchTemplateId: string;
  readonly LaunchTemplateName: string;
  readonly Versions: [];
  readonly MinVersion: string;
  readonly MaxVersion: string;
  readonly NextToken: string;
  readonly MaxResults: number;
  readonly Filters: [];
}

interface DescribeLaunchTemplateVersionsResult {
  readonly LaunchTemplateVersions: [];
  readonly NextToken: string;
}

interface DescribeLaunchTemplatesRequest {
  readonly DryRun: boolean;
  readonly LaunchTemplateIds: [];
  readonly LaunchTemplateNames: [];
  readonly Filters: [];
  readonly NextToken: string;
  readonly MaxResults: number;
}

interface DescribeLaunchTemplatesResult {
  readonly LaunchTemplates: [];
  readonly NextToken: string;
}

interface DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequest {
  readonly LocalGatewayRouteTableVirtualInterfaceGroupAssociationIds: [];
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly DryRun: boolean;
}

interface DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsResult {
  readonly LocalGatewayRouteTableVirtualInterfaceGroupAssociations: [];
  readonly NextToken: string;
}

interface DescribeLocalGatewayRouteTableVpcAssociationsRequest {
  readonly LocalGatewayRouteTableVpcAssociationIds: [];
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly DryRun: boolean;
}

interface DescribeLocalGatewayRouteTableVpcAssociationsResult {
  readonly LocalGatewayRouteTableVpcAssociations: [];
  readonly NextToken: string;
}

interface DescribeLocalGatewayRouteTablesRequest {
  readonly LocalGatewayRouteTableIds: [];
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly DryRun: boolean;
}

interface DescribeLocalGatewayRouteTablesResult {
  readonly LocalGatewayRouteTables: [];
  readonly NextToken: string;
}

interface DescribeLocalGatewayVirtualInterfaceGroupsRequest {
  readonly LocalGatewayVirtualInterfaceGroupIds: [];
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly DryRun: boolean;
}

interface DescribeLocalGatewayVirtualInterfaceGroupsResult {
  readonly LocalGatewayVirtualInterfaceGroups: [];
  readonly NextToken: string;
}

interface DescribeLocalGatewayVirtualInterfacesRequest {
  readonly LocalGatewayVirtualInterfaceIds: [];
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly DryRun: boolean;
}

interface DescribeLocalGatewayVirtualInterfacesResult {
  readonly LocalGatewayVirtualInterfaces: [];
  readonly NextToken: string;
}

interface DescribeLocalGatewaysRequest {
  readonly LocalGatewayIds: [];
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly DryRun: boolean;
}

interface DescribeLocalGatewaysResult {
  readonly LocalGateways: [];
  readonly NextToken: string;
}

interface DescribeManagedPrefixListsRequest {
  readonly DryRun: boolean;
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly PrefixListIds: [];
}

interface DescribeManagedPrefixListsResult {
  readonly NextToken: string;
  readonly PrefixLists: [];
}

interface DescribeMovingAddressesRequest {
  readonly Filters: [];
  readonly DryRun: boolean;
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly PublicIps: [];
}

interface DescribeMovingAddressesResult {
  readonly MovingAddressStatuses: [];
  readonly NextToken: string;
}

interface DescribeNatGatewaysRequest {
  readonly DryRun: boolean;
  readonly Filter: [];
  readonly MaxResults: number;
  readonly NatGatewayIds: [];
  readonly NextToken: string;
}

interface DescribeNatGatewaysResult {
  readonly NatGateways: [];
  readonly NextToken: string;
}

interface DescribeNetworkAclsRequest {
  readonly Filters: [];
  readonly DryRun: boolean;
  readonly NetworkAclIds: [];
  readonly NextToken: string;
  readonly MaxResults: number;
}

interface DescribeNetworkAclsResult {
  readonly NetworkAcls: [];
  readonly NextToken: string;
}

interface DescribeNetworkInsightsAccessScopeAnalysesRequest {
  readonly NetworkInsightsAccessScopeAnalysisIds: [];
  readonly NetworkInsightsAccessScopeId: string;
  readonly AnalysisStartTimeBegin: Date;
  readonly AnalysisStartTimeEnd: Date;
  readonly Filters: [];
  readonly MaxResults: number;
  readonly DryRun: boolean;
  readonly NextToken: string;
}

interface DescribeNetworkInsightsAccessScopeAnalysesResult {
  readonly NetworkInsightsAccessScopeAnalyses: [];
  readonly NextToken: string;
}

interface DescribeNetworkInsightsAccessScopesRequest {
  readonly NetworkInsightsAccessScopeIds: [];
  readonly Filters: [];
  readonly MaxResults: number;
  readonly DryRun: boolean;
  readonly NextToken: string;
}

interface DescribeNetworkInsightsAccessScopesResult {
  readonly NetworkInsightsAccessScopes: [];
  readonly NextToken: string;
}

interface DescribeNetworkInsightsAnalysesRequest {
  readonly NetworkInsightsAnalysisIds: [];
  readonly NetworkInsightsPathId: string;
  readonly AnalysisStartTime: Date;
  readonly AnalysisEndTime: Date;
  readonly Filters: [];
  readonly MaxResults: number;
  readonly DryRun: boolean;
  readonly NextToken: string;
}

interface DescribeNetworkInsightsAnalysesResult {
  readonly NetworkInsightsAnalyses: [];
  readonly NextToken: string;
}

interface DescribeNetworkInsightsPathsRequest {
  readonly NetworkInsightsPathIds: [];
  readonly Filters: [];
  readonly MaxResults: number;
  readonly DryRun: boolean;
  readonly NextToken: string;
}

interface DescribeNetworkInsightsPathsResult {
  readonly NetworkInsightsPaths: [];
  readonly NextToken: string;
}

interface DescribeNetworkInterfaceAttributeRequest {
  readonly Attribute: string;
  readonly DryRun: boolean;
  readonly NetworkInterfaceId: string;
}

interface DescribeNetworkInterfaceAttributeResult {
  readonly Attachment: NetworkInterfaceAttachment;
  readonly Description: AttributeValue;
  readonly Groups: [];
  readonly NetworkInterfaceId: string;
  readonly SourceDestCheck: AttributeBooleanValue;
}

interface DescribeNetworkInterfacePermissionsRequest {
  readonly NetworkInterfacePermissionIds: [];
  readonly Filters: [];
  readonly NextToken: string;
  readonly MaxResults: number;
}

interface DescribeNetworkInterfacePermissionsResult {
  readonly NetworkInterfacePermissions: [];
  readonly NextToken: string;
}

interface DescribeNetworkInterfacesRequest {
  readonly Filters: [];
  readonly DryRun: boolean;
  readonly NetworkInterfaceIds: [];
  readonly NextToken: string;
  readonly MaxResults: number;
}

interface DescribeNetworkInterfacesResult {
  readonly NetworkInterfaces: [];
  readonly NextToken: string;
}

interface DescribePlacementGroupsRequest {
  readonly Filters: [];
  readonly DryRun: boolean;
  readonly GroupNames: [];
  readonly GroupIds: [];
}

interface DescribePlacementGroupsResult {
  readonly PlacementGroups: [];
}

interface DescribePrefixListsRequest {
  readonly DryRun: boolean;
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly PrefixListIds: [];
}

interface DescribePrefixListsResult {
  readonly NextToken: string;
  readonly PrefixLists: [];
}

interface DescribePrincipalIdFormatRequest {
  readonly DryRun: boolean;
  readonly Resources: [];
  readonly MaxResults: number;
  readonly NextToken: string;
}

interface DescribePrincipalIdFormatResult {
  readonly Principals: [];
  readonly NextToken: string;
}

interface DescribePublicIpv4PoolsRequest {
  readonly PoolIds: [];
  readonly NextToken: string;
  readonly MaxResults: number;
  readonly Filters: [];
}

interface DescribePublicIpv4PoolsResult {
  readonly PublicIpv4Pools: [];
  readonly NextToken: string;
}

interface DescribeRegionsRequest {
  readonly Filters: [];
  readonly RegionNames: [];
  readonly DryRun: boolean;
  readonly AllRegions: boolean;
}

interface DescribeRegionsResult {
  readonly Regions: [];
}

interface DescribeReplaceRootVolumeTasksRequest {
  readonly ReplaceRootVolumeTaskIds: [];
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly DryRun: boolean;
}

interface DescribeReplaceRootVolumeTasksResult {
  readonly ReplaceRootVolumeTasks: [];
  readonly NextToken: string;
}

interface DescribeReservedInstancesListingsRequest {
  readonly Filters: [];
  readonly ReservedInstancesId: string;
  readonly ReservedInstancesListingId: string;
}

interface DescribeReservedInstancesListingsResult {
  readonly ReservedInstancesListings: [];
}

interface DescribeReservedInstancesModificationsRequest {
  readonly Filters: [];
  readonly ReservedInstancesModificationIds: [];
  readonly NextToken: string;
}

interface DescribeReservedInstancesModificationsResult {
  readonly NextToken: string;
  readonly ReservedInstancesModifications: [];
}

interface DescribeReservedInstancesOfferingsRequest {
  readonly AvailabilityZone: string;
  readonly Filters: [];
  readonly IncludeMarketplace: boolean;
  readonly InstanceType: string;
  readonly MaxDuration: number;
  readonly MaxInstanceCount: number;
  readonly MinDuration: number;
  readonly OfferingClass: string;
  readonly ProductDescription: string;
  readonly ReservedInstancesOfferingIds: [];
  readonly DryRun: boolean;
  readonly InstanceTenancy: string;
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly OfferingType: string;
}

interface DescribeReservedInstancesOfferingsResult {
  readonly ReservedInstancesOfferings: [];
  readonly NextToken: string;
}

interface DescribeReservedInstancesRequest {
  readonly Filters: [];
  readonly OfferingClass: string;
  readonly ReservedInstancesIds: [];
  readonly DryRun: boolean;
  readonly OfferingType: string;
}

interface DescribeReservedInstancesResult {
  readonly ReservedInstances: [];
}

interface DescribeRouteTablesRequest {
  readonly Filters: [];
  readonly DryRun: boolean;
  readonly RouteTableIds: [];
  readonly NextToken: string;
  readonly MaxResults: number;
}

interface DescribeRouteTablesResult {
  readonly RouteTables: [];
  readonly NextToken: string;
}

interface DescribeScheduledInstanceAvailabilityRequest {
  readonly DryRun: boolean;
  readonly Filters: [];
  readonly FirstSlotStartTimeRange: SlotDateTimeRangeRequest;
  readonly MaxResults: number;
  readonly MaxSlotDurationInHours: number;
  readonly MinSlotDurationInHours: number;
  readonly NextToken: string;
  readonly Recurrence: ScheduledInstanceRecurrenceRequest;
}

interface DescribeScheduledInstanceAvailabilityResult {
  readonly NextToken: string;
  readonly ScheduledInstanceAvailabilitySet: [];
}

interface DescribeScheduledInstancesRequest {
  readonly DryRun: boolean;
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly ScheduledInstanceIds: [];
  readonly SlotStartTimeRange: SlotStartTimeRangeRequest;
}

interface DescribeScheduledInstancesResult {
  readonly NextToken: string;
  readonly ScheduledInstanceSet: [];
}

interface DescribeSecurityGroupReferencesRequest {
  readonly DryRun: boolean;
  readonly GroupId: [];
}

interface DescribeSecurityGroupReferencesResult {
  readonly SecurityGroupReferenceSet: [];
}

interface DescribeSecurityGroupRulesRequest {
  readonly Filters: [];
  readonly SecurityGroupRuleIds: [];
  readonly DryRun: boolean;
  readonly NextToken: string;
  readonly MaxResults: number;
}

interface DescribeSecurityGroupRulesResult {
  readonly SecurityGroupRules: [];
  readonly NextToken: string;
}

interface DescribeSecurityGroupsRequest {
  readonly Filters: [];
  readonly GroupIds: [];
  readonly GroupNames: [];
  readonly DryRun: boolean;
  readonly NextToken: string;
  readonly MaxResults: number;
}

interface DescribeSecurityGroupsResult {
  readonly SecurityGroups: [];
  readonly NextToken: string;
}

interface DescribeSnapshotAttributeRequest {
  readonly Attribute: string;
  readonly SnapshotId: string;
  readonly DryRun: boolean;
}

interface DescribeSnapshotAttributeResult {
  readonly CreateVolumePermissions: [];
  readonly ProductCodes: [];
  readonly SnapshotId: string;
}

interface DescribeSnapshotTierStatusRequest {
  readonly Filters: [];
  readonly DryRun: boolean;
  readonly NextToken: string;
  readonly MaxResults: number;
}

interface DescribeSnapshotTierStatusResult {
  readonly SnapshotTierStatuses: [];
  readonly NextToken: string;
}

interface DescribeSnapshotsRequest {
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly OwnerIds: [];
  readonly RestorableByUserIds: [];
  readonly SnapshotIds: [];
  readonly DryRun: boolean;
}

interface DescribeSnapshotsResult {
  readonly Snapshots: [];
  readonly NextToken: string;
}

interface DescribeSpotDatafeedSubscriptionRequest {
  readonly DryRun: boolean;
}

interface DescribeSpotDatafeedSubscriptionResult {
  readonly SpotDatafeedSubscription: SpotDatafeedSubscription;
}

interface DescribeSpotFleetInstancesRequest {
  readonly DryRun: boolean;
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly SpotFleetRequestId: string;
}

interface DescribeSpotFleetInstancesResponse {
  readonly ActiveInstances: [];
  readonly NextToken: string;
  readonly SpotFleetRequestId: string;
}

interface DescribeSpotFleetRequestHistoryRequest {
  readonly DryRun: boolean;
  readonly EventType: string;
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly SpotFleetRequestId: string;
  readonly StartTime: Date;
}

interface DescribeSpotFleetRequestHistoryResponse {
  readonly HistoryRecords: [];
  readonly LastEvaluatedTime: Date;
  readonly NextToken: string;
  readonly SpotFleetRequestId: string;
  readonly StartTime: Date;
}

interface DescribeSpotFleetRequestsRequest {
  readonly DryRun: boolean;
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly SpotFleetRequestIds: [];
}

interface DescribeSpotFleetRequestsResponse {
  readonly NextToken: string;
  readonly SpotFleetRequestConfigs: [];
}

interface DescribeSpotInstanceRequestsRequest {
  readonly Filters: [];
  readonly DryRun: boolean;
  readonly SpotInstanceRequestIds: [];
  readonly NextToken: string;
  readonly MaxResults: number;
}

interface DescribeSpotInstanceRequestsResult {
  readonly SpotInstanceRequests: [];
  readonly NextToken: string;
}

interface DescribeSpotPriceHistoryRequest {
  readonly Filters: [];
  readonly AvailabilityZone: string;
  readonly DryRun: boolean;
  readonly EndTime: Date;
  readonly InstanceTypes: [];
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly ProductDescriptions: [];
  readonly StartTime: Date;
}

interface DescribeSpotPriceHistoryResult {
  readonly NextToken: string;
  readonly SpotPriceHistory: [];
}

interface DescribeStaleSecurityGroupsRequest {
  readonly DryRun: boolean;
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly VpcId: string;
}

interface DescribeStaleSecurityGroupsResult {
  readonly NextToken: string;
  readonly StaleSecurityGroupSet: [];
}

interface DescribeStoreImageTasksRequest {
  readonly ImageIds: [];
  readonly DryRun: boolean;
  readonly Filters: [];
  readonly NextToken: string;
  readonly MaxResults: number;
}

interface DescribeStoreImageTasksResult {
  readonly StoreImageTaskResults: [];
  readonly NextToken: string;
}

interface DescribeSubnetsRequest {
  readonly Filters: [];
  readonly SubnetIds: [];
  readonly DryRun: boolean;
  readonly NextToken: string;
  readonly MaxResults: number;
}

interface DescribeSubnetsResult {
  readonly Subnets: [];
  readonly NextToken: string;
}

interface DescribeTagsRequest {
  readonly DryRun: boolean;
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
}

interface DescribeTagsResult {
  readonly NextToken: string;
  readonly Tags: [];
}

interface DescribeTrafficMirrorFiltersRequest {
  readonly TrafficMirrorFilterIds: [];
  readonly DryRun: boolean;
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
}

interface DescribeTrafficMirrorFiltersResult {
  readonly TrafficMirrorFilters: [];
  readonly NextToken: string;
}

interface DescribeTrafficMirrorSessionsRequest {
  readonly TrafficMirrorSessionIds: [];
  readonly DryRun: boolean;
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
}

interface DescribeTrafficMirrorSessionsResult {
  readonly TrafficMirrorSessions: [];
  readonly NextToken: string;
}

interface DescribeTrafficMirrorTargetsRequest {
  readonly TrafficMirrorTargetIds: [];
  readonly DryRun: boolean;
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
}

interface DescribeTrafficMirrorTargetsResult {
  readonly TrafficMirrorTargets: [];
  readonly NextToken: string;
}

interface DescribeTransitGatewayAttachmentsRequest {
  readonly TransitGatewayAttachmentIds: [];
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly DryRun: boolean;
}

interface DescribeTransitGatewayAttachmentsResult {
  readonly TransitGatewayAttachments: [];
  readonly NextToken: string;
}

interface DescribeTransitGatewayConnectPeersRequest {
  readonly TransitGatewayConnectPeerIds: [];
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly DryRun: boolean;
}

interface DescribeTransitGatewayConnectPeersResult {
  readonly TransitGatewayConnectPeers: [];
  readonly NextToken: string;
}

interface DescribeTransitGatewayConnectsRequest {
  readonly TransitGatewayAttachmentIds: [];
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly DryRun: boolean;
}

interface DescribeTransitGatewayConnectsResult {
  readonly TransitGatewayConnects: [];
  readonly NextToken: string;
}

interface DescribeTransitGatewayMulticastDomainsRequest {
  readonly TransitGatewayMulticastDomainIds: [];
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly DryRun: boolean;
}

interface DescribeTransitGatewayMulticastDomainsResult {
  readonly TransitGatewayMulticastDomains: [];
  readonly NextToken: string;
}

interface DescribeTransitGatewayPeeringAttachmentsRequest {
  readonly TransitGatewayAttachmentIds: [];
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly DryRun: boolean;
}

interface DescribeTransitGatewayPeeringAttachmentsResult {
  readonly TransitGatewayPeeringAttachments: [];
  readonly NextToken: string;
}

interface DescribeTransitGatewayRouteTablesRequest {
  readonly TransitGatewayRouteTableIds: [];
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly DryRun: boolean;
}

interface DescribeTransitGatewayRouteTablesResult {
  readonly TransitGatewayRouteTables: [];
  readonly NextToken: string;
}

interface DescribeTransitGatewayVpcAttachmentsRequest {
  readonly TransitGatewayAttachmentIds: [];
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly DryRun: boolean;
}

interface DescribeTransitGatewayVpcAttachmentsResult {
  readonly TransitGatewayVpcAttachments: [];
  readonly NextToken: string;
}

interface DescribeTransitGatewaysRequest {
  readonly TransitGatewayIds: [];
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly DryRun: boolean;
}

interface DescribeTransitGatewaysResult {
  readonly TransitGateways: [];
  readonly NextToken: string;
}

interface DescribeTrunkInterfaceAssociationsRequest {
  readonly AssociationIds: [];
  readonly DryRun: boolean;
  readonly Filters: [];
  readonly NextToken: string;
  readonly MaxResults: number;
}

interface DescribeTrunkInterfaceAssociationsResult {
  readonly InterfaceAssociations: [];
  readonly NextToken: string;
}

interface DescribeVolumeAttributeRequest {
  readonly Attribute: string;
  readonly VolumeId: string;
  readonly DryRun: boolean;
}

interface DescribeVolumeAttributeResult {
  readonly AutoEnableIO: AttributeBooleanValue;
  readonly ProductCodes: [];
  readonly VolumeId: string;
}

interface DescribeVolumeStatusRequest {
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly VolumeIds: [];
  readonly DryRun: boolean;
}

interface DescribeVolumeStatusResult {
  readonly NextToken: string;
  readonly VolumeStatuses: [];
}

interface DescribeVolumesModificationsRequest {
  readonly DryRun: boolean;
  readonly VolumeIds: [];
  readonly Filters: [];
  readonly NextToken: string;
  readonly MaxResults: number;
}

interface DescribeVolumesModificationsResult {
  readonly VolumesModifications: [];
  readonly NextToken: string;
}

interface DescribeVolumesRequest {
  readonly Filters: [];
  readonly VolumeIds: [];
  readonly DryRun: boolean;
  readonly MaxResults: number;
  readonly NextToken: string;
}

interface DescribeVolumesResult {
  readonly Volumes: [];
  readonly NextToken: string;
}

interface DescribeVpcAttributeRequest {
  readonly Attribute: string;
  readonly VpcId: string;
  readonly DryRun: boolean;
}

interface DescribeVpcAttributeResult {
  readonly VpcId: string;
  readonly EnableDnsHostnames: AttributeBooleanValue;
  readonly EnableDnsSupport: AttributeBooleanValue;
}

interface DescribeVpcClassicLinkDnsSupportRequest {
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly VpcIds: [];
}

interface DescribeVpcClassicLinkDnsSupportResult {
  readonly NextToken: string;
  readonly Vpcs: [];
}

interface DescribeVpcClassicLinkRequest {
  readonly Filters: [];
  readonly DryRun: boolean;
  readonly VpcIds: [];
}

interface DescribeVpcClassicLinkResult {
  readonly Vpcs: [];
}

interface DescribeVpcEndpointConnectionNotificationsRequest {
  readonly DryRun: boolean;
  readonly ConnectionNotificationId: string;
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
}

interface DescribeVpcEndpointConnectionNotificationsResult {
  readonly ConnectionNotificationSet: [];
  readonly NextToken: string;
}

interface DescribeVpcEndpointConnectionsRequest {
  readonly DryRun: boolean;
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
}

interface DescribeVpcEndpointConnectionsResult {
  readonly VpcEndpointConnections: [];
  readonly NextToken: string;
}

interface DescribeVpcEndpointServiceConfigurationsRequest {
  readonly DryRun: boolean;
  readonly ServiceIds: [];
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
}

interface DescribeVpcEndpointServiceConfigurationsResult {
  readonly ServiceConfigurations: [];
  readonly NextToken: string;
}

interface DescribeVpcEndpointServicePermissionsRequest {
  readonly DryRun: boolean;
  readonly ServiceId: string;
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
}

interface DescribeVpcEndpointServicePermissionsResult {
  readonly AllowedPrincipals: [];
  readonly NextToken: string;
}

interface DescribeVpcEndpointServicesRequest {
  readonly DryRun: boolean;
  readonly ServiceNames: [];
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
}

interface DescribeVpcEndpointServicesResult {
  readonly ServiceNames: [];
  readonly ServiceDetails: [];
  readonly NextToken: string;
}

interface DescribeVpcEndpointsRequest {
  readonly DryRun: boolean;
  readonly VpcEndpointIds: [];
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
}

interface DescribeVpcEndpointsResult {
  readonly VpcEndpoints: [];
  readonly NextToken: string;
}

interface DescribeVpcPeeringConnectionsRequest {
  readonly Filters: [];
  readonly DryRun: boolean;
  readonly VpcPeeringConnectionIds: [];
  readonly NextToken: string;
  readonly MaxResults: number;
}

interface DescribeVpcPeeringConnectionsResult {
  readonly VpcPeeringConnections: [];
  readonly NextToken: string;
}

interface DescribeVpcsRequest {
  readonly Filters: [];
  readonly VpcIds: [];
  readonly DryRun: boolean;
  readonly NextToken: string;
  readonly MaxResults: number;
}

interface DescribeVpcsResult {
  readonly Vpcs: [];
  readonly NextToken: string;
}

interface DescribeVpnConnectionsRequest {
  readonly Filters: [];
  readonly VpnConnectionIds: [];
  readonly DryRun: boolean;
}

interface DescribeVpnConnectionsResult {
  readonly VpnConnections: [];
}

interface DescribeVpnGatewaysRequest {
  readonly Filters: [];
  readonly VpnGatewayIds: [];
  readonly DryRun: boolean;
}

interface DescribeVpnGatewaysResult {
  readonly VpnGateways: [];
}

interface DestinationOptionsRequest {
  readonly FileFormat: string;
  readonly HiveCompatiblePartitions: boolean;
  readonly PerHourPartition: boolean;
}

interface DestinationOptionsResponse {
  readonly FileFormat: string;
  readonly HiveCompatiblePartitions: boolean;
  readonly PerHourPartition: boolean;
}

interface DetachClassicLinkVpcRequest {
  readonly DryRun: boolean;
  readonly InstanceId: string;
  readonly VpcId: string;
}

interface DetachClassicLinkVpcResult {
  readonly Return: boolean;
}

interface DetachInternetGatewayRequest {
  readonly DryRun: boolean;
  readonly InternetGatewayId: string;
  readonly VpcId: string;
}

interface DetachNetworkInterfaceRequest {
  readonly AttachmentId: string;
  readonly DryRun: boolean;
  readonly Force: boolean;
}

interface DetachVolumeRequest {
  readonly Device: string;
  readonly Force: boolean;
  readonly InstanceId: string;
  readonly VolumeId: string;
  readonly DryRun: boolean;
}

interface DetachVpnGatewayRequest {
  readonly VpcId: string;
  readonly VpnGatewayId: string;
  readonly DryRun: boolean;
}

interface DhcpConfiguration {
  readonly Key: string;
  readonly Values: [];
}

interface DhcpOptions {
  readonly DhcpConfigurations: [];
  readonly DhcpOptionsId: string;
  readonly OwnerId: string;
  readonly Tags: [];
}

interface DirectoryServiceAuthentication {
  readonly DirectoryId: string;
}

interface DirectoryServiceAuthenticationRequest {
  readonly DirectoryId: string;
}

interface DisableEbsEncryptionByDefaultRequest {
  readonly DryRun: boolean;
}

interface DisableEbsEncryptionByDefaultResult {
  readonly EbsEncryptionByDefault: boolean;
}

interface DisableFastSnapshotRestoreErrorItem {
  readonly SnapshotId: string;
  readonly FastSnapshotRestoreStateErrors: [];
}

interface DisableFastSnapshotRestoreStateError {
  readonly Code: string;
  readonly Message: string;
}

interface DisableFastSnapshotRestoreStateErrorItem {
  readonly AvailabilityZone: string;
  readonly Error: DisableFastSnapshotRestoreStateError;
}

interface DisableFastSnapshotRestoreSuccessItem {
  readonly SnapshotId: string;
  readonly AvailabilityZone: string;
  readonly State: string;
  readonly StateTransitionReason: string;
  readonly OwnerId: string;
  readonly OwnerAlias: string;
  readonly EnablingTime: Date;
  readonly OptimizingTime: Date;
  readonly EnabledTime: Date;
  readonly DisablingTime: Date;
  readonly DisabledTime: Date;
}

interface DisableFastSnapshotRestoresRequest {
  readonly AvailabilityZones: [];
  readonly SourceSnapshotIds: [];
  readonly DryRun: boolean;
}

interface DisableFastSnapshotRestoresResult {
  readonly Successful: [];
  readonly Unsuccessful: [];
}

interface DisableImageDeprecationRequest {
  readonly ImageId: string;
  readonly DryRun: boolean;
}

interface DisableImageDeprecationResult {
  readonly Return: boolean;
}

interface DisableIpamOrganizationAdminAccountRequest {
  readonly DryRun: boolean;
  readonly DelegatedAdminAccountId: string;
}

interface DisableIpamOrganizationAdminAccountResult {
  readonly Success: boolean;
}

interface DisableSerialConsoleAccessRequest {
  readonly DryRun: boolean;
}

interface DisableSerialConsoleAccessResult {
  readonly SerialConsoleAccessEnabled: boolean;
}

interface DisableTransitGatewayRouteTablePropagationRequest {
  readonly TransitGatewayRouteTableId: string;
  readonly TransitGatewayAttachmentId: string;
  readonly DryRun: boolean;
}

interface DisableTransitGatewayRouteTablePropagationResult {
  readonly Propagation: TransitGatewayPropagation;
}

interface DisableVgwRoutePropagationRequest {
  readonly GatewayId: string;
  readonly RouteTableId: string;
  readonly DryRun: boolean;
}

interface DisableVpcClassicLinkDnsSupportRequest {
  readonly VpcId: string;
}

interface DisableVpcClassicLinkDnsSupportResult {
  readonly Return: boolean;
}

interface DisableVpcClassicLinkRequest {
  readonly DryRun: boolean;
  readonly VpcId: string;
}

interface DisableVpcClassicLinkResult {
  readonly Return: boolean;
}

interface DisassociateAddressRequest {
  readonly AssociationId: string;
  readonly PublicIp: string;
  readonly DryRun: boolean;
}

interface DisassociateClientVpnTargetNetworkRequest {
  readonly ClientVpnEndpointId: string;
  readonly AssociationId: string;
  readonly DryRun: boolean;
}

interface DisassociateClientVpnTargetNetworkResult {
  readonly AssociationId: string;
  readonly Status: AssociationStatus;
}

interface DisassociateEnclaveCertificateIamRoleRequest {
  readonly CertificateArn: string;
  readonly RoleArn: string;
  readonly DryRun: boolean;
}

interface DisassociateEnclaveCertificateIamRoleResult {
  readonly Return: boolean;
}

interface DisassociateIamInstanceProfileRequest {
  readonly AssociationId: string;
}

interface DisassociateIamInstanceProfileResult {
  readonly IamInstanceProfileAssociation: IamInstanceProfileAssociation;
}

interface DisassociateInstanceEventWindowRequest {
  readonly DryRun: boolean;
  readonly InstanceEventWindowId: string;
  readonly AssociationTarget: InstanceEventWindowDisassociationRequest;
}

interface DisassociateInstanceEventWindowResult {
  readonly InstanceEventWindow: InstanceEventWindow;
}

interface DisassociateRouteTableRequest {
  readonly AssociationId: string;
  readonly DryRun: boolean;
}

interface DisassociateSubnetCidrBlockRequest {
  readonly AssociationId: string;
}

interface DisassociateSubnetCidrBlockResult {
  readonly Ipv6CidrBlockAssociation: SubnetIpv6CidrBlockAssociation;
  readonly SubnetId: string;
}

interface DisassociateTransitGatewayMulticastDomainRequest {
  readonly TransitGatewayMulticastDomainId: string;
  readonly TransitGatewayAttachmentId: string;
  readonly SubnetIds: [];
  readonly DryRun: boolean;
}

interface DisassociateTransitGatewayMulticastDomainResult {
  readonly Associations: TransitGatewayMulticastDomainAssociations;
}

interface DisassociateTransitGatewayRouteTableRequest {
  readonly TransitGatewayRouteTableId: string;
  readonly TransitGatewayAttachmentId: string;
  readonly DryRun: boolean;
}

interface DisassociateTransitGatewayRouteTableResult {
  readonly Association: TransitGatewayAssociation;
}

interface DisassociateTrunkInterfaceRequest {
  readonly AssociationId: string;
  readonly ClientToken: string;
  readonly DryRun: boolean;
}

interface DisassociateTrunkInterfaceResult {
  readonly Return: boolean;
  readonly ClientToken: string;
}

interface DisassociateVpcCidrBlockRequest {
  readonly AssociationId: string;
}

interface DisassociateVpcCidrBlockResult {
  readonly Ipv6CidrBlockAssociation: VpcIpv6CidrBlockAssociation;
  readonly CidrBlockAssociation: VpcCidrBlockAssociation;
  readonly VpcId: string;
}

interface DiskImage {
  readonly Description: string;
  readonly Image: DiskImageDetail;
  readonly Volume: VolumeDetail;
}

interface DiskImageDescription {
  readonly Checksum: string;
  readonly Format: string;
  readonly ImportManifestUrl: string;
  readonly Size: number;
}

interface DiskImageDetail {
  readonly Bytes: number;
  readonly Format: string;
  readonly ImportManifestUrl: string;
}

interface DiskImageVolumeDescription {
  readonly Id: string;
  readonly Size: number;
}

interface DiskInfo {
  readonly SizeInGB: number;
  readonly Count: number;
  readonly Type: string;
}

interface DnsEntry {
  readonly DnsName: string;
  readonly HostedZoneId: string;
}

interface DnsServersOptionsModifyStructure {
  readonly CustomDnsServers: [];
  readonly Enabled: boolean;
}

interface EbsBlockDevice {
  readonly DeleteOnTermination: boolean;
  readonly Iops: number;
  readonly SnapshotId: string;
  readonly VolumeSize: number;
  readonly VolumeType: string;
  readonly KmsKeyId: string;
  readonly Throughput: number;
  readonly OutpostArn: string;
  readonly Encrypted: boolean;
}

interface EbsInfo {
  readonly EbsOptimizedSupport: string;
  readonly EncryptionSupport: string;
  readonly EbsOptimizedInfo: EbsOptimizedInfo;
  readonly NvmeSupport: string;
}

interface EbsInstanceBlockDevice {
  readonly AttachTime: Date;
  readonly DeleteOnTermination: boolean;
  readonly Status: string;
  readonly VolumeId: string;
}

interface EbsInstanceBlockDeviceSpecification {
  readonly DeleteOnTermination: boolean;
  readonly VolumeId: string;
}

interface EbsOptimizedInfo {
  readonly BaselineBandwidthInMbps: number;
  readonly BaselineThroughputInMBps: unknown;
  readonly BaselineIops: number;
  readonly MaximumBandwidthInMbps: number;
  readonly MaximumThroughputInMBps: unknown;
  readonly MaximumIops: number;
}

interface EfaInfo {
  readonly MaximumEfaInterfaces: number;
}

interface EgressOnlyInternetGateway {
  readonly Attachments: [];
  readonly EgressOnlyInternetGatewayId: string;
  readonly Tags: [];
}

interface ElasticGpuAssociation {
  readonly ElasticGpuId: string;
  readonly ElasticGpuAssociationId: string;
  readonly ElasticGpuAssociationState: string;
  readonly ElasticGpuAssociationTime: string;
}

interface ElasticGpuHealth {
  readonly Status: string;
}

interface ElasticGpuSpecification {
  readonly Type: string;
}

interface ElasticGpuSpecificationResponse {
  readonly Type: string;
}

interface ElasticGpus {
  readonly ElasticGpuId: string;
  readonly AvailabilityZone: string;
  readonly ElasticGpuType: string;
  readonly ElasticGpuHealth: ElasticGpuHealth;
  readonly ElasticGpuState: string;
  readonly InstanceId: string;
  readonly Tags: [];
}

interface ElasticInferenceAccelerator {
  readonly Type: string;
  readonly Count: number;
}

interface ElasticInferenceAcceleratorAssociation {
  readonly ElasticInferenceAcceleratorArn: string;
  readonly ElasticInferenceAcceleratorAssociationId: string;
  readonly ElasticInferenceAcceleratorAssociationState: string;
  readonly ElasticInferenceAcceleratorAssociationTime: Date;
}

interface EnableEbsEncryptionByDefaultRequest {
  readonly DryRun: boolean;
}

interface EnableEbsEncryptionByDefaultResult {
  readonly EbsEncryptionByDefault: boolean;
}

interface EnableFastSnapshotRestoreErrorItem {
  readonly SnapshotId: string;
  readonly FastSnapshotRestoreStateErrors: [];
}

interface EnableFastSnapshotRestoreStateError {
  readonly Code: string;
  readonly Message: string;
}

interface EnableFastSnapshotRestoreStateErrorItem {
  readonly AvailabilityZone: string;
  readonly Error: EnableFastSnapshotRestoreStateError;
}

interface EnableFastSnapshotRestoreSuccessItem {
  readonly SnapshotId: string;
  readonly AvailabilityZone: string;
  readonly State: string;
  readonly StateTransitionReason: string;
  readonly OwnerId: string;
  readonly OwnerAlias: string;
  readonly EnablingTime: Date;
  readonly OptimizingTime: Date;
  readonly EnabledTime: Date;
  readonly DisablingTime: Date;
  readonly DisabledTime: Date;
}

interface EnableFastSnapshotRestoresRequest {
  readonly AvailabilityZones: [];
  readonly SourceSnapshotIds: [];
  readonly DryRun: boolean;
}

interface EnableFastSnapshotRestoresResult {
  readonly Successful: [];
  readonly Unsuccessful: [];
}

interface EnableImageDeprecationRequest {
  readonly ImageId: string;
  readonly DeprecateAt: Date;
  readonly DryRun: boolean;
}

interface EnableImageDeprecationResult {
  readonly Return: boolean;
}

interface EnableIpamOrganizationAdminAccountRequest {
  readonly DryRun: boolean;
  readonly DelegatedAdminAccountId: string;
}

interface EnableIpamOrganizationAdminAccountResult {
  readonly Success: boolean;
}

interface EnableSerialConsoleAccessRequest {
  readonly DryRun: boolean;
}

interface EnableSerialConsoleAccessResult {
  readonly SerialConsoleAccessEnabled: boolean;
}

interface EnableTransitGatewayRouteTablePropagationRequest {
  readonly TransitGatewayRouteTableId: string;
  readonly TransitGatewayAttachmentId: string;
  readonly DryRun: boolean;
}

interface EnableTransitGatewayRouteTablePropagationResult {
  readonly Propagation: TransitGatewayPropagation;
}

interface EnableVgwRoutePropagationRequest {
  readonly GatewayId: string;
  readonly RouteTableId: string;
  readonly DryRun: boolean;
}

interface EnableVolumeIORequest {
  readonly DryRun: boolean;
  readonly VolumeId: string;
}

interface EnableVpcClassicLinkDnsSupportRequest {
  readonly VpcId: string;
}

interface EnableVpcClassicLinkDnsSupportResult {
  readonly Return: boolean;
}

interface EnableVpcClassicLinkRequest {
  readonly DryRun: boolean;
  readonly VpcId: string;
}

interface EnableVpcClassicLinkResult {
  readonly Return: boolean;
}

interface EnclaveOptions {
  readonly Enabled: boolean;
}

interface EnclaveOptionsRequest {
  readonly Enabled: boolean;
}

interface EventInformation {
  readonly EventDescription: string;
  readonly EventSubType: string;
  readonly InstanceId: string;
}

interface Explanation {
  readonly Acl: AnalysisComponent;
  readonly AclRule: AnalysisAclRule;
  readonly Address: string;
  readonly Addresses: [];
  readonly AttachedTo: AnalysisComponent;
  readonly AvailabilityZones: [];
  readonly Cidrs: [];
  readonly Component: AnalysisComponent;
  readonly CustomerGateway: AnalysisComponent;
  readonly Destination: AnalysisComponent;
  readonly DestinationVpc: AnalysisComponent;
  readonly Direction: string;
  readonly ExplanationCode: string;
  readonly IngressRouteTable: AnalysisComponent;
  readonly InternetGateway: AnalysisComponent;
  readonly LoadBalancerArn: string;
  readonly ClassicLoadBalancerListener: AnalysisLoadBalancerListener;
  readonly LoadBalancerListenerPort: number;
  readonly LoadBalancerTarget: AnalysisLoadBalancerTarget;
  readonly LoadBalancerTargetGroup: AnalysisComponent;
  readonly LoadBalancerTargetGroups: [];
  readonly LoadBalancerTargetPort: number;
  readonly ElasticLoadBalancerListener: AnalysisComponent;
  readonly MissingComponent: string;
  readonly NatGateway: AnalysisComponent;
  readonly NetworkInterface: AnalysisComponent;
  readonly PacketField: string;
  readonly VpcPeeringConnection: AnalysisComponent;
  readonly Port: number;
  readonly PortRanges: [];
  readonly PrefixList: AnalysisComponent;
  readonly Protocols: [];
  readonly RouteTableRoute: AnalysisRouteTableRoute;
  readonly RouteTable: AnalysisComponent;
  readonly SecurityGroup: AnalysisComponent;
  readonly SecurityGroupRule: AnalysisSecurityGroupRule;
  readonly SecurityGroups: [];
  readonly SourceVpc: AnalysisComponent;
  readonly State: string;
  readonly Subnet: AnalysisComponent;
  readonly SubnetRouteTable: AnalysisComponent;
  readonly Vpc: AnalysisComponent;
  readonly VpcEndpoint: AnalysisComponent;
  readonly VpnConnection: AnalysisComponent;
  readonly VpnGateway: AnalysisComponent;
}

interface ExportClientVpnClientCertificateRevocationListRequest {
  readonly ClientVpnEndpointId: string;
  readonly DryRun: boolean;
}

interface ExportClientVpnClientCertificateRevocationListResult {
  readonly CertificateRevocationList: string;
  readonly Status: ClientCertificateRevocationListStatus;
}

interface ExportClientVpnClientConfigurationRequest {
  readonly ClientVpnEndpointId: string;
  readonly DryRun: boolean;
}

interface ExportClientVpnClientConfigurationResult {
  readonly ClientConfiguration: string;
}

interface ExportImageRequest {
  readonly ClientToken: string;
  readonly Description: string;
  readonly DiskImageFormat: string;
  readonly DryRun: boolean;
  readonly ImageId: string;
  readonly S3ExportLocation: ExportTaskS3LocationRequest;
  readonly RoleName: string;
  readonly TagSpecifications: [];
}

interface ExportImageResult {
  readonly Description: string;
  readonly DiskImageFormat: string;
  readonly ExportImageTaskId: string;
  readonly ImageId: string;
  readonly RoleName: string;
  readonly Progress: string;
  readonly S3ExportLocation: ExportTaskS3Location;
  readonly Status: string;
  readonly StatusMessage: string;
  readonly Tags: [];
}

interface ExportImageTask {
  readonly Description: string;
  readonly ExportImageTaskId: string;
  readonly ImageId: string;
  readonly Progress: string;
  readonly S3ExportLocation: ExportTaskS3Location;
  readonly Status: string;
  readonly StatusMessage: string;
  readonly Tags: [];
}

interface ExportTask {
  readonly Description: string;
  readonly ExportTaskId: string;
  readonly ExportToS3Task: ExportToS3Task;
  readonly InstanceExportDetails: InstanceExportDetails;
  readonly State: string;
  readonly StatusMessage: string;
  readonly Tags: [];
}

interface ExportTaskS3Location {
  readonly S3Bucket: string;
  readonly S3Prefix: string;
}

interface ExportTaskS3LocationRequest {
  readonly S3Bucket: string;
  readonly S3Prefix: string;
}

interface ExportToS3Task {
  readonly ContainerFormat: string;
  readonly DiskImageFormat: string;
  readonly S3Bucket: string;
  readonly S3Key: string;
}

interface ExportToS3TaskSpecification {
  readonly ContainerFormat: string;
  readonly DiskImageFormat: string;
  readonly S3Bucket: string;
  readonly S3Prefix: string;
}

interface ExportTransitGatewayRoutesRequest {
  readonly TransitGatewayRouteTableId: string;
  readonly Filters: [];
  readonly S3Bucket: string;
  readonly DryRun: boolean;
}

interface ExportTransitGatewayRoutesResult {
  readonly S3Location: string;
}

interface FailedCapacityReservationFleetCancellationResult {
  readonly CapacityReservationFleetId: string;
  readonly CancelCapacityReservationFleetError: CancelCapacityReservationFleetError;
}

interface FailedQueuedPurchaseDeletion {
  readonly Error: DeleteQueuedReservedInstancesError;
  readonly ReservedInstancesId: string;
}

interface FederatedAuthentication {
  readonly SamlProviderArn: string;
  readonly SelfServiceSamlProviderArn: string;
}

interface FederatedAuthenticationRequest {
  readonly SAMLProviderArn: string;
  readonly SelfServiceSAMLProviderArn: string;
}

interface Filter {
  readonly Name: string;
  readonly Values: [];
}

interface FleetCapacityReservation {
  readonly CapacityReservationId: string;
  readonly AvailabilityZoneId: string;
  readonly InstanceType: string;
  readonly InstancePlatform: string;
  readonly AvailabilityZone: string;
  readonly TotalInstanceCount: number;
  readonly FulfilledCapacity: unknown;
  readonly EbsOptimized: boolean;
  readonly CreateDate: Date;
  readonly Weight: unknown;
  readonly Priority: number;
}

interface FleetData {
  readonly ActivityStatus: string;
  readonly CreateTime: Date;
  readonly FleetId: string;
  readonly FleetState: string;
  readonly ClientToken: string;
  readonly ExcessCapacityTerminationPolicy: string;
  readonly FulfilledCapacity: unknown;
  readonly FulfilledOnDemandCapacity: unknown;
  readonly LaunchTemplateConfigs: [];
  readonly TargetCapacitySpecification: TargetCapacitySpecification;
  readonly TerminateInstancesWithExpiration: boolean;
  readonly Type: string;
  readonly ValidFrom: Date;
  readonly ValidUntil: Date;
  readonly ReplaceUnhealthyInstances: boolean;
  readonly SpotOptions: SpotOptions;
  readonly OnDemandOptions: OnDemandOptions;
  readonly Tags: [];
  readonly Errors: [];
  readonly Instances: [];
  readonly Context: string;
}

interface FleetLaunchTemplateConfig {
  readonly LaunchTemplateSpecification: FleetLaunchTemplateSpecification;
  readonly Overrides: [];
}

interface FleetLaunchTemplateConfigRequest {
  readonly LaunchTemplateSpecification: FleetLaunchTemplateSpecificationRequest;
  readonly Overrides: [];
}

interface FleetLaunchTemplateOverrides {
  readonly InstanceType: string;
  readonly MaxPrice: string;
  readonly SubnetId: string;
  readonly AvailabilityZone: string;
  readonly WeightedCapacity: unknown;
  readonly Priority: unknown;
  readonly Placement: PlacementResponse;
  readonly InstanceRequirements: InstanceRequirements;
}

interface FleetLaunchTemplateOverridesRequest {
  readonly InstanceType: string;
  readonly MaxPrice: string;
  readonly SubnetId: string;
  readonly AvailabilityZone: string;
  readonly WeightedCapacity: unknown;
  readonly Priority: unknown;
  readonly Placement: Placement;
  readonly InstanceRequirements: InstanceRequirementsRequest;
}

interface FleetLaunchTemplateSpecification {
  readonly LaunchTemplateId: string;
  readonly LaunchTemplateName: string;
  readonly Version: string;
}

interface FleetLaunchTemplateSpecificationRequest {
  readonly LaunchTemplateId: string;
  readonly LaunchTemplateName: string;
  readonly Version: string;
}

interface FleetSpotCapacityRebalance {
  readonly ReplacementStrategy: string;
  readonly TerminationDelay: number;
}

interface FleetSpotCapacityRebalanceRequest {
  readonly ReplacementStrategy: string;
  readonly TerminationDelay: number;
}

interface FleetSpotMaintenanceStrategies {
  readonly CapacityRebalance: FleetSpotCapacityRebalance;
}

interface FleetSpotMaintenanceStrategiesRequest {
  readonly CapacityRebalance: FleetSpotCapacityRebalanceRequest;
}

interface FlowLog {
  readonly CreationTime: Date;
  readonly DeliverLogsErrorMessage: string;
  readonly DeliverLogsPermissionArn: string;
  readonly DeliverLogsStatus: string;
  readonly FlowLogId: string;
  readonly FlowLogStatus: string;
  readonly LogGroupName: string;
  readonly ResourceId: string;
  readonly TrafficType: string;
  readonly LogDestinationType: string;
  readonly LogDestination: string;
  readonly LogFormat: string;
  readonly Tags: [];
  readonly MaxAggregationInterval: number;
  readonly DestinationOptions: DestinationOptionsResponse;
}

interface FpgaDeviceInfo {
  readonly Name: string;
  readonly Manufacturer: string;
  readonly Count: number;
  readonly MemoryInfo: FpgaDeviceMemoryInfo;
}

interface FpgaDeviceMemoryInfo {
  readonly SizeInMiB: number;
}

interface FpgaImage {
  readonly FpgaImageId: string;
  readonly FpgaImageGlobalId: string;
  readonly Name: string;
  readonly Description: string;
  readonly ShellVersion: string;
  readonly PciId: PciId;
  readonly State: FpgaImageState;
  readonly CreateTime: Date;
  readonly UpdateTime: Date;
  readonly OwnerId: string;
  readonly OwnerAlias: string;
  readonly ProductCodes: [];
  readonly Tags: [];
  readonly Public: boolean;
  readonly DataRetentionSupport: boolean;
}

interface FpgaImageAttribute {
  readonly FpgaImageId: string;
  readonly Name: string;
  readonly Description: string;
  readonly LoadPermissions: [];
  readonly ProductCodes: [];
}

interface FpgaImageState {
  readonly Code: string;
  readonly Message: string;
}

interface FpgaInfo {
  readonly Fpgas: [];
  readonly TotalFpgaMemoryInMiB: number;
}

interface GetAssociatedEnclaveCertificateIamRolesRequest {
  readonly CertificateArn: string;
  readonly DryRun: boolean;
}

interface GetAssociatedEnclaveCertificateIamRolesResult {
  readonly AssociatedRoles: [];
}

interface GetAssociatedIpv6PoolCidrsRequest {
  readonly PoolId: string;
  readonly NextToken: string;
  readonly MaxResults: number;
  readonly DryRun: boolean;
}

interface GetAssociatedIpv6PoolCidrsResult {
  readonly Ipv6CidrAssociations: [];
  readonly NextToken: string;
}

interface GetCapacityReservationUsageRequest {
  readonly CapacityReservationId: string;
  readonly NextToken: string;
  readonly MaxResults: number;
  readonly DryRun: boolean;
}

interface GetCapacityReservationUsageResult {
  readonly NextToken: string;
  readonly CapacityReservationId: string;
  readonly InstanceType: string;
  readonly TotalInstanceCount: number;
  readonly AvailableInstanceCount: number;
  readonly State: string;
  readonly InstanceUsages: [];
}

interface GetCoipPoolUsageRequest {
  readonly PoolId: string;
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly DryRun: boolean;
}

interface GetCoipPoolUsageResult {
  readonly CoipPoolId: string;
  readonly CoipAddressUsages: [];
  readonly LocalGatewayRouteTableId: string;
}

interface GetConsoleOutputRequest {
  readonly InstanceId: string;
  readonly DryRun: boolean;
  readonly Latest: boolean;
}

interface GetConsoleOutputResult {
  readonly InstanceId: string;
  readonly Output: string;
  readonly Timestamp: Date;
}

interface GetConsoleScreenshotRequest {
  readonly DryRun: boolean;
  readonly InstanceId: string;
  readonly WakeUp: boolean;
}

interface GetConsoleScreenshotResult {
  readonly ImageData: string;
  readonly InstanceId: string;
}

interface GetDefaultCreditSpecificationRequest {
  readonly DryRun: boolean;
  readonly InstanceFamily: string;
}

interface GetDefaultCreditSpecificationResult {
  readonly InstanceFamilyCreditSpecification: InstanceFamilyCreditSpecification;
}

interface GetEbsDefaultKmsKeyIdRequest {
  readonly DryRun: boolean;
}

interface GetEbsDefaultKmsKeyIdResult {
  readonly KmsKeyId: string;
}

interface GetEbsEncryptionByDefaultRequest {
  readonly DryRun: boolean;
}

interface GetEbsEncryptionByDefaultResult {
  readonly EbsEncryptionByDefault: boolean;
}

interface GetFlowLogsIntegrationTemplateRequest {
  readonly DryRun: boolean;
  readonly FlowLogId: string;
  readonly ConfigDeliveryS3DestinationArn: string;
  readonly IntegrateServices: IntegrateServices;
}

interface GetFlowLogsIntegrationTemplateResult {
  readonly Result: string;
}

interface GetGroupsForCapacityReservationRequest {
  readonly CapacityReservationId: string;
  readonly NextToken: string;
  readonly MaxResults: number;
  readonly DryRun: boolean;
}

interface GetGroupsForCapacityReservationResult {
  readonly NextToken: string;
  readonly CapacityReservationGroups: [];
}

interface GetHostReservationPurchasePreviewRequest {
  readonly HostIdSet: [];
  readonly OfferingId: string;
}

interface GetHostReservationPurchasePreviewResult {
  readonly CurrencyCode: string;
  readonly Purchase: [];
  readonly TotalHourlyPrice: string;
  readonly TotalUpfrontPrice: string;
}

interface GetInstanceTypesFromInstanceRequirementsRequest {
  readonly DryRun: boolean;
  readonly ArchitectureTypes: [];
  readonly VirtualizationTypes: [];
  readonly InstanceRequirements: InstanceRequirementsRequest;
  readonly MaxResults: number;
  readonly NextToken: string;
}

interface GetInstanceTypesFromInstanceRequirementsResult {
  readonly InstanceTypes: [];
  readonly NextToken: string;
}

interface GetIpamAddressHistoryRequest {
  readonly DryRun: boolean;
  readonly Cidr: string;
  readonly IpamScopeId: string;
  readonly VpcId: string;
  readonly StartTime: Date;
  readonly EndTime: Date;
  readonly MaxResults: number;
  readonly NextToken: string;
}

interface GetIpamAddressHistoryResult {
  readonly HistoryRecords: [];
  readonly NextToken: string;
}

interface GetIpamPoolAllocationsRequest {
  readonly DryRun: boolean;
  readonly IpamPoolId: string;
  readonly IpamPoolAllocationId: string;
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
}

interface GetIpamPoolAllocationsResult {
  readonly IpamPoolAllocations: [];
  readonly NextToken: string;
}

interface GetIpamPoolCidrsRequest {
  readonly DryRun: boolean;
  readonly IpamPoolId: string;
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
}

interface GetIpamPoolCidrsResult {
  readonly IpamPoolCidrs: [];
  readonly NextToken: string;
}

interface GetIpamResourceCidrsRequest {
  readonly DryRun: boolean;
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly IpamScopeId: string;
  readonly IpamPoolId: string;
  readonly ResourceId: string;
  readonly ResourceType: string;
  readonly ResourceTag: RequestIpamResourceTag;
  readonly ResourceOwner: string;
}

interface GetIpamResourceCidrsResult {
  readonly NextToken: string;
  readonly IpamResourceCidrs: [];
}

interface GetLaunchTemplateDataRequest {
  readonly DryRun: boolean;
  readonly InstanceId: string;
}

interface GetLaunchTemplateDataResult {
  readonly LaunchTemplateData: ResponseLaunchTemplateData;
}

interface GetManagedPrefixListAssociationsRequest {
  readonly DryRun: boolean;
  readonly PrefixListId: string;
  readonly MaxResults: number;
  readonly NextToken: string;
}

interface GetManagedPrefixListAssociationsResult {
  readonly PrefixListAssociations: [];
  readonly NextToken: string;
}

interface GetManagedPrefixListEntriesRequest {
  readonly DryRun: boolean;
  readonly PrefixListId: string;
  readonly TargetVersion: number;
  readonly MaxResults: number;
  readonly NextToken: string;
}

interface GetManagedPrefixListEntriesResult {
  readonly Entries: [];
  readonly NextToken: string;
}

interface GetNetworkInsightsAccessScopeAnalysisFindingsRequest {
  readonly NetworkInsightsAccessScopeAnalysisId: string;
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly DryRun: boolean;
}

interface GetNetworkInsightsAccessScopeAnalysisFindingsResult {
  readonly NetworkInsightsAccessScopeAnalysisId: string;
  readonly AnalysisStatus: string;
  readonly AnalysisFindings: [];
  readonly NextToken: string;
}

interface GetNetworkInsightsAccessScopeContentRequest {
  readonly NetworkInsightsAccessScopeId: string;
  readonly DryRun: boolean;
}

interface GetNetworkInsightsAccessScopeContentResult {
  readonly NetworkInsightsAccessScopeContent: NetworkInsightsAccessScopeContent;
}

interface GetPasswordDataRequest {
  readonly InstanceId: string;
  readonly DryRun: boolean;
}

interface GetPasswordDataResult {
  readonly InstanceId: string;
  readonly PasswordData: string;
  readonly Timestamp: Date;
}

interface GetReservedInstancesExchangeQuoteRequest {
  readonly DryRun: boolean;
  readonly ReservedInstanceIds: [];
  readonly TargetConfigurations: [];
}

interface GetReservedInstancesExchangeQuoteResult {
  readonly CurrencyCode: string;
  readonly IsValidExchange: boolean;
  readonly OutputReservedInstancesWillExpireAt: Date;
  readonly PaymentDue: string;
  readonly ReservedInstanceValueRollup: ReservationValue;
  readonly ReservedInstanceValueSet: [];
  readonly TargetConfigurationValueRollup: ReservationValue;
  readonly TargetConfigurationValueSet: [];
  readonly ValidationFailureReason: string;
}

interface GetSerialConsoleAccessStatusRequest {
  readonly DryRun: boolean;
}

interface GetSerialConsoleAccessStatusResult {
  readonly SerialConsoleAccessEnabled: boolean;
}

interface GetSpotPlacementScoresRequest {
  readonly InstanceTypes: [];
  readonly TargetCapacity: number;
  readonly TargetCapacityUnitType: string;
  readonly SingleAvailabilityZone: boolean;
  readonly RegionNames: [];
  readonly InstanceRequirementsWithMetadata: InstanceRequirementsWithMetadataRequest;
  readonly DryRun: boolean;
  readonly MaxResults: number;
  readonly NextToken: string;
}

interface GetSpotPlacementScoresResult {
  readonly SpotPlacementScores: [];
  readonly NextToken: string;
}

interface GetSubnetCidrReservationsRequest {
  readonly Filters: [];
  readonly SubnetId: string;
  readonly DryRun: boolean;
  readonly NextToken: string;
  readonly MaxResults: number;
}

interface GetSubnetCidrReservationsResult {
  readonly SubnetIpv4CidrReservations: [];
  readonly SubnetIpv6CidrReservations: [];
  readonly NextToken: string;
}

interface GetTransitGatewayAttachmentPropagationsRequest {
  readonly TransitGatewayAttachmentId: string;
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly DryRun: boolean;
}

interface GetTransitGatewayAttachmentPropagationsResult {
  readonly TransitGatewayAttachmentPropagations: [];
  readonly NextToken: string;
}

interface GetTransitGatewayMulticastDomainAssociationsRequest {
  readonly TransitGatewayMulticastDomainId: string;
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly DryRun: boolean;
}

interface GetTransitGatewayMulticastDomainAssociationsResult {
  readonly MulticastDomainAssociations: [];
  readonly NextToken: string;
}

interface GetTransitGatewayPrefixListReferencesRequest {
  readonly TransitGatewayRouteTableId: string;
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly DryRun: boolean;
}

interface GetTransitGatewayPrefixListReferencesResult {
  readonly TransitGatewayPrefixListReferences: [];
  readonly NextToken: string;
}

interface GetTransitGatewayRouteTableAssociationsRequest {
  readonly TransitGatewayRouteTableId: string;
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly DryRun: boolean;
}

interface GetTransitGatewayRouteTableAssociationsResult {
  readonly Associations: [];
  readonly NextToken: string;
}

interface GetTransitGatewayRouteTablePropagationsRequest {
  readonly TransitGatewayRouteTableId: string;
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly DryRun: boolean;
}

interface GetTransitGatewayRouteTablePropagationsResult {
  readonly TransitGatewayRouteTablePropagations: [];
  readonly NextToken: string;
}

interface GetVpnConnectionDeviceSampleConfigurationRequest {
  readonly VpnConnectionId: string;
  readonly VpnConnectionDeviceTypeId: string;
  readonly InternetKeyExchangeVersion: string;
  readonly DryRun: boolean;
}

interface GetVpnConnectionDeviceSampleConfigurationResult {
  readonly VpnConnectionDeviceSampleConfiguration: string;
}

interface GetVpnConnectionDeviceTypesRequest {
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly DryRun: boolean;
}

interface GetVpnConnectionDeviceTypesResult {
  readonly VpnConnectionDeviceTypes: [];
  readonly NextToken: string;
}

interface GpuDeviceInfo {
  readonly Name: string;
  readonly Manufacturer: string;
  readonly Count: number;
  readonly MemoryInfo: GpuDeviceMemoryInfo;
}

interface GpuDeviceMemoryInfo {
  readonly SizeInMiB: number;
}

interface GpuInfo {
  readonly Gpus: [];
  readonly TotalGpuMemoryInMiB: number;
}

interface GroupIdentifier {
  readonly GroupName: string;
  readonly GroupId: string;
}

interface HibernationOptions {
  readonly Configured: boolean;
}

interface HibernationOptionsRequest {
  readonly Configured: boolean;
}

interface HistoryRecord {
  readonly EventInformation: EventInformation;
  readonly EventType: string;
  readonly Timestamp: Date;
}

interface HistoryRecordEntry {
  readonly EventInformation: EventInformation;
  readonly EventType: string;
  readonly Timestamp: Date;
}

interface Host {
  readonly AutoPlacement: string;
  readonly AvailabilityZone: string;
  readonly AvailableCapacity: AvailableCapacity;
  readonly ClientToken: string;
  readonly HostId: string;
  readonly HostProperties: HostProperties;
  readonly HostReservationId: string;
  readonly Instances: [];
  readonly State: string;
  readonly AllocationTime: Date;
  readonly ReleaseTime: Date;
  readonly Tags: [];
  readonly HostRecovery: string;
  readonly AllowsMultipleInstanceTypes: string;
  readonly OwnerId: string;
  readonly AvailabilityZoneId: string;
  readonly MemberOfServiceLinkedResourceGroup: boolean;
}

interface HostInstance {
  readonly InstanceId: string;
  readonly InstanceType: string;
  readonly OwnerId: string;
}

interface HostOffering {
  readonly CurrencyCode: string;
  readonly Duration: number;
  readonly HourlyPrice: string;
  readonly InstanceFamily: string;
  readonly OfferingId: string;
  readonly PaymentOption: string;
  readonly UpfrontPrice: string;
}

interface HostProperties {
  readonly Cores: number;
  readonly InstanceType: string;
  readonly InstanceFamily: string;
  readonly Sockets: number;
  readonly TotalVCpus: number;
}

interface HostReservation {
  readonly Count: number;
  readonly CurrencyCode: string;
  readonly Duration: number;
  readonly End: Date;
  readonly HostIdSet: [];
  readonly HostReservationId: string;
  readonly HourlyPrice: string;
  readonly InstanceFamily: string;
  readonly OfferingId: string;
  readonly PaymentOption: string;
  readonly Start: Date;
  readonly State: string;
  readonly UpfrontPrice: string;
  readonly Tags: [];
}

interface IKEVersionsListValue {
  readonly Value: string;
}

interface IKEVersionsRequestListValue {
  readonly Value: string;
}

interface IamInstanceProfile {
  readonly Arn: string;
  readonly Id: string;
}

interface IamInstanceProfileAssociation {
  readonly AssociationId: string;
  readonly InstanceId: string;
  readonly IamInstanceProfile: IamInstanceProfile;
  readonly State: string;
  readonly Timestamp: Date;
}

interface IamInstanceProfileSpecification {
  readonly Arn: string;
  readonly Name: string;
}

interface IcmpTypeCode {
  readonly Code: number;
  readonly Type: number;
}

interface IdFormat {
  readonly Deadline: Date;
  readonly Resource: string;
  readonly UseLongIds: boolean;
}

interface Image {
  readonly Architecture: string;
  readonly CreationDate: string;
  readonly ImageId: string;
  readonly ImageLocation: string;
  readonly ImageType: string;
  readonly Public: boolean;
  readonly KernelId: string;
  readonly OwnerId: string;
  readonly Platform: string;
  readonly PlatformDetails: string;
  readonly UsageOperation: string;
  readonly ProductCodes: [];
  readonly RamdiskId: string;
  readonly State: string;
  readonly BlockDeviceMappings: [];
  readonly Description: string;
  readonly EnaSupport: boolean;
  readonly Hypervisor: string;
  readonly ImageOwnerAlias: string;
  readonly Name: string;
  readonly RootDeviceName: string;
  readonly RootDeviceType: string;
  readonly SriovNetSupport: string;
  readonly StateReason: StateReason;
  readonly Tags: [];
  readonly VirtualizationType: string;
  readonly BootMode: string;
  readonly DeprecationTime: string;
}

interface ImageAttribute {
  readonly BlockDeviceMappings: [];
  readonly ImageId: string;
  readonly LaunchPermissions: [];
  readonly ProductCodes: [];
  readonly Description: AttributeValue;
  readonly KernelId: AttributeValue;
  readonly RamdiskId: AttributeValue;
  readonly SriovNetSupport: AttributeValue;
  readonly BootMode: AttributeValue;
}

interface ImageDiskContainer {
  readonly Description: string;
  readonly DeviceName: string;
  readonly Format: string;
  readonly SnapshotId: string;
  readonly Url: string;
  readonly UserBucket: UserBucket;
}

interface ImportClientVpnClientCertificateRevocationListRequest {
  readonly ClientVpnEndpointId: string;
  readonly CertificateRevocationList: string;
  readonly DryRun: boolean;
}

interface ImportClientVpnClientCertificateRevocationListResult {
  readonly Return: boolean;
}

interface ImportImageLicenseConfigurationRequest {
  readonly LicenseConfigurationArn: string;
}

interface ImportImageLicenseConfigurationResponse {
  readonly LicenseConfigurationArn: string;
}

interface ImportImageRequest {
  readonly Architecture: string;
  readonly ClientData: ClientData;
  readonly ClientToken: string;
  readonly Description: string;
  readonly DiskContainers: [];
  readonly DryRun: boolean;
  readonly Encrypted: boolean;
  readonly Hypervisor: string;
  readonly KmsKeyId: string;
  readonly LicenseType: string;
  readonly Platform: string;
  readonly RoleName: string;
  readonly LicenseSpecifications: [];
  readonly TagSpecifications: [];
  readonly UsageOperation: string;
  readonly BootMode: string;
}

interface ImportImageResult {
  readonly Architecture: string;
  readonly Description: string;
  readonly Encrypted: boolean;
  readonly Hypervisor: string;
  readonly ImageId: string;
  readonly ImportTaskId: string;
  readonly KmsKeyId: string;
  readonly LicenseType: string;
  readonly Platform: string;
  readonly Progress: string;
  readonly SnapshotDetails: [];
  readonly Status: string;
  readonly StatusMessage: string;
  readonly LicenseSpecifications: [];
  readonly Tags: [];
  readonly UsageOperation: string;
}

interface ImportImageTask {
  readonly Architecture: string;
  readonly Description: string;
  readonly Encrypted: boolean;
  readonly Hypervisor: string;
  readonly ImageId: string;
  readonly ImportTaskId: string;
  readonly KmsKeyId: string;
  readonly LicenseType: string;
  readonly Platform: string;
  readonly Progress: string;
  readonly SnapshotDetails: [];
  readonly Status: string;
  readonly StatusMessage: string;
  readonly Tags: [];
  readonly LicenseSpecifications: [];
  readonly UsageOperation: string;
  readonly BootMode: string;
}

interface ImportInstanceLaunchSpecification {
  readonly AdditionalInfo: string;
  readonly Architecture: string;
  readonly GroupIds: [];
  readonly GroupNames: [];
  readonly InstanceInitiatedShutdownBehavior: string;
  readonly InstanceType: string;
  readonly Monitoring: boolean;
  readonly Placement: Placement;
  readonly PrivateIpAddress: string;
  readonly SubnetId: string;
  readonly UserData: UserData;
}

interface ImportInstanceRequest {
  readonly Description: string;
  readonly DiskImages: [];
  readonly DryRun: boolean;
  readonly LaunchSpecification: ImportInstanceLaunchSpecification;
  readonly Platform: string;
}

interface ImportInstanceResult {
  readonly ConversionTask: ConversionTask;
}

interface ImportInstanceTaskDetails {
  readonly Description: string;
  readonly InstanceId: string;
  readonly Platform: string;
  readonly Volumes: [];
}

interface ImportInstanceVolumeDetailItem {
  readonly AvailabilityZone: string;
  readonly BytesConverted: number;
  readonly Description: string;
  readonly Image: DiskImageDescription;
  readonly Status: string;
  readonly StatusMessage: string;
  readonly Volume: DiskImageVolumeDescription;
}

interface ImportKeyPairRequest {
  readonly DryRun: boolean;
  readonly KeyName: string;
  readonly PublicKeyMaterial: unknown;
  readonly TagSpecifications: [];
}

interface ImportKeyPairResult {
  readonly KeyFingerprint: string;
  readonly KeyName: string;
  readonly KeyPairId: string;
  readonly Tags: [];
}

interface ImportSnapshotRequest {
  readonly ClientData: ClientData;
  readonly ClientToken: string;
  readonly Description: string;
  readonly DiskContainer: SnapshotDiskContainer;
  readonly DryRun: boolean;
  readonly Encrypted: boolean;
  readonly KmsKeyId: string;
  readonly RoleName: string;
  readonly TagSpecifications: [];
}

interface ImportSnapshotResult {
  readonly Description: string;
  readonly ImportTaskId: string;
  readonly SnapshotTaskDetail: SnapshotTaskDetail;
  readonly Tags: [];
}

interface ImportSnapshotTask {
  readonly Description: string;
  readonly ImportTaskId: string;
  readonly SnapshotTaskDetail: SnapshotTaskDetail;
  readonly Tags: [];
}

interface ImportVolumeRequest {
  readonly AvailabilityZone: string;
  readonly Description: string;
  readonly DryRun: boolean;
  readonly Image: DiskImageDetail;
  readonly Volume: VolumeDetail;
}

interface ImportVolumeResult {
  readonly ConversionTask: ConversionTask;
}

interface ImportVolumeTaskDetails {
  readonly AvailabilityZone: string;
  readonly BytesConverted: number;
  readonly Description: string;
  readonly Image: DiskImageDescription;
  readonly Volume: DiskImageVolumeDescription;
}

interface InferenceAcceleratorInfo {
  readonly Accelerators: [];
}

interface InferenceDeviceInfo {
  readonly Count: number;
  readonly Name: string;
  readonly Manufacturer: string;
}

interface Instance {
  readonly AmiLaunchIndex: number;
  readonly ImageId: string;
  readonly InstanceId: string;
  readonly InstanceType: string;
  readonly KernelId: string;
  readonly KeyName: string;
  readonly LaunchTime: Date;
  readonly Monitoring: Monitoring;
  readonly Placement: Placement;
  readonly Platform: string;
  readonly PrivateDnsName: string;
  readonly PrivateIpAddress: string;
  readonly ProductCodes: [];
  readonly PublicDnsName: string;
  readonly PublicIpAddress: string;
  readonly RamdiskId: string;
  readonly State: InstanceState;
  readonly StateTransitionReason: string;
  readonly SubnetId: string;
  readonly VpcId: string;
  readonly Architecture: string;
  readonly BlockDeviceMappings: [];
  readonly ClientToken: string;
  readonly EbsOptimized: boolean;
  readonly EnaSupport: boolean;
  readonly Hypervisor: string;
  readonly IamInstanceProfile: IamInstanceProfile;
  readonly InstanceLifecycle: string;
  readonly ElasticGpuAssociations: [];
  readonly ElasticInferenceAcceleratorAssociations: [];
  readonly NetworkInterfaces: [];
  readonly OutpostArn: string;
  readonly RootDeviceName: string;
  readonly RootDeviceType: string;
  readonly SecurityGroups: [];
  readonly SourceDestCheck: boolean;
  readonly SpotInstanceRequestId: string;
  readonly SriovNetSupport: string;
  readonly StateReason: StateReason;
  readonly Tags: [];
  readonly VirtualizationType: string;
  readonly CpuOptions: CpuOptions;
  readonly CapacityReservationId: string;
  readonly CapacityReservationSpecification: CapacityReservationSpecificationResponse;
  readonly HibernationOptions: HibernationOptions;
  readonly Licenses: [];
  readonly MetadataOptions: InstanceMetadataOptionsResponse;
  readonly EnclaveOptions: EnclaveOptions;
  readonly BootMode: string;
  readonly PlatformDetails: string;
  readonly UsageOperation: string;
  readonly UsageOperationUpdateTime: Date;
  readonly PrivateDnsNameOptions: PrivateDnsNameOptionsResponse;
  readonly Ipv6Address: string;
}

interface InstanceAttribute {
  readonly Groups: [];
  readonly BlockDeviceMappings: [];
  readonly DisableApiTermination: AttributeBooleanValue;
  readonly EnaSupport: AttributeBooleanValue;
  readonly EnclaveOptions: EnclaveOptions;
  readonly EbsOptimized: AttributeBooleanValue;
  readonly InstanceId: string;
  readonly InstanceInitiatedShutdownBehavior: AttributeValue;
  readonly InstanceType: AttributeValue;
  readonly KernelId: AttributeValue;
  readonly ProductCodes: [];
  readonly RamdiskId: AttributeValue;
  readonly RootDeviceName: AttributeValue;
  readonly SourceDestCheck: AttributeBooleanValue;
  readonly SriovNetSupport: AttributeValue;
  readonly UserData: AttributeValue;
}

interface InstanceBlockDeviceMapping {
  readonly DeviceName: string;
  readonly Ebs: EbsInstanceBlockDevice;
}

interface InstanceBlockDeviceMappingSpecification {
  readonly DeviceName: string;
  readonly Ebs: EbsInstanceBlockDeviceSpecification;
  readonly NoDevice: string;
  readonly VirtualName: string;
}

interface InstanceCapacity {
  readonly AvailableCapacity: number;
  readonly InstanceType: string;
  readonly TotalCapacity: number;
}

interface InstanceCount {
  readonly InstanceCount: number;
  readonly State: string;
}

interface InstanceCreditSpecification {
  readonly InstanceId: string;
  readonly CpuCredits: string;
}

interface InstanceCreditSpecificationRequest {
  readonly InstanceId: string;
  readonly CpuCredits: string;
}

interface InstanceEventWindow {
  readonly InstanceEventWindowId: string;
  readonly TimeRanges: [];
  readonly Name: string;
  readonly CronExpression: string;
  readonly AssociationTarget: InstanceEventWindowAssociationTarget;
  readonly State: string;
  readonly Tags: [];
}

interface InstanceEventWindowAssociationRequest {
  readonly InstanceIds: [];
  readonly InstanceTags: [];
  readonly DedicatedHostIds: [];
}

interface InstanceEventWindowAssociationTarget {
  readonly InstanceIds: [];
  readonly Tags: [];
  readonly DedicatedHostIds: [];
}

interface InstanceEventWindowDisassociationRequest {
  readonly InstanceIds: [];
  readonly InstanceTags: [];
  readonly DedicatedHostIds: [];
}

interface InstanceEventWindowStateChange {
  readonly InstanceEventWindowId: string;
  readonly State: string;
}

interface InstanceEventWindowTimeRange {
  readonly StartWeekDay: string;
  readonly StartHour: number;
  readonly EndWeekDay: string;
  readonly EndHour: number;
}

interface InstanceEventWindowTimeRangeRequest {
  readonly StartWeekDay: string;
  readonly StartHour: number;
  readonly EndWeekDay: string;
  readonly EndHour: number;
}

interface InstanceExportDetails {
  readonly InstanceId: string;
  readonly TargetEnvironment: string;
}

interface InstanceFamilyCreditSpecification {
  readonly InstanceFamily: string;
  readonly CpuCredits: string;
}

interface InstanceIpv4Prefix {
  readonly Ipv4Prefix: string;
}

interface InstanceIpv6Address {
  readonly Ipv6Address: string;
}

interface InstanceIpv6AddressRequest {
  readonly Ipv6Address: string;
}

interface InstanceIpv6Prefix {
  readonly Ipv6Prefix: string;
}

interface InstanceMarketOptionsRequest {
  readonly MarketType: string;
  readonly SpotOptions: SpotMarketOptions;
}

interface InstanceMetadataOptionsRequest {
  readonly HttpTokens: string;
  readonly HttpPutResponseHopLimit: number;
  readonly HttpEndpoint: string;
  readonly HttpProtocolIpv6: string;
}

interface InstanceMetadataOptionsResponse {
  readonly State: string;
  readonly HttpTokens: string;
  readonly HttpPutResponseHopLimit: number;
  readonly HttpEndpoint: string;
  readonly HttpProtocolIpv6: string;
}

interface InstanceMonitoring {
  readonly InstanceId: string;
  readonly Monitoring: Monitoring;
}

interface InstanceNetworkInterface {
  readonly Association: InstanceNetworkInterfaceAssociation;
  readonly Attachment: InstanceNetworkInterfaceAttachment;
  readonly Description: string;
  readonly Groups: [];
  readonly Ipv6Addresses: [];
  readonly MacAddress: string;
  readonly NetworkInterfaceId: string;
  readonly OwnerId: string;
  readonly PrivateDnsName: string;
  readonly PrivateIpAddress: string;
  readonly PrivateIpAddresses: [];
  readonly SourceDestCheck: boolean;
  readonly Status: string;
  readonly SubnetId: string;
  readonly VpcId: string;
  readonly InterfaceType: string;
  readonly Ipv4Prefixes: [];
  readonly Ipv6Prefixes: [];
}

interface InstanceNetworkInterfaceAssociation {
  readonly CarrierIp: string;
  readonly CustomerOwnedIp: string;
  readonly IpOwnerId: string;
  readonly PublicDnsName: string;
  readonly PublicIp: string;
}

interface InstanceNetworkInterfaceAttachment {
  readonly AttachTime: Date;
  readonly AttachmentId: string;
  readonly DeleteOnTermination: boolean;
  readonly DeviceIndex: number;
  readonly Status: string;
  readonly NetworkCardIndex: number;
}

interface InstanceNetworkInterfaceSpecification {
  readonly AssociatePublicIpAddress: boolean;
  readonly DeleteOnTermination: boolean;
  readonly Description: string;
  readonly DeviceIndex: number;
  readonly Groups: [];
  readonly Ipv6AddressCount: number;
  readonly Ipv6Addresses: [];
  readonly NetworkInterfaceId: string;
  readonly PrivateIpAddress: string;
  readonly PrivateIpAddresses: [];
  readonly SecondaryPrivateIpAddressCount: number;
  readonly SubnetId: string;
  readonly AssociateCarrierIpAddress: boolean;
  readonly InterfaceType: string;
  readonly NetworkCardIndex: number;
  readonly Ipv4Prefixes: [];
  readonly Ipv4PrefixCount: number;
  readonly Ipv6Prefixes: [];
  readonly Ipv6PrefixCount: number;
}

interface InstancePrivateIpAddress {
  readonly Association: InstanceNetworkInterfaceAssociation;
  readonly Primary: boolean;
  readonly PrivateDnsName: string;
  readonly PrivateIpAddress: string;
}

interface InstanceRequirements {
  readonly VCpuCount: VCpuCountRange;
  readonly MemoryMiB: MemoryMiB;
  readonly CpuManufacturers: [];
  readonly MemoryGiBPerVCpu: MemoryGiBPerVCpu;
  readonly ExcludedInstanceTypes: [];
  readonly InstanceGenerations: [];
  readonly SpotMaxPricePercentageOverLowestPrice: number;
  readonly OnDemandMaxPricePercentageOverLowestPrice: number;
  readonly BareMetal: string;
  readonly BurstablePerformance: string;
  readonly RequireHibernateSupport: boolean;
  readonly NetworkInterfaceCount: NetworkInterfaceCount;
  readonly LocalStorage: string;
  readonly LocalStorageTypes: [];
  readonly TotalLocalStorageGB: TotalLocalStorageGB;
  readonly BaselineEbsBandwidthMbps: BaselineEbsBandwidthMbps;
  readonly AcceleratorTypes: [];
  readonly AcceleratorCount: AcceleratorCount;
  readonly AcceleratorManufacturers: [];
  readonly AcceleratorNames: [];
  readonly AcceleratorTotalMemoryMiB: AcceleratorTotalMemoryMiB;
}

interface InstanceRequirementsRequest {
  readonly VCpuCount: VCpuCountRangeRequest;
  readonly MemoryMiB: MemoryMiBRequest;
  readonly CpuManufacturers: [];
  readonly MemoryGiBPerVCpu: MemoryGiBPerVCpuRequest;
  readonly ExcludedInstanceTypes: [];
  readonly InstanceGenerations: [];
  readonly SpotMaxPricePercentageOverLowestPrice: number;
  readonly OnDemandMaxPricePercentageOverLowestPrice: number;
  readonly BareMetal: string;
  readonly BurstablePerformance: string;
  readonly RequireHibernateSupport: boolean;
  readonly NetworkInterfaceCount: NetworkInterfaceCountRequest;
  readonly LocalStorage: string;
  readonly LocalStorageTypes: [];
  readonly TotalLocalStorageGB: TotalLocalStorageGBRequest;
  readonly BaselineEbsBandwidthMbps: BaselineEbsBandwidthMbpsRequest;
  readonly AcceleratorTypes: [];
  readonly AcceleratorCount: AcceleratorCountRequest;
  readonly AcceleratorManufacturers: [];
  readonly AcceleratorNames: [];
  readonly AcceleratorTotalMemoryMiB: AcceleratorTotalMemoryMiBRequest;
}

interface InstanceRequirementsWithMetadataRequest {
  readonly ArchitectureTypes: [];
  readonly VirtualizationTypes: [];
  readonly InstanceRequirements: InstanceRequirementsRequest;
}

interface InstanceSpecification {
  readonly InstanceId: string;
  readonly ExcludeBootVolume: boolean;
}

interface InstanceState {
  readonly Code: number;
  readonly Name: string;
}

interface InstanceStateChange {
  readonly CurrentState: InstanceState;
  readonly InstanceId: string;
  readonly PreviousState: InstanceState;
}

interface InstanceStatus {
  readonly AvailabilityZone: string;
  readonly OutpostArn: string;
  readonly Events: [];
  readonly InstanceId: string;
  readonly InstanceState: InstanceState;
  readonly InstanceStatus: InstanceStatusSummary;
  readonly SystemStatus: InstanceStatusSummary;
}

interface InstanceStatusDetails {
  readonly ImpairedSince: Date;
  readonly Name: string;
  readonly Status: string;
}

interface InstanceStatusEvent {
  readonly InstanceEventId: string;
  readonly Code: string;
  readonly Description: string;
  readonly NotAfter: Date;
  readonly NotBefore: Date;
  readonly NotBeforeDeadline: Date;
}

interface InstanceStatusSummary {
  readonly Details: [];
  readonly Status: string;
}

interface InstanceStorageInfo {
  readonly TotalSizeInGB: number;
  readonly Disks: [];
  readonly NvmeSupport: string;
  readonly EncryptionSupport: string;
}

interface InstanceTagNotificationAttribute {
  readonly InstanceTagKeys: [];
  readonly IncludeAllTagsOfInstance: boolean;
}

interface InstanceTypeInfo {
  readonly InstanceType: string;
  readonly CurrentGeneration: boolean;
  readonly FreeTierEligible: boolean;
  readonly SupportedUsageClasses: [];
  readonly SupportedRootDeviceTypes: [];
  readonly SupportedVirtualizationTypes: [];
  readonly BareMetal: boolean;
  readonly Hypervisor: string;
  readonly ProcessorInfo: ProcessorInfo;
  readonly VCpuInfo: VCpuInfo;
  readonly MemoryInfo: MemoryInfo;
  readonly InstanceStorageSupported: boolean;
  readonly InstanceStorageInfo: InstanceStorageInfo;
  readonly EbsInfo: EbsInfo;
  readonly NetworkInfo: NetworkInfo;
  readonly GpuInfo: GpuInfo;
  readonly FpgaInfo: FpgaInfo;
  readonly PlacementGroupInfo: PlacementGroupInfo;
  readonly InferenceAcceleratorInfo: InferenceAcceleratorInfo;
  readonly HibernationSupported: boolean;
  readonly BurstablePerformanceSupported: boolean;
  readonly DedicatedHostsSupported: boolean;
  readonly AutoRecoverySupported: boolean;
  readonly SupportedBootModes: [];
}

interface InstanceTypeInfoFromInstanceRequirements {
  readonly InstanceType: string;
}

interface InstanceTypeOffering {
  readonly InstanceType: string;
  readonly LocationType: string;
  readonly Location: string;
}

interface InstanceUsage {
  readonly AccountId: string;
  readonly UsedInstanceCount: number;
}

interface IntegrateServices {
  readonly AthenaIntegrations: [];
}

interface InternetGateway {
  readonly Attachments: [];
  readonly InternetGatewayId: string;
  readonly OwnerId: string;
  readonly Tags: [];
}

interface InternetGatewayAttachment {
  readonly State: string;
  readonly VpcId: string;
}

interface IpPermission {
  readonly FromPort: number;
  readonly IpProtocol: string;
  readonly IpRanges: [];
  readonly Ipv6Ranges: [];
  readonly PrefixListIds: [];
  readonly ToPort: number;
  readonly UserIdGroupPairs: [];
}

interface IpRange {
  readonly CidrIp: string;
  readonly Description: string;
}

interface Ipam {
  readonly OwnerId: string;
  readonly IpamId: string;
  readonly IpamArn: string;
  readonly IpamRegion: string;
  readonly PublicDefaultScopeId: string;
  readonly PrivateDefaultScopeId: string;
  readonly ScopeCount: number;
  readonly Description: string;
  readonly OperatingRegions: [];
  readonly State: string;
  readonly Tags: [];
}

interface IpamAddressHistoryRecord {
  readonly ResourceOwnerId: string;
  readonly ResourceRegion: string;
  readonly ResourceType: string;
  readonly ResourceId: string;
  readonly ResourceCidr: string;
  readonly ResourceName: string;
  readonly ResourceComplianceStatus: string;
  readonly ResourceOverlapStatus: string;
  readonly VpcId: string;
  readonly SampledStartTime: Date;
  readonly SampledEndTime: Date;
}

interface IpamCidrAuthorizationContext {
  readonly Message: string;
  readonly Signature: string;
}

interface IpamOperatingRegion {
  readonly RegionName: string;
}

interface IpamPool {
  readonly OwnerId: string;
  readonly IpamPoolId: string;
  readonly SourceIpamPoolId: string;
  readonly IpamPoolArn: string;
  readonly IpamScopeArn: string;
  readonly IpamScopeType: string;
  readonly IpamArn: string;
  readonly IpamRegion: string;
  readonly Locale: string;
  readonly PoolDepth: number;
  readonly State: string;
  readonly StateMessage: string;
  readonly Description: string;
  readonly AutoImport: boolean;
  readonly PubliclyAdvertisable: boolean;
  readonly AddressFamily: string;
  readonly AllocationMinNetmaskLength: number;
  readonly AllocationMaxNetmaskLength: number;
  readonly AllocationDefaultNetmaskLength: number;
  readonly AllocationResourceTags: [];
  readonly Tags: [];
  readonly AwsService: string;
}

interface IpamPoolAllocation {
  readonly Cidr: string;
  readonly IpamPoolAllocationId: string;
  readonly Description: string;
  readonly ResourceId: string;
  readonly ResourceType: string;
  readonly ResourceRegion: string;
  readonly ResourceOwner: string;
}

interface IpamPoolCidr {
  readonly Cidr: string;
  readonly State: string;
  readonly FailureReason: IpamPoolCidrFailureReason;
}

interface IpamPoolCidrFailureReason {
  readonly Code: string;
  readonly Message: string;
}

interface IpamResourceCidr {
  readonly IpamId: string;
  readonly IpamScopeId: string;
  readonly IpamPoolId: string;
  readonly ResourceRegion: string;
  readonly ResourceOwnerId: string;
  readonly ResourceId: string;
  readonly ResourceName: string;
  readonly ResourceCidr: string;
  readonly ResourceType: string;
  readonly ResourceTags: [];
  readonly IpUsage: unknown;
  readonly ComplianceStatus: string;
  readonly ManagementState: string;
  readonly OverlapStatus: string;
  readonly VpcId: string;
}

interface IpamResourceTag {
  readonly Key: string;
  readonly Value: string;
}

interface IpamScope {
  readonly OwnerId: string;
  readonly IpamScopeId: string;
  readonly IpamScopeArn: string;
  readonly IpamArn: string;
  readonly IpamRegion: string;
  readonly IpamScopeType: string;
  readonly IsDefault: boolean;
  readonly Description: string;
  readonly PoolCount: number;
  readonly State: string;
  readonly Tags: [];
}

interface Ipv4PrefixSpecification {
  readonly Ipv4Prefix: string;
}

interface Ipv4PrefixSpecificationRequest {
  readonly Ipv4Prefix: string;
}

interface Ipv4PrefixSpecificationResponse {
  readonly Ipv4Prefix: string;
}

interface Ipv6CidrAssociation {
  readonly Ipv6Cidr: string;
  readonly AssociatedResource: string;
}

interface Ipv6CidrBlock {
  readonly Ipv6CidrBlock: string;
}

interface Ipv6Pool {
  readonly PoolId: string;
  readonly Description: string;
  readonly PoolCidrBlocks: [];
  readonly Tags: [];
}

interface Ipv6PrefixSpecification {
  readonly Ipv6Prefix: string;
}

interface Ipv6PrefixSpecificationRequest {
  readonly Ipv6Prefix: string;
}

interface Ipv6PrefixSpecificationResponse {
  readonly Ipv6Prefix: string;
}

interface Ipv6Range {
  readonly CidrIpv6: string;
  readonly Description: string;
}

interface KeyPair {
  readonly KeyFingerprint: string;
  readonly KeyMaterial: string;
  readonly KeyName: string;
  readonly KeyPairId: string;
  readonly Tags: [];
}

interface KeyPairInfo {
  readonly KeyPairId: string;
  readonly KeyFingerprint: string;
  readonly KeyName: string;
  readonly KeyType: string;
  readonly Tags: [];
}

interface LastError {
  readonly Message: string;
  readonly Code: string;
}

interface LaunchPermission {
  readonly Group: string;
  readonly UserId: string;
  readonly OrganizationArn: string;
  readonly OrganizationalUnitArn: string;
}

interface LaunchPermissionModifications {
  readonly Add: [];
  readonly Remove: [];
}

interface LaunchSpecification {
  readonly UserData: string;
  readonly SecurityGroups: [];
  readonly AddressingType: string;
  readonly BlockDeviceMappings: [];
  readonly EbsOptimized: boolean;
  readonly IamInstanceProfile: IamInstanceProfileSpecification;
  readonly ImageId: string;
  readonly InstanceType: string;
  readonly KernelId: string;
  readonly KeyName: string;
  readonly NetworkInterfaces: [];
  readonly Placement: SpotPlacement;
  readonly RamdiskId: string;
  readonly SubnetId: string;
  readonly Monitoring: RunInstancesMonitoringEnabled;
}

interface LaunchTemplate {
  readonly LaunchTemplateId: string;
  readonly LaunchTemplateName: string;
  readonly CreateTime: Date;
  readonly CreatedBy: string;
  readonly DefaultVersionNumber: number;
  readonly LatestVersionNumber: number;
  readonly Tags: [];
}

interface LaunchTemplateAndOverridesResponse {
  readonly LaunchTemplateSpecification: FleetLaunchTemplateSpecification;
  readonly Overrides: FleetLaunchTemplateOverrides;
}

interface LaunchTemplateBlockDeviceMapping {
  readonly DeviceName: string;
  readonly VirtualName: string;
  readonly Ebs: LaunchTemplateEbsBlockDevice;
  readonly NoDevice: string;
}

interface LaunchTemplateBlockDeviceMappingRequest {
  readonly DeviceName: string;
  readonly VirtualName: string;
  readonly Ebs: LaunchTemplateEbsBlockDeviceRequest;
  readonly NoDevice: string;
}

interface LaunchTemplateCapacityReservationSpecificationRequest {
  readonly CapacityReservationPreference: string;
  readonly CapacityReservationTarget: CapacityReservationTarget;
}

interface LaunchTemplateCapacityReservationSpecificationResponse {
  readonly CapacityReservationPreference: string;
  readonly CapacityReservationTarget: CapacityReservationTargetResponse;
}

interface LaunchTemplateConfig {
  readonly LaunchTemplateSpecification: FleetLaunchTemplateSpecification;
  readonly Overrides: [];
}

interface LaunchTemplateCpuOptions {
  readonly CoreCount: number;
  readonly ThreadsPerCore: number;
}

interface LaunchTemplateCpuOptionsRequest {
  readonly CoreCount: number;
  readonly ThreadsPerCore: number;
}

interface LaunchTemplateEbsBlockDevice {
  readonly Encrypted: boolean;
  readonly DeleteOnTermination: boolean;
  readonly Iops: number;
  readonly KmsKeyId: string;
  readonly SnapshotId: string;
  readonly VolumeSize: number;
  readonly VolumeType: string;
  readonly Throughput: number;
}

interface LaunchTemplateEbsBlockDeviceRequest {
  readonly Encrypted: boolean;
  readonly DeleteOnTermination: boolean;
  readonly Iops: number;
  readonly KmsKeyId: string;
  readonly SnapshotId: string;
  readonly VolumeSize: number;
  readonly VolumeType: string;
  readonly Throughput: number;
}

interface LaunchTemplateElasticInferenceAccelerator {
  readonly Type: string;
  readonly Count: number;
}

interface LaunchTemplateElasticInferenceAcceleratorResponse {
  readonly Type: string;
  readonly Count: number;
}

interface LaunchTemplateEnclaveOptions {
  readonly Enabled: boolean;
}

interface LaunchTemplateEnclaveOptionsRequest {
  readonly Enabled: boolean;
}

interface LaunchTemplateHibernationOptions {
  readonly Configured: boolean;
}

interface LaunchTemplateHibernationOptionsRequest {
  readonly Configured: boolean;
}

interface LaunchTemplateIamInstanceProfileSpecification {
  readonly Arn: string;
  readonly Name: string;
}

interface LaunchTemplateIamInstanceProfileSpecificationRequest {
  readonly Arn: string;
  readonly Name: string;
}

interface LaunchTemplateInstanceMarketOptions {
  readonly MarketType: string;
  readonly SpotOptions: LaunchTemplateSpotMarketOptions;
}

interface LaunchTemplateInstanceMarketOptionsRequest {
  readonly MarketType: string;
  readonly SpotOptions: LaunchTemplateSpotMarketOptionsRequest;
}

interface LaunchTemplateInstanceMetadataOptions {
  readonly State: string;
  readonly HttpTokens: string;
  readonly HttpPutResponseHopLimit: number;
  readonly HttpEndpoint: string;
  readonly HttpProtocolIpv6: string;
}

interface LaunchTemplateInstanceMetadataOptionsRequest {
  readonly HttpTokens: string;
  readonly HttpPutResponseHopLimit: number;
  readonly HttpEndpoint: string;
  readonly HttpProtocolIpv6: string;
}

interface LaunchTemplateInstanceNetworkInterfaceSpecification {
  readonly AssociateCarrierIpAddress: boolean;
  readonly AssociatePublicIpAddress: boolean;
  readonly DeleteOnTermination: boolean;
  readonly Description: string;
  readonly DeviceIndex: number;
  readonly Groups: [];
  readonly InterfaceType: string;
  readonly Ipv6AddressCount: number;
  readonly Ipv6Addresses: [];
  readonly NetworkInterfaceId: string;
  readonly PrivateIpAddress: string;
  readonly PrivateIpAddresses: [];
  readonly SecondaryPrivateIpAddressCount: number;
  readonly SubnetId: string;
  readonly NetworkCardIndex: number;
  readonly Ipv4Prefixes: [];
  readonly Ipv4PrefixCount: number;
  readonly Ipv6Prefixes: [];
  readonly Ipv6PrefixCount: number;
}

interface LaunchTemplateInstanceNetworkInterfaceSpecificationRequest {
  readonly AssociateCarrierIpAddress: boolean;
  readonly AssociatePublicIpAddress: boolean;
  readonly DeleteOnTermination: boolean;
  readonly Description: string;
  readonly DeviceIndex: number;
  readonly Groups: [];
  readonly InterfaceType: string;
  readonly Ipv6AddressCount: number;
  readonly Ipv6Addresses: [];
  readonly NetworkInterfaceId: string;
  readonly PrivateIpAddress: string;
  readonly PrivateIpAddresses: [];
  readonly SecondaryPrivateIpAddressCount: number;
  readonly SubnetId: string;
  readonly NetworkCardIndex: number;
  readonly Ipv4Prefixes: [];
  readonly Ipv4PrefixCount: number;
  readonly Ipv6Prefixes: [];
  readonly Ipv6PrefixCount: number;
}

interface LaunchTemplateLicenseConfiguration {
  readonly LicenseConfigurationArn: string;
}

interface LaunchTemplateLicenseConfigurationRequest {
  readonly LicenseConfigurationArn: string;
}

interface LaunchTemplateOverrides {
  readonly InstanceType: string;
  readonly SpotPrice: string;
  readonly SubnetId: string;
  readonly AvailabilityZone: string;
  readonly WeightedCapacity: unknown;
  readonly Priority: unknown;
  readonly InstanceRequirements: InstanceRequirements;
}

interface LaunchTemplatePlacement {
  readonly AvailabilityZone: string;
  readonly Affinity: string;
  readonly GroupName: string;
  readonly HostId: string;
  readonly Tenancy: string;
  readonly SpreadDomain: string;
  readonly HostResourceGroupArn: string;
  readonly PartitionNumber: number;
}

interface LaunchTemplatePlacementRequest {
  readonly AvailabilityZone: string;
  readonly Affinity: string;
  readonly GroupName: string;
  readonly HostId: string;
  readonly Tenancy: string;
  readonly SpreadDomain: string;
  readonly HostResourceGroupArn: string;
  readonly PartitionNumber: number;
}

interface LaunchTemplatePrivateDnsNameOptions {
  readonly HostnameType: string;
  readonly EnableResourceNameDnsARecord: boolean;
  readonly EnableResourceNameDnsAAAARecord: boolean;
}

interface LaunchTemplatePrivateDnsNameOptionsRequest {
  readonly HostnameType: string;
  readonly EnableResourceNameDnsARecord: boolean;
  readonly EnableResourceNameDnsAAAARecord: boolean;
}

interface LaunchTemplateSpecification {
  readonly LaunchTemplateId: string;
  readonly LaunchTemplateName: string;
  readonly Version: string;
}

interface LaunchTemplateSpotMarketOptions {
  readonly MaxPrice: string;
  readonly SpotInstanceType: string;
  readonly BlockDurationMinutes: number;
  readonly ValidUntil: Date;
  readonly InstanceInterruptionBehavior: string;
}

interface LaunchTemplateSpotMarketOptionsRequest {
  readonly MaxPrice: string;
  readonly SpotInstanceType: string;
  readonly BlockDurationMinutes: number;
  readonly ValidUntil: Date;
  readonly InstanceInterruptionBehavior: string;
}

interface LaunchTemplateTagSpecification {
  readonly ResourceType: string;
  readonly Tags: [];
}

interface LaunchTemplateTagSpecificationRequest {
  readonly ResourceType: string;
  readonly Tags: [];
}

interface LaunchTemplateVersion {
  readonly LaunchTemplateId: string;
  readonly LaunchTemplateName: string;
  readonly VersionNumber: number;
  readonly VersionDescription: string;
  readonly CreateTime: Date;
  readonly CreatedBy: string;
  readonly DefaultVersion: boolean;
  readonly LaunchTemplateData: ResponseLaunchTemplateData;
}

interface LaunchTemplatesMonitoring {
  readonly Enabled: boolean;
}

interface LaunchTemplatesMonitoringRequest {
  readonly Enabled: boolean;
}

interface LicenseConfiguration {
  readonly LicenseConfigurationArn: string;
}

interface LicenseConfigurationRequest {
  readonly LicenseConfigurationArn: string;
}

interface ListSnapshotsInRecycleBinRequest {
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly SnapshotIds: [];
  readonly DryRun: boolean;
}

interface ListSnapshotsInRecycleBinResult {
  readonly Snapshots: [];
  readonly NextToken: string;
}

interface LoadBalancersConfig {
  readonly ClassicLoadBalancersConfig: ClassicLoadBalancersConfig;
  readonly TargetGroupsConfig: TargetGroupsConfig;
}

interface LoadPermission {
  readonly UserId: string;
  readonly Group: string;
}

interface LoadPermissionModifications {
  readonly Add: [];
  readonly Remove: [];
}

interface LoadPermissionRequest {
  readonly Group: string;
  readonly UserId: string;
}

interface LocalGateway {
  readonly LocalGatewayId: string;
  readonly OutpostArn: string;
  readonly OwnerId: string;
  readonly State: string;
  readonly Tags: [];
}

interface LocalGatewayRoute {
  readonly DestinationCidrBlock: string;
  readonly LocalGatewayVirtualInterfaceGroupId: string;
  readonly Type: string;
  readonly State: string;
  readonly LocalGatewayRouteTableId: string;
  readonly LocalGatewayRouteTableArn: string;
  readonly OwnerId: string;
}

interface LocalGatewayRouteTable {
  readonly LocalGatewayRouteTableId: string;
  readonly LocalGatewayRouteTableArn: string;
  readonly LocalGatewayId: string;
  readonly OutpostArn: string;
  readonly OwnerId: string;
  readonly State: string;
  readonly Tags: [];
}

interface LocalGatewayRouteTableVirtualInterfaceGroupAssociation {
  readonly LocalGatewayRouteTableVirtualInterfaceGroupAssociationId: string;
  readonly LocalGatewayVirtualInterfaceGroupId: string;
  readonly LocalGatewayId: string;
  readonly LocalGatewayRouteTableId: string;
  readonly LocalGatewayRouteTableArn: string;
  readonly OwnerId: string;
  readonly State: string;
  readonly Tags: [];
}

interface LocalGatewayRouteTableVpcAssociation {
  readonly LocalGatewayRouteTableVpcAssociationId: string;
  readonly LocalGatewayRouteTableId: string;
  readonly LocalGatewayRouteTableArn: string;
  readonly LocalGatewayId: string;
  readonly VpcId: string;
  readonly OwnerId: string;
  readonly State: string;
  readonly Tags: [];
}

interface LocalGatewayVirtualInterface {
  readonly LocalGatewayVirtualInterfaceId: string;
  readonly LocalGatewayId: string;
  readonly Vlan: number;
  readonly LocalAddress: string;
  readonly PeerAddress: string;
  readonly LocalBgpAsn: number;
  readonly PeerBgpAsn: number;
  readonly OwnerId: string;
  readonly Tags: [];
}

interface LocalGatewayVirtualInterfaceGroup {
  readonly LocalGatewayVirtualInterfaceGroupId: string;
  readonly LocalGatewayVirtualInterfaceIds: [];
  readonly LocalGatewayId: string;
  readonly OwnerId: string;
  readonly Tags: [];
}

interface ManagedPrefixList {
  readonly PrefixListId: string;
  readonly AddressFamily: string;
  readonly State: string;
  readonly StateMessage: string;
  readonly PrefixListArn: string;
  readonly PrefixListName: string;
  readonly MaxEntries: number;
  readonly Version: number;
  readonly Tags: [];
  readonly OwnerId: string;
}

interface MemoryGiBPerVCpu {
  readonly Min: unknown;
  readonly Max: unknown;
}

interface MemoryGiBPerVCpuRequest {
  readonly Min: unknown;
  readonly Max: unknown;
}

interface MemoryInfo {
  readonly SizeInMiB: number;
}

interface MemoryMiB {
  readonly Min: number;
  readonly Max: number;
}

interface MemoryMiBRequest {
  readonly Min: number;
  readonly Max: number;
}

interface ModifyAddressAttributeRequest {
  readonly AllocationId: string;
  readonly DomainName: string;
  readonly DryRun: boolean;
}

interface ModifyAddressAttributeResult {
  readonly Address: AddressAttribute;
}

interface ModifyAvailabilityZoneGroupRequest {
  readonly GroupName: string;
  readonly OptInStatus: string;
  readonly DryRun: boolean;
}

interface ModifyAvailabilityZoneGroupResult {
  readonly Return: boolean;
}

interface ModifyCapacityReservationFleetRequest {
  readonly CapacityReservationFleetId: string;
  readonly TotalTargetCapacity: number;
  readonly EndDate: Date;
  readonly DryRun: boolean;
  readonly RemoveEndDate: boolean;
}

interface ModifyCapacityReservationFleetResult {
  readonly Return: boolean;
}

interface ModifyCapacityReservationRequest {
  readonly CapacityReservationId: string;
  readonly InstanceCount: number;
  readonly EndDate: Date;
  readonly EndDateType: string;
  readonly Accept: boolean;
  readonly DryRun: boolean;
  readonly AdditionalInfo: string;
}

interface ModifyCapacityReservationResult {
  readonly Return: boolean;
}

interface ModifyClientVpnEndpointRequest {
  readonly ClientVpnEndpointId: string;
  readonly ServerCertificateArn: string;
  readonly ConnectionLogOptions: ConnectionLogOptions;
  readonly DnsServers: DnsServersOptionsModifyStructure;
  readonly VpnPort: number;
  readonly Description: string;
  readonly SplitTunnel: boolean;
  readonly DryRun: boolean;
  readonly SecurityGroupIds: [];
  readonly VpcId: string;
  readonly SelfServicePortal: string;
  readonly ClientConnectOptions: ClientConnectOptions;
}

interface ModifyClientVpnEndpointResult {
  readonly Return: boolean;
}

interface ModifyDefaultCreditSpecificationRequest {
  readonly DryRun: boolean;
  readonly InstanceFamily: string;
  readonly CpuCredits: string;
}

interface ModifyDefaultCreditSpecificationResult {
  readonly InstanceFamilyCreditSpecification: InstanceFamilyCreditSpecification;
}

interface ModifyEbsDefaultKmsKeyIdRequest {
  readonly KmsKeyId: string;
  readonly DryRun: boolean;
}

interface ModifyEbsDefaultKmsKeyIdResult {
  readonly KmsKeyId: string;
}

interface ModifyFleetRequest {
  readonly DryRun: boolean;
  readonly ExcessCapacityTerminationPolicy: string;
  readonly LaunchTemplateConfigs: [];
  readonly FleetId: string;
  readonly TargetCapacitySpecification: TargetCapacitySpecificationRequest;
  readonly Context: string;
}

interface ModifyFleetResult {
  readonly Return: boolean;
}

interface ModifyFpgaImageAttributeRequest {
  readonly DryRun: boolean;
  readonly FpgaImageId: string;
  readonly Attribute: string;
  readonly OperationType: string;
  readonly UserIds: [];
  readonly UserGroups: [];
  readonly ProductCodes: [];
  readonly LoadPermission: LoadPermissionModifications;
  readonly Description: string;
  readonly Name: string;
}

interface ModifyFpgaImageAttributeResult {
  readonly FpgaImageAttribute: FpgaImageAttribute;
}

interface ModifyHostsRequest {
  readonly AutoPlacement: string;
  readonly HostIds: [];
  readonly HostRecovery: string;
  readonly InstanceType: string;
  readonly InstanceFamily: string;
}

interface ModifyHostsResult {
  readonly Successful: [];
  readonly Unsuccessful: [];
}

interface ModifyIdFormatRequest {
  readonly Resource: string;
  readonly UseLongIds: boolean;
}

interface ModifyIdentityIdFormatRequest {
  readonly PrincipalArn: string;
  readonly Resource: string;
  readonly UseLongIds: boolean;
}

interface ModifyImageAttributeRequest {
  readonly Attribute: string;
  readonly Description: AttributeValue;
  readonly ImageId: string;
  readonly LaunchPermission: LaunchPermissionModifications;
  readonly OperationType: string;
  readonly ProductCodes: [];
  readonly UserGroups: [];
  readonly UserIds: [];
  readonly Value: string;
  readonly DryRun: boolean;
  readonly OrganizationArns: [];
  readonly OrganizationalUnitArns: [];
}

interface ModifyInstanceAttributeRequest {
  readonly SourceDestCheck: AttributeBooleanValue;
  readonly Attribute: string;
  readonly BlockDeviceMappings: [];
  readonly DisableApiTermination: AttributeBooleanValue;
  readonly DryRun: boolean;
  readonly EbsOptimized: AttributeBooleanValue;
  readonly EnaSupport: AttributeBooleanValue;
  readonly Groups: [];
  readonly InstanceId: string;
  readonly InstanceInitiatedShutdownBehavior: AttributeValue;
  readonly InstanceType: AttributeValue;
  readonly Kernel: AttributeValue;
  readonly Ramdisk: AttributeValue;
  readonly SriovNetSupport: AttributeValue;
  readonly UserData: BlobAttributeValue;
  readonly Value: string;
}

interface ModifyInstanceCapacityReservationAttributesRequest {
  readonly InstanceId: string;
  readonly CapacityReservationSpecification: CapacityReservationSpecification;
  readonly DryRun: boolean;
}

interface ModifyInstanceCapacityReservationAttributesResult {
  readonly Return: boolean;
}

interface ModifyInstanceCreditSpecificationRequest {
  readonly DryRun: boolean;
  readonly ClientToken: string;
  readonly InstanceCreditSpecifications: [];
}

interface ModifyInstanceCreditSpecificationResult {
  readonly SuccessfulInstanceCreditSpecifications: [];
  readonly UnsuccessfulInstanceCreditSpecifications: [];
}

interface ModifyInstanceEventStartTimeRequest {
  readonly DryRun: boolean;
  readonly InstanceId: string;
  readonly InstanceEventId: string;
  readonly NotBefore: Date;
}

interface ModifyInstanceEventStartTimeResult {
  readonly Event: InstanceStatusEvent;
}

interface ModifyInstanceEventWindowRequest {
  readonly DryRun: boolean;
  readonly Name: string;
  readonly InstanceEventWindowId: string;
  readonly TimeRanges: [];
  readonly CronExpression: string;
}

interface ModifyInstanceEventWindowResult {
  readonly InstanceEventWindow: InstanceEventWindow;
}

interface ModifyInstanceMetadataOptionsRequest {
  readonly InstanceId: string;
  readonly HttpTokens: string;
  readonly HttpPutResponseHopLimit: number;
  readonly HttpEndpoint: string;
  readonly DryRun: boolean;
  readonly HttpProtocolIpv6: string;
}

interface ModifyInstanceMetadataOptionsResult {
  readonly InstanceId: string;
  readonly InstanceMetadataOptions: InstanceMetadataOptionsResponse;
}

interface ModifyInstancePlacementRequest {
  readonly Affinity: string;
  readonly GroupName: string;
  readonly HostId: string;
  readonly InstanceId: string;
  readonly Tenancy: string;
  readonly PartitionNumber: number;
  readonly HostResourceGroupArn: string;
}

interface ModifyInstancePlacementResult {
  readonly Return: boolean;
}

interface ModifyIpamPoolRequest {
  readonly DryRun: boolean;
  readonly IpamPoolId: string;
  readonly Description: string;
  readonly AutoImport: boolean;
  readonly AllocationMinNetmaskLength: number;
  readonly AllocationMaxNetmaskLength: number;
  readonly AllocationDefaultNetmaskLength: number;
  readonly ClearAllocationDefaultNetmaskLength: boolean;
  readonly AddAllocationResourceTags: [];
  readonly RemoveAllocationResourceTags: [];
}

interface ModifyIpamPoolResult {
  readonly IpamPool: IpamPool;
}

interface ModifyIpamRequest {
  readonly DryRun: boolean;
  readonly IpamId: string;
  readonly Description: string;
  readonly AddOperatingRegions: [];
  readonly RemoveOperatingRegions: [];
}

interface ModifyIpamResourceCidrRequest {
  readonly DryRun: boolean;
  readonly ResourceId: string;
  readonly ResourceCidr: string;
  readonly ResourceRegion: string;
  readonly CurrentIpamScopeId: string;
  readonly DestinationIpamScopeId: string;
  readonly Monitored: boolean;
}

interface ModifyIpamResourceCidrResult {
  readonly IpamResourceCidr: IpamResourceCidr;
}

interface ModifyIpamResult {
  readonly Ipam: Ipam;
}

interface ModifyIpamScopeRequest {
  readonly DryRun: boolean;
  readonly IpamScopeId: string;
  readonly Description: string;
}

interface ModifyIpamScopeResult {
  readonly IpamScope: IpamScope;
}

interface ModifyLaunchTemplateRequest {
  readonly DryRun: boolean;
  readonly ClientToken: string;
  readonly LaunchTemplateId: string;
  readonly LaunchTemplateName: string;
  readonly DefaultVersion: string;
}

interface ModifyLaunchTemplateResult {
  readonly LaunchTemplate: LaunchTemplate;
}

interface ModifyManagedPrefixListRequest {
  readonly DryRun: boolean;
  readonly PrefixListId: string;
  readonly CurrentVersion: number;
  readonly PrefixListName: string;
  readonly AddEntries: [];
  readonly RemoveEntries: [];
  readonly MaxEntries: number;
}

interface ModifyManagedPrefixListResult {
  readonly PrefixList: ManagedPrefixList;
}

interface ModifyNetworkInterfaceAttributeRequest {
  readonly Attachment: NetworkInterfaceAttachmentChanges;
  readonly Description: AttributeValue;
  readonly DryRun: boolean;
  readonly Groups: [];
  readonly NetworkInterfaceId: string;
  readonly SourceDestCheck: AttributeBooleanValue;
}

interface ModifyPrivateDnsNameOptionsRequest {
  readonly DryRun: boolean;
  readonly InstanceId: string;
  readonly PrivateDnsHostnameType: string;
  readonly EnableResourceNameDnsARecord: boolean;
  readonly EnableResourceNameDnsAAAARecord: boolean;
}

interface ModifyPrivateDnsNameOptionsResult {
  readonly Return: boolean;
}

interface ModifyReservedInstancesRequest {
  readonly ReservedInstancesIds: [];
  readonly ClientToken: string;
  readonly TargetConfigurations: [];
}

interface ModifyReservedInstancesResult {
  readonly ReservedInstancesModificationId: string;
}

interface ModifySecurityGroupRulesRequest {
  readonly GroupId: string;
  readonly SecurityGroupRules: [];
  readonly DryRun: boolean;
}

interface ModifySecurityGroupRulesResult {
  readonly Return: boolean;
}

interface ModifySnapshotAttributeRequest {
  readonly Attribute: string;
  readonly CreateVolumePermission: CreateVolumePermissionModifications;
  readonly GroupNames: [];
  readonly OperationType: string;
  readonly SnapshotId: string;
  readonly UserIds: [];
  readonly DryRun: boolean;
}

interface ModifySnapshotTierRequest {
  readonly SnapshotId: string;
  readonly StorageTier: string;
  readonly DryRun: boolean;
}

interface ModifySnapshotTierResult {
  readonly SnapshotId: string;
  readonly TieringStartTime: Date;
}

interface ModifySpotFleetRequestRequest {
  readonly ExcessCapacityTerminationPolicy: string;
  readonly LaunchTemplateConfigs: [];
  readonly SpotFleetRequestId: string;
  readonly TargetCapacity: number;
  readonly OnDemandTargetCapacity: number;
  readonly Context: string;
}

interface ModifySpotFleetRequestResponse {
  readonly Return: boolean;
}

interface ModifySubnetAttributeRequest {
  readonly AssignIpv6AddressOnCreation: AttributeBooleanValue;
  readonly MapPublicIpOnLaunch: AttributeBooleanValue;
  readonly SubnetId: string;
  readonly MapCustomerOwnedIpOnLaunch: AttributeBooleanValue;
  readonly CustomerOwnedIpv4Pool: string;
  readonly EnableDns64: AttributeBooleanValue;
  readonly PrivateDnsHostnameTypeOnLaunch: string;
  readonly EnableResourceNameDnsARecordOnLaunch: AttributeBooleanValue;
  readonly EnableResourceNameDnsAAAARecordOnLaunch: AttributeBooleanValue;
  readonly EnableLniAtDeviceIndex: number;
  readonly DisableLniAtDeviceIndex: AttributeBooleanValue;
}

interface ModifyTrafficMirrorFilterNetworkServicesRequest {
  readonly TrafficMirrorFilterId: string;
  readonly AddNetworkServices: [];
  readonly RemoveNetworkServices: [];
  readonly DryRun: boolean;
}

interface ModifyTrafficMirrorFilterNetworkServicesResult {
  readonly TrafficMirrorFilter: TrafficMirrorFilter;
}

interface ModifyTrafficMirrorFilterRuleRequest {
  readonly TrafficMirrorFilterRuleId: string;
  readonly TrafficDirection: string;
  readonly RuleNumber: number;
  readonly RuleAction: string;
  readonly DestinationPortRange: TrafficMirrorPortRangeRequest;
  readonly SourcePortRange: TrafficMirrorPortRangeRequest;
  readonly Protocol: number;
  readonly DestinationCidrBlock: string;
  readonly SourceCidrBlock: string;
  readonly Description: string;
  readonly RemoveFields: [];
  readonly DryRun: boolean;
}

interface ModifyTrafficMirrorFilterRuleResult {
  readonly TrafficMirrorFilterRule: TrafficMirrorFilterRule;
}

interface ModifyTrafficMirrorSessionRequest {
  readonly TrafficMirrorSessionId: string;
  readonly TrafficMirrorTargetId: string;
  readonly TrafficMirrorFilterId: string;
  readonly PacketLength: number;
  readonly SessionNumber: number;
  readonly VirtualNetworkId: number;
  readonly Description: string;
  readonly RemoveFields: [];
  readonly DryRun: boolean;
}

interface ModifyTrafficMirrorSessionResult {
  readonly TrafficMirrorSession: TrafficMirrorSession;
}

interface ModifyTransitGatewayOptions {
  readonly AddTransitGatewayCidrBlocks: [];
  readonly RemoveTransitGatewayCidrBlocks: [];
  readonly VpnEcmpSupport: string;
  readonly DnsSupport: string;
  readonly AutoAcceptSharedAttachments: string;
  readonly DefaultRouteTableAssociation: string;
  readonly AssociationDefaultRouteTableId: string;
  readonly DefaultRouteTablePropagation: string;
  readonly PropagationDefaultRouteTableId: string;
}

interface ModifyTransitGatewayPrefixListReferenceRequest {
  readonly TransitGatewayRouteTableId: string;
  readonly PrefixListId: string;
  readonly TransitGatewayAttachmentId: string;
  readonly Blackhole: boolean;
  readonly DryRun: boolean;
}

interface ModifyTransitGatewayPrefixListReferenceResult {
  readonly TransitGatewayPrefixListReference: TransitGatewayPrefixListReference;
}

interface ModifyTransitGatewayRequest {
  readonly TransitGatewayId: string;
  readonly Description: string;
  readonly Options: ModifyTransitGatewayOptions;
  readonly DryRun: boolean;
}

interface ModifyTransitGatewayResult {
  readonly TransitGateway: TransitGateway;
}

interface ModifyTransitGatewayVpcAttachmentRequest {
  readonly TransitGatewayAttachmentId: string;
  readonly AddSubnetIds: [];
  readonly RemoveSubnetIds: [];
  readonly Options: ModifyTransitGatewayVpcAttachmentRequestOptions;
  readonly DryRun: boolean;
}

interface ModifyTransitGatewayVpcAttachmentRequestOptions {
  readonly DnsSupport: string;
  readonly Ipv6Support: string;
  readonly ApplianceModeSupport: string;
}

interface ModifyTransitGatewayVpcAttachmentResult {
  readonly TransitGatewayVpcAttachment: TransitGatewayVpcAttachment;
}

interface ModifyVolumeAttributeRequest {
  readonly AutoEnableIO: AttributeBooleanValue;
  readonly VolumeId: string;
  readonly DryRun: boolean;
}

interface ModifyVolumeRequest {
  readonly DryRun: boolean;
  readonly VolumeId: string;
  readonly Size: number;
  readonly VolumeType: string;
  readonly Iops: number;
  readonly Throughput: number;
  readonly MultiAttachEnabled: boolean;
}

interface ModifyVolumeResult {
  readonly VolumeModification: VolumeModification;
}

interface ModifyVpcAttributeRequest {
  readonly EnableDnsHostnames: AttributeBooleanValue;
  readonly EnableDnsSupport: AttributeBooleanValue;
  readonly VpcId: string;
}

interface ModifyVpcEndpointConnectionNotificationRequest {
  readonly DryRun: boolean;
  readonly ConnectionNotificationId: string;
  readonly ConnectionNotificationArn: string;
  readonly ConnectionEvents: [];
}

interface ModifyVpcEndpointConnectionNotificationResult {
  readonly ReturnValue: boolean;
}

interface ModifyVpcEndpointRequest {
  readonly DryRun: boolean;
  readonly VpcEndpointId: string;
  readonly ResetPolicy: boolean;
  readonly PolicyDocument: string;
  readonly AddRouteTableIds: [];
  readonly RemoveRouteTableIds: [];
  readonly AddSubnetIds: [];
  readonly RemoveSubnetIds: [];
  readonly AddSecurityGroupIds: [];
  readonly RemoveSecurityGroupIds: [];
  readonly PrivateDnsEnabled: boolean;
}

interface ModifyVpcEndpointResult {
  readonly Return: boolean;
}

interface ModifyVpcEndpointServiceConfigurationRequest {
  readonly DryRun: boolean;
  readonly ServiceId: string;
  readonly PrivateDnsName: string;
  readonly RemovePrivateDnsName: boolean;
  readonly AcceptanceRequired: boolean;
  readonly AddNetworkLoadBalancerArns: [];
  readonly RemoveNetworkLoadBalancerArns: [];
  readonly AddGatewayLoadBalancerArns: [];
  readonly RemoveGatewayLoadBalancerArns: [];
}

interface ModifyVpcEndpointServiceConfigurationResult {
  readonly Return: boolean;
}

interface ModifyVpcEndpointServicePermissionsRequest {
  readonly DryRun: boolean;
  readonly ServiceId: string;
  readonly AddAllowedPrincipals: [];
  readonly RemoveAllowedPrincipals: [];
}

interface ModifyVpcEndpointServicePermissionsResult {
  readonly ReturnValue: boolean;
}

interface ModifyVpcPeeringConnectionOptionsRequest {
  readonly AccepterPeeringConnectionOptions: PeeringConnectionOptionsRequest;
  readonly DryRun: boolean;
  readonly RequesterPeeringConnectionOptions: PeeringConnectionOptionsRequest;
  readonly VpcPeeringConnectionId: string;
}

interface ModifyVpcPeeringConnectionOptionsResult {
  readonly AccepterPeeringConnectionOptions: PeeringConnectionOptions;
  readonly RequesterPeeringConnectionOptions: PeeringConnectionOptions;
}

interface ModifyVpcTenancyRequest {
  readonly VpcId: string;
  readonly InstanceTenancy: string;
  readonly DryRun: boolean;
}

interface ModifyVpcTenancyResult {
  readonly ReturnValue: boolean;
}

interface ModifyVpnConnectionOptionsRequest {
  readonly VpnConnectionId: string;
  readonly LocalIpv4NetworkCidr: string;
  readonly RemoteIpv4NetworkCidr: string;
  readonly LocalIpv6NetworkCidr: string;
  readonly RemoteIpv6NetworkCidr: string;
  readonly DryRun: boolean;
}

interface ModifyVpnConnectionOptionsResult {
  readonly VpnConnection: VpnConnection;
}

interface ModifyVpnConnectionRequest {
  readonly VpnConnectionId: string;
  readonly TransitGatewayId: string;
  readonly CustomerGatewayId: string;
  readonly VpnGatewayId: string;
  readonly DryRun: boolean;
}

interface ModifyVpnConnectionResult {
  readonly VpnConnection: VpnConnection;
}

interface ModifyVpnTunnelCertificateRequest {
  readonly VpnConnectionId: string;
  readonly VpnTunnelOutsideIpAddress: string;
  readonly DryRun: boolean;
}

interface ModifyVpnTunnelCertificateResult {
  readonly VpnConnection: VpnConnection;
}

interface ModifyVpnTunnelOptionsRequest {
  readonly VpnConnectionId: string;
  readonly VpnTunnelOutsideIpAddress: string;
  readonly TunnelOptions: ModifyVpnTunnelOptionsSpecification;
  readonly DryRun: boolean;
}

interface ModifyVpnTunnelOptionsResult {
  readonly VpnConnection: VpnConnection;
}

interface ModifyVpnTunnelOptionsSpecification {
  readonly TunnelInsideCidr: string;
  readonly TunnelInsideIpv6Cidr: string;
  readonly PreSharedKey: string;
  readonly Phase1LifetimeSeconds: number;
  readonly Phase2LifetimeSeconds: number;
  readonly RekeyMarginTimeSeconds: number;
  readonly RekeyFuzzPercentage: number;
  readonly ReplayWindowSize: number;
  readonly DPDTimeoutSeconds: number;
  readonly DPDTimeoutAction: string;
  readonly Phase1EncryptionAlgorithms: [];
  readonly Phase2EncryptionAlgorithms: [];
  readonly Phase1IntegrityAlgorithms: [];
  readonly Phase2IntegrityAlgorithms: [];
  readonly Phase1DHGroupNumbers: [];
  readonly Phase2DHGroupNumbers: [];
  readonly IKEVersions: [];
  readonly StartupAction: string;
}

interface MonitorInstancesRequest {
  readonly InstanceIds: [];
  readonly DryRun: boolean;
}

interface MonitorInstancesResult {
  readonly InstanceMonitorings: [];
}

interface Monitoring {
  readonly State: string;
}

interface MoveAddressToVpcRequest {
  readonly DryRun: boolean;
  readonly PublicIp: string;
}

interface MoveAddressToVpcResult {
  readonly AllocationId: string;
  readonly Status: string;
}

interface MoveByoipCidrToIpamRequest {
  readonly DryRun: boolean;
  readonly Cidr: string;
  readonly IpamPoolId: string;
  readonly IpamPoolOwner: string;
}

interface MoveByoipCidrToIpamResult {
  readonly ByoipCidr: ByoipCidr;
}

interface MovingAddressStatus {
  readonly MoveStatus: string;
  readonly PublicIp: string;
}

interface NatGateway {
  readonly CreateTime: Date;
  readonly DeleteTime: Date;
  readonly FailureCode: string;
  readonly FailureMessage: string;
  readonly NatGatewayAddresses: [];
  readonly NatGatewayId: string;
  readonly ProvisionedBandwidth: ProvisionedBandwidth;
  readonly State: string;
  readonly SubnetId: string;
  readonly VpcId: string;
  readonly Tags: [];
  readonly ConnectivityType: string;
}

interface NatGatewayAddress {
  readonly AllocationId: string;
  readonly NetworkInterfaceId: string;
  readonly PrivateIp: string;
  readonly PublicIp: string;
}

interface NetworkAcl {
  readonly Associations: [];
  readonly Entries: [];
  readonly IsDefault: boolean;
  readonly NetworkAclId: string;
  readonly Tags: [];
  readonly VpcId: string;
  readonly OwnerId: string;
}

interface NetworkAclAssociation {
  readonly NetworkAclAssociationId: string;
  readonly NetworkAclId: string;
  readonly SubnetId: string;
}

interface NetworkAclEntry {
  readonly CidrBlock: string;
  readonly Egress: boolean;
  readonly IcmpTypeCode: IcmpTypeCode;
  readonly Ipv6CidrBlock: string;
  readonly PortRange: PortRange;
  readonly Protocol: string;
  readonly RuleAction: string;
  readonly RuleNumber: number;
}

interface NetworkCardInfo {
  readonly NetworkCardIndex: number;
  readonly NetworkPerformance: string;
  readonly MaximumNetworkInterfaces: number;
}

interface NetworkInfo {
  readonly NetworkPerformance: string;
  readonly MaximumNetworkInterfaces: number;
  readonly MaximumNetworkCards: number;
  readonly DefaultNetworkCardIndex: number;
  readonly NetworkCards: [];
  readonly Ipv4AddressesPerInterface: number;
  readonly Ipv6AddressesPerInterface: number;
  readonly Ipv6Supported: boolean;
  readonly EnaSupport: string;
  readonly EfaSupported: boolean;
  readonly EfaInfo: EfaInfo;
  readonly EncryptionInTransitSupported: boolean;
}

interface NetworkInsightsAccessScope {
  readonly NetworkInsightsAccessScopeId: string;
  readonly NetworkInsightsAccessScopeArn: string;
  readonly CreatedDate: Date;
  readonly UpdatedDate: Date;
  readonly Tags: [];
}

interface NetworkInsightsAccessScopeAnalysis {
  readonly NetworkInsightsAccessScopeAnalysisId: string;
  readonly NetworkInsightsAccessScopeAnalysisArn: string;
  readonly NetworkInsightsAccessScopeId: string;
  readonly Status: string;
  readonly StatusMessage: string;
  readonly WarningMessage: string;
  readonly StartDate: Date;
  readonly EndDate: Date;
  readonly FindingsFound: string;
  readonly AnalyzedEniCount: number;
  readonly Tags: [];
}

interface NetworkInsightsAccessScopeContent {
  readonly NetworkInsightsAccessScopeId: string;
  readonly MatchPaths: [];
  readonly ExcludePaths: [];
}

interface NetworkInsightsAnalysis {
  readonly NetworkInsightsAnalysisId: string;
  readonly NetworkInsightsAnalysisArn: string;
  readonly NetworkInsightsPathId: string;
  readonly FilterInArns: [];
  readonly StartDate: Date;
  readonly Status: string;
  readonly StatusMessage: string;
  readonly WarningMessage: string;
  readonly NetworkPathFound: boolean;
  readonly ForwardPathComponents: [];
  readonly ReturnPathComponents: [];
  readonly Explanations: [];
  readonly AlternatePathHints: [];
  readonly Tags: [];
}

interface NetworkInsightsPath {
  readonly NetworkInsightsPathId: string;
  readonly NetworkInsightsPathArn: string;
  readonly CreatedDate: Date;
  readonly Source: string;
  readonly Destination: string;
  readonly SourceIp: string;
  readonly DestinationIp: string;
  readonly Protocol: string;
  readonly DestinationPort: number;
  readonly Tags: [];
}

interface NetworkInterface {
  readonly Association: NetworkInterfaceAssociation;
  readonly Attachment: NetworkInterfaceAttachment;
  readonly AvailabilityZone: string;
  readonly Description: string;
  readonly Groups: [];
  readonly InterfaceType: string;
  readonly Ipv6Addresses: [];
  readonly MacAddress: string;
  readonly NetworkInterfaceId: string;
  readonly OutpostArn: string;
  readonly OwnerId: string;
  readonly PrivateDnsName: string;
  readonly PrivateIpAddress: string;
  readonly PrivateIpAddresses: [];
  readonly Ipv4Prefixes: [];
  readonly Ipv6Prefixes: [];
  readonly RequesterId: string;
  readonly RequesterManaged: boolean;
  readonly SourceDestCheck: boolean;
  readonly Status: string;
  readonly SubnetId: string;
  readonly TagSet: [];
  readonly VpcId: string;
  readonly DenyAllIgwTraffic: boolean;
  readonly Ipv6Native: boolean;
  readonly Ipv6Address: string;
}

interface NetworkInterfaceAssociation {
  readonly AllocationId: string;
  readonly AssociationId: string;
  readonly IpOwnerId: string;
  readonly PublicDnsName: string;
  readonly PublicIp: string;
  readonly CustomerOwnedIp: string;
  readonly CarrierIp: string;
}

interface NetworkInterfaceAttachment {
  readonly AttachTime: Date;
  readonly AttachmentId: string;
  readonly DeleteOnTermination: boolean;
  readonly DeviceIndex: number;
  readonly NetworkCardIndex: number;
  readonly InstanceId: string;
  readonly InstanceOwnerId: string;
  readonly Status: string;
}

interface NetworkInterfaceAttachmentChanges {
  readonly AttachmentId: string;
  readonly DeleteOnTermination: boolean;
}

interface NetworkInterfaceCount {
  readonly Min: number;
  readonly Max: number;
}

interface NetworkInterfaceCountRequest {
  readonly Min: number;
  readonly Max: number;
}

interface NetworkInterfaceIpv6Address {
  readonly Ipv6Address: string;
}

interface NetworkInterfacePermission {
  readonly NetworkInterfacePermissionId: string;
  readonly NetworkInterfaceId: string;
  readonly AwsAccountId: string;
  readonly AwsService: string;
  readonly Permission: string;
  readonly PermissionState: NetworkInterfacePermissionState;
}

interface NetworkInterfacePermissionState {
  readonly State: string;
  readonly StatusMessage: string;
}

interface NetworkInterfacePrivateIpAddress {
  readonly Association: NetworkInterfaceAssociation;
  readonly Primary: boolean;
  readonly PrivateDnsName: string;
  readonly PrivateIpAddress: string;
}

interface NewDhcpConfiguration {
  readonly Key: string;
  readonly Values: [];
}

interface OnDemandOptions {
  readonly AllocationStrategy: string;
  readonly CapacityReservationOptions: CapacityReservationOptions;
  readonly SingleInstanceType: boolean;
  readonly SingleAvailabilityZone: boolean;
  readonly MinTargetCapacity: number;
  readonly MaxTotalPrice: string;
}

interface OnDemandOptionsRequest {
  readonly AllocationStrategy: string;
  readonly CapacityReservationOptions: CapacityReservationOptionsRequest;
  readonly SingleInstanceType: boolean;
  readonly SingleAvailabilityZone: boolean;
  readonly MinTargetCapacity: number;
  readonly MaxTotalPrice: string;
}

interface PacketHeaderStatement {
  readonly SourceAddresses: [];
  readonly DestinationAddresses: [];
  readonly SourcePorts: [];
  readonly DestinationPorts: [];
  readonly SourcePrefixLists: [];
  readonly DestinationPrefixLists: [];
  readonly Protocols: [];
}

interface PacketHeaderStatementRequest {
  readonly SourceAddresses: [];
  readonly DestinationAddresses: [];
  readonly SourcePorts: [];
  readonly DestinationPorts: [];
  readonly SourcePrefixLists: [];
  readonly DestinationPrefixLists: [];
  readonly Protocols: [];
}

interface PathComponent {
  readonly SequenceNumber: number;
  readonly AclRule: AnalysisAclRule;
  readonly AttachedTo: AnalysisComponent;
  readonly Component: AnalysisComponent;
  readonly DestinationVpc: AnalysisComponent;
  readonly OutboundHeader: AnalysisPacketHeader;
  readonly InboundHeader: AnalysisPacketHeader;
  readonly RouteTableRoute: AnalysisRouteTableRoute;
  readonly SecurityGroupRule: AnalysisSecurityGroupRule;
  readonly SourceVpc: AnalysisComponent;
  readonly Subnet: AnalysisComponent;
  readonly Vpc: AnalysisComponent;
}

interface PathStatement {
  readonly PacketHeaderStatement: PacketHeaderStatement;
  readonly ResourceStatement: ResourceStatement;
}

interface PathStatementRequest {
  readonly PacketHeaderStatement: PacketHeaderStatementRequest;
  readonly ResourceStatement: ResourceStatementRequest;
}

interface PciId {
  readonly DeviceId: string;
  readonly VendorId: string;
  readonly SubsystemId: string;
  readonly SubsystemVendorId: string;
}

interface PeeringAttachmentStatus {
  readonly Code: string;
  readonly Message: string;
}

interface PeeringConnectionOptions {
  readonly AllowDnsResolutionFromRemoteVpc: boolean;
  readonly AllowEgressFromLocalClassicLinkToRemoteVpc: boolean;
  readonly AllowEgressFromLocalVpcToRemoteClassicLink: boolean;
}

interface PeeringConnectionOptionsRequest {
  readonly AllowDnsResolutionFromRemoteVpc: boolean;
  readonly AllowEgressFromLocalClassicLinkToRemoteVpc: boolean;
  readonly AllowEgressFromLocalVpcToRemoteClassicLink: boolean;
}

interface PeeringTgwInfo {
  readonly TransitGatewayId: string;
  readonly OwnerId: string;
  readonly Region: string;
}

interface Phase1DHGroupNumbersListValue {
  readonly Value: number;
}

interface Phase1DHGroupNumbersRequestListValue {
  readonly Value: number;
}

interface Phase1EncryptionAlgorithmsListValue {
  readonly Value: string;
}

interface Phase1EncryptionAlgorithmsRequestListValue {
  readonly Value: string;
}

interface Phase1IntegrityAlgorithmsListValue {
  readonly Value: string;
}

interface Phase1IntegrityAlgorithmsRequestListValue {
  readonly Value: string;
}

interface Phase2DHGroupNumbersListValue {
  readonly Value: number;
}

interface Phase2DHGroupNumbersRequestListValue {
  readonly Value: number;
}

interface Phase2EncryptionAlgorithmsListValue {
  readonly Value: string;
}

interface Phase2EncryptionAlgorithmsRequestListValue {
  readonly Value: string;
}

interface Phase2IntegrityAlgorithmsListValue {
  readonly Value: string;
}

interface Phase2IntegrityAlgorithmsRequestListValue {
  readonly Value: string;
}

interface Placement {
  readonly AvailabilityZone: string;
  readonly Affinity: string;
  readonly GroupName: string;
  readonly PartitionNumber: number;
  readonly HostId: string;
  readonly Tenancy: string;
  readonly SpreadDomain: string;
  readonly HostResourceGroupArn: string;
}

interface PlacementGroup {
  readonly GroupName: string;
  readonly State: string;
  readonly Strategy: string;
  readonly PartitionCount: number;
  readonly GroupId: string;
  readonly Tags: [];
}

interface PlacementGroupInfo {
  readonly SupportedStrategies: [];
}

interface PlacementResponse {
  readonly GroupName: string;
}

interface PoolCidrBlock {
  readonly Cidr: string;
}

interface PortRange {
  readonly From: number;
  readonly To: number;
}

interface PrefixList {
  readonly Cidrs: [];
  readonly PrefixListId: string;
  readonly PrefixListName: string;
}

interface PrefixListAssociation {
  readonly ResourceId: string;
  readonly ResourceOwner: string;
}

interface PrefixListEntry {
  readonly Cidr: string;
  readonly Description: string;
}

interface PrefixListId {
  readonly Description: string;
  readonly PrefixListId: string;
}

interface PriceSchedule {
  readonly Active: boolean;
  readonly CurrencyCode: string;
  readonly Price: unknown;
  readonly Term: number;
}

interface PriceScheduleSpecification {
  readonly CurrencyCode: string;
  readonly Price: unknown;
  readonly Term: number;
}

interface PricingDetail {
  readonly Count: number;
  readonly Price: unknown;
}

interface PrincipalIdFormat {
  readonly Arn: string;
  readonly Statuses: [];
}

interface PrivateDnsDetails {
  readonly PrivateDnsName: string;
}

interface PrivateDnsNameConfiguration {
  readonly State: string;
  readonly Type: string;
  readonly Value: string;
  readonly Name: string;
}

interface PrivateDnsNameOptionsOnLaunch {
  readonly HostnameType: string;
  readonly EnableResourceNameDnsARecord: boolean;
  readonly EnableResourceNameDnsAAAARecord: boolean;
}

interface PrivateDnsNameOptionsRequest {
  readonly HostnameType: string;
  readonly EnableResourceNameDnsARecord: boolean;
  readonly EnableResourceNameDnsAAAARecord: boolean;
}

interface PrivateDnsNameOptionsResponse {
  readonly HostnameType: string;
  readonly EnableResourceNameDnsARecord: boolean;
  readonly EnableResourceNameDnsAAAARecord: boolean;
}

interface PrivateIpAddressSpecification {
  readonly Primary: boolean;
  readonly PrivateIpAddress: string;
}

interface ProcessorInfo {
  readonly SupportedArchitectures: [];
  readonly SustainedClockSpeedInGhz: unknown;
}

interface ProductCode {
  readonly ProductCodeId: string;
  readonly ProductCodeType: string;
}

interface PropagatingVgw {
  readonly GatewayId: string;
}

interface ProvisionByoipCidrRequest {
  readonly Cidr: string;
  readonly CidrAuthorizationContext: CidrAuthorizationContext;
  readonly PubliclyAdvertisable: boolean;
  readonly Description: string;
  readonly DryRun: boolean;
  readonly PoolTagSpecifications: [];
  readonly MultiRegion: boolean;
}

interface ProvisionByoipCidrResult {
  readonly ByoipCidr: ByoipCidr;
}

interface ProvisionIpamPoolCidrRequest {
  readonly DryRun: boolean;
  readonly IpamPoolId: string;
  readonly Cidr: string;
  readonly CidrAuthorizationContext: IpamCidrAuthorizationContext;
}

interface ProvisionIpamPoolCidrResult {
  readonly IpamPoolCidr: IpamPoolCidr;
}

interface ProvisionPublicIpv4PoolCidrRequest {
  readonly DryRun: boolean;
  readonly IpamPoolId: string;
  readonly PoolId: string;
  readonly NetmaskLength: number;
}

interface ProvisionPublicIpv4PoolCidrResult {
  readonly PoolId: string;
  readonly PoolAddressRange: PublicIpv4PoolRange;
}

interface ProvisionedBandwidth {
  readonly ProvisionTime: Date;
  readonly Provisioned: string;
  readonly RequestTime: Date;
  readonly Requested: string;
  readonly Status: string;
}

interface PtrUpdateStatus {
  readonly Value: string;
  readonly Status: string;
  readonly Reason: string;
}

interface PublicIpv4Pool {
  readonly PoolId: string;
  readonly Description: string;
  readonly PoolAddressRanges: [];
  readonly TotalAddressCount: number;
  readonly TotalAvailableAddressCount: number;
  readonly NetworkBorderGroup: string;
  readonly Tags: [];
}

interface PublicIpv4PoolRange {
  readonly FirstAddress: string;
  readonly LastAddress: string;
  readonly AddressCount: number;
  readonly AvailableAddressCount: number;
}

interface Purchase {
  readonly CurrencyCode: string;
  readonly Duration: number;
  readonly HostIdSet: [];
  readonly HostReservationId: string;
  readonly HourlyPrice: string;
  readonly InstanceFamily: string;
  readonly PaymentOption: string;
  readonly UpfrontPrice: string;
}

interface PurchaseHostReservationRequest {
  readonly ClientToken: string;
  readonly CurrencyCode: string;
  readonly HostIdSet: [];
  readonly LimitPrice: string;
  readonly OfferingId: string;
  readonly TagSpecifications: [];
}

interface PurchaseHostReservationResult {
  readonly ClientToken: string;
  readonly CurrencyCode: string;
  readonly Purchase: [];
  readonly TotalHourlyPrice: string;
  readonly TotalUpfrontPrice: string;
}

interface PurchaseRequest {
  readonly InstanceCount: number;
  readonly PurchaseToken: string;
}

interface PurchaseReservedInstancesOfferingRequest {
  readonly InstanceCount: number;
  readonly ReservedInstancesOfferingId: string;
  readonly DryRun: boolean;
  readonly LimitPrice: ReservedInstanceLimitPrice;
  readonly PurchaseTime: Date;
}

interface PurchaseReservedInstancesOfferingResult {
  readonly ReservedInstancesId: string;
}

interface PurchaseScheduledInstancesRequest {
  readonly ClientToken: string;
  readonly DryRun: boolean;
  readonly PurchaseRequests: [];
}

interface PurchaseScheduledInstancesResult {
  readonly ScheduledInstanceSet: [];
}

interface RebootInstancesRequest {
  readonly InstanceIds: [];
  readonly DryRun: boolean;
}

interface RecurringCharge {
  readonly Amount: unknown;
  readonly Frequency: string;
}

interface ReferencedSecurityGroup {
  readonly GroupId: string;
  readonly PeeringStatus: string;
  readonly UserId: string;
  readonly VpcId: string;
  readonly VpcPeeringConnectionId: string;
}

interface Region {
  readonly Endpoint: string;
  readonly RegionName: string;
  readonly OptInStatus: string;
}

interface RegisterImageRequest {
  readonly ImageLocation: string;
  readonly Architecture: string;
  readonly BlockDeviceMappings: [];
  readonly Description: string;
  readonly DryRun: boolean;
  readonly EnaSupport: boolean;
  readonly KernelId: string;
  readonly Name: string;
  readonly BillingProducts: [];
  readonly RamdiskId: string;
  readonly RootDeviceName: string;
  readonly SriovNetSupport: string;
  readonly VirtualizationType: string;
  readonly BootMode: string;
}

interface RegisterImageResult {
  readonly ImageId: string;
}

interface RegisterInstanceEventNotificationAttributesRequest {
  readonly DryRun: boolean;
  readonly InstanceTagAttribute: RegisterInstanceTagAttributeRequest;
}

interface RegisterInstanceEventNotificationAttributesResult {
  readonly InstanceTagAttribute: InstanceTagNotificationAttribute;
}

interface RegisterInstanceTagAttributeRequest {
  readonly IncludeAllTagsOfInstance: boolean;
  readonly InstanceTagKeys: [];
}

interface RegisterTransitGatewayMulticastGroupMembersRequest {
  readonly TransitGatewayMulticastDomainId: string;
  readonly GroupIpAddress: string;
  readonly NetworkInterfaceIds: [];
  readonly DryRun: boolean;
}

interface RegisterTransitGatewayMulticastGroupMembersResult {
  readonly RegisteredMulticastGroupMembers: TransitGatewayMulticastRegisteredGroupMembers;
}

interface RegisterTransitGatewayMulticastGroupSourcesRequest {
  readonly TransitGatewayMulticastDomainId: string;
  readonly GroupIpAddress: string;
  readonly NetworkInterfaceIds: [];
  readonly DryRun: boolean;
}

interface RegisterTransitGatewayMulticastGroupSourcesResult {
  readonly RegisteredMulticastGroupSources: TransitGatewayMulticastRegisteredGroupSources;
}

interface RejectTransitGatewayMulticastDomainAssociationsRequest {
  readonly TransitGatewayMulticastDomainId: string;
  readonly TransitGatewayAttachmentId: string;
  readonly SubnetIds: [];
  readonly DryRun: boolean;
}

interface RejectTransitGatewayMulticastDomainAssociationsResult {
  readonly Associations: TransitGatewayMulticastDomainAssociations;
}

interface RejectTransitGatewayPeeringAttachmentRequest {
  readonly TransitGatewayAttachmentId: string;
  readonly DryRun: boolean;
}

interface RejectTransitGatewayPeeringAttachmentResult {
  readonly TransitGatewayPeeringAttachment: TransitGatewayPeeringAttachment;
}

interface RejectTransitGatewayVpcAttachmentRequest {
  readonly TransitGatewayAttachmentId: string;
  readonly DryRun: boolean;
}

interface RejectTransitGatewayVpcAttachmentResult {
  readonly TransitGatewayVpcAttachment: TransitGatewayVpcAttachment;
}

interface RejectVpcEndpointConnectionsRequest {
  readonly DryRun: boolean;
  readonly ServiceId: string;
  readonly VpcEndpointIds: [];
}

interface RejectVpcEndpointConnectionsResult {
  readonly Unsuccessful: [];
}

interface RejectVpcPeeringConnectionRequest {
  readonly DryRun: boolean;
  readonly VpcPeeringConnectionId: string;
}

interface RejectVpcPeeringConnectionResult {
  readonly Return: boolean;
}

interface ReleaseAddressRequest {
  readonly AllocationId: string;
  readonly PublicIp: string;
  readonly NetworkBorderGroup: string;
  readonly DryRun: boolean;
}

interface ReleaseHostsRequest {
  readonly HostIds: [];
}

interface ReleaseHostsResult {
  readonly Successful: [];
  readonly Unsuccessful: [];
}

interface ReleaseIpamPoolAllocationRequest {
  readonly DryRun: boolean;
  readonly IpamPoolId: string;
  readonly Cidr: string;
  readonly IpamPoolAllocationId: string;
}

interface ReleaseIpamPoolAllocationResult {
  readonly Success: boolean;
}

interface RemoveIpamOperatingRegion {
  readonly RegionName: string;
}

interface RemovePrefixListEntry {
  readonly Cidr: string;
}

interface ReplaceIamInstanceProfileAssociationRequest {
  readonly IamInstanceProfile: IamInstanceProfileSpecification;
  readonly AssociationId: string;
}

interface ReplaceIamInstanceProfileAssociationResult {
  readonly IamInstanceProfileAssociation: IamInstanceProfileAssociation;
}

interface ReplaceNetworkAclAssociationRequest {
  readonly AssociationId: string;
  readonly DryRun: boolean;
  readonly NetworkAclId: string;
}

interface ReplaceNetworkAclAssociationResult {
  readonly NewAssociationId: string;
}

interface ReplaceNetworkAclEntryRequest {
  readonly CidrBlock: string;
  readonly DryRun: boolean;
  readonly Egress: boolean;
  readonly IcmpTypeCode: IcmpTypeCode;
  readonly Ipv6CidrBlock: string;
  readonly NetworkAclId: string;
  readonly PortRange: PortRange;
  readonly Protocol: string;
  readonly RuleAction: string;
  readonly RuleNumber: number;
}

interface ReplaceRootVolumeTask {
  readonly ReplaceRootVolumeTaskId: string;
  readonly InstanceId: string;
  readonly TaskState: string;
  readonly StartTime: string;
  readonly CompleteTime: string;
  readonly Tags: [];
}

interface ReplaceRouteRequest {
  readonly DestinationCidrBlock: string;
  readonly DestinationIpv6CidrBlock: string;
  readonly DestinationPrefixListId: string;
  readonly DryRun: boolean;
  readonly VpcEndpointId: string;
  readonly EgressOnlyInternetGatewayId: string;
  readonly GatewayId: string;
  readonly InstanceId: string;
  readonly LocalTarget: boolean;
  readonly NatGatewayId: string;
  readonly TransitGatewayId: string;
  readonly LocalGatewayId: string;
  readonly CarrierGatewayId: string;
  readonly NetworkInterfaceId: string;
  readonly RouteTableId: string;
  readonly VpcPeeringConnectionId: string;
  readonly CoreNetworkArn: string;
}

interface ReplaceRouteTableAssociationRequest {
  readonly AssociationId: string;
  readonly DryRun: boolean;
  readonly RouteTableId: string;
}

interface ReplaceRouteTableAssociationResult {
  readonly NewAssociationId: string;
  readonly AssociationState: RouteTableAssociationState;
}

interface ReplaceTransitGatewayRouteRequest {
  readonly DestinationCidrBlock: string;
  readonly TransitGatewayRouteTableId: string;
  readonly TransitGatewayAttachmentId: string;
  readonly Blackhole: boolean;
  readonly DryRun: boolean;
}

interface ReplaceTransitGatewayRouteResult {
  readonly Route: TransitGatewayRoute;
}

interface ReportInstanceStatusRequest {
  readonly Description: string;
  readonly DryRun: boolean;
  readonly EndTime: Date;
  readonly Instances: [];
  readonly ReasonCodes: [];
  readonly StartTime: Date;
  readonly Status: string;
}

interface RequestIpamResourceTag {
  readonly Key: string;
  readonly Value: string;
}

interface RequestLaunchTemplateData {
  readonly KernelId: string;
  readonly EbsOptimized: boolean;
  readonly IamInstanceProfile: LaunchTemplateIamInstanceProfileSpecificationRequest;
  readonly BlockDeviceMappings: [];
  readonly NetworkInterfaces: [];
  readonly ImageId: string;
  readonly InstanceType: string;
  readonly KeyName: string;
  readonly Monitoring: LaunchTemplatesMonitoringRequest;
  readonly Placement: LaunchTemplatePlacementRequest;
  readonly RamDiskId: string;
  readonly DisableApiTermination: boolean;
  readonly InstanceInitiatedShutdownBehavior: string;
  readonly UserData: string;
  readonly TagSpecifications: [];
  readonly ElasticGpuSpecifications: [];
  readonly ElasticInferenceAccelerators: [];
  readonly SecurityGroupIds: [];
  readonly SecurityGroups: [];
  readonly InstanceMarketOptions: LaunchTemplateInstanceMarketOptionsRequest;
  readonly CreditSpecification: CreditSpecificationRequest;
  readonly CpuOptions: LaunchTemplateCpuOptionsRequest;
  readonly CapacityReservationSpecification: LaunchTemplateCapacityReservationSpecificationRequest;
  readonly LicenseSpecifications: [];
  readonly HibernationOptions: LaunchTemplateHibernationOptionsRequest;
  readonly MetadataOptions: LaunchTemplateInstanceMetadataOptionsRequest;
  readonly EnclaveOptions: LaunchTemplateEnclaveOptionsRequest;
  readonly InstanceRequirements: InstanceRequirementsRequest;
  readonly PrivateDnsNameOptions: LaunchTemplatePrivateDnsNameOptionsRequest;
}

interface RequestSpotFleetRequest {
  readonly DryRun: boolean;
  readonly SpotFleetRequestConfig: SpotFleetRequestConfigData;
}

interface RequestSpotFleetResponse {
  readonly SpotFleetRequestId: string;
}

interface RequestSpotInstancesRequest {
  readonly AvailabilityZoneGroup: string;
  readonly BlockDurationMinutes: number;
  readonly ClientToken: string;
  readonly DryRun: boolean;
  readonly InstanceCount: number;
  readonly LaunchGroup: string;
  readonly LaunchSpecification: RequestSpotLaunchSpecification;
  readonly SpotPrice: string;
  readonly Type: string;
  readonly ValidFrom: Date;
  readonly ValidUntil: Date;
  readonly TagSpecifications: [];
  readonly InstanceInterruptionBehavior: string;
}

interface RequestSpotInstancesResult {
  readonly SpotInstanceRequests: [];
}

interface RequestSpotLaunchSpecification {
  readonly SecurityGroupIds: [];
  readonly SecurityGroups: [];
  readonly AddressingType: string;
  readonly BlockDeviceMappings: [];
  readonly EbsOptimized: boolean;
  readonly IamInstanceProfile: IamInstanceProfileSpecification;
  readonly ImageId: string;
  readonly InstanceType: string;
  readonly KernelId: string;
  readonly KeyName: string;
  readonly Monitoring: RunInstancesMonitoringEnabled;
  readonly NetworkInterfaces: [];
  readonly Placement: SpotPlacement;
  readonly RamdiskId: string;
  readonly SubnetId: string;
  readonly UserData: string;
}

interface Reservation {
  readonly Groups: [];
  readonly Instances: [];
  readonly OwnerId: string;
  readonly RequesterId: string;
  readonly ReservationId: string;
}

interface ReservationFleetInstanceSpecification {
  readonly InstanceType: string;
  readonly InstancePlatform: string;
  readonly Weight: unknown;
  readonly AvailabilityZone: string;
  readonly AvailabilityZoneId: string;
  readonly EbsOptimized: boolean;
  readonly Priority: number;
}

interface ReservationValue {
  readonly HourlyPrice: string;
  readonly RemainingTotalValue: string;
  readonly RemainingUpfrontValue: string;
}

interface ReservedInstanceLimitPrice {
  readonly Amount: unknown;
  readonly CurrencyCode: string;
}

interface ReservedInstanceReservationValue {
  readonly ReservationValue: ReservationValue;
  readonly ReservedInstanceId: string;
}

interface ReservedInstances {
  readonly AvailabilityZone: string;
  readonly Duration: number;
  readonly End: Date;
  readonly FixedPrice: unknown;
  readonly InstanceCount: number;
  readonly InstanceType: string;
  readonly ProductDescription: string;
  readonly ReservedInstancesId: string;
  readonly Start: Date;
  readonly State: string;
  readonly UsagePrice: unknown;
  readonly CurrencyCode: string;
  readonly InstanceTenancy: string;
  readonly OfferingClass: string;
  readonly OfferingType: string;
  readonly RecurringCharges: [];
  readonly Scope: string;
  readonly Tags: [];
}

interface ReservedInstancesConfiguration {
  readonly AvailabilityZone: string;
  readonly InstanceCount: number;
  readonly InstanceType: string;
  readonly Platform: string;
  readonly Scope: string;
}

interface ReservedInstancesId {
  readonly ReservedInstancesId: string;
}

interface ReservedInstancesListing {
  readonly ClientToken: string;
  readonly CreateDate: Date;
  readonly InstanceCounts: [];
  readonly PriceSchedules: [];
  readonly ReservedInstancesId: string;
  readonly ReservedInstancesListingId: string;
  readonly Status: string;
  readonly StatusMessage: string;
  readonly Tags: [];
  readonly UpdateDate: Date;
}

interface ReservedInstancesModification {
  readonly ClientToken: string;
  readonly CreateDate: Date;
  readonly EffectiveDate: Date;
  readonly ModificationResults: [];
  readonly ReservedInstancesIds: [];
  readonly ReservedInstancesModificationId: string;
  readonly Status: string;
  readonly StatusMessage: string;
  readonly UpdateDate: Date;
}

interface ReservedInstancesModificationResult {
  readonly ReservedInstancesId: string;
  readonly TargetConfiguration: ReservedInstancesConfiguration;
}

interface ReservedInstancesOffering {
  readonly AvailabilityZone: string;
  readonly Duration: number;
  readonly FixedPrice: unknown;
  readonly InstanceType: string;
  readonly ProductDescription: string;
  readonly ReservedInstancesOfferingId: string;
  readonly UsagePrice: unknown;
  readonly CurrencyCode: string;
  readonly InstanceTenancy: string;
  readonly Marketplace: boolean;
  readonly OfferingClass: string;
  readonly OfferingType: string;
  readonly PricingDetails: [];
  readonly RecurringCharges: [];
  readonly Scope: string;
}

interface ResetAddressAttributeRequest {
  readonly AllocationId: string;
  readonly Attribute: string;
  readonly DryRun: boolean;
}

interface ResetAddressAttributeResult {
  readonly Address: AddressAttribute;
}

interface ResetEbsDefaultKmsKeyIdRequest {
  readonly DryRun: boolean;
}

interface ResetEbsDefaultKmsKeyIdResult {
  readonly KmsKeyId: string;
}

interface ResetFpgaImageAttributeRequest {
  readonly DryRun: boolean;
  readonly FpgaImageId: string;
  readonly Attribute: string;
}

interface ResetFpgaImageAttributeResult {
  readonly Return: boolean;
}

interface ResetImageAttributeRequest {
  readonly Attribute: string;
  readonly ImageId: string;
  readonly DryRun: boolean;
}

interface ResetInstanceAttributeRequest {
  readonly Attribute: string;
  readonly DryRun: boolean;
  readonly InstanceId: string;
}

interface ResetNetworkInterfaceAttributeRequest {
  readonly DryRun: boolean;
  readonly NetworkInterfaceId: string;
  readonly SourceDestCheck: string;
}

interface ResetSnapshotAttributeRequest {
  readonly Attribute: string;
  readonly SnapshotId: string;
  readonly DryRun: boolean;
}

interface ResourceStatement {
  readonly Resources: [];
  readonly ResourceTypes: [];
}

interface ResourceStatementRequest {
  readonly Resources: [];
  readonly ResourceTypes: [];
}

interface ResponseError {
  readonly Code: string;
  readonly Message: string;
}

interface ResponseLaunchTemplateData {
  readonly KernelId: string;
  readonly EbsOptimized: boolean;
  readonly IamInstanceProfile: LaunchTemplateIamInstanceProfileSpecification;
  readonly BlockDeviceMappings: [];
  readonly NetworkInterfaces: [];
  readonly ImageId: string;
  readonly InstanceType: string;
  readonly KeyName: string;
  readonly Monitoring: LaunchTemplatesMonitoring;
  readonly Placement: LaunchTemplatePlacement;
  readonly RamDiskId: string;
  readonly DisableApiTermination: boolean;
  readonly InstanceInitiatedShutdownBehavior: string;
  readonly UserData: string;
  readonly TagSpecifications: [];
  readonly ElasticGpuSpecifications: [];
  readonly ElasticInferenceAccelerators: [];
  readonly SecurityGroupIds: [];
  readonly SecurityGroups: [];
  readonly InstanceMarketOptions: LaunchTemplateInstanceMarketOptions;
  readonly CreditSpecification: CreditSpecification;
  readonly CpuOptions: LaunchTemplateCpuOptions;
  readonly CapacityReservationSpecification: LaunchTemplateCapacityReservationSpecificationResponse;
  readonly LicenseSpecifications: [];
  readonly HibernationOptions: LaunchTemplateHibernationOptions;
  readonly MetadataOptions: LaunchTemplateInstanceMetadataOptions;
  readonly EnclaveOptions: LaunchTemplateEnclaveOptions;
  readonly InstanceRequirements: InstanceRequirements;
  readonly PrivateDnsNameOptions: LaunchTemplatePrivateDnsNameOptions;
}

interface RestoreAddressToClassicRequest {
  readonly DryRun: boolean;
  readonly PublicIp: string;
}

interface RestoreAddressToClassicResult {
  readonly PublicIp: string;
  readonly Status: string;
}

interface RestoreManagedPrefixListVersionRequest {
  readonly DryRun: boolean;
  readonly PrefixListId: string;
  readonly PreviousVersion: number;
  readonly CurrentVersion: number;
}

interface RestoreManagedPrefixListVersionResult {
  readonly PrefixList: ManagedPrefixList;
}

interface RestoreSnapshotFromRecycleBinRequest {
  readonly SnapshotId: string;
  readonly DryRun: boolean;
}

interface RestoreSnapshotFromRecycleBinResult {
  readonly SnapshotId: string;
  readonly OutpostArn: string;
  readonly Description: string;
  readonly Encrypted: boolean;
  readonly OwnerId: string;
  readonly Progress: string;
  readonly StartTime: Date;
  readonly State: string;
  readonly VolumeId: string;
  readonly VolumeSize: number;
}

interface RestoreSnapshotTierRequest {
  readonly SnapshotId: string;
  readonly TemporaryRestoreDays: number;
  readonly PermanentRestore: boolean;
  readonly DryRun: boolean;
}

interface RestoreSnapshotTierResult {
  readonly SnapshotId: string;
  readonly RestoreStartTime: Date;
  readonly RestoreDuration: number;
  readonly IsPermanentRestore: boolean;
}

interface RevokeClientVpnIngressRequest {
  readonly ClientVpnEndpointId: string;
  readonly TargetNetworkCidr: string;
  readonly AccessGroupId: string;
  readonly RevokeAllGroups: boolean;
  readonly DryRun: boolean;
}

interface RevokeClientVpnIngressResult {
  readonly Status: ClientVpnAuthorizationRuleStatus;
}

interface RevokeSecurityGroupEgressRequest {
  readonly DryRun: boolean;
  readonly GroupId: string;
  readonly IpPermissions: [];
  readonly SecurityGroupRuleIds: [];
  readonly CidrIp: string;
  readonly FromPort: number;
  readonly IpProtocol: string;
  readonly ToPort: number;
  readonly SourceSecurityGroupName: string;
  readonly SourceSecurityGroupOwnerId: string;
}

interface RevokeSecurityGroupEgressResult {
  readonly Return: boolean;
  readonly UnknownIpPermissions: [];
}

interface RevokeSecurityGroupIngressRequest {
  readonly CidrIp: string;
  readonly FromPort: number;
  readonly GroupId: string;
  readonly GroupName: string;
  readonly IpPermissions: [];
  readonly IpProtocol: string;
  readonly SourceSecurityGroupName: string;
  readonly SourceSecurityGroupOwnerId: string;
  readonly ToPort: number;
  readonly DryRun: boolean;
  readonly SecurityGroupRuleIds: [];
}

interface RevokeSecurityGroupIngressResult {
  readonly Return: boolean;
  readonly UnknownIpPermissions: [];
}

interface Route {
  readonly DestinationCidrBlock: string;
  readonly DestinationIpv6CidrBlock: string;
  readonly DestinationPrefixListId: string;
  readonly EgressOnlyInternetGatewayId: string;
  readonly GatewayId: string;
  readonly InstanceId: string;
  readonly InstanceOwnerId: string;
  readonly NatGatewayId: string;
  readonly TransitGatewayId: string;
  readonly LocalGatewayId: string;
  readonly CarrierGatewayId: string;
  readonly NetworkInterfaceId: string;
  readonly Origin: string;
  readonly State: string;
  readonly VpcPeeringConnectionId: string;
  readonly CoreNetworkArn: string;
}

interface RouteTable {
  readonly Associations: [];
  readonly PropagatingVgws: [];
  readonly RouteTableId: string;
  readonly Routes: [];
  readonly Tags: [];
  readonly VpcId: string;
  readonly OwnerId: string;
}

interface RouteTableAssociation {
  readonly Main: boolean;
  readonly RouteTableAssociationId: string;
  readonly RouteTableId: string;
  readonly SubnetId: string;
  readonly GatewayId: string;
  readonly AssociationState: RouteTableAssociationState;
}

interface RouteTableAssociationState {
  readonly State: string;
  readonly StatusMessage: string;
}

interface RunInstancesMonitoringEnabled {
  readonly Enabled: boolean;
}

interface RunInstancesRequest {
  readonly BlockDeviceMappings: [];
  readonly ImageId: string;
  readonly InstanceType: string;
  readonly Ipv6AddressCount: number;
  readonly Ipv6Addresses: [];
  readonly KernelId: string;
  readonly KeyName: string;
  readonly MaxCount: number;
  readonly MinCount: number;
  readonly Monitoring: RunInstancesMonitoringEnabled;
  readonly Placement: Placement;
  readonly RamdiskId: string;
  readonly SecurityGroupIds: [];
  readonly SecurityGroups: [];
  readonly SubnetId: string;
  readonly UserData: string;
  readonly AdditionalInfo: string;
  readonly ClientToken: string;
  readonly DisableApiTermination: boolean;
  readonly DryRun: boolean;
  readonly EbsOptimized: boolean;
  readonly IamInstanceProfile: IamInstanceProfileSpecification;
  readonly InstanceInitiatedShutdownBehavior: string;
  readonly NetworkInterfaces: [];
  readonly PrivateIpAddress: string;
  readonly ElasticGpuSpecification: [];
  readonly ElasticInferenceAccelerators: [];
  readonly TagSpecifications: [];
  readonly LaunchTemplate: LaunchTemplateSpecification;
  readonly InstanceMarketOptions: InstanceMarketOptionsRequest;
  readonly CreditSpecification: CreditSpecificationRequest;
  readonly CpuOptions: CpuOptionsRequest;
  readonly CapacityReservationSpecification: CapacityReservationSpecification;
  readonly HibernationOptions: HibernationOptionsRequest;
  readonly LicenseSpecifications: [];
  readonly MetadataOptions: InstanceMetadataOptionsRequest;
  readonly EnclaveOptions: EnclaveOptionsRequest;
  readonly PrivateDnsNameOptions: PrivateDnsNameOptionsRequest;
}

interface RunScheduledInstancesRequest {
  readonly ClientToken: string;
  readonly DryRun: boolean;
  readonly InstanceCount: number;
  readonly LaunchSpecification: ScheduledInstancesLaunchSpecification;
  readonly ScheduledInstanceId: string;
}

interface RunScheduledInstancesResult {
  readonly InstanceIdSet: [];
}

interface S3ObjectTag {
  readonly Key: string;
  readonly Value: string;
}

interface S3Storage {
  readonly AWSAccessKeyId: string;
  readonly Bucket: string;
  readonly Prefix: string;
  readonly UploadPolicy: unknown;
  readonly UploadPolicySignature: string;
}

interface ScheduledInstance {
  readonly AvailabilityZone: string;
  readonly CreateDate: Date;
  readonly HourlyPrice: string;
  readonly InstanceCount: number;
  readonly InstanceType: string;
  readonly NetworkPlatform: string;
  readonly NextSlotStartTime: Date;
  readonly Platform: string;
  readonly PreviousSlotEndTime: Date;
  readonly Recurrence: ScheduledInstanceRecurrence;
  readonly ScheduledInstanceId: string;
  readonly SlotDurationInHours: number;
  readonly TermEndDate: Date;
  readonly TermStartDate: Date;
  readonly TotalScheduledInstanceHours: number;
}

interface ScheduledInstanceAvailability {
  readonly AvailabilityZone: string;
  readonly AvailableInstanceCount: number;
  readonly FirstSlotStartTime: Date;
  readonly HourlyPrice: string;
  readonly InstanceType: string;
  readonly MaxTermDurationInDays: number;
  readonly MinTermDurationInDays: number;
  readonly NetworkPlatform: string;
  readonly Platform: string;
  readonly PurchaseToken: string;
  readonly Recurrence: ScheduledInstanceRecurrence;
  readonly SlotDurationInHours: number;
  readonly TotalScheduledInstanceHours: number;
}

interface ScheduledInstanceRecurrence {
  readonly Frequency: string;
  readonly Interval: number;
  readonly OccurrenceDaySet: [];
  readonly OccurrenceRelativeToEnd: boolean;
  readonly OccurrenceUnit: string;
}

interface ScheduledInstanceRecurrenceRequest {
  readonly Frequency: string;
  readonly Interval: number;
  readonly OccurrenceDays: [];
  readonly OccurrenceRelativeToEnd: boolean;
  readonly OccurrenceUnit: string;
}

interface ScheduledInstancesBlockDeviceMapping {
  readonly DeviceName: string;
  readonly Ebs: ScheduledInstancesEbs;
  readonly NoDevice: string;
  readonly VirtualName: string;
}

interface ScheduledInstancesEbs {
  readonly DeleteOnTermination: boolean;
  readonly Encrypted: boolean;
  readonly Iops: number;
  readonly SnapshotId: string;
  readonly VolumeSize: number;
  readonly VolumeType: string;
}

interface ScheduledInstancesIamInstanceProfile {
  readonly Arn: string;
  readonly Name: string;
}

interface ScheduledInstancesIpv6Address {
  readonly Ipv6Address: string;
}

interface ScheduledInstancesLaunchSpecification {
  readonly BlockDeviceMappings: [];
  readonly EbsOptimized: boolean;
  readonly IamInstanceProfile: ScheduledInstancesIamInstanceProfile;
  readonly ImageId: string;
  readonly InstanceType: string;
  readonly KernelId: string;
  readonly KeyName: string;
  readonly Monitoring: ScheduledInstancesMonitoring;
  readonly NetworkInterfaces: [];
  readonly Placement: ScheduledInstancesPlacement;
  readonly RamdiskId: string;
  readonly SecurityGroupIds: [];
  readonly SubnetId: string;
  readonly UserData: string;
}

interface ScheduledInstancesMonitoring {
  readonly Enabled: boolean;
}

interface ScheduledInstancesNetworkInterface {
  readonly AssociatePublicIpAddress: boolean;
  readonly DeleteOnTermination: boolean;
  readonly Description: string;
  readonly DeviceIndex: number;
  readonly Groups: [];
  readonly Ipv6AddressCount: number;
  readonly Ipv6Addresses: [];
  readonly NetworkInterfaceId: string;
  readonly PrivateIpAddress: string;
  readonly PrivateIpAddressConfigs: [];
  readonly SecondaryPrivateIpAddressCount: number;
  readonly SubnetId: string;
}

interface ScheduledInstancesPlacement {
  readonly AvailabilityZone: string;
  readonly GroupName: string;
}

interface ScheduledInstancesPrivateIpAddressConfig {
  readonly Primary: boolean;
  readonly PrivateIpAddress: string;
}

interface SearchLocalGatewayRoutesRequest {
  readonly LocalGatewayRouteTableId: string;
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly DryRun: boolean;
}

interface SearchLocalGatewayRoutesResult {
  readonly Routes: [];
  readonly NextToken: string;
}

interface SearchTransitGatewayMulticastGroupsRequest {
  readonly TransitGatewayMulticastDomainId: string;
  readonly Filters: [];
  readonly MaxResults: number;
  readonly NextToken: string;
  readonly DryRun: boolean;
}

interface SearchTransitGatewayMulticastGroupsResult {
  readonly MulticastGroups: [];
  readonly NextToken: string;
}

interface SearchTransitGatewayRoutesRequest {
  readonly TransitGatewayRouteTableId: string;
  readonly Filters: [];
  readonly MaxResults: number;
  readonly DryRun: boolean;
}

interface SearchTransitGatewayRoutesResult {
  readonly Routes: [];
  readonly AdditionalRoutesAvailable: boolean;
}

interface SecurityGroup {
  readonly Description: string;
  readonly GroupName: string;
  readonly IpPermissions: [];
  readonly OwnerId: string;
  readonly GroupId: string;
  readonly IpPermissionsEgress: [];
  readonly Tags: [];
  readonly VpcId: string;
}

interface SecurityGroupIdentifier {
  readonly GroupId: string;
  readonly GroupName: string;
}

interface SecurityGroupReference {
  readonly GroupId: string;
  readonly ReferencingVpcId: string;
  readonly VpcPeeringConnectionId: string;
}

interface SecurityGroupRule {
  readonly SecurityGroupRuleId: string;
  readonly GroupId: string;
  readonly GroupOwnerId: string;
  readonly IsEgress: boolean;
  readonly IpProtocol: string;
  readonly FromPort: number;
  readonly ToPort: number;
  readonly CidrIpv4: string;
  readonly CidrIpv6: string;
  readonly PrefixListId: string;
  readonly ReferencedGroupInfo: ReferencedSecurityGroup;
  readonly Description: string;
  readonly Tags: [];
}

interface SecurityGroupRuleDescription {
  readonly SecurityGroupRuleId: string;
  readonly Description: string;
}

interface SecurityGroupRuleRequest {
  readonly IpProtocol: string;
  readonly FromPort: number;
  readonly ToPort: number;
  readonly CidrIpv4: string;
  readonly CidrIpv6: string;
  readonly PrefixListId: string;
  readonly ReferencedGroupId: string;
  readonly Description: string;
}

interface SecurityGroupRuleUpdate {
  readonly SecurityGroupRuleId: string;
  readonly SecurityGroupRule: SecurityGroupRuleRequest;
}

interface SendDiagnosticInterruptRequest {
  readonly InstanceId: string;
  readonly DryRun: boolean;
}

interface ServiceConfiguration {
  readonly ServiceType: [];
  readonly ServiceId: string;
  readonly ServiceName: string;
  readonly ServiceState: string;
  readonly AvailabilityZones: [];
  readonly AcceptanceRequired: boolean;
  readonly ManagesVpcEndpoints: boolean;
  readonly NetworkLoadBalancerArns: [];
  readonly GatewayLoadBalancerArns: [];
  readonly BaseEndpointDnsNames: [];
  readonly PrivateDnsName: string;
  readonly PrivateDnsNameConfiguration: PrivateDnsNameConfiguration;
  readonly Tags: [];
}

interface ServiceDetail {
  readonly ServiceName: string;
  readonly ServiceId: string;
  readonly ServiceType: [];
  readonly AvailabilityZones: [];
  readonly Owner: string;
  readonly BaseEndpointDnsNames: [];
  readonly PrivateDnsName: string;
  readonly PrivateDnsNames: [];
  readonly VpcEndpointPolicySupported: boolean;
  readonly AcceptanceRequired: boolean;
  readonly ManagesVpcEndpoints: boolean;
  readonly Tags: [];
  readonly PrivateDnsNameVerificationState: string;
}

interface ServiceTypeDetail {
  readonly ServiceType: string;
}

interface SlotDateTimeRangeRequest {
  readonly EarliestTime: Date;
  readonly LatestTime: Date;
}

interface SlotStartTimeRangeRequest {
  readonly EarliestTime: Date;
  readonly LatestTime: Date;
}

interface Snapshot {
  readonly DataEncryptionKeyId: string;
  readonly Description: string;
  readonly Encrypted: boolean;
  readonly KmsKeyId: string;
  readonly OwnerId: string;
  readonly Progress: string;
  readonly SnapshotId: string;
  readonly StartTime: Date;
  readonly State: string;
  readonly StateMessage: string;
  readonly VolumeId: string;
  readonly VolumeSize: number;
  readonly OwnerAlias: string;
  readonly OutpostArn: string;
  readonly Tags: [];
  readonly StorageTier: string;
  readonly RestoreExpiryTime: Date;
}

interface SnapshotDetail {
  readonly Description: string;
  readonly DeviceName: string;
  readonly DiskImageSize: unknown;
  readonly Format: string;
  readonly Progress: string;
  readonly SnapshotId: string;
  readonly Status: string;
  readonly StatusMessage: string;
  readonly Url: string;
  readonly UserBucket: UserBucketDetails;
}

interface SnapshotDiskContainer {
  readonly Description: string;
  readonly Format: string;
  readonly Url: string;
  readonly UserBucket: UserBucket;
}

interface SnapshotInfo {
  readonly Description: string;
  readonly Tags: [];
  readonly Encrypted: boolean;
  readonly VolumeId: string;
  readonly State: string;
  readonly VolumeSize: number;
  readonly StartTime: Date;
  readonly Progress: string;
  readonly OwnerId: string;
  readonly SnapshotId: string;
  readonly OutpostArn: string;
}

interface SnapshotRecycleBinInfo {
  readonly SnapshotId: string;
  readonly RecycleBinEnterTime: Date;
  readonly RecycleBinExitTime: Date;
  readonly Description: string;
  readonly VolumeId: string;
}

interface SnapshotTaskDetail {
  readonly Description: string;
  readonly DiskImageSize: unknown;
  readonly Encrypted: boolean;
  readonly Format: string;
  readonly KmsKeyId: string;
  readonly Progress: string;
  readonly SnapshotId: string;
  readonly Status: string;
  readonly StatusMessage: string;
  readonly Url: string;
  readonly UserBucket: UserBucketDetails;
}

interface SnapshotTierStatus {
  readonly SnapshotId: string;
  readonly VolumeId: string;
  readonly Status: string;
  readonly OwnerId: string;
  readonly Tags: [];
  readonly StorageTier: string;
  readonly LastTieringStartTime: Date;
  readonly LastTieringProgress: number;
  readonly LastTieringOperationStatus: string;
  readonly LastTieringOperationStatusDetail: string;
  readonly ArchivalCompleteTime: Date;
  readonly RestoreExpiryTime: Date;
}

interface SpotCapacityRebalance {
  readonly ReplacementStrategy: string;
  readonly TerminationDelay: number;
}

interface SpotDatafeedSubscription {
  readonly Bucket: string;
  readonly Fault: SpotInstanceStateFault;
  readonly OwnerId: string;
  readonly Prefix: string;
  readonly State: string;
}

interface SpotFleetLaunchSpecification {
  readonly SecurityGroups: [];
  readonly AddressingType: string;
  readonly BlockDeviceMappings: [];
  readonly EbsOptimized: boolean;
  readonly IamInstanceProfile: IamInstanceProfileSpecification;
  readonly ImageId: string;
  readonly InstanceType: string;
  readonly KernelId: string;
  readonly KeyName: string;
  readonly Monitoring: SpotFleetMonitoring;
  readonly NetworkInterfaces: [];
  readonly Placement: SpotPlacement;
  readonly RamdiskId: string;
  readonly SpotPrice: string;
  readonly SubnetId: string;
  readonly UserData: string;
  readonly WeightedCapacity: unknown;
  readonly TagSpecifications: [];
  readonly InstanceRequirements: InstanceRequirements;
}

interface SpotFleetMonitoring {
  readonly Enabled: boolean;
}

interface SpotFleetRequestConfig {
  readonly ActivityStatus: string;
  readonly CreateTime: Date;
  readonly SpotFleetRequestConfig: SpotFleetRequestConfigData;
  readonly SpotFleetRequestId: string;
  readonly SpotFleetRequestState: string;
  readonly Tags: [];
}

interface SpotFleetRequestConfigData {
  readonly AllocationStrategy: string;
  readonly OnDemandAllocationStrategy: string;
  readonly SpotMaintenanceStrategies: SpotMaintenanceStrategies;
  readonly ClientToken: string;
  readonly ExcessCapacityTerminationPolicy: string;
  readonly FulfilledCapacity: unknown;
  readonly OnDemandFulfilledCapacity: unknown;
  readonly IamFleetRole: string;
  readonly LaunchSpecifications: [];
  readonly LaunchTemplateConfigs: [];
  readonly SpotPrice: string;
  readonly TargetCapacity: number;
  readonly OnDemandTargetCapacity: number;
  readonly OnDemandMaxTotalPrice: string;
  readonly SpotMaxTotalPrice: string;
  readonly TerminateInstancesWithExpiration: boolean;
  readonly Type: string;
  readonly ValidFrom: Date;
  readonly ValidUntil: Date;
  readonly ReplaceUnhealthyInstances: boolean;
  readonly InstanceInterruptionBehavior: string;
  readonly LoadBalancersConfig: LoadBalancersConfig;
  readonly InstancePoolsToUseCount: number;
  readonly Context: string;
  readonly TargetCapacityUnitType: string;
  readonly TagSpecifications: [];
}

interface SpotFleetTagSpecification {
  readonly ResourceType: string;
  readonly Tags: [];
}

interface SpotInstanceRequest {
  readonly ActualBlockHourlyPrice: string;
  readonly AvailabilityZoneGroup: string;
  readonly BlockDurationMinutes: number;
  readonly CreateTime: Date;
  readonly Fault: SpotInstanceStateFault;
  readonly InstanceId: string;
  readonly LaunchGroup: string;
  readonly LaunchSpecification: LaunchSpecification;
  readonly LaunchedAvailabilityZone: string;
  readonly ProductDescription: string;
  readonly SpotInstanceRequestId: string;
  readonly SpotPrice: string;
  readonly State: string;
  readonly Status: SpotInstanceStatus;
  readonly Tags: [];
  readonly Type: string;
  readonly ValidFrom: Date;
  readonly ValidUntil: Date;
  readonly InstanceInterruptionBehavior: string;
}

interface SpotInstanceStateFault {
  readonly Code: string;
  readonly Message: string;
}

interface SpotInstanceStatus {
  readonly Code: string;
  readonly Message: string;
  readonly UpdateTime: Date;
}

interface SpotMaintenanceStrategies {
  readonly CapacityRebalance: SpotCapacityRebalance;
}

interface SpotMarketOptions {
  readonly MaxPrice: string;
  readonly SpotInstanceType: string;
  readonly BlockDurationMinutes: number;
  readonly ValidUntil: Date;
  readonly InstanceInterruptionBehavior: string;
}

interface SpotOptions {
  readonly AllocationStrategy: string;
  readonly MaintenanceStrategies: FleetSpotMaintenanceStrategies;
  readonly InstanceInterruptionBehavior: string;
  readonly InstancePoolsToUseCount: number;
  readonly SingleInstanceType: boolean;
  readonly SingleAvailabilityZone: boolean;
  readonly MinTargetCapacity: number;
  readonly MaxTotalPrice: string;
}

interface SpotOptionsRequest {
  readonly AllocationStrategy: string;
  readonly MaintenanceStrategies: FleetSpotMaintenanceStrategiesRequest;
  readonly InstanceInterruptionBehavior: string;
  readonly InstancePoolsToUseCount: number;
  readonly SingleInstanceType: boolean;
  readonly SingleAvailabilityZone: boolean;
  readonly MinTargetCapacity: number;
  readonly MaxTotalPrice: string;
}

interface SpotPlacement {
  readonly AvailabilityZone: string;
  readonly GroupName: string;
  readonly Tenancy: string;
}

interface SpotPlacementScore {
  readonly Region: string;
  readonly AvailabilityZoneId: string;
  readonly Score: number;
}

interface SpotPrice {
  readonly AvailabilityZone: string;
  readonly InstanceType: string;
  readonly ProductDescription: string;
  readonly SpotPrice: string;
  readonly Timestamp: Date;
}

interface StaleIpPermission {
  readonly FromPort: number;
  readonly IpProtocol: string;
  readonly IpRanges: [];
  readonly PrefixListIds: [];
  readonly ToPort: number;
  readonly UserIdGroupPairs: [];
}

interface StaleSecurityGroup {
  readonly Description: string;
  readonly GroupId: string;
  readonly GroupName: string;
  readonly StaleIpPermissions: [];
  readonly StaleIpPermissionsEgress: [];
  readonly VpcId: string;
}

interface StartInstancesRequest {
  readonly InstanceIds: [];
  readonly AdditionalInfo: string;
  readonly DryRun: boolean;
}

interface StartInstancesResult {
  readonly StartingInstances: [];
}

interface StartNetworkInsightsAccessScopeAnalysisRequest {
  readonly NetworkInsightsAccessScopeId: string;
  readonly DryRun: boolean;
  readonly TagSpecifications: [];
  readonly ClientToken: string;
}

interface StartNetworkInsightsAccessScopeAnalysisResult {
  readonly NetworkInsightsAccessScopeAnalysis: NetworkInsightsAccessScopeAnalysis;
}

interface StartNetworkInsightsAnalysisRequest {
  readonly NetworkInsightsPathId: string;
  readonly FilterInArns: [];
  readonly DryRun: boolean;
  readonly TagSpecifications: [];
  readonly ClientToken: string;
}

interface StartNetworkInsightsAnalysisResult {
  readonly NetworkInsightsAnalysis: NetworkInsightsAnalysis;
}

interface StartVpcEndpointServicePrivateDnsVerificationRequest {
  readonly DryRun: boolean;
  readonly ServiceId: string;
}

interface StartVpcEndpointServicePrivateDnsVerificationResult {
  readonly ReturnValue: boolean;
}

interface StateReason {
  readonly Code: string;
  readonly Message: string;
}

interface StopInstancesRequest {
  readonly InstanceIds: [];
  readonly Hibernate: boolean;
  readonly DryRun: boolean;
  readonly Force: boolean;
}

interface StopInstancesResult {
  readonly StoppingInstances: [];
}

interface Storage {
  readonly S3: S3Storage;
}

interface StorageLocation {
  readonly Bucket: string;
  readonly Key: string;
}

interface StoreImageTaskResult {
  readonly AmiId: string;
  readonly TaskStartTime: Date;
  readonly Bucket: string;
  readonly S3objectKey: string;
  readonly ProgressPercentage: number;
  readonly StoreTaskState: string;
  readonly StoreTaskFailureReason: string;
}

interface Subnet {
  readonly AvailabilityZone: string;
  readonly AvailabilityZoneId: string;
  readonly AvailableIpAddressCount: number;
  readonly CidrBlock: string;
  readonly DefaultForAz: boolean;
  readonly EnableLniAtDeviceIndex: number;
  readonly MapPublicIpOnLaunch: boolean;
  readonly MapCustomerOwnedIpOnLaunch: boolean;
  readonly CustomerOwnedIpv4Pool: string;
  readonly State: string;
  readonly SubnetId: string;
  readonly VpcId: string;
  readonly OwnerId: string;
  readonly AssignIpv6AddressOnCreation: boolean;
  readonly Ipv6CidrBlockAssociationSet: [];
  readonly Tags: [];
  readonly SubnetArn: string;
  readonly OutpostArn: string;
  readonly EnableDns64: boolean;
  readonly Ipv6Native: boolean;
  readonly PrivateDnsNameOptionsOnLaunch: PrivateDnsNameOptionsOnLaunch;
}

interface SubnetAssociation {
  readonly SubnetId: string;
  readonly State: string;
}

interface SubnetCidrBlockState {
  readonly State: string;
  readonly StatusMessage: string;
}

interface SubnetCidrReservation {
  readonly SubnetCidrReservationId: string;
  readonly SubnetId: string;
  readonly Cidr: string;
  readonly ReservationType: string;
  readonly OwnerId: string;
  readonly Description: string;
  readonly Tags: [];
}

interface SubnetIpv6CidrBlockAssociation {
  readonly AssociationId: string;
  readonly Ipv6CidrBlock: string;
  readonly Ipv6CidrBlockState: SubnetCidrBlockState;
}

interface SuccessfulInstanceCreditSpecificationItem {
  readonly InstanceId: string;
}

interface SuccessfulQueuedPurchaseDeletion {
  readonly ReservedInstancesId: string;
}

interface Tag {
  readonly Key: string;
  readonly Value: string;
}

interface TagDescription {
  readonly Key: string;
  readonly ResourceId: string;
  readonly ResourceType: string;
  readonly Value: string;
}

interface TagSpecification {
  readonly ResourceType: string;
  readonly Tags: [];
}

interface TargetCapacitySpecification {
  readonly TotalTargetCapacity: number;
  readonly OnDemandTargetCapacity: number;
  readonly SpotTargetCapacity: number;
  readonly DefaultTargetCapacityType: string;
  readonly TargetCapacityUnitType: string;
}

interface TargetCapacitySpecificationRequest {
  readonly TotalTargetCapacity: number;
  readonly OnDemandTargetCapacity: number;
  readonly SpotTargetCapacity: number;
  readonly DefaultTargetCapacityType: string;
  readonly TargetCapacityUnitType: string;
}

interface TargetConfiguration {
  readonly InstanceCount: number;
  readonly OfferingId: string;
}

interface TargetConfigurationRequest {
  readonly InstanceCount: number;
  readonly OfferingId: string;
}

interface TargetGroup {
  readonly Arn: string;
}

interface TargetGroupsConfig {
  readonly TargetGroups: [];
}

interface TargetNetwork {
  readonly AssociationId: string;
  readonly VpcId: string;
  readonly TargetNetworkId: string;
  readonly ClientVpnEndpointId: string;
  readonly Status: AssociationStatus;
  readonly SecurityGroups: [];
}

interface TargetReservationValue {
  readonly ReservationValue: ReservationValue;
  readonly TargetConfiguration: TargetConfiguration;
}

interface TerminateClientVpnConnectionsRequest {
  readonly ClientVpnEndpointId: string;
  readonly ConnectionId: string;
  readonly Username: string;
  readonly DryRun: boolean;
}

interface TerminateClientVpnConnectionsResult {
  readonly ClientVpnEndpointId: string;
  readonly Username: string;
  readonly ConnectionStatuses: [];
}

interface TerminateConnectionStatus {
  readonly ConnectionId: string;
  readonly PreviousStatus: ClientVpnConnectionStatus;
  readonly CurrentStatus: ClientVpnConnectionStatus;
}

interface TerminateInstancesRequest {
  readonly InstanceIds: [];
  readonly DryRun: boolean;
}

interface TerminateInstancesResult {
  readonly TerminatingInstances: [];
}

interface ThroughResourcesStatement {
  readonly ResourceStatement: ResourceStatement;
}

interface ThroughResourcesStatementRequest {
  readonly ResourceStatement: ResourceStatementRequest;
}

interface TotalLocalStorageGB {
  readonly Min: unknown;
  readonly Max: unknown;
}

interface TotalLocalStorageGBRequest {
  readonly Min: unknown;
  readonly Max: unknown;
}

interface TrafficMirrorFilter {
  readonly TrafficMirrorFilterId: string;
  readonly IngressFilterRules: [];
  readonly EgressFilterRules: [];
  readonly NetworkServices: [];
  readonly Description: string;
  readonly Tags: [];
}

interface TrafficMirrorFilterRule {
  readonly TrafficMirrorFilterRuleId: string;
  readonly TrafficMirrorFilterId: string;
  readonly TrafficDirection: string;
  readonly RuleNumber: number;
  readonly RuleAction: string;
  readonly Protocol: number;
  readonly DestinationPortRange: TrafficMirrorPortRange;
  readonly SourcePortRange: TrafficMirrorPortRange;
  readonly DestinationCidrBlock: string;
  readonly SourceCidrBlock: string;
  readonly Description: string;
}

interface TrafficMirrorPortRange {
  readonly FromPort: number;
  readonly ToPort: number;
}

interface TrafficMirrorPortRangeRequest {
  readonly FromPort: number;
  readonly ToPort: number;
}

interface TrafficMirrorSession {
  readonly TrafficMirrorSessionId: string;
  readonly TrafficMirrorTargetId: string;
  readonly TrafficMirrorFilterId: string;
  readonly NetworkInterfaceId: string;
  readonly OwnerId: string;
  readonly PacketLength: number;
  readonly SessionNumber: number;
  readonly VirtualNetworkId: number;
  readonly Description: string;
  readonly Tags: [];
}

interface TrafficMirrorTarget {
  readonly TrafficMirrorTargetId: string;
  readonly NetworkInterfaceId: string;
  readonly NetworkLoadBalancerArn: string;
  readonly Type: string;
  readonly Description: string;
  readonly OwnerId: string;
  readonly Tags: [];
}

interface TransitGateway {
  readonly TransitGatewayId: string;
  readonly TransitGatewayArn: string;
  readonly State: string;
  readonly OwnerId: string;
  readonly Description: string;
  readonly CreationTime: Date;
  readonly Options: TransitGatewayOptions;
  readonly Tags: [];
}

interface TransitGatewayAssociation {
  readonly TransitGatewayRouteTableId: string;
  readonly TransitGatewayAttachmentId: string;
  readonly ResourceId: string;
  readonly ResourceType: string;
  readonly State: string;
}

interface TransitGatewayAttachment {
  readonly TransitGatewayAttachmentId: string;
  readonly TransitGatewayId: string;
  readonly TransitGatewayOwnerId: string;
  readonly ResourceOwnerId: string;
  readonly ResourceType: string;
  readonly ResourceId: string;
  readonly State: string;
  readonly Association: TransitGatewayAttachmentAssociation;
  readonly CreationTime: Date;
  readonly Tags: [];
}

interface TransitGatewayAttachmentAssociation {
  readonly TransitGatewayRouteTableId: string;
  readonly State: string;
}

interface TransitGatewayAttachmentBgpConfiguration {
  readonly TransitGatewayAsn: number;
  readonly PeerAsn: number;
  readonly TransitGatewayAddress: string;
  readonly PeerAddress: string;
  readonly BgpStatus: string;
}

interface TransitGatewayAttachmentPropagation {
  readonly TransitGatewayRouteTableId: string;
  readonly State: string;
}

interface TransitGatewayConnect {
  readonly TransitGatewayAttachmentId: string;
  readonly TransportTransitGatewayAttachmentId: string;
  readonly TransitGatewayId: string;
  readonly State: string;
  readonly CreationTime: Date;
  readonly Options: TransitGatewayConnectOptions;
  readonly Tags: [];
}

interface TransitGatewayConnectOptions {
  readonly Protocol: string;
}

interface TransitGatewayConnectPeer {
  readonly TransitGatewayAttachmentId: string;
  readonly TransitGatewayConnectPeerId: string;
  readonly State: string;
  readonly CreationTime: Date;
  readonly ConnectPeerConfiguration: TransitGatewayConnectPeerConfiguration;
  readonly Tags: [];
}

interface TransitGatewayConnectPeerConfiguration {
  readonly TransitGatewayAddress: string;
  readonly PeerAddress: string;
  readonly InsideCidrBlocks: [];
  readonly Protocol: string;
  readonly BgpConfigurations: [];
}

interface TransitGatewayConnectRequestBgpOptions {
  readonly PeerAsn: number;
}

interface TransitGatewayMulticastDeregisteredGroupMembers {
  readonly TransitGatewayMulticastDomainId: string;
  readonly DeregisteredNetworkInterfaceIds: [];
  readonly GroupIpAddress: string;
}

interface TransitGatewayMulticastDeregisteredGroupSources {
  readonly TransitGatewayMulticastDomainId: string;
  readonly DeregisteredNetworkInterfaceIds: [];
  readonly GroupIpAddress: string;
}

interface TransitGatewayMulticastDomain {
  readonly TransitGatewayMulticastDomainId: string;
  readonly TransitGatewayId: string;
  readonly TransitGatewayMulticastDomainArn: string;
  readonly OwnerId: string;
  readonly Options: TransitGatewayMulticastDomainOptions;
  readonly State: string;
  readonly CreationTime: Date;
  readonly Tags: [];
}

interface TransitGatewayMulticastDomainAssociation {
  readonly TransitGatewayAttachmentId: string;
  readonly ResourceId: string;
  readonly ResourceType: string;
  readonly ResourceOwnerId: string;
  readonly Subnet: SubnetAssociation;
}

interface TransitGatewayMulticastDomainAssociations {
  readonly TransitGatewayMulticastDomainId: string;
  readonly TransitGatewayAttachmentId: string;
  readonly ResourceId: string;
  readonly ResourceType: string;
  readonly ResourceOwnerId: string;
  readonly Subnets: [];
}

interface TransitGatewayMulticastDomainOptions {
  readonly Igmpv2Support: string;
  readonly StaticSourcesSupport: string;
  readonly AutoAcceptSharedAssociations: string;
}

interface TransitGatewayMulticastGroup {
  readonly GroupIpAddress: string;
  readonly TransitGatewayAttachmentId: string;
  readonly SubnetId: string;
  readonly ResourceId: string;
  readonly ResourceType: string;
  readonly ResourceOwnerId: string;
  readonly NetworkInterfaceId: string;
  readonly GroupMember: boolean;
  readonly GroupSource: boolean;
  readonly MemberType: string;
  readonly SourceType: string;
}

interface TransitGatewayMulticastRegisteredGroupMembers {
  readonly TransitGatewayMulticastDomainId: string;
  readonly RegisteredNetworkInterfaceIds: [];
  readonly GroupIpAddress: string;
}

interface TransitGatewayMulticastRegisteredGroupSources {
  readonly TransitGatewayMulticastDomainId: string;
  readonly RegisteredNetworkInterfaceIds: [];
  readonly GroupIpAddress: string;
}

interface TransitGatewayOptions {
  readonly AmazonSideAsn: number;
  readonly TransitGatewayCidrBlocks: [];
  readonly AutoAcceptSharedAttachments: string;
  readonly DefaultRouteTableAssociation: string;
  readonly AssociationDefaultRouteTableId: string;
  readonly DefaultRouteTablePropagation: string;
  readonly PropagationDefaultRouteTableId: string;
  readonly VpnEcmpSupport: string;
  readonly DnsSupport: string;
  readonly MulticastSupport: string;
}

interface TransitGatewayPeeringAttachment {
  readonly TransitGatewayAttachmentId: string;
  readonly RequesterTgwInfo: PeeringTgwInfo;
  readonly AccepterTgwInfo: PeeringTgwInfo;
  readonly Status: PeeringAttachmentStatus;
  readonly State: string;
  readonly CreationTime: Date;
  readonly Tags: [];
}

interface TransitGatewayPrefixListAttachment {
  readonly TransitGatewayAttachmentId: string;
  readonly ResourceType: string;
  readonly ResourceId: string;
}

interface TransitGatewayPrefixListReference {
  readonly TransitGatewayRouteTableId: string;
  readonly PrefixListId: string;
  readonly PrefixListOwnerId: string;
  readonly State: string;
  readonly Blackhole: boolean;
  readonly TransitGatewayAttachment: TransitGatewayPrefixListAttachment;
}

interface TransitGatewayPropagation {
  readonly TransitGatewayAttachmentId: string;
  readonly ResourceId: string;
  readonly ResourceType: string;
  readonly TransitGatewayRouteTableId: string;
  readonly State: string;
}

interface TransitGatewayRequestOptions {
  readonly AmazonSideAsn: number;
  readonly AutoAcceptSharedAttachments: string;
  readonly DefaultRouteTableAssociation: string;
  readonly DefaultRouteTablePropagation: string;
  readonly VpnEcmpSupport: string;
  readonly DnsSupport: string;
  readonly MulticastSupport: string;
  readonly TransitGatewayCidrBlocks: [];
}

interface TransitGatewayRoute {
  readonly DestinationCidrBlock: string;
  readonly PrefixListId: string;
  readonly TransitGatewayAttachments: [];
  readonly Type: string;
  readonly State: string;
}

interface TransitGatewayRouteAttachment {
  readonly ResourceId: string;
  readonly TransitGatewayAttachmentId: string;
  readonly ResourceType: string;
}

interface TransitGatewayRouteTable {
  readonly TransitGatewayRouteTableId: string;
  readonly TransitGatewayId: string;
  readonly State: string;
  readonly DefaultAssociationRouteTable: boolean;
  readonly DefaultPropagationRouteTable: boolean;
  readonly CreationTime: Date;
  readonly Tags: [];
}

interface TransitGatewayRouteTableAssociation {
  readonly TransitGatewayAttachmentId: string;
  readonly ResourceId: string;
  readonly ResourceType: string;
  readonly State: string;
}

interface TransitGatewayRouteTablePropagation {
  readonly TransitGatewayAttachmentId: string;
  readonly ResourceId: string;
  readonly ResourceType: string;
  readonly State: string;
}

interface TransitGatewayVpcAttachment {
  readonly TransitGatewayAttachmentId: string;
  readonly TransitGatewayId: string;
  readonly VpcId: string;
  readonly VpcOwnerId: string;
  readonly State: string;
  readonly SubnetIds: [];
  readonly CreationTime: Date;
  readonly Options: TransitGatewayVpcAttachmentOptions;
  readonly Tags: [];
}

interface TransitGatewayVpcAttachmentOptions {
  readonly DnsSupport: string;
  readonly Ipv6Support: string;
  readonly ApplianceModeSupport: string;
}

interface TrunkInterfaceAssociation {
  readonly AssociationId: string;
  readonly BranchInterfaceId: string;
  readonly TrunkInterfaceId: string;
  readonly InterfaceProtocol: string;
  readonly VlanId: number;
  readonly GreKey: number;
  readonly Tags: [];
}

interface TunnelOption {
  readonly OutsideIpAddress: string;
  readonly TunnelInsideCidr: string;
  readonly TunnelInsideIpv6Cidr: string;
  readonly PreSharedKey: string;
  readonly Phase1LifetimeSeconds: number;
  readonly Phase2LifetimeSeconds: number;
  readonly RekeyMarginTimeSeconds: number;
  readonly RekeyFuzzPercentage: number;
  readonly ReplayWindowSize: number;
  readonly DpdTimeoutSeconds: number;
  readonly DpdTimeoutAction: string;
  readonly Phase1EncryptionAlgorithms: [];
  readonly Phase2EncryptionAlgorithms: [];
  readonly Phase1IntegrityAlgorithms: [];
  readonly Phase2IntegrityAlgorithms: [];
  readonly Phase1DHGroupNumbers: [];
  readonly Phase2DHGroupNumbers: [];
  readonly IkeVersions: [];
  readonly StartupAction: string;
}

interface UnassignIpv6AddressesRequest {
  readonly Ipv6Addresses: [];
  readonly Ipv6Prefixes: [];
  readonly NetworkInterfaceId: string;
}

interface UnassignIpv6AddressesResult {
  readonly NetworkInterfaceId: string;
  readonly UnassignedIpv6Addresses: [];
  readonly UnassignedIpv6Prefixes: [];
}

interface UnassignPrivateIpAddressesRequest {
  readonly NetworkInterfaceId: string;
  readonly PrivateIpAddresses: [];
  readonly Ipv4Prefixes: [];
}

interface UnmonitorInstancesRequest {
  readonly InstanceIds: [];
  readonly DryRun: boolean;
}

interface UnmonitorInstancesResult {
  readonly InstanceMonitorings: [];
}

interface UnsuccessfulInstanceCreditSpecificationItem {
  readonly InstanceId: string;
  readonly Error: UnsuccessfulInstanceCreditSpecificationItemError;
}

interface UnsuccessfulInstanceCreditSpecificationItemError {
  readonly Code: string;
  readonly Message: string;
}

interface UnsuccessfulItem {
  readonly Error: UnsuccessfulItemError;
  readonly ResourceId: string;
}

interface UnsuccessfulItemError {
  readonly Code: string;
  readonly Message: string;
}

interface UpdateSecurityGroupRuleDescriptionsEgressRequest {
  readonly DryRun: boolean;
  readonly GroupId: string;
  readonly GroupName: string;
  readonly IpPermissions: [];
  readonly SecurityGroupRuleDescriptions: [];
}

interface UpdateSecurityGroupRuleDescriptionsEgressResult {
  readonly Return: boolean;
}

interface UpdateSecurityGroupRuleDescriptionsIngressRequest {
  readonly DryRun: boolean;
  readonly GroupId: string;
  readonly GroupName: string;
  readonly IpPermissions: [];
  readonly SecurityGroupRuleDescriptions: [];
}

interface UpdateSecurityGroupRuleDescriptionsIngressResult {
  readonly Return: boolean;
}

interface UserBucket {
  readonly S3Bucket: string;
  readonly S3Key: string;
}

interface UserBucketDetails {
  readonly S3Bucket: string;
  readonly S3Key: string;
}

interface UserData {
  readonly Data: string;
}

interface UserIdGroupPair {
  readonly Description: string;
  readonly GroupId: string;
  readonly GroupName: string;
  readonly PeeringStatus: string;
  readonly UserId: string;
  readonly VpcId: string;
  readonly VpcPeeringConnectionId: string;
}

interface VCpuCountRange {
  readonly Min: number;
  readonly Max: number;
}

interface VCpuCountRangeRequest {
  readonly Min: number;
  readonly Max: number;
}

interface VCpuInfo {
  readonly DefaultVCpus: number;
  readonly DefaultCores: number;
  readonly DefaultThreadsPerCore: number;
  readonly ValidCores: [];
  readonly ValidThreadsPerCore: [];
}

interface ValidationError {
  readonly Code: string;
  readonly Message: string;
}

interface ValidationWarning {
  readonly Errors: [];
}

interface VgwTelemetry {
  readonly AcceptedRouteCount: number;
  readonly LastStatusChange: Date;
  readonly OutsideIpAddress: string;
  readonly Status: string;
  readonly StatusMessage: string;
  readonly CertificateArn: string;
}

interface Volume {
  readonly Attachments: [];
  readonly AvailabilityZone: string;
  readonly CreateTime: Date;
  readonly Encrypted: boolean;
  readonly KmsKeyId: string;
  readonly OutpostArn: string;
  readonly Size: number;
  readonly SnapshotId: string;
  readonly State: string;
  readonly VolumeId: string;
  readonly Iops: number;
  readonly Tags: [];
  readonly VolumeType: string;
  readonly FastRestored: boolean;
  readonly MultiAttachEnabled: boolean;
  readonly Throughput: number;
}

interface VolumeAttachment {
  readonly AttachTime: Date;
  readonly Device: string;
  readonly InstanceId: string;
  readonly State: string;
  readonly VolumeId: string;
  readonly DeleteOnTermination: boolean;
}

interface VolumeDetail {
  readonly Size: number;
}

interface VolumeModification {
  readonly VolumeId: string;
  readonly ModificationState: string;
  readonly StatusMessage: string;
  readonly TargetSize: number;
  readonly TargetIops: number;
  readonly TargetVolumeType: string;
  readonly TargetThroughput: number;
  readonly TargetMultiAttachEnabled: boolean;
  readonly OriginalSize: number;
  readonly OriginalIops: number;
  readonly OriginalVolumeType: string;
  readonly OriginalThroughput: number;
  readonly OriginalMultiAttachEnabled: boolean;
  readonly Progress: number;
  readonly StartTime: Date;
  readonly EndTime: Date;
}

interface VolumeStatusAction {
  readonly Code: string;
  readonly Description: string;
  readonly EventId: string;
  readonly EventType: string;
}

interface VolumeStatusAttachmentStatus {
  readonly IoPerformance: string;
  readonly InstanceId: string;
}

interface VolumeStatusDetails {
  readonly Name: string;
  readonly Status: string;
}

interface VolumeStatusEvent {
  readonly Description: string;
  readonly EventId: string;
  readonly EventType: string;
  readonly NotAfter: Date;
  readonly NotBefore: Date;
  readonly InstanceId: string;
}

interface VolumeStatusInfo {
  readonly Details: [];
  readonly Status: string;
}

interface VolumeStatusItem {
  readonly Actions: [];
  readonly AvailabilityZone: string;
  readonly OutpostArn: string;
  readonly Events: [];
  readonly VolumeId: string;
  readonly VolumeStatus: VolumeStatusInfo;
  readonly AttachmentStatuses: [];
}

interface Vpc {
  readonly CidrBlock: string;
  readonly DhcpOptionsId: string;
  readonly State: string;
  readonly VpcId: string;
  readonly OwnerId: string;
  readonly InstanceTenancy: string;
  readonly Ipv6CidrBlockAssociationSet: [];
  readonly CidrBlockAssociationSet: [];
  readonly IsDefault: boolean;
  readonly Tags: [];
}

interface VpcAttachment {
  readonly State: string;
  readonly VpcId: string;
}

interface VpcCidrBlockAssociation {
  readonly AssociationId: string;
  readonly CidrBlock: string;
  readonly CidrBlockState: VpcCidrBlockState;
}

interface VpcCidrBlockState {
  readonly State: string;
  readonly StatusMessage: string;
}

interface VpcClassicLink {
  readonly ClassicLinkEnabled: boolean;
  readonly Tags: [];
  readonly VpcId: string;
}

interface VpcEndpoint {
  readonly VpcEndpointId: string;
  readonly VpcEndpointType: string;
  readonly VpcId: string;
  readonly ServiceName: string;
  readonly State: string;
  readonly PolicyDocument: string;
  readonly RouteTableIds: [];
  readonly SubnetIds: [];
  readonly Groups: [];
  readonly PrivateDnsEnabled: boolean;
  readonly RequesterManaged: boolean;
  readonly NetworkInterfaceIds: [];
  readonly DnsEntries: [];
  readonly CreationTimestamp: Date;
  readonly Tags: [];
  readonly OwnerId: string;
  readonly LastError: LastError;
}

interface VpcEndpointConnection {
  readonly ServiceId: string;
  readonly VpcEndpointId: string;
  readonly VpcEndpointOwner: string;
  readonly VpcEndpointState: string;
  readonly CreationTimestamp: Date;
  readonly DnsEntries: [];
  readonly NetworkLoadBalancerArns: [];
  readonly GatewayLoadBalancerArns: [];
}

interface VpcIpv6CidrBlockAssociation {
  readonly AssociationId: string;
  readonly Ipv6CidrBlock: string;
  readonly Ipv6CidrBlockState: VpcCidrBlockState;
  readonly NetworkBorderGroup: string;
  readonly Ipv6Pool: string;
}

interface VpcPeeringConnection {
  readonly AccepterVpcInfo: VpcPeeringConnectionVpcInfo;
  readonly ExpirationTime: Date;
  readonly RequesterVpcInfo: VpcPeeringConnectionVpcInfo;
  readonly Status: VpcPeeringConnectionStateReason;
  readonly Tags: [];
  readonly VpcPeeringConnectionId: string;
}

interface VpcPeeringConnectionOptionsDescription {
  readonly AllowDnsResolutionFromRemoteVpc: boolean;
  readonly AllowEgressFromLocalClassicLinkToRemoteVpc: boolean;
  readonly AllowEgressFromLocalVpcToRemoteClassicLink: boolean;
}

interface VpcPeeringConnectionStateReason {
  readonly Code: string;
  readonly Message: string;
}

interface VpcPeeringConnectionVpcInfo {
  readonly CidrBlock: string;
  readonly Ipv6CidrBlockSet: [];
  readonly CidrBlockSet: [];
  readonly OwnerId: string;
  readonly PeeringOptions: VpcPeeringConnectionOptionsDescription;
  readonly VpcId: string;
  readonly Region: string;
}

interface VpnConnection {
  readonly CustomerGatewayConfiguration: string;
  readonly CustomerGatewayId: string;
  readonly Category: string;
  readonly State: string;
  readonly Type: string;
  readonly VpnConnectionId: string;
  readonly VpnGatewayId: string;
  readonly TransitGatewayId: string;
  readonly CoreNetworkArn: string;
  readonly CoreNetworkAttachmentArn: string;
  readonly GatewayAssociationState: string;
  readonly Options: VpnConnectionOptions;
  readonly Routes: [];
  readonly Tags: [];
  readonly VgwTelemetry: [];
}

interface VpnConnectionDeviceType {
  readonly VpnConnectionDeviceTypeId: string;
  readonly Vendor: string;
  readonly Platform: string;
  readonly Software: string;
}

interface VpnConnectionOptions {
  readonly EnableAcceleration: boolean;
  readonly StaticRoutesOnly: boolean;
  readonly LocalIpv4NetworkCidr: string;
  readonly RemoteIpv4NetworkCidr: string;
  readonly LocalIpv6NetworkCidr: string;
  readonly RemoteIpv6NetworkCidr: string;
  readonly TunnelInsideIpVersion: string;
  readonly TunnelOptions: [];
}

interface VpnConnectionOptionsSpecification {
  readonly EnableAcceleration: boolean;
  readonly StaticRoutesOnly: boolean;
  readonly TunnelInsideIpVersion: string;
  readonly TunnelOptions: [];
  readonly LocalIpv4NetworkCidr: string;
  readonly RemoteIpv4NetworkCidr: string;
  readonly LocalIpv6NetworkCidr: string;
  readonly RemoteIpv6NetworkCidr: string;
}

interface VpnGateway {
  readonly AvailabilityZone: string;
  readonly State: string;
  readonly Type: string;
  readonly VpcAttachments: [];
  readonly VpnGatewayId: string;
  readonly AmazonSideAsn: number;
  readonly Tags: [];
}

interface VpnStaticRoute {
  readonly DestinationCidrBlock: string;
  readonly Source: string;
  readonly State: string;
}

interface VpnTunnelOptionsSpecification {
  readonly TunnelInsideCidr: string;
  readonly TunnelInsideIpv6Cidr: string;
  readonly PreSharedKey: string;
  readonly Phase1LifetimeSeconds: number;
  readonly Phase2LifetimeSeconds: number;
  readonly RekeyMarginTimeSeconds: number;
  readonly RekeyFuzzPercentage: number;
  readonly ReplayWindowSize: number;
  readonly DPDTimeoutSeconds: number;
  readonly DPDTimeoutAction: string;
  readonly Phase1EncryptionAlgorithms: [];
  readonly Phase2EncryptionAlgorithms: [];
  readonly Phase1IntegrityAlgorithms: [];
  readonly Phase2IntegrityAlgorithms: [];
  readonly Phase1DHGroupNumbers: [];
  readonly Phase2DHGroupNumbers: [];
  readonly IKEVersions: [];
  readonly StartupAction: string;
}

interface WithdrawByoipCidrRequest {
  readonly Cidr: string;
  readonly DryRun: boolean;
}

interface WithdrawByoipCidrResult {
  readonly ByoipCidr: ByoipCidr;
}

