/**
 * STOP. This file is autogenerated. DO NOT EDIT by hand
 */
export interface CancelKeyDeletion {
  readonly KeyId: string;
}
export interface ConnectCustomKeyStore {
  readonly CustomKeyStoreId: string;
}
export interface CreateAlias {
  readonly AliasName: string;
  readonly TargetKeyId: string;
}
export interface CreateCustomKeyStore {
  readonly CustomKeyStoreName: string;
  readonly CloudHsmClusterId: string;
  readonly TrustAnchorCertificate: string;
  readonly KeyStorePassword: string;
}
export interface CreateGrant {
  readonly KeyId: string;
  readonly GranteePrincipal: string;
  readonly RetiringPrincipal: string;
  readonly Operations: [];
  readonly Constraints: GrantConstraints;
  readonly GrantTokens: [];
  readonly Name: string;
}
export interface CreateKey {
  readonly Policy: string;
  readonly Description: string;
  readonly KeyUsage: string;
  readonly CustomerMasterKeySpec: string;
  readonly KeySpec: string;
  readonly Origin: string;
  readonly CustomKeyStoreId: string;
  readonly BypassPolicyLockoutSafetyCheck: boolean;
  readonly Tags: [];
  readonly MultiRegion: boolean;
}
export interface Decrypt {
  readonly CiphertextBlob: unknown;
  readonly EncryptionContext: {[key: string]: any};
  readonly GrantTokens: [];
  readonly KeyId: string;
  readonly EncryptionAlgorithm: string;
}
export interface DeleteAlias {
  readonly AliasName: string;
}
export interface DeleteCustomKeyStore {
  readonly CustomKeyStoreId: string;
}
export interface DeleteImportedKeyMaterial {
  readonly KeyId: string;
}
export interface DescribeCustomKeyStores {
  readonly CustomKeyStoreId: string;
  readonly CustomKeyStoreName: string;
  readonly Limit: number;
  readonly Marker: string;
}
export interface DescribeKey {
  readonly KeyId: string;
  readonly GrantTokens: [];
}
export interface DisableKey {
  readonly KeyId: string;
}
export interface DisableKeyRotation {
  readonly KeyId: string;
}
export interface DisconnectCustomKeyStore {
  readonly CustomKeyStoreId: string;
}
export interface EnableKey {
  readonly KeyId: string;
}
export interface EnableKeyRotation {
  readonly KeyId: string;
}
export interface Encrypt {
  readonly KeyId: string;
  readonly Plaintext: unknown;
  readonly EncryptionContext: {[key: string]: any};
  readonly GrantTokens: [];
  readonly EncryptionAlgorithm: string;
}
export interface GenerateDataKey {
  readonly KeyId: string;
  readonly EncryptionContext: {[key: string]: any};
  readonly NumberOfBytes: number;
  readonly KeySpec: string;
  readonly GrantTokens: [];
}
export interface GenerateDataKeyPair {
  readonly EncryptionContext: {[key: string]: any};
  readonly KeyId: string;
  readonly KeyPairSpec: string;
  readonly GrantTokens: [];
}
export interface GenerateDataKeyPairWithoutPlaintext {
  readonly EncryptionContext: {[key: string]: any};
  readonly KeyId: string;
  readonly KeyPairSpec: string;
  readonly GrantTokens: [];
}
export interface GenerateDataKeyWithoutPlaintext {
  readonly KeyId: string;
  readonly EncryptionContext: {[key: string]: any};
  readonly KeySpec: string;
  readonly NumberOfBytes: number;
  readonly GrantTokens: [];
}
export interface GenerateRandom {
  readonly NumberOfBytes: number;
  readonly CustomKeyStoreId: string;
}
export interface GetKeyPolicy {
  readonly KeyId: string;
  readonly PolicyName: string;
}
export interface GetKeyRotationStatus {
  readonly KeyId: string;
}
export interface GetParametersForImport {
  readonly KeyId: string;
  readonly WrappingAlgorithm: string;
  readonly WrappingKeySpec: string;
}
export interface GetPublicKey {
  readonly KeyId: string;
  readonly GrantTokens: [];
}
export interface ImportKeyMaterial {
  readonly KeyId: string;
  readonly ImportToken: unknown;
  readonly EncryptedKeyMaterial: unknown;
  readonly ValidTo: Date;
  readonly ExpirationModel: string;
}
export interface ListAliases {
  readonly KeyId: string;
  readonly Limit: number;
  readonly Marker: string;
}
export interface ListGrants {
  readonly Limit: number;
  readonly Marker: string;
  readonly KeyId: string;
  readonly GrantId: string;
  readonly GranteePrincipal: string;
}
export interface ListKeyPolicies {
  readonly KeyId: string;
  readonly Limit: number;
  readonly Marker: string;
}
export interface ListKeys {
  readonly Limit: number;
  readonly Marker: string;
}
export interface ListResourceTags {
  readonly KeyId: string;
  readonly Limit: number;
  readonly Marker: string;
}
export interface ListRetirableGrants {
  readonly Limit: number;
  readonly Marker: string;
  readonly RetiringPrincipal: string;
}
export interface PutKeyPolicy {
  readonly KeyId: string;
  readonly PolicyName: string;
  readonly Policy: string;
  readonly BypassPolicyLockoutSafetyCheck: boolean;
}
export interface ReEncrypt {
  readonly CiphertextBlob: unknown;
  readonly SourceEncryptionContext: {[key: string]: any};
  readonly SourceKeyId: string;
  readonly DestinationKeyId: string;
  readonly DestinationEncryptionContext: {[key: string]: any};
  readonly SourceEncryptionAlgorithm: string;
  readonly DestinationEncryptionAlgorithm: string;
  readonly GrantTokens: [];
}
export interface ReplicateKey {
  readonly KeyId: string;
  readonly ReplicaRegion: string;
  readonly Policy: string;
  readonly BypassPolicyLockoutSafetyCheck: boolean;
  readonly Description: string;
  readonly Tags: [];
}
export interface RetireGrant {
  readonly GrantToken: string;
  readonly KeyId: string;
  readonly GrantId: string;
}
export interface RevokeGrant {
  readonly KeyId: string;
  readonly GrantId: string;
}
export interface ScheduleKeyDeletion {
  readonly KeyId: string;
  readonly PendingWindowInDays: number;
}
export interface Sign {
  readonly KeyId: string;
  readonly Message: unknown;
  readonly MessageType: string;
  readonly GrantTokens: [];
  readonly SigningAlgorithm: string;
}
export interface TagResource {
  readonly KeyId: string;
  readonly Tags: [];
}
export interface UntagResource {
  readonly KeyId: string;
  readonly TagKeys: [];
}
export interface UpdateAlias {
  readonly AliasName: string;
  readonly TargetKeyId: string;
}
export interface UpdateCustomKeyStore {
  readonly CustomKeyStoreId: string;
  readonly NewCustomKeyStoreName: string;
  readonly KeyStorePassword: string;
  readonly CloudHsmClusterId: string;
}
export interface UpdateKeyDescription {
  readonly KeyId: string;
  readonly Description: string;
}
export interface UpdatePrimaryRegion {
  readonly KeyId: string;
  readonly PrimaryRegion: string;
}
export interface Verify {
  readonly KeyId: string;
  readonly Message: unknown;
  readonly MessageType: string;
  readonly Signature: unknown;
  readonly SigningAlgorithm: string;
  readonly GrantTokens: [];
}



interface AliasListEntry {
  readonly AliasName: string;
  readonly AliasArn: string;
  readonly TargetKeyId: string;
  readonly CreationDate: Date;
  readonly LastUpdatedDate: Date;
}

interface AlreadyExistsException {
  readonly message: string;
}

interface CancelKeyDeletionRequest {
  readonly KeyId: string;
}

interface CancelKeyDeletionResponse {
  readonly KeyId: string;
}

interface CloudHsmClusterInUseException {
  readonly message: string;
}

interface CloudHsmClusterInvalidConfigurationException {
  readonly message: string;
}

interface CloudHsmClusterNotActiveException {
  readonly message: string;
}

interface CloudHsmClusterNotFoundException {
  readonly message: string;
}

interface CloudHsmClusterNotRelatedException {
  readonly message: string;
}

interface ConnectCustomKeyStoreRequest {
  readonly CustomKeyStoreId: string;
}

interface ConnectCustomKeyStoreResponse {
}

interface CreateAliasRequest {
  readonly AliasName: string;
  readonly TargetKeyId: string;
}

interface CreateCustomKeyStoreRequest {
  readonly CustomKeyStoreName: string;
  readonly CloudHsmClusterId: string;
  readonly TrustAnchorCertificate: string;
  readonly KeyStorePassword: string;
}

interface CreateCustomKeyStoreResponse {
  readonly CustomKeyStoreId: string;
}

interface CreateGrantRequest {
  readonly KeyId: string;
  readonly GranteePrincipal: string;
  readonly RetiringPrincipal: string;
  readonly Operations: [];
  readonly Constraints: GrantConstraints;
  readonly GrantTokens: [];
  readonly Name: string;
}

interface CreateGrantResponse {
  readonly GrantToken: string;
  readonly GrantId: string;
}

interface CreateKeyRequest {
  readonly Policy: string;
  readonly Description: string;
  readonly KeyUsage: string;
  readonly CustomerMasterKeySpec: string;
  readonly KeySpec: string;
  readonly Origin: string;
  readonly CustomKeyStoreId: string;
  readonly BypassPolicyLockoutSafetyCheck: boolean;
  readonly Tags: [];
  readonly MultiRegion: boolean;
}

interface CreateKeyResponse {
  readonly KeyMetadata: KeyMetadata;
}

interface CustomKeyStoreHasCMKsException {
  readonly message: string;
}

interface CustomKeyStoreInvalidStateException {
  readonly message: string;
}

interface CustomKeyStoreNameInUseException {
  readonly message: string;
}

interface CustomKeyStoreNotFoundException {
  readonly message: string;
}

interface CustomKeyStoresListEntry {
  readonly CustomKeyStoreId: string;
  readonly CustomKeyStoreName: string;
  readonly CloudHsmClusterId: string;
  readonly TrustAnchorCertificate: string;
  readonly ConnectionState: string;
  readonly ConnectionErrorCode: string;
  readonly CreationDate: Date;
}

interface DecryptRequest {
  readonly CiphertextBlob: unknown;
  readonly EncryptionContext: {[key: string]: any};
  readonly GrantTokens: [];
  readonly KeyId: string;
  readonly EncryptionAlgorithm: string;
}

interface DecryptResponse {
  readonly KeyId: string;
  readonly Plaintext: unknown;
  readonly EncryptionAlgorithm: string;
}

interface DeleteAliasRequest {
  readonly AliasName: string;
}

interface DeleteCustomKeyStoreRequest {
  readonly CustomKeyStoreId: string;
}

interface DeleteCustomKeyStoreResponse {
}

interface DeleteImportedKeyMaterialRequest {
  readonly KeyId: string;
}

interface DependencyTimeoutException {
  readonly message: string;
}

interface DescribeCustomKeyStoresRequest {
  readonly CustomKeyStoreId: string;
  readonly CustomKeyStoreName: string;
  readonly Limit: number;
  readonly Marker: string;
}

interface DescribeCustomKeyStoresResponse {
  readonly CustomKeyStores: [];
  readonly NextMarker: string;
  readonly Truncated: boolean;
}

interface DescribeKeyRequest {
  readonly KeyId: string;
  readonly GrantTokens: [];
}

interface DescribeKeyResponse {
  readonly KeyMetadata: KeyMetadata;
}

interface DisableKeyRequest {
  readonly KeyId: string;
}

interface DisableKeyRotationRequest {
  readonly KeyId: string;
}

interface DisabledException {
  readonly message: string;
}

interface DisconnectCustomKeyStoreRequest {
  readonly CustomKeyStoreId: string;
}

interface DisconnectCustomKeyStoreResponse {
}

interface EnableKeyRequest {
  readonly KeyId: string;
}

interface EnableKeyRotationRequest {
  readonly KeyId: string;
}

interface EncryptRequest {
  readonly KeyId: string;
  readonly Plaintext: unknown;
  readonly EncryptionContext: {[key: string]: any};
  readonly GrantTokens: [];
  readonly EncryptionAlgorithm: string;
}

interface EncryptResponse {
  readonly CiphertextBlob: unknown;
  readonly KeyId: string;
  readonly EncryptionAlgorithm: string;
}

interface ExpiredImportTokenException {
  readonly message: string;
}

interface GenerateDataKeyPairRequest {
  readonly EncryptionContext: {[key: string]: any};
  readonly KeyId: string;
  readonly KeyPairSpec: string;
  readonly GrantTokens: [];
}

interface GenerateDataKeyPairResponse {
  readonly PrivateKeyCiphertextBlob: unknown;
  readonly PrivateKeyPlaintext: unknown;
  readonly PublicKey: unknown;
  readonly KeyId: string;
  readonly KeyPairSpec: string;
}

interface GenerateDataKeyPairWithoutPlaintextRequest {
  readonly EncryptionContext: {[key: string]: any};
  readonly KeyId: string;
  readonly KeyPairSpec: string;
  readonly GrantTokens: [];
}

interface GenerateDataKeyPairWithoutPlaintextResponse {
  readonly PrivateKeyCiphertextBlob: unknown;
  readonly PublicKey: unknown;
  readonly KeyId: string;
  readonly KeyPairSpec: string;
}

interface GenerateDataKeyRequest {
  readonly KeyId: string;
  readonly EncryptionContext: {[key: string]: any};
  readonly NumberOfBytes: number;
  readonly KeySpec: string;
  readonly GrantTokens: [];
}

interface GenerateDataKeyResponse {
  readonly CiphertextBlob: unknown;
  readonly Plaintext: unknown;
  readonly KeyId: string;
}

interface GenerateDataKeyWithoutPlaintextRequest {
  readonly KeyId: string;
  readonly EncryptionContext: {[key: string]: any};
  readonly KeySpec: string;
  readonly NumberOfBytes: number;
  readonly GrantTokens: [];
}

interface GenerateDataKeyWithoutPlaintextResponse {
  readonly CiphertextBlob: unknown;
  readonly KeyId: string;
}

interface GenerateRandomRequest {
  readonly NumberOfBytes: number;
  readonly CustomKeyStoreId: string;
}

interface GenerateRandomResponse {
  readonly Plaintext: unknown;
}

interface GetKeyPolicyRequest {
  readonly KeyId: string;
  readonly PolicyName: string;
}

interface GetKeyPolicyResponse {
  readonly Policy: string;
}

interface GetKeyRotationStatusRequest {
  readonly KeyId: string;
}

interface GetKeyRotationStatusResponse {
  readonly KeyRotationEnabled: boolean;
}

interface GetParametersForImportRequest {
  readonly KeyId: string;
  readonly WrappingAlgorithm: string;
  readonly WrappingKeySpec: string;
}

interface GetParametersForImportResponse {
  readonly KeyId: string;
  readonly ImportToken: unknown;
  readonly PublicKey: unknown;
  readonly ParametersValidTo: Date;
}

interface GetPublicKeyRequest {
  readonly KeyId: string;
  readonly GrantTokens: [];
}

interface GetPublicKeyResponse {
  readonly KeyId: string;
  readonly PublicKey: unknown;
  readonly CustomerMasterKeySpec: string;
  readonly KeySpec: string;
  readonly KeyUsage: string;
  readonly EncryptionAlgorithms: [];
  readonly SigningAlgorithms: [];
}

interface GrantConstraints {
  readonly EncryptionContextSubset: {[key: string]: any};
  readonly EncryptionContextEquals: {[key: string]: any};
}

interface GrantListEntry {
  readonly KeyId: string;
  readonly GrantId: string;
  readonly Name: string;
  readonly CreationDate: Date;
  readonly GranteePrincipal: string;
  readonly RetiringPrincipal: string;
  readonly IssuingAccount: string;
  readonly Operations: [];
  readonly Constraints: GrantConstraints;
}

interface ImportKeyMaterialRequest {
  readonly KeyId: string;
  readonly ImportToken: unknown;
  readonly EncryptedKeyMaterial: unknown;
  readonly ValidTo: Date;
  readonly ExpirationModel: string;
}

interface ImportKeyMaterialResponse {
}

interface IncorrectKeyException {
  readonly message: string;
}

interface IncorrectKeyMaterialException {
  readonly message: string;
}

interface IncorrectTrustAnchorException {
  readonly message: string;
}

interface InvalidAliasNameException {
  readonly message: string;
}

interface InvalidArnException {
  readonly message: string;
}

interface InvalidCiphertextException {
  readonly message: string;
}

interface InvalidGrantIdException {
  readonly message: string;
}

interface InvalidGrantTokenException {
  readonly message: string;
}

interface InvalidImportTokenException {
  readonly message: string;
}

interface InvalidKeyUsageException {
  readonly message: string;
}

interface InvalidMarkerException {
  readonly message: string;
}

interface KMSInternalException {
  readonly message: string;
}

interface KMSInvalidSignatureException {
  readonly message: string;
}

interface KMSInvalidStateException {
  readonly message: string;
}

interface KeyListEntry {
  readonly KeyId: string;
  readonly KeyArn: string;
}

interface KeyMetadata {
  readonly AWSAccountId: string;
  readonly KeyId: string;
  readonly Arn: string;
  readonly CreationDate: Date;
  readonly Enabled: boolean;
  readonly Description: string;
  readonly KeyUsage: string;
  readonly KeyState: string;
  readonly DeletionDate: Date;
  readonly ValidTo: Date;
  readonly Origin: string;
  readonly CustomKeyStoreId: string;
  readonly CloudHsmClusterId: string;
  readonly ExpirationModel: string;
  readonly KeyManager: string;
  readonly CustomerMasterKeySpec: string;
  readonly KeySpec: string;
  readonly EncryptionAlgorithms: [];
  readonly SigningAlgorithms: [];
  readonly MultiRegion: boolean;
  readonly MultiRegionConfiguration: MultiRegionConfiguration;
  readonly PendingDeletionWindowInDays: number;
}

interface KeyUnavailableException {
  readonly message: string;
}

interface LimitExceededException {
  readonly message: string;
}

interface ListAliasesRequest {
  readonly KeyId: string;
  readonly Limit: number;
  readonly Marker: string;
}

interface ListAliasesResponse {
  readonly Aliases: [];
  readonly NextMarker: string;
  readonly Truncated: boolean;
}

interface ListGrantsRequest {
  readonly Limit: number;
  readonly Marker: string;
  readonly KeyId: string;
  readonly GrantId: string;
  readonly GranteePrincipal: string;
}

interface ListGrantsResponse {
  readonly Grants: [];
  readonly NextMarker: string;
  readonly Truncated: boolean;
}

interface ListKeyPoliciesRequest {
  readonly KeyId: string;
  readonly Limit: number;
  readonly Marker: string;
}

interface ListKeyPoliciesResponse {
  readonly PolicyNames: [];
  readonly NextMarker: string;
  readonly Truncated: boolean;
}

interface ListKeysRequest {
  readonly Limit: number;
  readonly Marker: string;
}

interface ListKeysResponse {
  readonly Keys: [];
  readonly NextMarker: string;
  readonly Truncated: boolean;
}

interface ListResourceTagsRequest {
  readonly KeyId: string;
  readonly Limit: number;
  readonly Marker: string;
}

interface ListResourceTagsResponse {
  readonly Tags: [];
  readonly NextMarker: string;
  readonly Truncated: boolean;
}

interface ListRetirableGrantsRequest {
  readonly Limit: number;
  readonly Marker: string;
  readonly RetiringPrincipal: string;
}

interface MalformedPolicyDocumentException {
  readonly message: string;
}

interface MultiRegionConfiguration {
  readonly MultiRegionKeyType: string;
  readonly PrimaryKey: MultiRegionKey;
  readonly ReplicaKeys: [];
}

interface MultiRegionKey {
  readonly Arn: string;
  readonly Region: string;
}

interface NotFoundException {
  readonly message: string;
}

interface PutKeyPolicyRequest {
  readonly KeyId: string;
  readonly PolicyName: string;
  readonly Policy: string;
  readonly BypassPolicyLockoutSafetyCheck: boolean;
}

interface ReEncryptRequest {
  readonly CiphertextBlob: unknown;
  readonly SourceEncryptionContext: {[key: string]: any};
  readonly SourceKeyId: string;
  readonly DestinationKeyId: string;
  readonly DestinationEncryptionContext: {[key: string]: any};
  readonly SourceEncryptionAlgorithm: string;
  readonly DestinationEncryptionAlgorithm: string;
  readonly GrantTokens: [];
}

interface ReEncryptResponse {
  readonly CiphertextBlob: unknown;
  readonly SourceKeyId: string;
  readonly KeyId: string;
  readonly SourceEncryptionAlgorithm: string;
  readonly DestinationEncryptionAlgorithm: string;
}

interface ReplicateKeyRequest {
  readonly KeyId: string;
  readonly ReplicaRegion: string;
  readonly Policy: string;
  readonly BypassPolicyLockoutSafetyCheck: boolean;
  readonly Description: string;
  readonly Tags: [];
}

interface ReplicateKeyResponse {
  readonly ReplicaKeyMetadata: KeyMetadata;
  readonly ReplicaPolicy: string;
  readonly ReplicaTags: [];
}

interface RetireGrantRequest {
  readonly GrantToken: string;
  readonly KeyId: string;
  readonly GrantId: string;
}

interface RevokeGrantRequest {
  readonly KeyId: string;
  readonly GrantId: string;
}

interface ScheduleKeyDeletionRequest {
  readonly KeyId: string;
  readonly PendingWindowInDays: number;
}

interface ScheduleKeyDeletionResponse {
  readonly KeyId: string;
  readonly DeletionDate: Date;
  readonly KeyState: string;
  readonly PendingWindowInDays: number;
}

interface SignRequest {
  readonly KeyId: string;
  readonly Message: unknown;
  readonly MessageType: string;
  readonly GrantTokens: [];
  readonly SigningAlgorithm: string;
}

interface SignResponse {
  readonly KeyId: string;
  readonly Signature: unknown;
  readonly SigningAlgorithm: string;
}

interface Tag {
  readonly TagKey: string;
  readonly TagValue: string;
}

interface TagException {
  readonly message: string;
}

interface TagResourceRequest {
  readonly KeyId: string;
  readonly Tags: [];
}

interface UnsupportedOperationException {
  readonly message: string;
}

interface UntagResourceRequest {
  readonly KeyId: string;
  readonly TagKeys: [];
}

interface UpdateAliasRequest {
  readonly AliasName: string;
  readonly TargetKeyId: string;
}

interface UpdateCustomKeyStoreRequest {
  readonly CustomKeyStoreId: string;
  readonly NewCustomKeyStoreName: string;
  readonly KeyStorePassword: string;
  readonly CloudHsmClusterId: string;
}

interface UpdateCustomKeyStoreResponse {
}

interface UpdateKeyDescriptionRequest {
  readonly KeyId: string;
  readonly Description: string;
}

interface UpdatePrimaryRegionRequest {
  readonly KeyId: string;
  readonly PrimaryRegion: string;
}

interface VerifyRequest {
  readonly KeyId: string;
  readonly Message: unknown;
  readonly MessageType: string;
  readonly Signature: unknown;
  readonly SigningAlgorithm: string;
  readonly GrantTokens: [];
}

interface VerifyResponse {
  readonly KeyId: string;
  readonly SignatureValid: boolean;
  readonly SigningAlgorithm: string;
}

