/**
 * STOP. This file is autogenerated. DO NOT EDIT by hand
 */
export interface DeleteLexicon {
  readonly Name: string;
}

export interface DescribeVoices {
  readonly Engine?: string;
  readonly LanguageCode?: string;
  readonly IncludeAdditionalLanguageCodes?: boolean;
  readonly NextToken?: string;
}

export interface GetLexicon {
  readonly Name: string;
}

export interface GetSpeechSynthesisTask {
  readonly TaskId: string;
}

export interface ListLexicons {
  readonly NextToken?: string;
}

export interface ListSpeechSynthesisTasks {
  readonly MaxResults?: number;
  readonly NextToken?: string;
  readonly Status?: string;
}

export interface PutLexicon {
  readonly Name: string;
  readonly Content: string;
}

export interface StartSpeechSynthesisTask {
  readonly Engine?: string;
  readonly LanguageCode?: string;
  readonly LexiconNames?: [];
  readonly OutputFormat: string;
  readonly OutputS3BucketName: string;
  readonly OutputS3KeyPrefix?: string;
  readonly SampleRate?: string;
  readonly SnsTopicArn?: string;
  readonly SpeechMarkTypes?: [];
  readonly Text: string;
  readonly TextType?: string;
  readonly VoiceId: string;
}

export interface SynthesizeSpeech {
  readonly Engine?: string;
  readonly LanguageCode?: string;
  readonly LexiconNames?: [];
  readonly OutputFormat: string;
  readonly SampleRate?: string;
  readonly SpeechMarkTypes?: [];
  readonly Text: string;
  readonly TextType?: string;
  readonly VoiceId: string;
}

export interface DeleteLexiconInput {
  readonly Name: string;
}

export interface DeleteLexiconOutput {
}

export interface DescribeVoicesInput {
  readonly Engine?: string;
  readonly LanguageCode?: string;
  readonly IncludeAdditionalLanguageCodes?: boolean;
  readonly NextToken?: string;
}

export interface DescribeVoicesOutput {
  readonly Voices?: [];
  readonly NextToken?: string;
}

export interface EngineNotSupportedException {
  readonly message?: string;
}

export interface GetLexiconInput {
  readonly Name: string;
}

export interface GetLexiconOutput {
  readonly Lexicon?: Lexicon;
  readonly LexiconAttributes?: LexiconAttributes;
}

export interface GetSpeechSynthesisTaskInput {
  readonly TaskId: string;
}

export interface GetSpeechSynthesisTaskOutput {
  readonly SynthesisTask?: SynthesisTask;
}

export interface InvalidLexiconException {
  readonly message?: string;
}

export interface InvalidNextTokenException {
  readonly message?: string;
}

export interface InvalidS3BucketException {
  readonly message?: string;
}

export interface InvalidS3KeyException {
  readonly message?: string;
}

export interface InvalidSampleRateException {
  readonly message?: string;
}

export interface InvalidSnsTopicArnException {
  readonly message?: string;
}

export interface InvalidSsmlException {
  readonly message?: string;
}

export interface InvalidTaskIdException {
  readonly message?: string;
}

export interface LanguageNotSupportedException {
  readonly message?: string;
}

export interface Lexicon {
  readonly Content?: string;
  readonly Name?: string;
}

export interface LexiconAttributes {
  readonly Alphabet?: string;
  readonly LanguageCode?: string;
  readonly LastModified?: Date;
  readonly LexiconArn?: string;
  readonly LexemesCount?: number;
  readonly Size?: number;
}

export interface LexiconDescription {
  readonly Name?: string;
  readonly Attributes?: LexiconAttributes;
}

export interface LexiconNotFoundException {
  readonly message?: string;
}

export interface LexiconSizeExceededException {
  readonly message?: string;
}

export interface ListLexiconsInput {
  readonly NextToken?: string;
}

export interface ListLexiconsOutput {
  readonly Lexicons?: [];
  readonly NextToken?: string;
}

export interface ListSpeechSynthesisTasksInput {
  readonly MaxResults?: number;
  readonly NextToken?: string;
  readonly Status?: string;
}

export interface ListSpeechSynthesisTasksOutput {
  readonly NextToken?: string;
  readonly SynthesisTasks?: [];
}

export interface MarksNotSupportedForFormatException {
  readonly message?: string;
}

export interface MaxLexemeLengthExceededException {
  readonly message?: string;
}

export interface MaxLexiconsNumberExceededException {
  readonly message?: string;
}

export interface PutLexiconInput {
  readonly Name: string;
  readonly Content: string;
}

export interface PutLexiconOutput {
}

export interface ServiceFailureException {
  readonly message?: string;
}

export interface SsmlMarksNotSupportedForTextTypeException {
  readonly message?: string;
}

export interface StartSpeechSynthesisTaskInput {
  readonly Engine?: string;
  readonly LanguageCode?: string;
  readonly LexiconNames?: [];
  readonly OutputFormat: string;
  readonly OutputS3BucketName: string;
  readonly OutputS3KeyPrefix?: string;
  readonly SampleRate?: string;
  readonly SnsTopicArn?: string;
  readonly SpeechMarkTypes?: [];
  readonly Text: string;
  readonly TextType?: string;
  readonly VoiceId: string;
}

export interface StartSpeechSynthesisTaskOutput {
  readonly SynthesisTask?: SynthesisTask;
}

export interface SynthesisTask {
  readonly Engine?: string;
  readonly TaskId?: string;
  readonly TaskStatus?: string;
  readonly TaskStatusReason?: string;
  readonly OutputUri?: string;
  readonly CreationTime?: Date;
  readonly RequestCharacters?: number;
  readonly SnsTopicArn?: string;
  readonly LexiconNames?: [];
  readonly OutputFormat?: string;
  readonly SampleRate?: string;
  readonly SpeechMarkTypes?: [];
  readonly TextType?: string;
  readonly VoiceId?: string;
  readonly LanguageCode?: string;
}

export interface SynthesisTaskNotFoundException {
  readonly message?: string;
}

export interface SynthesizeSpeechInput {
  readonly Engine?: string;
  readonly LanguageCode?: string;
  readonly LexiconNames?: [];
  readonly OutputFormat: string;
  readonly SampleRate?: string;
  readonly SpeechMarkTypes?: [];
  readonly Text: string;
  readonly TextType?: string;
  readonly VoiceId: string;
}

export interface SynthesizeSpeechOutput {
  readonly AudioStream?: unknown;
  readonly ContentType?: string;
  readonly RequestCharacters?: number;
}

export interface TextLengthExceededException {
  readonly message?: string;
}

export interface UnsupportedPlsAlphabetException {
  readonly message?: string;
}

export interface UnsupportedPlsLanguageException {
  readonly message?: string;
}

export interface Voice {
  readonly Gender?: string;
  readonly Id?: string;
  readonly LanguageCode?: string;
  readonly LanguageName?: string;
  readonly Name?: string;
  readonly AdditionalLanguageCodes?: [];
  readonly SupportedEngines?: [];
}


