/**
 * STOP. This file is autogenerated. DO NOT EDIT by hand
 */
export interface BatchGetChannel {
  readonly arns: [];
}

export interface BatchGetStreamKey {
  readonly arns: [];
}

export interface CreateChannel {
  readonly authorized?: boolean;
  readonly latencyMode?: string;
  readonly name?: string;
  readonly recordingConfigurationArn?: string;
  readonly tags?: {[key: string]: any};
  readonly type?: string;
}

export interface CreateRecordingConfiguration {
  readonly destinationConfiguration: DestinationConfiguration;
  readonly name?: string;
  readonly tags?: {[key: string]: any};
}

export interface CreateStreamKey {
  readonly channelArn: string;
  readonly tags?: {[key: string]: any};
}

export interface DeleteChannel {
  readonly arn: string;
}

export interface DeletePlaybackKeyPair {
  readonly arn: string;
}

export interface DeleteRecordingConfiguration {
  readonly arn: string;
}

export interface DeleteStreamKey {
  readonly arn: string;
}

export interface GetChannel {
  readonly arn: string;
}

export interface GetPlaybackKeyPair {
  readonly arn: string;
}

export interface GetRecordingConfiguration {
  readonly arn: string;
}

export interface GetStream {
  readonly channelArn: string;
}

export interface GetStreamKey {
  readonly arn: string;
}

export interface GetStreamSession {
  readonly channelArn: string;
  readonly streamId?: string;
}

export interface ImportPlaybackKeyPair {
  readonly name?: string;
  readonly publicKeyMaterial: string;
  readonly tags?: {[key: string]: any};
}

export interface ListChannels {
  readonly filterByName?: string;
  readonly filterByRecordingConfigurationArn?: string;
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface ListPlaybackKeyPairs {
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface ListRecordingConfigurations {
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface ListStreamKeys {
  readonly channelArn: string;
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface ListStreamSessions {
  readonly channelArn: string;
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface ListStreams {
  readonly filterBy?: StreamFilters;
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface ListTagsForResource {
  readonly resourceArn: string;
}

export interface PutMetadata {
  readonly channelArn: string;
  readonly metadata: string;
}

export interface StopStream {
  readonly channelArn: string;
}

export interface TagResource {
  readonly resourceArn: string;
  readonly tags: {[key: string]: any};
}

export interface UntagResource {
  readonly resourceArn: string;
  readonly tagKeys: [];
}

export interface UpdateChannel {
  readonly arn: string;
  readonly authorized?: boolean;
  readonly latencyMode?: string;
  readonly name?: string;
  readonly recordingConfigurationArn?: string;
  readonly type?: string;
}

export interface AccessDeniedException {
  readonly exceptionMessage?: string;
}

export interface AudioConfiguration {
  readonly channels?: number;
  readonly codec?: string;
  readonly sampleRate?: number;
  readonly targetBitrate?: number;
}

export interface BatchError {
  readonly arn?: string;
  readonly code?: string;
  readonly message?: string;
}

export interface BatchGetChannelRequest {
  readonly arns: [];
}

export interface BatchGetChannelResponse {
  readonly channels?: [];
  readonly errors?: [];
}

export interface BatchGetStreamKeyRequest {
  readonly arns: [];
}

export interface BatchGetStreamKeyResponse {
  readonly errors?: [];
  readonly streamKeys?: [];
}

export interface Channel {
  readonly arn?: string;
  readonly authorized?: boolean;
  readonly ingestEndpoint?: string;
  readonly latencyMode?: string;
  readonly name?: string;
  readonly playbackUrl?: string;
  readonly recordingConfigurationArn?: string;
  readonly tags?: {[key: string]: any};
  readonly type?: string;
}

export interface ChannelNotBroadcasting {
  readonly exceptionMessage?: string;
}

export interface ChannelSummary {
  readonly arn?: string;
  readonly authorized?: boolean;
  readonly latencyMode?: string;
  readonly name?: string;
  readonly recordingConfigurationArn?: string;
  readonly tags?: {[key: string]: any};
}

export interface ConflictException {
  readonly exceptionMessage?: string;
}

export interface CreateChannelRequest {
  readonly authorized?: boolean;
  readonly latencyMode?: string;
  readonly name?: string;
  readonly recordingConfigurationArn?: string;
  readonly tags?: {[key: string]: any};
  readonly type?: string;
}

export interface CreateChannelResponse {
  readonly channel?: Channel;
  readonly streamKey?: StreamKey;
}

export interface CreateRecordingConfigurationRequest {
  readonly destinationConfiguration: DestinationConfiguration;
  readonly name?: string;
  readonly tags?: {[key: string]: any};
}

export interface CreateRecordingConfigurationResponse {
  readonly recordingConfiguration?: RecordingConfiguration;
}

export interface CreateStreamKeyRequest {
  readonly channelArn: string;
  readonly tags?: {[key: string]: any};
}

export interface CreateStreamKeyResponse {
  readonly streamKey?: StreamKey;
}

export interface DeleteChannelRequest {
  readonly arn: string;
}

export interface DeletePlaybackKeyPairRequest {
  readonly arn: string;
}

export interface DeletePlaybackKeyPairResponse {
}

export interface DeleteRecordingConfigurationRequest {
  readonly arn: string;
}

export interface DeleteStreamKeyRequest {
  readonly arn: string;
}

export interface DestinationConfiguration {
  readonly s3?: S3DestinationConfiguration;
}

export interface GetChannelRequest {
  readonly arn: string;
}

export interface GetChannelResponse {
  readonly channel?: Channel;
}

export interface GetPlaybackKeyPairRequest {
  readonly arn: string;
}

export interface GetPlaybackKeyPairResponse {
  readonly keyPair?: PlaybackKeyPair;
}

export interface GetRecordingConfigurationRequest {
  readonly arn: string;
}

export interface GetRecordingConfigurationResponse {
  readonly recordingConfiguration?: RecordingConfiguration;
}

export interface GetStreamKeyRequest {
  readonly arn: string;
}

export interface GetStreamKeyResponse {
  readonly streamKey?: StreamKey;
}

export interface GetStreamRequest {
  readonly channelArn: string;
}

export interface GetStreamResponse {
  readonly stream?: Stream;
}

export interface GetStreamSessionRequest {
  readonly channelArn: string;
  readonly streamId?: string;
}

export interface GetStreamSessionResponse {
  readonly streamSession?: StreamSession;
}

export interface ImportPlaybackKeyPairRequest {
  readonly name?: string;
  readonly publicKeyMaterial: string;
  readonly tags?: {[key: string]: any};
}

export interface ImportPlaybackKeyPairResponse {
  readonly keyPair?: PlaybackKeyPair;
}

export interface IngestConfiguration {
  readonly audio?: AudioConfiguration;
  readonly video?: VideoConfiguration;
}

export interface InternalServerException {
  readonly exceptionMessage?: string;
}

export interface ListChannelsRequest {
  readonly filterByName?: string;
  readonly filterByRecordingConfigurationArn?: string;
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface ListChannelsResponse {
  readonly channels: [];
  readonly nextToken?: string;
}

export interface ListPlaybackKeyPairsRequest {
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface ListPlaybackKeyPairsResponse {
  readonly keyPairs: [];
  readonly nextToken?: string;
}

export interface ListRecordingConfigurationsRequest {
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface ListRecordingConfigurationsResponse {
  readonly nextToken?: string;
  readonly recordingConfigurations: [];
}

export interface ListStreamKeysRequest {
  readonly channelArn: string;
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface ListStreamKeysResponse {
  readonly nextToken?: string;
  readonly streamKeys: [];
}

export interface ListStreamSessionsRequest {
  readonly channelArn: string;
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface ListStreamSessionsResponse {
  readonly nextToken?: string;
  readonly streamSessions: [];
}

export interface ListStreamsRequest {
  readonly filterBy?: StreamFilters;
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface ListStreamsResponse {
  readonly nextToken?: string;
  readonly streams: [];
}

export interface ListTagsForResourceRequest {
  readonly resourceArn: string;
}

export interface ListTagsForResourceResponse {
  readonly tags: {[key: string]: any};
}

export interface PendingVerification {
  readonly exceptionMessage?: string;
}

export interface PlaybackKeyPair {
  readonly arn?: string;
  readonly fingerprint?: string;
  readonly name?: string;
  readonly tags?: {[key: string]: any};
}

export interface PlaybackKeyPairSummary {
  readonly arn?: string;
  readonly name?: string;
  readonly tags?: {[key: string]: any};
}

export interface PutMetadataRequest {
  readonly channelArn: string;
  readonly metadata: string;
}

export interface RecordingConfiguration {
  readonly arn: string;
  readonly destinationConfiguration: DestinationConfiguration;
  readonly name?: string;
  readonly state: string;
  readonly tags?: {[key: string]: any};
}

export interface RecordingConfigurationSummary {
  readonly arn: string;
  readonly destinationConfiguration: DestinationConfiguration;
  readonly name?: string;
  readonly state: string;
  readonly tags?: {[key: string]: any};
}

export interface ResourceNotFoundException {
  readonly exceptionMessage?: string;
}

export interface S3DestinationConfiguration {
  readonly bucketName: string;
}

export interface ServiceQuotaExceededException {
  readonly exceptionMessage?: string;
}

export interface StopStreamRequest {
  readonly channelArn: string;
}

export interface StopStreamResponse {
}

export interface Stream {
  readonly channelArn?: string;
  readonly health?: string;
  readonly playbackUrl?: string;
  readonly startTime?: Date;
  readonly state?: string;
  readonly streamId?: string;
  readonly viewerCount?: number;
}

export interface StreamEvent {
  readonly eventTime?: Date;
  readonly name?: string;
  readonly type?: string;
}

export interface StreamFilters {
  readonly health?: string;
}

export interface StreamKey {
  readonly arn?: string;
  readonly channelArn?: string;
  readonly tags?: {[key: string]: any};
  readonly value?: string;
}

export interface StreamKeySummary {
  readonly arn?: string;
  readonly channelArn?: string;
  readonly tags?: {[key: string]: any};
}

export interface StreamSession {
  readonly channel?: Channel;
  readonly endTime?: Date;
  readonly ingestConfiguration?: IngestConfiguration;
  readonly recordingConfiguration?: RecordingConfiguration;
  readonly startTime?: Date;
  readonly streamId?: string;
  readonly truncatedEvents?: [];
}

export interface StreamSessionSummary {
  readonly endTime?: Date;
  readonly hasErrorEvent?: boolean;
  readonly startTime?: Date;
  readonly streamId?: string;
}

export interface StreamSummary {
  readonly channelArn?: string;
  readonly health?: string;
  readonly startTime?: Date;
  readonly state?: string;
  readonly streamId?: string;
  readonly viewerCount?: number;
}

export interface StreamUnavailable {
  readonly exceptionMessage?: string;
}

export interface TagResourceRequest {
  readonly resourceArn: string;
  readonly tags: {[key: string]: any};
}

export interface TagResourceResponse {
}

export interface ThrottlingException {
  readonly exceptionMessage?: string;
}

export interface UntagResourceRequest {
  readonly resourceArn: string;
  readonly tagKeys: [];
}

export interface UntagResourceResponse {
}

export interface UpdateChannelRequest {
  readonly arn: string;
  readonly authorized?: boolean;
  readonly latencyMode?: string;
  readonly name?: string;
  readonly recordingConfigurationArn?: string;
  readonly type?: string;
}

export interface UpdateChannelResponse {
  readonly channel?: Channel;
}

export interface ValidationException {
  readonly exceptionMessage?: string;
}

export interface VideoConfiguration {
  readonly avcLevel?: string;
  readonly avcProfile?: string;
  readonly codec?: string;
  readonly encoder?: string;
  readonly targetBitrate?: number;
  readonly targetFramerate?: number;
  readonly videoHeight?: number;
  readonly videoWidth?: number;
}


