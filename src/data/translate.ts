/**
 * STOP. This file is autogenerated. DO NOT EDIT by hand
 */
export interface CreateParallelData {
  readonly Name: string;
  readonly Description?: string;
  readonly ParallelDataConfig: ParallelDataConfig;
  readonly EncryptionKey?: EncryptionKey;
  readonly ClientToken: string;
}

export interface DeleteParallelData {
  readonly Name: string;
}

export interface DeleteTerminology {
  readonly Name: string;
}

export interface DescribeTextTranslationJob {
  readonly JobId: string;
}

export interface GetParallelData {
  readonly Name: string;
}

export interface GetTerminology {
  readonly Name: string;
  readonly TerminologyDataFormat?: string;
}

export interface ImportTerminology {
  readonly Name: string;
  readonly MergeStrategy: string;
  readonly Description?: string;
  readonly TerminologyData: TerminologyData;
  readonly EncryptionKey?: EncryptionKey;
}

export interface ListParallelData {
  readonly NextToken?: string;
  readonly MaxResults?: number;
}

export interface ListTerminologies {
  readonly NextToken?: string;
  readonly MaxResults?: number;
}

export interface ListTextTranslationJobs {
  readonly Filter?: TextTranslationJobFilter;
  readonly NextToken?: string;
  readonly MaxResults?: number;
}

export interface StartTextTranslationJob {
  readonly JobName?: string;
  readonly InputDataConfig: InputDataConfig;
  readonly OutputDataConfig: OutputDataConfig;
  readonly DataAccessRoleArn: string;
  readonly SourceLanguageCode: string;
  readonly TargetLanguageCodes: [];
  readonly TerminologyNames?: [];
  readonly ParallelDataNames?: [];
  readonly ClientToken: string;
  readonly Settings?: TranslationSettings;
}

export interface StopTextTranslationJob {
  readonly JobId: string;
}

export interface TranslateText {
  readonly Text: string;
  readonly TerminologyNames?: [];
  readonly SourceLanguageCode: string;
  readonly TargetLanguageCode: string;
  readonly Settings?: TranslationSettings;
}

export interface UpdateParallelData {
  readonly Name: string;
  readonly Description?: string;
  readonly ParallelDataConfig: ParallelDataConfig;
  readonly ClientToken: string;
}

export interface AppliedTerminology {
  readonly Name?: string;
  readonly Terms?: [];
}

export interface ConcurrentModificationException {
  readonly Message?: string;
}

export interface ConflictException {
  readonly Message?: string;
}

export interface CreateParallelDataRequest {
  readonly Name: string;
  readonly Description?: string;
  readonly ParallelDataConfig: ParallelDataConfig;
  readonly EncryptionKey?: EncryptionKey;
  readonly ClientToken: string;
}

export interface CreateParallelDataResponse {
  readonly Name?: string;
  readonly Status?: string;
}

export interface DeleteParallelDataRequest {
  readonly Name: string;
}

export interface DeleteParallelDataResponse {
  readonly Name?: string;
  readonly Status?: string;
}

export interface DeleteTerminologyRequest {
  readonly Name: string;
}

export interface DescribeTextTranslationJobRequest {
  readonly JobId: string;
}

export interface DescribeTextTranslationJobResponse {
  readonly TextTranslationJobProperties?: TextTranslationJobProperties;
}

export interface DetectedLanguageLowConfidenceException {
  readonly Message?: string;
  readonly DetectedLanguageCode?: string;
}

export interface EncryptionKey {
  readonly Type: string;
  readonly Id: string;
}

export interface GetParallelDataRequest {
  readonly Name: string;
}

export interface GetParallelDataResponse {
  readonly ParallelDataProperties?: ParallelDataProperties;
  readonly DataLocation?: ParallelDataDataLocation;
  readonly AuxiliaryDataLocation?: ParallelDataDataLocation;
  readonly LatestUpdateAttemptAuxiliaryDataLocation?: ParallelDataDataLocation;
}

export interface GetTerminologyRequest {
  readonly Name: string;
  readonly TerminologyDataFormat?: string;
}

export interface GetTerminologyResponse {
  readonly TerminologyProperties?: TerminologyProperties;
  readonly TerminologyDataLocation?: TerminologyDataLocation;
  readonly AuxiliaryDataLocation?: TerminologyDataLocation;
}

export interface ImportTerminologyRequest {
  readonly Name: string;
  readonly MergeStrategy: string;
  readonly Description?: string;
  readonly TerminologyData: TerminologyData;
  readonly EncryptionKey?: EncryptionKey;
}

export interface ImportTerminologyResponse {
  readonly TerminologyProperties?: TerminologyProperties;
  readonly AuxiliaryDataLocation?: TerminologyDataLocation;
}

export interface InputDataConfig {
  readonly S3Uri: string;
  readonly ContentType: string;
}

export interface InternalServerException {
  readonly Message?: string;
}

export interface InvalidFilterException {
  readonly Message?: string;
}

export interface InvalidParameterValueException {
  readonly Message?: string;
}

export interface InvalidRequestException {
  readonly Message?: string;
}

export interface JobDetails {
  readonly TranslatedDocumentsCount?: number;
  readonly DocumentsWithErrorsCount?: number;
  readonly InputDocumentsCount?: number;
}

export interface LimitExceededException {
  readonly Message?: string;
}

export interface ListParallelDataRequest {
  readonly NextToken?: string;
  readonly MaxResults?: number;
}

export interface ListParallelDataResponse {
  readonly ParallelDataPropertiesList?: [];
  readonly NextToken?: string;
}

export interface ListTerminologiesRequest {
  readonly NextToken?: string;
  readonly MaxResults?: number;
}

export interface ListTerminologiesResponse {
  readonly TerminologyPropertiesList?: [];
  readonly NextToken?: string;
}

export interface ListTextTranslationJobsRequest {
  readonly Filter?: TextTranslationJobFilter;
  readonly NextToken?: string;
  readonly MaxResults?: number;
}

export interface ListTextTranslationJobsResponse {
  readonly TextTranslationJobPropertiesList?: [];
  readonly NextToken?: string;
}

export interface OutputDataConfig {
  readonly S3Uri: string;
  readonly EncryptionKey?: EncryptionKey;
}

export interface ParallelDataConfig {
  readonly S3Uri: string;
  readonly Format: string;
}

export interface ParallelDataDataLocation {
  readonly RepositoryType: string;
  readonly Location: string;
}

export interface ParallelDataProperties {
  readonly Name?: string;
  readonly Arn?: string;
  readonly Description?: string;
  readonly Status?: string;
  readonly SourceLanguageCode?: string;
  readonly TargetLanguageCodes?: [];
  readonly ParallelDataConfig?: ParallelDataConfig;
  readonly Message?: string;
  readonly ImportedDataSize?: number;
  readonly ImportedRecordCount?: number;
  readonly FailedRecordCount?: number;
  readonly SkippedRecordCount?: number;
  readonly EncryptionKey?: EncryptionKey;
  readonly CreatedAt?: Date;
  readonly LastUpdatedAt?: Date;
  readonly LatestUpdateAttemptStatus?: string;
  readonly LatestUpdateAttemptAt?: Date;
}

export interface ResourceNotFoundException {
  readonly Message?: string;
}

export interface ServiceUnavailableException {
  readonly Message?: string;
}

export interface StartTextTranslationJobRequest {
  readonly JobName?: string;
  readonly InputDataConfig: InputDataConfig;
  readonly OutputDataConfig: OutputDataConfig;
  readonly DataAccessRoleArn: string;
  readonly SourceLanguageCode: string;
  readonly TargetLanguageCodes: [];
  readonly TerminologyNames?: [];
  readonly ParallelDataNames?: [];
  readonly ClientToken: string;
  readonly Settings?: TranslationSettings;
}

export interface StartTextTranslationJobResponse {
  readonly JobId?: string;
  readonly JobStatus?: string;
}

export interface StopTextTranslationJobRequest {
  readonly JobId: string;
}

export interface StopTextTranslationJobResponse {
  readonly JobId?: string;
  readonly JobStatus?: string;
}

export interface Term {
  readonly SourceText?: string;
  readonly TargetText?: string;
}

export interface TerminologyData {
  readonly File: unknown;
  readonly Format: string;
  readonly Directionality?: string;
}

export interface TerminologyDataLocation {
  readonly RepositoryType: string;
  readonly Location: string;
}

export interface TerminologyProperties {
  readonly Name?: string;
  readonly Description?: string;
  readonly Arn?: string;
  readonly SourceLanguageCode?: string;
  readonly TargetLanguageCodes?: [];
  readonly EncryptionKey?: EncryptionKey;
  readonly SizeBytes?: number;
  readonly TermCount?: number;
  readonly CreatedAt?: Date;
  readonly LastUpdatedAt?: Date;
  readonly Directionality?: string;
  readonly Message?: string;
  readonly SkippedTermCount?: number;
  readonly Format?: string;
}

export interface TextSizeLimitExceededException {
  readonly Message?: string;
}

export interface TextTranslationJobFilter {
  readonly JobName?: string;
  readonly JobStatus?: string;
  readonly SubmittedBeforeTime?: Date;
  readonly SubmittedAfterTime?: Date;
}

export interface TextTranslationJobProperties {
  readonly JobId?: string;
  readonly JobName?: string;
  readonly JobStatus?: string;
  readonly JobDetails?: JobDetails;
  readonly SourceLanguageCode?: string;
  readonly TargetLanguageCodes?: [];
  readonly TerminologyNames?: [];
  readonly ParallelDataNames?: [];
  readonly Message?: string;
  readonly SubmittedTime?: Date;
  readonly EndTime?: Date;
  readonly InputDataConfig?: InputDataConfig;
  readonly OutputDataConfig?: OutputDataConfig;
  readonly DataAccessRoleArn?: string;
  readonly Settings?: TranslationSettings;
}

export interface TooManyRequestsException {
  readonly Message?: string;
}

export interface TranslateTextRequest {
  readonly Text: string;
  readonly TerminologyNames?: [];
  readonly SourceLanguageCode: string;
  readonly TargetLanguageCode: string;
  readonly Settings?: TranslationSettings;
}

export interface TranslateTextResponse {
  readonly TranslatedText: string;
  readonly SourceLanguageCode: string;
  readonly TargetLanguageCode: string;
  readonly AppliedTerminologies?: [];
  readonly AppliedSettings?: TranslationSettings;
}

export interface TranslationSettings {
  readonly Profanity?: string;
}

export interface UnsupportedLanguagePairException {
  readonly Message?: string;
  readonly SourceLanguageCode?: string;
  readonly TargetLanguageCode?: string;
}

export interface UpdateParallelDataRequest {
  readonly Name: string;
  readonly Description?: string;
  readonly ParallelDataConfig: ParallelDataConfig;
  readonly ClientToken: string;
}

export interface UpdateParallelDataResponse {
  readonly Name?: string;
  readonly Status?: string;
  readonly LatestUpdateAttemptStatus?: string;
  readonly LatestUpdateAttemptAt?: Date;
}


