/**
 * STOP. This file is autogenerated. DO NOT EDIT by hand
 */
export interface BatchPutMessage {
  readonly channelName: string;
  readonly messages: [];
}

export interface CancelPipelineReprocessing {
  readonly pipelineName: string;
  readonly reprocessingId: string;
}

export interface CreateChannel {
  readonly channelName: string;
  readonly channelStorage?: ChannelStorage;
  readonly retentionPeriod?: RetentionPeriod;
  readonly tags?: [];
}

export interface CreateDataset {
  readonly datasetName: string;
  readonly actions: [];
  readonly triggers?: [];
  readonly contentDeliveryRules?: [];
  readonly retentionPeriod?: RetentionPeriod;
  readonly versioningConfiguration?: VersioningConfiguration;
  readonly tags?: [];
  readonly lateDataRules?: [];
}

export interface CreateDatasetContent {
  readonly datasetName: string;
  readonly versionId?: string;
}

export interface CreateDatastore {
  readonly datastoreName: string;
  readonly datastoreStorage?: DatastoreStorage;
  readonly retentionPeriod?: RetentionPeriod;
  readonly tags?: [];
  readonly fileFormatConfiguration?: FileFormatConfiguration;
  readonly datastorePartitions?: DatastorePartitions;
}

export interface CreatePipeline {
  readonly pipelineName: string;
  readonly pipelineActivities: [];
  readonly tags?: [];
}

export interface DeleteChannel {
  readonly channelName: string;
}

export interface DeleteDataset {
  readonly datasetName: string;
}

export interface DeleteDatasetContent {
  readonly datasetName: string;
  readonly versionId?: string;
}

export interface DeleteDatastore {
  readonly datastoreName: string;
}

export interface DeletePipeline {
  readonly pipelineName: string;
}

export interface DescribeChannel {
  readonly channelName: string;
  readonly includeStatistics?: boolean;
}

export interface DescribeDataset {
  readonly datasetName: string;
}

export interface DescribeDatastore {
  readonly datastoreName: string;
  readonly includeStatistics?: boolean;
}

export interface DescribeLoggingOptions {
}

export interface DescribePipeline {
  readonly pipelineName: string;
}

export interface GetDatasetContent {
  readonly datasetName: string;
  readonly versionId?: string;
}

export interface ListChannels {
  readonly nextToken?: string;
  readonly maxResults?: number;
}

export interface ListDatasetContents {
  readonly datasetName: string;
  readonly nextToken?: string;
  readonly maxResults?: number;
  readonly scheduledOnOrAfter?: Date;
  readonly scheduledBefore?: Date;
}

export interface ListDatasets {
  readonly nextToken?: string;
  readonly maxResults?: number;
}

export interface ListDatastores {
  readonly nextToken?: string;
  readonly maxResults?: number;
}

export interface ListPipelines {
  readonly nextToken?: string;
  readonly maxResults?: number;
}

export interface ListTagsForResource {
  readonly resourceArn: string;
}

export interface PutLoggingOptions {
  readonly loggingOptions: LoggingOptions;
}

export interface RunPipelineActivity {
  readonly pipelineActivity: PipelineActivity;
  readonly payloads: [];
}

export interface SampleChannelData {
  readonly channelName: string;
  readonly maxMessages?: number;
  readonly startTime?: Date;
  readonly endTime?: Date;
}

export interface StartPipelineReprocessing {
  readonly pipelineName: string;
  readonly startTime?: Date;
  readonly endTime?: Date;
  readonly channelMessages?: ChannelMessages;
}

export interface TagResource {
  readonly resourceArn: string;
  readonly tags: [];
}

export interface UntagResource {
  readonly resourceArn: string;
  readonly tagKeys: [];
}

export interface UpdateChannel {
  readonly channelName: string;
  readonly channelStorage?: ChannelStorage;
  readonly retentionPeriod?: RetentionPeriod;
}

export interface UpdateDataset {
  readonly datasetName: string;
  readonly actions: [];
  readonly triggers?: [];
  readonly contentDeliveryRules?: [];
  readonly retentionPeriod?: RetentionPeriod;
  readonly versioningConfiguration?: VersioningConfiguration;
  readonly lateDataRules?: [];
}

export interface UpdateDatastore {
  readonly datastoreName: string;
  readonly retentionPeriod?: RetentionPeriod;
  readonly datastoreStorage?: DatastoreStorage;
  readonly fileFormatConfiguration?: FileFormatConfiguration;
}

export interface UpdatePipeline {
  readonly pipelineName: string;
  readonly pipelineActivities: [];
}

export interface AddAttributesActivity {
  readonly name: string;
  readonly attributes: {[key: string]: any};
  readonly next?: string;
}

export interface BatchPutMessageErrorEntry {
  readonly messageId?: string;
  readonly errorCode?: string;
  readonly errorMessage?: string;
}

export interface BatchPutMessageRequest {
  readonly channelName: string;
  readonly messages: [];
}

export interface BatchPutMessageResponse {
  readonly batchPutMessageErrorEntries?: [];
}

export interface CancelPipelineReprocessingRequest {
  readonly pipelineName: string;
  readonly reprocessingId: string;
}

export interface CancelPipelineReprocessingResponse {
}

export interface Channel {
  readonly name?: string;
  readonly storage?: ChannelStorage;
  readonly arn?: string;
  readonly status?: string;
  readonly retentionPeriod?: RetentionPeriod;
  readonly creationTime?: Date;
  readonly lastUpdateTime?: Date;
  readonly lastMessageArrivalTime?: Date;
}

export interface ChannelActivity {
  readonly name: string;
  readonly channelName: string;
  readonly next?: string;
}

export interface ChannelMessages {
  readonly s3Paths?: [];
}

export interface ChannelStatistics {
  readonly size?: EstimatedResourceSize;
}

export interface ChannelStorage {
  readonly serviceManagedS3?: ServiceManagedChannelS3Storage;
  readonly customerManagedS3?: CustomerManagedChannelS3Storage;
}

export interface ChannelStorageSummary {
  readonly serviceManagedS3?: ServiceManagedChannelS3StorageSummary;
  readonly customerManagedS3?: CustomerManagedChannelS3StorageSummary;
}

export interface ChannelSummary {
  readonly channelName?: string;
  readonly channelStorage?: ChannelStorageSummary;
  readonly status?: string;
  readonly creationTime?: Date;
  readonly lastUpdateTime?: Date;
  readonly lastMessageArrivalTime?: Date;
}

export interface Column {
  readonly name: string;
  readonly type: string;
}

export interface ContainerDatasetAction {
  readonly image: string;
  readonly executionRoleArn: string;
  readonly resourceConfiguration: ResourceConfiguration;
  readonly variables?: [];
}

export interface CreateChannelRequest {
  readonly channelName: string;
  readonly channelStorage?: ChannelStorage;
  readonly retentionPeriod?: RetentionPeriod;
  readonly tags?: [];
}

export interface CreateChannelResponse {
  readonly channelName?: string;
  readonly channelArn?: string;
  readonly retentionPeriod?: RetentionPeriod;
}

export interface CreateDatasetContentRequest {
  readonly datasetName: string;
  readonly versionId?: string;
}

export interface CreateDatasetContentResponse {
  readonly versionId?: string;
}

export interface CreateDatasetRequest {
  readonly datasetName: string;
  readonly actions: [];
  readonly triggers?: [];
  readonly contentDeliveryRules?: [];
  readonly retentionPeriod?: RetentionPeriod;
  readonly versioningConfiguration?: VersioningConfiguration;
  readonly tags?: [];
  readonly lateDataRules?: [];
}

export interface CreateDatasetResponse {
  readonly datasetName?: string;
  readonly datasetArn?: string;
  readonly retentionPeriod?: RetentionPeriod;
}

export interface CreateDatastoreRequest {
  readonly datastoreName: string;
  readonly datastoreStorage?: DatastoreStorage;
  readonly retentionPeriod?: RetentionPeriod;
  readonly tags?: [];
  readonly fileFormatConfiguration?: FileFormatConfiguration;
  readonly datastorePartitions?: DatastorePartitions;
}

export interface CreateDatastoreResponse {
  readonly datastoreName?: string;
  readonly datastoreArn?: string;
  readonly retentionPeriod?: RetentionPeriod;
}

export interface CreatePipelineRequest {
  readonly pipelineName: string;
  readonly pipelineActivities: [];
  readonly tags?: [];
}

export interface CreatePipelineResponse {
  readonly pipelineName?: string;
  readonly pipelineArn?: string;
}

export interface CustomerManagedChannelS3Storage {
  readonly bucket: string;
  readonly keyPrefix?: string;
  readonly roleArn: string;
}

export interface CustomerManagedChannelS3StorageSummary {
  readonly bucket?: string;
  readonly keyPrefix?: string;
  readonly roleArn?: string;
}

export interface CustomerManagedDatastoreS3Storage {
  readonly bucket: string;
  readonly keyPrefix?: string;
  readonly roleArn: string;
}

export interface CustomerManagedDatastoreS3StorageSummary {
  readonly bucket?: string;
  readonly keyPrefix?: string;
  readonly roleArn?: string;
}

export interface Dataset {
  readonly name?: string;
  readonly arn?: string;
  readonly actions?: [];
  readonly triggers?: [];
  readonly contentDeliveryRules?: [];
  readonly status?: string;
  readonly creationTime?: Date;
  readonly lastUpdateTime?: Date;
  readonly retentionPeriod?: RetentionPeriod;
  readonly versioningConfiguration?: VersioningConfiguration;
  readonly lateDataRules?: [];
}

export interface DatasetAction {
  readonly actionName?: string;
  readonly queryAction?: SqlQueryDatasetAction;
  readonly containerAction?: ContainerDatasetAction;
}

export interface DatasetActionSummary {
  readonly actionName?: string;
  readonly actionType?: string;
}

export interface DatasetContentDeliveryDestination {
  readonly iotEventsDestinationConfiguration?: IotEventsDestinationConfiguration;
  readonly s3DestinationConfiguration?: S3DestinationConfiguration;
}

export interface DatasetContentDeliveryRule {
  readonly entryName?: string;
  readonly destination: DatasetContentDeliveryDestination;
}

export interface DatasetContentStatus {
  readonly state?: string;
  readonly reason?: string;
}

export interface DatasetContentSummary {
  readonly version?: string;
  readonly status?: DatasetContentStatus;
  readonly creationTime?: Date;
  readonly scheduleTime?: Date;
  readonly completionTime?: Date;
}

export interface DatasetContentVersionValue {
  readonly datasetName: string;
}

export interface DatasetEntry {
  readonly entryName?: string;
  readonly dataURI?: string;
}

export interface DatasetSummary {
  readonly datasetName?: string;
  readonly status?: string;
  readonly creationTime?: Date;
  readonly lastUpdateTime?: Date;
  readonly triggers?: [];
  readonly actions?: [];
}

export interface DatasetTrigger {
  readonly schedule?: Schedule;
  readonly dataset?: TriggeringDataset;
}

export interface Datastore {
  readonly name?: string;
  readonly storage?: DatastoreStorage;
  readonly arn?: string;
  readonly status?: string;
  readonly retentionPeriod?: RetentionPeriod;
  readonly creationTime?: Date;
  readonly lastUpdateTime?: Date;
  readonly lastMessageArrivalTime?: Date;
  readonly fileFormatConfiguration?: FileFormatConfiguration;
  readonly datastorePartitions?: DatastorePartitions;
}

export interface DatastoreActivity {
  readonly name: string;
  readonly datastoreName: string;
}

export interface DatastoreIotSiteWiseMultiLayerStorage {
  readonly customerManagedS3Storage: IotSiteWiseCustomerManagedDatastoreS3Storage;
}

export interface DatastoreIotSiteWiseMultiLayerStorageSummary {
  readonly customerManagedS3Storage?: IotSiteWiseCustomerManagedDatastoreS3StorageSummary;
}

export interface DatastorePartition {
  readonly attributePartition?: Partition;
  readonly timestampPartition?: TimestampPartition;
}

export interface DatastorePartitions {
  readonly partitions?: [];
}

export interface DatastoreStatistics {
  readonly size?: EstimatedResourceSize;
}

export interface DatastoreStorage {
  readonly serviceManagedS3?: ServiceManagedDatastoreS3Storage;
  readonly customerManagedS3?: CustomerManagedDatastoreS3Storage;
  readonly iotSiteWiseMultiLayerStorage?: DatastoreIotSiteWiseMultiLayerStorage;
}

export interface DatastoreStorageSummary {
  readonly serviceManagedS3?: ServiceManagedDatastoreS3StorageSummary;
  readonly customerManagedS3?: CustomerManagedDatastoreS3StorageSummary;
  readonly iotSiteWiseMultiLayerStorage?: DatastoreIotSiteWiseMultiLayerStorageSummary;
}

export interface DatastoreSummary {
  readonly datastoreName?: string;
  readonly datastoreStorage?: DatastoreStorageSummary;
  readonly status?: string;
  readonly creationTime?: Date;
  readonly lastUpdateTime?: Date;
  readonly lastMessageArrivalTime?: Date;
  readonly fileFormatType?: string;
  readonly datastorePartitions?: DatastorePartitions;
}

export interface DeleteChannelRequest {
  readonly channelName: string;
}

export interface DeleteDatasetContentRequest {
  readonly datasetName: string;
  readonly versionId?: string;
}

export interface DeleteDatasetRequest {
  readonly datasetName: string;
}

export interface DeleteDatastoreRequest {
  readonly datastoreName: string;
}

export interface DeletePipelineRequest {
  readonly pipelineName: string;
}

export interface DeltaTime {
  readonly offsetSeconds: number;
  readonly timeExpression: string;
}

export interface DeltaTimeSessionWindowConfiguration {
  readonly timeoutInMinutes: number;
}

export interface DescribeChannelRequest {
  readonly channelName: string;
  readonly includeStatistics?: boolean;
}

export interface DescribeChannelResponse {
  readonly channel?: Channel;
  readonly statistics?: ChannelStatistics;
}

export interface DescribeDatasetRequest {
  readonly datasetName: string;
}

export interface DescribeDatasetResponse {
  readonly dataset?: Dataset;
}

export interface DescribeDatastoreRequest {
  readonly datastoreName: string;
  readonly includeStatistics?: boolean;
}

export interface DescribeDatastoreResponse {
  readonly datastore?: Datastore;
  readonly statistics?: DatastoreStatistics;
}

export interface DescribeLoggingOptionsRequest {
}

export interface DescribeLoggingOptionsResponse {
  readonly loggingOptions?: LoggingOptions;
}

export interface DescribePipelineRequest {
  readonly pipelineName: string;
}

export interface DescribePipelineResponse {
  readonly pipeline?: Pipeline;
}

export interface DeviceRegistryEnrichActivity {
  readonly name: string;
  readonly attribute: string;
  readonly thingName: string;
  readonly roleArn: string;
  readonly next?: string;
}

export interface DeviceShadowEnrichActivity {
  readonly name: string;
  readonly attribute: string;
  readonly thingName: string;
  readonly roleArn: string;
  readonly next?: string;
}

export interface EstimatedResourceSize {
  readonly estimatedSizeInBytes?: unknown;
  readonly estimatedOn?: Date;
}

export interface FileFormatConfiguration {
  readonly jsonConfiguration?: JsonConfiguration;
  readonly parquetConfiguration?: ParquetConfiguration;
}

export interface FilterActivity {
  readonly name: string;
  readonly filter: string;
  readonly next?: string;
}

export interface GetDatasetContentRequest {
  readonly datasetName: string;
  readonly versionId?: string;
}

export interface GetDatasetContentResponse {
  readonly entries?: [];
  readonly timestamp?: Date;
  readonly status?: DatasetContentStatus;
}

export interface GlueConfiguration {
  readonly tableName: string;
  readonly databaseName: string;
}

export interface InternalFailureException {
  readonly message?: string;
}

export interface InvalidRequestException {
  readonly message?: string;
}

export interface IotEventsDestinationConfiguration {
  readonly inputName: string;
  readonly roleArn: string;
}

export interface IotSiteWiseCustomerManagedDatastoreS3Storage {
  readonly bucket: string;
  readonly keyPrefix?: string;
}

export interface IotSiteWiseCustomerManagedDatastoreS3StorageSummary {
  readonly bucket?: string;
  readonly keyPrefix?: string;
}

export interface JsonConfiguration {
}

export interface LambdaActivity {
  readonly name: string;
  readonly lambdaName: string;
  readonly batchSize: number;
  readonly next?: string;
}

export interface LateDataRule {
  readonly ruleName?: string;
  readonly ruleConfiguration: LateDataRuleConfiguration;
}

export interface LateDataRuleConfiguration {
  readonly deltaTimeSessionWindowConfiguration?: DeltaTimeSessionWindowConfiguration;
}

export interface LimitExceededException {
  readonly message?: string;
}

export interface ListChannelsRequest {
  readonly nextToken?: string;
  readonly maxResults?: number;
}

export interface ListChannelsResponse {
  readonly channelSummaries?: [];
  readonly nextToken?: string;
}

export interface ListDatasetContentsRequest {
  readonly datasetName: string;
  readonly nextToken?: string;
  readonly maxResults?: number;
  readonly scheduledOnOrAfter?: Date;
  readonly scheduledBefore?: Date;
}

export interface ListDatasetContentsResponse {
  readonly datasetContentSummaries?: [];
  readonly nextToken?: string;
}

export interface ListDatasetsRequest {
  readonly nextToken?: string;
  readonly maxResults?: number;
}

export interface ListDatasetsResponse {
  readonly datasetSummaries?: [];
  readonly nextToken?: string;
}

export interface ListDatastoresRequest {
  readonly nextToken?: string;
  readonly maxResults?: number;
}

export interface ListDatastoresResponse {
  readonly datastoreSummaries?: [];
  readonly nextToken?: string;
}

export interface ListPipelinesRequest {
  readonly nextToken?: string;
  readonly maxResults?: number;
}

export interface ListPipelinesResponse {
  readonly pipelineSummaries?: [];
  readonly nextToken?: string;
}

export interface ListTagsForResourceRequest {
  readonly resourceArn: string;
}

export interface ListTagsForResourceResponse {
  readonly tags?: [];
}

export interface LoggingOptions {
  readonly roleArn: string;
  readonly level: string;
  readonly enabled: boolean;
}

export interface MathActivity {
  readonly name: string;
  readonly attribute: string;
  readonly math: string;
  readonly next?: string;
}

export interface Message {
  readonly messageId: string;
  readonly payload: unknown;
}

export interface OutputFileUriValue {
  readonly fileName: string;
}

export interface ParquetConfiguration {
  readonly schemaDefinition?: SchemaDefinition;
}

export interface Partition {
  readonly attributeName: string;
}

export interface Pipeline {
  readonly name?: string;
  readonly arn?: string;
  readonly activities?: [];
  readonly reprocessingSummaries?: [];
  readonly creationTime?: Date;
  readonly lastUpdateTime?: Date;
}

export interface PipelineActivity {
  readonly channel?: ChannelActivity;
  readonly lambda?: LambdaActivity;
  readonly datastore?: DatastoreActivity;
  readonly addAttributes?: AddAttributesActivity;
  readonly removeAttributes?: RemoveAttributesActivity;
  readonly selectAttributes?: SelectAttributesActivity;
  readonly filter?: FilterActivity;
  readonly math?: MathActivity;
  readonly deviceRegistryEnrich?: DeviceRegistryEnrichActivity;
  readonly deviceShadowEnrich?: DeviceShadowEnrichActivity;
}

export interface PipelineSummary {
  readonly pipelineName?: string;
  readonly reprocessingSummaries?: [];
  readonly creationTime?: Date;
  readonly lastUpdateTime?: Date;
}

export interface PutLoggingOptionsRequest {
  readonly loggingOptions: LoggingOptions;
}

export interface QueryFilter {
  readonly deltaTime?: DeltaTime;
}

export interface RemoveAttributesActivity {
  readonly name: string;
  readonly attributes: [];
  readonly next?: string;
}

export interface ReprocessingSummary {
  readonly id?: string;
  readonly status?: string;
  readonly creationTime?: Date;
}

export interface ResourceAlreadyExistsException {
  readonly message?: string;
  readonly resourceId?: string;
  readonly resourceArn?: string;
}

export interface ResourceConfiguration {
  readonly computeType: string;
  readonly volumeSizeInGB: number;
}

export interface ResourceNotFoundException {
  readonly message?: string;
}

export interface RetentionPeriod {
  readonly unlimited?: boolean;
  readonly numberOfDays?: number;
}

export interface RunPipelineActivityRequest {
  readonly pipelineActivity: PipelineActivity;
  readonly payloads: [];
}

export interface RunPipelineActivityResponse {
  readonly payloads?: [];
  readonly logResult?: string;
}

export interface S3DestinationConfiguration {
  readonly bucket: string;
  readonly key: string;
  readonly glueConfiguration?: GlueConfiguration;
  readonly roleArn: string;
}

export interface SampleChannelDataRequest {
  readonly channelName: string;
  readonly maxMessages?: number;
  readonly startTime?: Date;
  readonly endTime?: Date;
}

export interface SampleChannelDataResponse {
  readonly payloads?: [];
}

export interface Schedule {
  readonly expression?: string;
}

export interface SchemaDefinition {
  readonly columns?: [];
}

export interface SelectAttributesActivity {
  readonly name: string;
  readonly attributes: [];
  readonly next?: string;
}

export interface ServiceManagedChannelS3Storage {
}

export interface ServiceManagedChannelS3StorageSummary {
}

export interface ServiceManagedDatastoreS3Storage {
}

export interface ServiceManagedDatastoreS3StorageSummary {
}

export interface ServiceUnavailableException {
  readonly message?: string;
}

export interface SqlQueryDatasetAction {
  readonly sqlQuery: string;
  readonly filters?: [];
}

export interface StartPipelineReprocessingRequest {
  readonly pipelineName: string;
  readonly startTime?: Date;
  readonly endTime?: Date;
  readonly channelMessages?: ChannelMessages;
}

export interface StartPipelineReprocessingResponse {
  readonly reprocessingId?: string;
}

export interface Tag {
  readonly key: string;
  readonly value: string;
}

export interface TagResourceRequest {
  readonly resourceArn: string;
  readonly tags: [];
}

export interface TagResourceResponse {
}

export interface ThrottlingException {
  readonly message?: string;
}

export interface TimestampPartition {
  readonly attributeName: string;
  readonly timestampFormat?: string;
}

export interface TriggeringDataset {
  readonly name: string;
}

export interface UntagResourceRequest {
  readonly resourceArn: string;
  readonly tagKeys: [];
}

export interface UntagResourceResponse {
}

export interface UpdateChannelRequest {
  readonly channelName: string;
  readonly channelStorage?: ChannelStorage;
  readonly retentionPeriod?: RetentionPeriod;
}

export interface UpdateDatasetRequest {
  readonly datasetName: string;
  readonly actions: [];
  readonly triggers?: [];
  readonly contentDeliveryRules?: [];
  readonly retentionPeriod?: RetentionPeriod;
  readonly versioningConfiguration?: VersioningConfiguration;
  readonly lateDataRules?: [];
}

export interface UpdateDatastoreRequest {
  readonly datastoreName: string;
  readonly retentionPeriod?: RetentionPeriod;
  readonly datastoreStorage?: DatastoreStorage;
  readonly fileFormatConfiguration?: FileFormatConfiguration;
}

export interface UpdatePipelineRequest {
  readonly pipelineName: string;
  readonly pipelineActivities: [];
}

export interface Variable {
  readonly name: string;
  readonly stringValue?: string;
  readonly doubleValue?: unknown;
  readonly datasetContentVersionValue?: DatasetContentVersionValue;
  readonly outputFileUriValue?: OutputFileUriValue;
}

export interface VersioningConfiguration {
  readonly unlimited?: boolean;
  readonly maxVersions?: number;
}


