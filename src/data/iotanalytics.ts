/**
 * STOP. This file is autogenerated. DO NOT EDIT by hand
 */
export interface BatchPutMessage {
  readonly channelName: string;
  readonly messages: [];
}
export interface CancelPipelineReprocessing {
  readonly pipelineName: string;
  readonly reprocessingId: string;
}
export interface CreateChannel {
  readonly channelName: string;
  readonly channelStorage?: ChannelStorage;
  readonly retentionPeriod?: RetentionPeriod;
  readonly tags?: [];
}
export interface CreateDataset {
  readonly datasetName: string;
  readonly actions: [];
  readonly triggers?: [];
  readonly contentDeliveryRules?: [];
  readonly retentionPeriod?: RetentionPeriod;
  readonly versioningConfiguration?: VersioningConfiguration;
  readonly tags?: [];
  readonly lateDataRules?: [];
}
export interface CreateDatasetContent {
  readonly datasetName: string;
  readonly versionId?: string;
}
export interface CreateDatastore {
  readonly datastoreName: string;
  readonly datastoreStorage?: DatastoreStorage;
  readonly retentionPeriod?: RetentionPeriod;
  readonly tags?: [];
  readonly fileFormatConfiguration?: FileFormatConfiguration;
  readonly datastorePartitions?: DatastorePartitions;
}
export interface CreatePipeline {
  readonly pipelineName: string;
  readonly pipelineActivities: [];
  readonly tags?: [];
}
export interface DeleteChannel {
  readonly channelName: string;
}
export interface DeleteDataset {
  readonly datasetName: string;
}
export interface DeleteDatasetContent {
  readonly datasetName: string;
  readonly versionId?: string;
}
export interface DeleteDatastore {
  readonly datastoreName: string;
}
export interface DeletePipeline {
  readonly pipelineName: string;
}
export interface DescribeChannel {
  readonly channelName: string;
  readonly includeStatistics?: boolean;
}
export interface DescribeDataset {
  readonly datasetName: string;
}
export interface DescribeDatastore {
  readonly datastoreName: string;
  readonly includeStatistics?: boolean;
}
export interface DescribeLoggingOptions {
}
export interface DescribePipeline {
  readonly pipelineName: string;
}
export interface GetDatasetContent {
  readonly datasetName: string;
  readonly versionId?: string;
}
export interface ListChannels {
  readonly nextToken?: string;
  readonly maxResults?: number;
}
export interface ListDatasetContents {
  readonly datasetName: string;
  readonly nextToken?: string;
  readonly maxResults?: number;
  readonly scheduledOnOrAfter?: Date;
  readonly scheduledBefore?: Date;
}
export interface ListDatasets {
  readonly nextToken?: string;
  readonly maxResults?: number;
}
export interface ListDatastores {
  readonly nextToken?: string;
  readonly maxResults?: number;
}
export interface ListPipelines {
  readonly nextToken?: string;
  readonly maxResults?: number;
}
export interface ListTagsForResource {
  readonly resourceArn: string;
}
export interface PutLoggingOptions {
  readonly loggingOptions: LoggingOptions;
}
export interface RunPipelineActivity {
  readonly pipelineActivity: PipelineActivity;
  readonly payloads: [];
}
export interface SampleChannelData {
  readonly channelName: string;
  readonly maxMessages?: number;
  readonly startTime?: Date;
  readonly endTime?: Date;
}
export interface StartPipelineReprocessing {
  readonly pipelineName: string;
  readonly startTime?: Date;
  readonly endTime?: Date;
  readonly channelMessages?: ChannelMessages;
}
export interface TagResource {
  readonly resourceArn: string;
  readonly tags: [];
}
export interface UntagResource {
  readonly resourceArn: string;
  readonly tagKeys: [];
}
export interface UpdateChannel {
  readonly channelName: string;
  readonly channelStorage?: ChannelStorage;
  readonly retentionPeriod?: RetentionPeriod;
}
export interface UpdateDataset {
  readonly datasetName: string;
  readonly actions: [];
  readonly triggers?: [];
  readonly contentDeliveryRules?: [];
  readonly retentionPeriod?: RetentionPeriod;
  readonly versioningConfiguration?: VersioningConfiguration;
  readonly lateDataRules?: [];
}
export interface UpdateDatastore {
  readonly datastoreName: string;
  readonly retentionPeriod?: RetentionPeriod;
  readonly datastoreStorage?: DatastoreStorage;
  readonly fileFormatConfiguration?: FileFormatConfiguration;
}
export interface UpdatePipeline {
  readonly pipelineName: string;
  readonly pipelineActivities: [];
}



interface AddAttributesActivity {
  readonly name: string;
  readonly attributes: {[key: string]: any};
  readonly next: string;
}

interface BatchPutMessageErrorEntry {
  readonly messageId: string;
  readonly errorCode: string;
  readonly errorMessage: string;
}

interface BatchPutMessageRequest {
  readonly channelName: string;
  readonly messages: [];
}

interface BatchPutMessageResponse {
  readonly batchPutMessageErrorEntries: [];
}

interface CancelPipelineReprocessingRequest {
  readonly pipelineName: string;
  readonly reprocessingId: string;
}

interface CancelPipelineReprocessingResponse {
}

interface Channel {
  readonly name: string;
  readonly storage: ChannelStorage;
  readonly arn: string;
  readonly status: string;
  readonly retentionPeriod: RetentionPeriod;
  readonly creationTime: Date;
  readonly lastUpdateTime: Date;
  readonly lastMessageArrivalTime: Date;
}

interface ChannelActivity {
  readonly name: string;
  readonly channelName: string;
  readonly next: string;
}

interface ChannelMessages {
  readonly s3Paths: [];
}

interface ChannelStatistics {
  readonly size: EstimatedResourceSize;
}

interface ChannelStorage {
  readonly serviceManagedS3: ServiceManagedChannelS3Storage;
  readonly customerManagedS3: CustomerManagedChannelS3Storage;
}

interface ChannelStorageSummary {
  readonly serviceManagedS3: ServiceManagedChannelS3StorageSummary;
  readonly customerManagedS3: CustomerManagedChannelS3StorageSummary;
}

interface ChannelSummary {
  readonly channelName: string;
  readonly channelStorage: ChannelStorageSummary;
  readonly status: string;
  readonly creationTime: Date;
  readonly lastUpdateTime: Date;
  readonly lastMessageArrivalTime: Date;
}

interface Column {
  readonly name: string;
  readonly type: string;
}

interface ContainerDatasetAction {
  readonly image: string;
  readonly executionRoleArn: string;
  readonly resourceConfiguration: ResourceConfiguration;
  readonly variables: [];
}

interface CreateChannelRequest {
  readonly channelName: string;
  readonly channelStorage: ChannelStorage;
  readonly retentionPeriod: RetentionPeriod;
  readonly tags: [];
}

interface CreateChannelResponse {
  readonly channelName: string;
  readonly channelArn: string;
  readonly retentionPeriod: RetentionPeriod;
}

interface CreateDatasetContentRequest {
  readonly datasetName: string;
  readonly versionId: string;
}

interface CreateDatasetContentResponse {
  readonly versionId: string;
}

interface CreateDatasetRequest {
  readonly datasetName: string;
  readonly actions: [];
  readonly triggers: [];
  readonly contentDeliveryRules: [];
  readonly retentionPeriod: RetentionPeriod;
  readonly versioningConfiguration: VersioningConfiguration;
  readonly tags: [];
  readonly lateDataRules: [];
}

interface CreateDatasetResponse {
  readonly datasetName: string;
  readonly datasetArn: string;
  readonly retentionPeriod: RetentionPeriod;
}

interface CreateDatastoreRequest {
  readonly datastoreName: string;
  readonly datastoreStorage: DatastoreStorage;
  readonly retentionPeriod: RetentionPeriod;
  readonly tags: [];
  readonly fileFormatConfiguration: FileFormatConfiguration;
  readonly datastorePartitions: DatastorePartitions;
}

interface CreateDatastoreResponse {
  readonly datastoreName: string;
  readonly datastoreArn: string;
  readonly retentionPeriod: RetentionPeriod;
}

interface CreatePipelineRequest {
  readonly pipelineName: string;
  readonly pipelineActivities: [];
  readonly tags: [];
}

interface CreatePipelineResponse {
  readonly pipelineName: string;
  readonly pipelineArn: string;
}

interface CustomerManagedChannelS3Storage {
  readonly bucket: string;
  readonly keyPrefix: string;
  readonly roleArn: string;
}

interface CustomerManagedChannelS3StorageSummary {
  readonly bucket: string;
  readonly keyPrefix: string;
  readonly roleArn: string;
}

interface CustomerManagedDatastoreS3Storage {
  readonly bucket: string;
  readonly keyPrefix: string;
  readonly roleArn: string;
}

interface CustomerManagedDatastoreS3StorageSummary {
  readonly bucket: string;
  readonly keyPrefix: string;
  readonly roleArn: string;
}

interface Dataset {
  readonly name: string;
  readonly arn: string;
  readonly actions: [];
  readonly triggers: [];
  readonly contentDeliveryRules: [];
  readonly status: string;
  readonly creationTime: Date;
  readonly lastUpdateTime: Date;
  readonly retentionPeriod: RetentionPeriod;
  readonly versioningConfiguration: VersioningConfiguration;
  readonly lateDataRules: [];
}

interface DatasetAction {
  readonly actionName: string;
  readonly queryAction: SqlQueryDatasetAction;
  readonly containerAction: ContainerDatasetAction;
}

interface DatasetActionSummary {
  readonly actionName: string;
  readonly actionType: string;
}

interface DatasetContentDeliveryDestination {
  readonly iotEventsDestinationConfiguration: IotEventsDestinationConfiguration;
  readonly s3DestinationConfiguration: S3DestinationConfiguration;
}

interface DatasetContentDeliveryRule {
  readonly entryName: string;
  readonly destination: DatasetContentDeliveryDestination;
}

interface DatasetContentStatus {
  readonly state: string;
  readonly reason: string;
}

interface DatasetContentSummary {
  readonly version: string;
  readonly status: DatasetContentStatus;
  readonly creationTime: Date;
  readonly scheduleTime: Date;
  readonly completionTime: Date;
}

interface DatasetContentVersionValue {
  readonly datasetName: string;
}

interface DatasetEntry {
  readonly entryName: string;
  readonly dataURI: string;
}

interface DatasetSummary {
  readonly datasetName: string;
  readonly status: string;
  readonly creationTime: Date;
  readonly lastUpdateTime: Date;
  readonly triggers: [];
  readonly actions: [];
}

interface DatasetTrigger {
  readonly schedule: Schedule;
  readonly dataset: TriggeringDataset;
}

interface Datastore {
  readonly name: string;
  readonly storage: DatastoreStorage;
  readonly arn: string;
  readonly status: string;
  readonly retentionPeriod: RetentionPeriod;
  readonly creationTime: Date;
  readonly lastUpdateTime: Date;
  readonly lastMessageArrivalTime: Date;
  readonly fileFormatConfiguration: FileFormatConfiguration;
  readonly datastorePartitions: DatastorePartitions;
}

interface DatastoreActivity {
  readonly name: string;
  readonly datastoreName: string;
}

interface DatastoreIotSiteWiseMultiLayerStorage {
  readonly customerManagedS3Storage: IotSiteWiseCustomerManagedDatastoreS3Storage;
}

interface DatastoreIotSiteWiseMultiLayerStorageSummary {
  readonly customerManagedS3Storage: IotSiteWiseCustomerManagedDatastoreS3StorageSummary;
}

interface DatastorePartition {
  readonly attributePartition: Partition;
  readonly timestampPartition: TimestampPartition;
}

interface DatastorePartitions {
  readonly partitions: [];
}

interface DatastoreStatistics {
  readonly size: EstimatedResourceSize;
}

interface DatastoreStorage {
  readonly serviceManagedS3: ServiceManagedDatastoreS3Storage;
  readonly customerManagedS3: CustomerManagedDatastoreS3Storage;
  readonly iotSiteWiseMultiLayerStorage: DatastoreIotSiteWiseMultiLayerStorage;
}

interface DatastoreStorageSummary {
  readonly serviceManagedS3: ServiceManagedDatastoreS3StorageSummary;
  readonly customerManagedS3: CustomerManagedDatastoreS3StorageSummary;
  readonly iotSiteWiseMultiLayerStorage: DatastoreIotSiteWiseMultiLayerStorageSummary;
}

interface DatastoreSummary {
  readonly datastoreName: string;
  readonly datastoreStorage: DatastoreStorageSummary;
  readonly status: string;
  readonly creationTime: Date;
  readonly lastUpdateTime: Date;
  readonly lastMessageArrivalTime: Date;
  readonly fileFormatType: string;
  readonly datastorePartitions: DatastorePartitions;
}

interface DeleteChannelRequest {
  readonly channelName: string;
}

interface DeleteDatasetContentRequest {
  readonly datasetName: string;
  readonly versionId: string;
}

interface DeleteDatasetRequest {
  readonly datasetName: string;
}

interface DeleteDatastoreRequest {
  readonly datastoreName: string;
}

interface DeletePipelineRequest {
  readonly pipelineName: string;
}

interface DeltaTime {
  readonly offsetSeconds: number;
  readonly timeExpression: string;
}

interface DeltaTimeSessionWindowConfiguration {
  readonly timeoutInMinutes: number;
}

interface DescribeChannelRequest {
  readonly channelName: string;
  readonly includeStatistics: boolean;
}

interface DescribeChannelResponse {
  readonly channel: Channel;
  readonly statistics: ChannelStatistics;
}

interface DescribeDatasetRequest {
  readonly datasetName: string;
}

interface DescribeDatasetResponse {
  readonly dataset: Dataset;
}

interface DescribeDatastoreRequest {
  readonly datastoreName: string;
  readonly includeStatistics: boolean;
}

interface DescribeDatastoreResponse {
  readonly datastore: Datastore;
  readonly statistics: DatastoreStatistics;
}

interface DescribeLoggingOptionsRequest {
}

interface DescribeLoggingOptionsResponse {
  readonly loggingOptions: LoggingOptions;
}

interface DescribePipelineRequest {
  readonly pipelineName: string;
}

interface DescribePipelineResponse {
  readonly pipeline: Pipeline;
}

interface DeviceRegistryEnrichActivity {
  readonly name: string;
  readonly attribute: string;
  readonly thingName: string;
  readonly roleArn: string;
  readonly next: string;
}

interface DeviceShadowEnrichActivity {
  readonly name: string;
  readonly attribute: string;
  readonly thingName: string;
  readonly roleArn: string;
  readonly next: string;
}

interface EstimatedResourceSize {
  readonly estimatedSizeInBytes: unknown;
  readonly estimatedOn: Date;
}

interface FileFormatConfiguration {
  readonly jsonConfiguration: JsonConfiguration;
  readonly parquetConfiguration: ParquetConfiguration;
}

interface FilterActivity {
  readonly name: string;
  readonly filter: string;
  readonly next: string;
}

interface GetDatasetContentRequest {
  readonly datasetName: string;
  readonly versionId: string;
}

interface GetDatasetContentResponse {
  readonly entries: [];
  readonly timestamp: Date;
  readonly status: DatasetContentStatus;
}

interface GlueConfiguration {
  readonly tableName: string;
  readonly databaseName: string;
}

interface InternalFailureException {
  readonly message: string;
}

interface InvalidRequestException {
  readonly message: string;
}

interface IotEventsDestinationConfiguration {
  readonly inputName: string;
  readonly roleArn: string;
}

interface IotSiteWiseCustomerManagedDatastoreS3Storage {
  readonly bucket: string;
  readonly keyPrefix: string;
}

interface IotSiteWiseCustomerManagedDatastoreS3StorageSummary {
  readonly bucket: string;
  readonly keyPrefix: string;
}

interface JsonConfiguration {
}

interface LambdaActivity {
  readonly name: string;
  readonly lambdaName: string;
  readonly batchSize: number;
  readonly next: string;
}

interface LateDataRule {
  readonly ruleName: string;
  readonly ruleConfiguration: LateDataRuleConfiguration;
}

interface LateDataRuleConfiguration {
  readonly deltaTimeSessionWindowConfiguration: DeltaTimeSessionWindowConfiguration;
}

interface LimitExceededException {
  readonly message: string;
}

interface ListChannelsRequest {
  readonly nextToken: string;
  readonly maxResults: number;
}

interface ListChannelsResponse {
  readonly channelSummaries: [];
  readonly nextToken: string;
}

interface ListDatasetContentsRequest {
  readonly datasetName: string;
  readonly nextToken: string;
  readonly maxResults: number;
  readonly scheduledOnOrAfter: Date;
  readonly scheduledBefore: Date;
}

interface ListDatasetContentsResponse {
  readonly datasetContentSummaries: [];
  readonly nextToken: string;
}

interface ListDatasetsRequest {
  readonly nextToken: string;
  readonly maxResults: number;
}

interface ListDatasetsResponse {
  readonly datasetSummaries: [];
  readonly nextToken: string;
}

interface ListDatastoresRequest {
  readonly nextToken: string;
  readonly maxResults: number;
}

interface ListDatastoresResponse {
  readonly datastoreSummaries: [];
  readonly nextToken: string;
}

interface ListPipelinesRequest {
  readonly nextToken: string;
  readonly maxResults: number;
}

interface ListPipelinesResponse {
  readonly pipelineSummaries: [];
  readonly nextToken: string;
}

interface ListTagsForResourceRequest {
  readonly resourceArn: string;
}

interface ListTagsForResourceResponse {
  readonly tags: [];
}

interface LoggingOptions {
  readonly roleArn: string;
  readonly level: string;
  readonly enabled: boolean;
}

interface MathActivity {
  readonly name: string;
  readonly attribute: string;
  readonly math: string;
  readonly next: string;
}

interface Message {
  readonly messageId: string;
  readonly payload: unknown;
}

interface OutputFileUriValue {
  readonly fileName: string;
}

interface ParquetConfiguration {
  readonly schemaDefinition: SchemaDefinition;
}

interface Partition {
  readonly attributeName: string;
}

interface Pipeline {
  readonly name: string;
  readonly arn: string;
  readonly activities: [];
  readonly reprocessingSummaries: [];
  readonly creationTime: Date;
  readonly lastUpdateTime: Date;
}

interface PipelineActivity {
  readonly channel: ChannelActivity;
  readonly lambda: LambdaActivity;
  readonly datastore: DatastoreActivity;
  readonly addAttributes: AddAttributesActivity;
  readonly removeAttributes: RemoveAttributesActivity;
  readonly selectAttributes: SelectAttributesActivity;
  readonly filter: FilterActivity;
  readonly math: MathActivity;
  readonly deviceRegistryEnrich: DeviceRegistryEnrichActivity;
  readonly deviceShadowEnrich: DeviceShadowEnrichActivity;
}

interface PipelineSummary {
  readonly pipelineName: string;
  readonly reprocessingSummaries: [];
  readonly creationTime: Date;
  readonly lastUpdateTime: Date;
}

interface PutLoggingOptionsRequest {
  readonly loggingOptions: LoggingOptions;
}

interface QueryFilter {
  readonly deltaTime: DeltaTime;
}

interface RemoveAttributesActivity {
  readonly name: string;
  readonly attributes: [];
  readonly next: string;
}

interface ReprocessingSummary {
  readonly id: string;
  readonly status: string;
  readonly creationTime: Date;
}

interface ResourceAlreadyExistsException {
  readonly message: string;
  readonly resourceId: string;
  readonly resourceArn: string;
}

interface ResourceConfiguration {
  readonly computeType: string;
  readonly volumeSizeInGB: number;
}

interface ResourceNotFoundException {
  readonly message: string;
}

interface RetentionPeriod {
  readonly unlimited: boolean;
  readonly numberOfDays: number;
}

interface RunPipelineActivityRequest {
  readonly pipelineActivity: PipelineActivity;
  readonly payloads: [];
}

interface RunPipelineActivityResponse {
  readonly payloads: [];
  readonly logResult: string;
}

interface S3DestinationConfiguration {
  readonly bucket: string;
  readonly key: string;
  readonly glueConfiguration: GlueConfiguration;
  readonly roleArn: string;
}

interface SampleChannelDataRequest {
  readonly channelName: string;
  readonly maxMessages: number;
  readonly startTime: Date;
  readonly endTime: Date;
}

interface SampleChannelDataResponse {
  readonly payloads: [];
}

interface Schedule {
  readonly expression: string;
}

interface SchemaDefinition {
  readonly columns: [];
}

interface SelectAttributesActivity {
  readonly name: string;
  readonly attributes: [];
  readonly next: string;
}

interface ServiceManagedChannelS3Storage {
}

interface ServiceManagedChannelS3StorageSummary {
}

interface ServiceManagedDatastoreS3Storage {
}

interface ServiceManagedDatastoreS3StorageSummary {
}

interface ServiceUnavailableException {
  readonly message: string;
}

interface SqlQueryDatasetAction {
  readonly sqlQuery: string;
  readonly filters: [];
}

interface StartPipelineReprocessingRequest {
  readonly pipelineName: string;
  readonly startTime: Date;
  readonly endTime: Date;
  readonly channelMessages: ChannelMessages;
}

interface StartPipelineReprocessingResponse {
  readonly reprocessingId: string;
}

interface Tag {
  readonly key: string;
  readonly value: string;
}

interface TagResourceRequest {
  readonly resourceArn: string;
  readonly tags: [];
}

interface TagResourceResponse {
}

interface ThrottlingException {
  readonly message: string;
}

interface TimestampPartition {
  readonly attributeName: string;
  readonly timestampFormat: string;
}

interface TriggeringDataset {
  readonly name: string;
}

interface UntagResourceRequest {
  readonly resourceArn: string;
  readonly tagKeys: [];
}

interface UntagResourceResponse {
}

interface UpdateChannelRequest {
  readonly channelName: string;
  readonly channelStorage: ChannelStorage;
  readonly retentionPeriod: RetentionPeriod;
}

interface UpdateDatasetRequest {
  readonly datasetName: string;
  readonly actions: [];
  readonly triggers: [];
  readonly contentDeliveryRules: [];
  readonly retentionPeriod: RetentionPeriod;
  readonly versioningConfiguration: VersioningConfiguration;
  readonly lateDataRules: [];
}

interface UpdateDatastoreRequest {
  readonly datastoreName: string;
  readonly retentionPeriod: RetentionPeriod;
  readonly datastoreStorage: DatastoreStorage;
  readonly fileFormatConfiguration: FileFormatConfiguration;
}

interface UpdatePipelineRequest {
  readonly pipelineName: string;
  readonly pipelineActivities: [];
}

interface Variable {
  readonly name: string;
  readonly stringValue: string;
  readonly doubleValue: unknown;
  readonly datasetContentVersionValue: DatasetContentVersionValue;
  readonly outputFileUriValue: OutputFileUriValue;
}

interface VersioningConfiguration {
  readonly unlimited: boolean;
  readonly maxVersions: number;
}

