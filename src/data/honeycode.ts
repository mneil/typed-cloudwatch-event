/**
 * STOP. This file is autogenerated. DO NOT EDIT by hand
 */
export interface BatchCreateTableRows {
  readonly workbookId: string;
  readonly tableId: string;
  readonly rowsToCreate: [];
  readonly clientRequestToken?: string;
}

export interface BatchDeleteTableRows {
  readonly workbookId: string;
  readonly tableId: string;
  readonly rowIds: [];
  readonly clientRequestToken?: string;
}

export interface BatchUpdateTableRows {
  readonly workbookId: string;
  readonly tableId: string;
  readonly rowsToUpdate: [];
  readonly clientRequestToken?: string;
}

export interface BatchUpsertTableRows {
  readonly workbookId: string;
  readonly tableId: string;
  readonly rowsToUpsert: [];
  readonly clientRequestToken?: string;
}

export interface DescribeTableDataImportJob {
  readonly workbookId: string;
  readonly tableId: string;
  readonly jobId: string;
}

export interface GetScreenData {
  readonly workbookId: string;
  readonly appId: string;
  readonly screenId: string;
  readonly variables?: {[key: string]: any};
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface InvokeScreenAutomation {
  readonly workbookId: string;
  readonly appId: string;
  readonly screenId: string;
  readonly screenAutomationId: string;
  readonly variables?: {[key: string]: any};
  readonly rowId?: string;
  readonly clientRequestToken?: string;
}

export interface ListTableColumns {
  readonly workbookId: string;
  readonly tableId: string;
  readonly nextToken?: string;
}

export interface ListTableRows {
  readonly workbookId: string;
  readonly tableId: string;
  readonly rowIds?: [];
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface ListTables {
  readonly workbookId: string;
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface QueryTableRows {
  readonly workbookId: string;
  readonly tableId: string;
  readonly filterFormula: Filter;
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface StartTableDataImportJob {
  readonly workbookId: string;
  readonly dataSource: ImportDataSource;
  readonly dataFormat: string;
  readonly destinationTableId: string;
  readonly importOptions: ImportOptions;
  readonly clientRequestToken: string;
}

export interface AccessDeniedException {
  readonly message?: string;
}

export interface AutomationExecutionException {
  readonly message?: string;
}

export interface AutomationExecutionTimeoutException {
  readonly message?: string;
}

export interface BatchCreateTableRowsRequest {
  readonly workbookId: string;
  readonly tableId: string;
  readonly rowsToCreate: [];
  readonly clientRequestToken?: string;
}

export interface BatchCreateTableRowsResult {
  readonly workbookCursor: number;
  readonly createdRows: {[key: string]: any};
  readonly failedBatchItems?: [];
}

export interface BatchDeleteTableRowsRequest {
  readonly workbookId: string;
  readonly tableId: string;
  readonly rowIds: [];
  readonly clientRequestToken?: string;
}

export interface BatchDeleteTableRowsResult {
  readonly workbookCursor: number;
  readonly failedBatchItems?: [];
}

export interface BatchUpdateTableRowsRequest {
  readonly workbookId: string;
  readonly tableId: string;
  readonly rowsToUpdate: [];
  readonly clientRequestToken?: string;
}

export interface BatchUpdateTableRowsResult {
  readonly workbookCursor: number;
  readonly failedBatchItems?: [];
}

export interface BatchUpsertTableRowsRequest {
  readonly workbookId: string;
  readonly tableId: string;
  readonly rowsToUpsert: [];
  readonly clientRequestToken?: string;
}

export interface BatchUpsertTableRowsResult {
  readonly rows: {[key: string]: any};
  readonly workbookCursor: number;
  readonly failedBatchItems?: [];
}

export interface Cell {
  readonly formula?: string;
  readonly format?: string;
  readonly rawValue?: string;
  readonly formattedValue?: string;
}

export interface CellInput {
  readonly fact?: string;
}

export interface ColumnMetadata {
  readonly name: string;
  readonly format: string;
}

export interface CreateRowData {
  readonly batchItemId: string;
  readonly cellsToCreate: {[key: string]: any};
}

export interface DataItem {
  readonly overrideFormat?: string;
  readonly rawValue?: string;
  readonly formattedValue?: string;
}

export interface DelimitedTextImportOptions {
  readonly delimiter: string;
  readonly hasHeaderRow?: boolean;
  readonly ignoreEmptyRows?: boolean;
  readonly dataCharacterEncoding?: string;
}

export interface DescribeTableDataImportJobRequest {
  readonly workbookId: string;
  readonly tableId: string;
  readonly jobId: string;
}

export interface DescribeTableDataImportJobResult {
  readonly jobStatus: string;
  readonly message: string;
  readonly jobMetadata: TableDataImportJobMetadata;
}

export interface DestinationOptions {
  readonly columnMap?: {[key: string]: any};
}

export interface FailedBatchItem {
  readonly id: string;
  readonly errorMessage: string;
}

export interface Filter {
  readonly formula: string;
  readonly contextRowId?: string;
}

export interface GetScreenDataRequest {
  readonly workbookId: string;
  readonly appId: string;
  readonly screenId: string;
  readonly variables?: {[key: string]: any};
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface GetScreenDataResult {
  readonly results: {[key: string]: any};
  readonly workbookCursor: number;
  readonly nextToken?: string;
}

export interface ImportDataSource {
  readonly dataSourceConfig: ImportDataSourceConfig;
}

export interface ImportDataSourceConfig {
  readonly dataSourceUrl?: string;
}

export interface ImportJobSubmitter {
  readonly email?: string;
  readonly userArn?: string;
}

export interface ImportOptions {
  readonly destinationOptions?: DestinationOptions;
  readonly delimitedTextOptions?: DelimitedTextImportOptions;
}

export interface InternalServerException {
  readonly message?: string;
}

export interface InvokeScreenAutomationRequest {
  readonly workbookId: string;
  readonly appId: string;
  readonly screenId: string;
  readonly screenAutomationId: string;
  readonly variables?: {[key: string]: any};
  readonly rowId?: string;
  readonly clientRequestToken?: string;
}

export interface InvokeScreenAutomationResult {
  readonly workbookCursor: number;
}

export interface ListTableColumnsRequest {
  readonly workbookId: string;
  readonly tableId: string;
  readonly nextToken?: string;
}

export interface ListTableColumnsResult {
  readonly tableColumns: [];
  readonly nextToken?: string;
  readonly workbookCursor?: number;
}

export interface ListTableRowsRequest {
  readonly workbookId: string;
  readonly tableId: string;
  readonly rowIds?: [];
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface ListTableRowsResult {
  readonly columnIds: [];
  readonly rows: [];
  readonly rowIdsNotFound?: [];
  readonly nextToken?: string;
  readonly workbookCursor: number;
}

export interface ListTablesRequest {
  readonly workbookId: string;
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface ListTablesResult {
  readonly tables: [];
  readonly nextToken?: string;
  readonly workbookCursor?: number;
}

export interface QueryTableRowsRequest {
  readonly workbookId: string;
  readonly tableId: string;
  readonly filterFormula: Filter;
  readonly maxResults?: number;
  readonly nextToken?: string;
}

export interface QueryTableRowsResult {
  readonly columnIds: [];
  readonly rows: [];
  readonly nextToken?: string;
  readonly workbookCursor: number;
}

export interface RequestTimeoutException {
  readonly message?: string;
}

export interface ResourceNotFoundException {
  readonly message?: string;
}

export interface ResultRow {
  readonly rowId?: string;
  readonly dataItems: [];
}

export interface ResultSet {
  readonly headers: [];
  readonly rows: [];
}

export interface ServiceQuotaExceededException {
  readonly message: string;
}

export interface ServiceUnavailableException {
  readonly message?: string;
}

export interface SourceDataColumnProperties {
  readonly columnIndex?: number;
}

export interface StartTableDataImportJobRequest {
  readonly workbookId: string;
  readonly dataSource: ImportDataSource;
  readonly dataFormat: string;
  readonly destinationTableId: string;
  readonly importOptions: ImportOptions;
  readonly clientRequestToken: string;
}

export interface StartTableDataImportJobResult {
  readonly jobId: string;
  readonly jobStatus: string;
}

export interface Table {
  readonly tableId?: string;
  readonly tableName?: string;
}

export interface TableColumn {
  readonly tableColumnId?: string;
  readonly tableColumnName?: string;
  readonly format?: string;
}

export interface TableDataImportJobMetadata {
  readonly submitter: ImportJobSubmitter;
  readonly submitTime: Date;
  readonly importOptions: ImportOptions;
  readonly dataSource: ImportDataSource;
}

export interface TableRow {
  readonly rowId: string;
  readonly cells: [];
}

export interface ThrottlingException {
  readonly message?: string;
}

export interface UpdateRowData {
  readonly rowId: string;
  readonly cellsToUpdate: {[key: string]: any};
}

export interface UpsertRowData {
  readonly batchItemId: string;
  readonly filter: Filter;
  readonly cellsToUpdate: {[key: string]: any};
}

export interface UpsertRowsResult {
  readonly rowIds: [];
  readonly upsertAction: string;
}

export interface ValidationException {
  readonly message: string;
}

export interface VariableValue {
  readonly rawValue: string;
}


