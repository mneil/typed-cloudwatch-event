/**
 * STOP. This file is autogenerated. DO NOT EDIT by hand
 */
export interface AcceptMatch {
  readonly TicketId: string;
  readonly PlayerIds: [];
  readonly AcceptanceType: string;
}

export interface ClaimGameServer {
  readonly GameServerGroupName: string;
  readonly GameServerId?: string;
  readonly GameServerData?: string;
}

export interface CreateAlias {
  readonly Name: string;
  readonly Description?: string;
  readonly RoutingStrategy: RoutingStrategy;
  readonly Tags?: [];
}

export interface CreateBuild {
  readonly Name?: string;
  readonly Version?: string;
  readonly StorageLocation?: S3Location;
  readonly OperatingSystem?: string;
  readonly Tags?: [];
}

export interface CreateFleet {
  readonly Name: string;
  readonly Description?: string;
  readonly BuildId?: string;
  readonly ScriptId?: string;
  readonly ServerLaunchPath?: string;
  readonly ServerLaunchParameters?: string;
  readonly LogPaths?: [];
  readonly EC2InstanceType: string;
  readonly EC2InboundPermissions?: [];
  readonly NewGameSessionProtectionPolicy?: string;
  readonly RuntimeConfiguration?: RuntimeConfiguration;
  readonly ResourceCreationLimitPolicy?: ResourceCreationLimitPolicy;
  readonly MetricGroups?: [];
  readonly PeerVpcAwsAccountId?: string;
  readonly PeerVpcId?: string;
  readonly FleetType?: string;
  readonly InstanceRoleArn?: string;
  readonly CertificateConfiguration?: CertificateConfiguration;
  readonly Locations?: [];
  readonly Tags?: [];
}

export interface CreateFleetLocations {
  readonly FleetId: string;
  readonly Locations: [];
}

export interface CreateGameServerGroup {
  readonly GameServerGroupName: string;
  readonly RoleArn: string;
  readonly MinSize: number;
  readonly MaxSize: number;
  readonly LaunchTemplate: LaunchTemplateSpecification;
  readonly InstanceDefinitions: [];
  readonly AutoScalingPolicy?: GameServerGroupAutoScalingPolicy;
  readonly BalancingStrategy?: string;
  readonly GameServerProtectionPolicy?: string;
  readonly VpcSubnets?: [];
  readonly Tags?: [];
}

export interface CreateGameSession {
  readonly FleetId?: string;
  readonly AliasId?: string;
  readonly MaximumPlayerSessionCount: number;
  readonly Name?: string;
  readonly GameProperties?: [];
  readonly CreatorId?: string;
  readonly GameSessionId?: string;
  readonly IdempotencyToken?: string;
  readonly GameSessionData?: string;
  readonly Location?: string;
}

export interface CreateGameSessionQueue {
  readonly Name: string;
  readonly TimeoutInSeconds?: number;
  readonly PlayerLatencyPolicies?: [];
  readonly Destinations?: [];
  readonly FilterConfiguration?: FilterConfiguration;
  readonly PriorityConfiguration?: PriorityConfiguration;
  readonly CustomEventData?: string;
  readonly NotificationTarget?: string;
  readonly Tags?: [];
}

export interface CreateMatchmakingConfiguration {
  readonly Name: string;
  readonly Description?: string;
  readonly GameSessionQueueArns?: [];
  readonly RequestTimeoutSeconds: number;
  readonly AcceptanceTimeoutSeconds?: number;
  readonly AcceptanceRequired: boolean;
  readonly RuleSetName: string;
  readonly NotificationTarget?: string;
  readonly AdditionalPlayerCount?: number;
  readonly CustomEventData?: string;
  readonly GameProperties?: [];
  readonly GameSessionData?: string;
  readonly BackfillMode?: string;
  readonly FlexMatchMode?: string;
  readonly Tags?: [];
}

export interface CreateMatchmakingRuleSet {
  readonly Name: string;
  readonly RuleSetBody: string;
  readonly Tags?: [];
}

export interface CreatePlayerSession {
  readonly GameSessionId: string;
  readonly PlayerId: string;
  readonly PlayerData?: string;
}

export interface CreatePlayerSessions {
  readonly GameSessionId: string;
  readonly PlayerIds: [];
  readonly PlayerDataMap?: {[key: string]: any};
}

export interface CreateScript {
  readonly Name?: string;
  readonly Version?: string;
  readonly StorageLocation?: S3Location;
  readonly ZipFile?: unknown;
  readonly Tags?: [];
}

export interface CreateVpcPeeringAuthorization {
  readonly GameLiftAwsAccountId: string;
  readonly PeerVpcId: string;
}

export interface CreateVpcPeeringConnection {
  readonly FleetId: string;
  readonly PeerVpcAwsAccountId: string;
  readonly PeerVpcId: string;
}

export interface DeleteAlias {
  readonly AliasId: string;
}

export interface DeleteBuild {
  readonly BuildId: string;
}

export interface DeleteFleet {
  readonly FleetId: string;
}

export interface DeleteFleetLocations {
  readonly FleetId: string;
  readonly Locations: [];
}

export interface DeleteGameServerGroup {
  readonly GameServerGroupName: string;
  readonly DeleteOption?: string;
}

export interface DeleteGameSessionQueue {
  readonly Name: string;
}

export interface DeleteMatchmakingConfiguration {
  readonly Name: string;
}

export interface DeleteMatchmakingRuleSet {
  readonly Name: string;
}

export interface DeleteScalingPolicy {
  readonly Name: string;
  readonly FleetId: string;
}

export interface DeleteScript {
  readonly ScriptId: string;
}

export interface DeleteVpcPeeringAuthorization {
  readonly GameLiftAwsAccountId: string;
  readonly PeerVpcId: string;
}

export interface DeleteVpcPeeringConnection {
  readonly FleetId: string;
  readonly VpcPeeringConnectionId: string;
}

export interface DeregisterGameServer {
  readonly GameServerGroupName: string;
  readonly GameServerId: string;
}

export interface DescribeAlias {
  readonly AliasId: string;
}

export interface DescribeBuild {
  readonly BuildId: string;
}

export interface DescribeEC2InstanceLimits {
  readonly EC2InstanceType?: string;
  readonly Location?: string;
}

export interface DescribeFleetAttributes {
  readonly FleetIds?: [];
  readonly Limit?: number;
  readonly NextToken?: string;
}

export interface DescribeFleetCapacity {
  readonly FleetIds?: [];
  readonly Limit?: number;
  readonly NextToken?: string;
}

export interface DescribeFleetEvents {
  readonly FleetId: string;
  readonly StartTime?: Date;
  readonly EndTime?: Date;
  readonly Limit?: number;
  readonly NextToken?: string;
}

export interface DescribeFleetLocationAttributes {
  readonly FleetId: string;
  readonly Locations?: [];
  readonly Limit?: number;
  readonly NextToken?: string;
}

export interface DescribeFleetLocationCapacity {
  readonly FleetId: string;
  readonly Location: string;
}

export interface DescribeFleetLocationUtilization {
  readonly FleetId: string;
  readonly Location: string;
}

export interface DescribeFleetPortSettings {
  readonly FleetId: string;
  readonly Location?: string;
}

export interface DescribeFleetUtilization {
  readonly FleetIds?: [];
  readonly Limit?: number;
  readonly NextToken?: string;
}

export interface DescribeGameServer {
  readonly GameServerGroupName: string;
  readonly GameServerId: string;
}

export interface DescribeGameServerGroup {
  readonly GameServerGroupName: string;
}

export interface DescribeGameServerInstances {
  readonly GameServerGroupName: string;
  readonly InstanceIds?: [];
  readonly Limit?: number;
  readonly NextToken?: string;
}

export interface DescribeGameSessionDetails {
  readonly FleetId?: string;
  readonly GameSessionId?: string;
  readonly AliasId?: string;
  readonly Location?: string;
  readonly StatusFilter?: string;
  readonly Limit?: number;
  readonly NextToken?: string;
}

export interface DescribeGameSessionPlacement {
  readonly PlacementId: string;
}

export interface DescribeGameSessionQueues {
  readonly Names?: [];
  readonly Limit?: number;
  readonly NextToken?: string;
}

export interface DescribeGameSessions {
  readonly FleetId?: string;
  readonly GameSessionId?: string;
  readonly AliasId?: string;
  readonly Location?: string;
  readonly StatusFilter?: string;
  readonly Limit?: number;
  readonly NextToken?: string;
}

export interface DescribeInstances {
  readonly FleetId: string;
  readonly InstanceId?: string;
  readonly Limit?: number;
  readonly NextToken?: string;
  readonly Location?: string;
}

export interface DescribeMatchmaking {
  readonly TicketIds: [];
}

export interface DescribeMatchmakingConfigurations {
  readonly Names?: [];
  readonly RuleSetName?: string;
  readonly Limit?: number;
  readonly NextToken?: string;
}

export interface DescribeMatchmakingRuleSets {
  readonly Names?: [];
  readonly Limit?: number;
  readonly NextToken?: string;
}

export interface DescribePlayerSessions {
  readonly GameSessionId?: string;
  readonly PlayerId?: string;
  readonly PlayerSessionId?: string;
  readonly PlayerSessionStatusFilter?: string;
  readonly Limit?: number;
  readonly NextToken?: string;
}

export interface DescribeRuntimeConfiguration {
  readonly FleetId: string;
}

export interface DescribeScalingPolicies {
  readonly FleetId: string;
  readonly StatusFilter?: string;
  readonly Limit?: number;
  readonly NextToken?: string;
  readonly Location?: string;
}

export interface DescribeScript {
  readonly ScriptId: string;
}

export interface DescribeVpcPeeringAuthorizations {
}

export interface DescribeVpcPeeringConnections {
  readonly FleetId?: string;
}

export interface GetGameSessionLogUrl {
  readonly GameSessionId: string;
}

export interface GetInstanceAccess {
  readonly FleetId: string;
  readonly InstanceId: string;
}

export interface ListAliases {
  readonly RoutingStrategyType?: string;
  readonly Name?: string;
  readonly Limit?: number;
  readonly NextToken?: string;
}

export interface ListBuilds {
  readonly Status?: string;
  readonly Limit?: number;
  readonly NextToken?: string;
}

export interface ListFleets {
  readonly BuildId?: string;
  readonly ScriptId?: string;
  readonly Limit?: number;
  readonly NextToken?: string;
}

export interface ListGameServerGroups {
  readonly Limit?: number;
  readonly NextToken?: string;
}

export interface ListGameServers {
  readonly GameServerGroupName: string;
  readonly SortOrder?: string;
  readonly Limit?: number;
  readonly NextToken?: string;
}

export interface ListScripts {
  readonly Limit?: number;
  readonly NextToken?: string;
}

export interface ListTagsForResource {
  readonly ResourceARN: string;
}

export interface PutScalingPolicy {
  readonly Name: string;
  readonly FleetId: string;
  readonly ScalingAdjustment?: number;
  readonly ScalingAdjustmentType?: string;
  readonly Threshold?: unknown;
  readonly ComparisonOperator?: string;
  readonly EvaluationPeriods?: number;
  readonly MetricName: string;
  readonly PolicyType?: string;
  readonly TargetConfiguration?: TargetConfiguration;
}

export interface RegisterGameServer {
  readonly GameServerGroupName: string;
  readonly GameServerId: string;
  readonly InstanceId: string;
  readonly ConnectionInfo?: string;
  readonly GameServerData?: string;
}

export interface RequestUploadCredentials {
  readonly BuildId: string;
}

export interface ResolveAlias {
  readonly AliasId: string;
}

export interface ResumeGameServerGroup {
  readonly GameServerGroupName: string;
  readonly ResumeActions: [];
}

export interface SearchGameSessions {
  readonly FleetId?: string;
  readonly AliasId?: string;
  readonly Location?: string;
  readonly FilterExpression?: string;
  readonly SortExpression?: string;
  readonly Limit?: number;
  readonly NextToken?: string;
}

export interface StartFleetActions {
  readonly FleetId: string;
  readonly Actions: [];
  readonly Location?: string;
}

export interface StartGameSessionPlacement {
  readonly PlacementId: string;
  readonly GameSessionQueueName: string;
  readonly GameProperties?: [];
  readonly MaximumPlayerSessionCount: number;
  readonly GameSessionName?: string;
  readonly PlayerLatencies?: [];
  readonly DesiredPlayerSessions?: [];
  readonly GameSessionData?: string;
}

export interface StartMatchBackfill {
  readonly TicketId?: string;
  readonly ConfigurationName: string;
  readonly GameSessionArn?: string;
  readonly Players: [];
}

export interface StartMatchmaking {
  readonly TicketId?: string;
  readonly ConfigurationName: string;
  readonly Players: [];
}

export interface StopFleetActions {
  readonly FleetId: string;
  readonly Actions: [];
  readonly Location?: string;
}

export interface StopGameSessionPlacement {
  readonly PlacementId: string;
}

export interface StopMatchmaking {
  readonly TicketId: string;
}

export interface SuspendGameServerGroup {
  readonly GameServerGroupName: string;
  readonly SuspendActions: [];
}

export interface TagResource {
  readonly ResourceARN: string;
  readonly Tags: [];
}

export interface UntagResource {
  readonly ResourceARN: string;
  readonly TagKeys: [];
}

export interface UpdateAlias {
  readonly AliasId: string;
  readonly Name?: string;
  readonly Description?: string;
  readonly RoutingStrategy?: RoutingStrategy;
}

export interface UpdateBuild {
  readonly BuildId: string;
  readonly Name?: string;
  readonly Version?: string;
}

export interface UpdateFleetAttributes {
  readonly FleetId: string;
  readonly Name?: string;
  readonly Description?: string;
  readonly NewGameSessionProtectionPolicy?: string;
  readonly ResourceCreationLimitPolicy?: ResourceCreationLimitPolicy;
  readonly MetricGroups?: [];
}

export interface UpdateFleetCapacity {
  readonly FleetId: string;
  readonly DesiredInstances?: number;
  readonly MinSize?: number;
  readonly MaxSize?: number;
  readonly Location?: string;
}

export interface UpdateFleetPortSettings {
  readonly FleetId: string;
  readonly InboundPermissionAuthorizations?: [];
  readonly InboundPermissionRevocations?: [];
}

export interface UpdateGameServer {
  readonly GameServerGroupName: string;
  readonly GameServerId: string;
  readonly GameServerData?: string;
  readonly UtilizationStatus?: string;
  readonly HealthCheck?: string;
}

export interface UpdateGameServerGroup {
  readonly GameServerGroupName: string;
  readonly RoleArn?: string;
  readonly InstanceDefinitions?: [];
  readonly GameServerProtectionPolicy?: string;
  readonly BalancingStrategy?: string;
}

export interface UpdateGameSession {
  readonly GameSessionId: string;
  readonly MaximumPlayerSessionCount?: number;
  readonly Name?: string;
  readonly PlayerSessionCreationPolicy?: string;
  readonly ProtectionPolicy?: string;
}

export interface UpdateGameSessionQueue {
  readonly Name: string;
  readonly TimeoutInSeconds?: number;
  readonly PlayerLatencyPolicies?: [];
  readonly Destinations?: [];
  readonly FilterConfiguration?: FilterConfiguration;
  readonly PriorityConfiguration?: PriorityConfiguration;
  readonly CustomEventData?: string;
  readonly NotificationTarget?: string;
}

export interface UpdateMatchmakingConfiguration {
  readonly Name: string;
  readonly Description?: string;
  readonly GameSessionQueueArns?: [];
  readonly RequestTimeoutSeconds?: number;
  readonly AcceptanceTimeoutSeconds?: number;
  readonly AcceptanceRequired?: boolean;
  readonly RuleSetName?: string;
  readonly NotificationTarget?: string;
  readonly AdditionalPlayerCount?: number;
  readonly CustomEventData?: string;
  readonly GameProperties?: [];
  readonly GameSessionData?: string;
  readonly BackfillMode?: string;
  readonly FlexMatchMode?: string;
}

export interface UpdateRuntimeConfiguration {
  readonly FleetId: string;
  readonly RuntimeConfiguration: RuntimeConfiguration;
}

export interface UpdateScript {
  readonly ScriptId: string;
  readonly Name?: string;
  readonly Version?: string;
  readonly StorageLocation?: S3Location;
  readonly ZipFile?: unknown;
}

export interface ValidateMatchmakingRuleSet {
  readonly RuleSetBody: string;
}

export interface AcceptMatchInput {
  readonly TicketId: string;
  readonly PlayerIds: [];
  readonly AcceptanceType: string;
}

export interface AcceptMatchOutput {
}

export interface Alias {
  readonly AliasId?: string;
  readonly Name?: string;
  readonly AliasArn?: string;
  readonly Description?: string;
  readonly RoutingStrategy?: RoutingStrategy;
  readonly CreationTime?: Date;
  readonly LastUpdatedTime?: Date;
}

export interface AttributeValue {
  readonly S?: string;
  readonly N?: unknown;
  readonly SL?: [];
  readonly SDM?: {[key: string]: any};
}

export interface AwsCredentials {
  readonly AccessKeyId?: string;
  readonly SecretAccessKey?: string;
  readonly SessionToken?: string;
}

export interface Build {
  readonly BuildId?: string;
  readonly BuildArn?: string;
  readonly Name?: string;
  readonly Version?: string;
  readonly Status?: string;
  readonly SizeOnDisk?: number;
  readonly OperatingSystem?: string;
  readonly CreationTime?: Date;
}

export interface CertificateConfiguration {
  readonly CertificateType: string;
}

export interface ClaimGameServerInput {
  readonly GameServerGroupName: string;
  readonly GameServerId?: string;
  readonly GameServerData?: string;
}

export interface ClaimGameServerOutput {
  readonly GameServer?: GameServer;
}

export interface ConflictException {
  readonly Message?: string;
}

export interface CreateAliasInput {
  readonly Name: string;
  readonly Description?: string;
  readonly RoutingStrategy: RoutingStrategy;
  readonly Tags?: [];
}

export interface CreateAliasOutput {
  readonly Alias?: Alias;
}

export interface CreateBuildInput {
  readonly Name?: string;
  readonly Version?: string;
  readonly StorageLocation?: S3Location;
  readonly OperatingSystem?: string;
  readonly Tags?: [];
}

export interface CreateBuildOutput {
  readonly Build?: Build;
  readonly UploadCredentials?: AwsCredentials;
  readonly StorageLocation?: S3Location;
}

export interface CreateFleetInput {
  readonly Name: string;
  readonly Description?: string;
  readonly BuildId?: string;
  readonly ScriptId?: string;
  readonly ServerLaunchPath?: string;
  readonly ServerLaunchParameters?: string;
  readonly LogPaths?: [];
  readonly EC2InstanceType: string;
  readonly EC2InboundPermissions?: [];
  readonly NewGameSessionProtectionPolicy?: string;
  readonly RuntimeConfiguration?: RuntimeConfiguration;
  readonly ResourceCreationLimitPolicy?: ResourceCreationLimitPolicy;
  readonly MetricGroups?: [];
  readonly PeerVpcAwsAccountId?: string;
  readonly PeerVpcId?: string;
  readonly FleetType?: string;
  readonly InstanceRoleArn?: string;
  readonly CertificateConfiguration?: CertificateConfiguration;
  readonly Locations?: [];
  readonly Tags?: [];
}

export interface CreateFleetLocationsInput {
  readonly FleetId: string;
  readonly Locations: [];
}

export interface CreateFleetLocationsOutput {
  readonly FleetId?: string;
  readonly FleetArn?: string;
  readonly LocationStates?: [];
}

export interface CreateFleetOutput {
  readonly FleetAttributes?: FleetAttributes;
  readonly LocationStates?: [];
}

export interface CreateGameServerGroupInput {
  readonly GameServerGroupName: string;
  readonly RoleArn: string;
  readonly MinSize: number;
  readonly MaxSize: number;
  readonly LaunchTemplate: LaunchTemplateSpecification;
  readonly InstanceDefinitions: [];
  readonly AutoScalingPolicy?: GameServerGroupAutoScalingPolicy;
  readonly BalancingStrategy?: string;
  readonly GameServerProtectionPolicy?: string;
  readonly VpcSubnets?: [];
  readonly Tags?: [];
}

export interface CreateGameServerGroupOutput {
  readonly GameServerGroup?: GameServerGroup;
}

export interface CreateGameSessionInput {
  readonly FleetId?: string;
  readonly AliasId?: string;
  readonly MaximumPlayerSessionCount: number;
  readonly Name?: string;
  readonly GameProperties?: [];
  readonly CreatorId?: string;
  readonly GameSessionId?: string;
  readonly IdempotencyToken?: string;
  readonly GameSessionData?: string;
  readonly Location?: string;
}

export interface CreateGameSessionOutput {
  readonly GameSession?: GameSession;
}

export interface CreateGameSessionQueueInput {
  readonly Name: string;
  readonly TimeoutInSeconds?: number;
  readonly PlayerLatencyPolicies?: [];
  readonly Destinations?: [];
  readonly FilterConfiguration?: FilterConfiguration;
  readonly PriorityConfiguration?: PriorityConfiguration;
  readonly CustomEventData?: string;
  readonly NotificationTarget?: string;
  readonly Tags?: [];
}

export interface CreateGameSessionQueueOutput {
  readonly GameSessionQueue?: GameSessionQueue;
}

export interface CreateMatchmakingConfigurationInput {
  readonly Name: string;
  readonly Description?: string;
  readonly GameSessionQueueArns?: [];
  readonly RequestTimeoutSeconds: number;
  readonly AcceptanceTimeoutSeconds?: number;
  readonly AcceptanceRequired: boolean;
  readonly RuleSetName: string;
  readonly NotificationTarget?: string;
  readonly AdditionalPlayerCount?: number;
  readonly CustomEventData?: string;
  readonly GameProperties?: [];
  readonly GameSessionData?: string;
  readonly BackfillMode?: string;
  readonly FlexMatchMode?: string;
  readonly Tags?: [];
}

export interface CreateMatchmakingConfigurationOutput {
  readonly Configuration?: MatchmakingConfiguration;
}

export interface CreateMatchmakingRuleSetInput {
  readonly Name: string;
  readonly RuleSetBody: string;
  readonly Tags?: [];
}

export interface CreateMatchmakingRuleSetOutput {
  readonly RuleSet: MatchmakingRuleSet;
}

export interface CreatePlayerSessionInput {
  readonly GameSessionId: string;
  readonly PlayerId: string;
  readonly PlayerData?: string;
}

export interface CreatePlayerSessionOutput {
  readonly PlayerSession?: PlayerSession;
}

export interface CreatePlayerSessionsInput {
  readonly GameSessionId: string;
  readonly PlayerIds: [];
  readonly PlayerDataMap?: {[key: string]: any};
}

export interface CreatePlayerSessionsOutput {
  readonly PlayerSessions?: [];
}

export interface CreateScriptInput {
  readonly Name?: string;
  readonly Version?: string;
  readonly StorageLocation?: S3Location;
  readonly ZipFile?: unknown;
  readonly Tags?: [];
}

export interface CreateScriptOutput {
  readonly Script?: Script;
}

export interface CreateVpcPeeringAuthorizationInput {
  readonly GameLiftAwsAccountId: string;
  readonly PeerVpcId: string;
}

export interface CreateVpcPeeringAuthorizationOutput {
  readonly VpcPeeringAuthorization?: VpcPeeringAuthorization;
}

export interface CreateVpcPeeringConnectionInput {
  readonly FleetId: string;
  readonly PeerVpcAwsAccountId: string;
  readonly PeerVpcId: string;
}

export interface CreateVpcPeeringConnectionOutput {
}

export interface DeleteAliasInput {
  readonly AliasId: string;
}

export interface DeleteBuildInput {
  readonly BuildId: string;
}

export interface DeleteFleetInput {
  readonly FleetId: string;
}

export interface DeleteFleetLocationsInput {
  readonly FleetId: string;
  readonly Locations: [];
}

export interface DeleteFleetLocationsOutput {
  readonly FleetId?: string;
  readonly FleetArn?: string;
  readonly LocationStates?: [];
}

export interface DeleteGameServerGroupInput {
  readonly GameServerGroupName: string;
  readonly DeleteOption?: string;
}

export interface DeleteGameServerGroupOutput {
  readonly GameServerGroup?: GameServerGroup;
}

export interface DeleteGameSessionQueueInput {
  readonly Name: string;
}

export interface DeleteGameSessionQueueOutput {
}

export interface DeleteMatchmakingConfigurationInput {
  readonly Name: string;
}

export interface DeleteMatchmakingConfigurationOutput {
}

export interface DeleteMatchmakingRuleSetInput {
  readonly Name: string;
}

export interface DeleteMatchmakingRuleSetOutput {
}

export interface DeleteScalingPolicyInput {
  readonly Name: string;
  readonly FleetId: string;
}

export interface DeleteScriptInput {
  readonly ScriptId: string;
}

export interface DeleteVpcPeeringAuthorizationInput {
  readonly GameLiftAwsAccountId: string;
  readonly PeerVpcId: string;
}

export interface DeleteVpcPeeringAuthorizationOutput {
}

export interface DeleteVpcPeeringConnectionInput {
  readonly FleetId: string;
  readonly VpcPeeringConnectionId: string;
}

export interface DeleteVpcPeeringConnectionOutput {
}

export interface DeregisterGameServerInput {
  readonly GameServerGroupName: string;
  readonly GameServerId: string;
}

export interface DescribeAliasInput {
  readonly AliasId: string;
}

export interface DescribeAliasOutput {
  readonly Alias?: Alias;
}

export interface DescribeBuildInput {
  readonly BuildId: string;
}

export interface DescribeBuildOutput {
  readonly Build?: Build;
}

export interface DescribeEC2InstanceLimitsInput {
  readonly EC2InstanceType?: string;
  readonly Location?: string;
}

export interface DescribeEC2InstanceLimitsOutput {
  readonly EC2InstanceLimits?: [];
}

export interface DescribeFleetAttributesInput {
  readonly FleetIds?: [];
  readonly Limit?: number;
  readonly NextToken?: string;
}

export interface DescribeFleetAttributesOutput {
  readonly FleetAttributes?: [];
  readonly NextToken?: string;
}

export interface DescribeFleetCapacityInput {
  readonly FleetIds?: [];
  readonly Limit?: number;
  readonly NextToken?: string;
}

export interface DescribeFleetCapacityOutput {
  readonly FleetCapacity?: [];
  readonly NextToken?: string;
}

export interface DescribeFleetEventsInput {
  readonly FleetId: string;
  readonly StartTime?: Date;
  readonly EndTime?: Date;
  readonly Limit?: number;
  readonly NextToken?: string;
}

export interface DescribeFleetEventsOutput {
  readonly Events?: [];
  readonly NextToken?: string;
}

export interface DescribeFleetLocationAttributesInput {
  readonly FleetId: string;
  readonly Locations?: [];
  readonly Limit?: number;
  readonly NextToken?: string;
}

export interface DescribeFleetLocationAttributesOutput {
  readonly FleetId?: string;
  readonly FleetArn?: string;
  readonly LocationAttributes?: [];
  readonly NextToken?: string;
}

export interface DescribeFleetLocationCapacityInput {
  readonly FleetId: string;
  readonly Location: string;
}

export interface DescribeFleetLocationCapacityOutput {
  readonly FleetCapacity?: FleetCapacity;
}

export interface DescribeFleetLocationUtilizationInput {
  readonly FleetId: string;
  readonly Location: string;
}

export interface DescribeFleetLocationUtilizationOutput {
  readonly FleetUtilization?: FleetUtilization;
}

export interface DescribeFleetPortSettingsInput {
  readonly FleetId: string;
  readonly Location?: string;
}

export interface DescribeFleetPortSettingsOutput {
  readonly FleetId?: string;
  readonly FleetArn?: string;
  readonly InboundPermissions?: [];
  readonly UpdateStatus?: string;
  readonly Location?: string;
}

export interface DescribeFleetUtilizationInput {
  readonly FleetIds?: [];
  readonly Limit?: number;
  readonly NextToken?: string;
}

export interface DescribeFleetUtilizationOutput {
  readonly FleetUtilization?: [];
  readonly NextToken?: string;
}

export interface DescribeGameServerGroupInput {
  readonly GameServerGroupName: string;
}

export interface DescribeGameServerGroupOutput {
  readonly GameServerGroup?: GameServerGroup;
}

export interface DescribeGameServerInput {
  readonly GameServerGroupName: string;
  readonly GameServerId: string;
}

export interface DescribeGameServerInstancesInput {
  readonly GameServerGroupName: string;
  readonly InstanceIds?: [];
  readonly Limit?: number;
  readonly NextToken?: string;
}

export interface DescribeGameServerInstancesOutput {
  readonly GameServerInstances?: [];
  readonly NextToken?: string;
}

export interface DescribeGameServerOutput {
  readonly GameServer?: GameServer;
}

export interface DescribeGameSessionDetailsInput {
  readonly FleetId?: string;
  readonly GameSessionId?: string;
  readonly AliasId?: string;
  readonly Location?: string;
  readonly StatusFilter?: string;
  readonly Limit?: number;
  readonly NextToken?: string;
}

export interface DescribeGameSessionDetailsOutput {
  readonly GameSessionDetails?: [];
  readonly NextToken?: string;
}

export interface DescribeGameSessionPlacementInput {
  readonly PlacementId: string;
}

export interface DescribeGameSessionPlacementOutput {
  readonly GameSessionPlacement?: GameSessionPlacement;
}

export interface DescribeGameSessionQueuesInput {
  readonly Names?: [];
  readonly Limit?: number;
  readonly NextToken?: string;
}

export interface DescribeGameSessionQueuesOutput {
  readonly GameSessionQueues?: [];
  readonly NextToken?: string;
}

export interface DescribeGameSessionsInput {
  readonly FleetId?: string;
  readonly GameSessionId?: string;
  readonly AliasId?: string;
  readonly Location?: string;
  readonly StatusFilter?: string;
  readonly Limit?: number;
  readonly NextToken?: string;
}

export interface DescribeGameSessionsOutput {
  readonly GameSessions?: [];
  readonly NextToken?: string;
}

export interface DescribeInstancesInput {
  readonly FleetId: string;
  readonly InstanceId?: string;
  readonly Limit?: number;
  readonly NextToken?: string;
  readonly Location?: string;
}

export interface DescribeInstancesOutput {
  readonly Instances?: [];
  readonly NextToken?: string;
}

export interface DescribeMatchmakingConfigurationsInput {
  readonly Names?: [];
  readonly RuleSetName?: string;
  readonly Limit?: number;
  readonly NextToken?: string;
}

export interface DescribeMatchmakingConfigurationsOutput {
  readonly Configurations?: [];
  readonly NextToken?: string;
}

export interface DescribeMatchmakingInput {
  readonly TicketIds: [];
}

export interface DescribeMatchmakingOutput {
  readonly TicketList?: [];
}

export interface DescribeMatchmakingRuleSetsInput {
  readonly Names?: [];
  readonly Limit?: number;
  readonly NextToken?: string;
}

export interface DescribeMatchmakingRuleSetsOutput {
  readonly RuleSets: [];
  readonly NextToken?: string;
}

export interface DescribePlayerSessionsInput {
  readonly GameSessionId?: string;
  readonly PlayerId?: string;
  readonly PlayerSessionId?: string;
  readonly PlayerSessionStatusFilter?: string;
  readonly Limit?: number;
  readonly NextToken?: string;
}

export interface DescribePlayerSessionsOutput {
  readonly PlayerSessions?: [];
  readonly NextToken?: string;
}

export interface DescribeRuntimeConfigurationInput {
  readonly FleetId: string;
}

export interface DescribeRuntimeConfigurationOutput {
  readonly RuntimeConfiguration?: RuntimeConfiguration;
}

export interface DescribeScalingPoliciesInput {
  readonly FleetId: string;
  readonly StatusFilter?: string;
  readonly Limit?: number;
  readonly NextToken?: string;
  readonly Location?: string;
}

export interface DescribeScalingPoliciesOutput {
  readonly ScalingPolicies?: [];
  readonly NextToken?: string;
}

export interface DescribeScriptInput {
  readonly ScriptId: string;
}

export interface DescribeScriptOutput {
  readonly Script?: Script;
}

export interface DescribeVpcPeeringAuthorizationsInput {
}

export interface DescribeVpcPeeringAuthorizationsOutput {
  readonly VpcPeeringAuthorizations?: [];
}

export interface DescribeVpcPeeringConnectionsInput {
  readonly FleetId?: string;
}

export interface DescribeVpcPeeringConnectionsOutput {
  readonly VpcPeeringConnections?: [];
}

export interface DesiredPlayerSession {
  readonly PlayerId?: string;
  readonly PlayerData?: string;
}

export interface EC2InstanceCounts {
  readonly DESIRED?: number;
  readonly MINIMUM?: number;
  readonly MAXIMUM?: number;
  readonly PENDING?: number;
  readonly ACTIVE?: number;
  readonly IDLE?: number;
  readonly TERMINATING?: number;
}

export interface EC2InstanceLimit {
  readonly EC2InstanceType?: string;
  readonly CurrentInstances?: number;
  readonly InstanceLimit?: number;
  readonly Location?: string;
}

export interface Event {
  readonly EventId?: string;
  readonly ResourceId?: string;
  readonly EventCode?: string;
  readonly Message?: string;
  readonly EventTime?: Date;
  readonly PreSignedLogUrl?: string;
}

export interface FilterConfiguration {
  readonly AllowedLocations?: [];
}

export interface FleetAttributes {
  readonly FleetId?: string;
  readonly FleetArn?: string;
  readonly FleetType?: string;
  readonly InstanceType?: string;
  readonly Description?: string;
  readonly Name?: string;
  readonly CreationTime?: Date;
  readonly TerminationTime?: Date;
  readonly Status?: string;
  readonly BuildId?: string;
  readonly BuildArn?: string;
  readonly ScriptId?: string;
  readonly ScriptArn?: string;
  readonly ServerLaunchPath?: string;
  readonly ServerLaunchParameters?: string;
  readonly LogPaths?: [];
  readonly NewGameSessionProtectionPolicy?: string;
  readonly OperatingSystem?: string;
  readonly ResourceCreationLimitPolicy?: ResourceCreationLimitPolicy;
  readonly MetricGroups?: [];
  readonly StoppedActions?: [];
  readonly InstanceRoleArn?: string;
  readonly CertificateConfiguration?: CertificateConfiguration;
}

export interface FleetCapacity {
  readonly FleetId?: string;
  readonly FleetArn?: string;
  readonly InstanceType?: string;
  readonly InstanceCounts?: EC2InstanceCounts;
  readonly Location?: string;
}

export interface FleetCapacityExceededException {
  readonly Message?: string;
}

export interface FleetUtilization {
  readonly FleetId?: string;
  readonly FleetArn?: string;
  readonly ActiveServerProcessCount?: number;
  readonly ActiveGameSessionCount?: number;
  readonly CurrentPlayerSessionCount?: number;
  readonly MaximumPlayerSessionCount?: number;
  readonly Location?: string;
}

export interface GameProperty {
  readonly Key: string;
  readonly Value: string;
}

export interface GameServer {
  readonly GameServerGroupName?: string;
  readonly GameServerGroupArn?: string;
  readonly GameServerId?: string;
  readonly InstanceId?: string;
  readonly ConnectionInfo?: string;
  readonly GameServerData?: string;
  readonly ClaimStatus?: string;
  readonly UtilizationStatus?: string;
  readonly RegistrationTime?: Date;
  readonly LastClaimTime?: Date;
  readonly LastHealthCheckTime?: Date;
}

export interface GameServerGroup {
  readonly GameServerGroupName?: string;
  readonly GameServerGroupArn?: string;
  readonly RoleArn?: string;
  readonly InstanceDefinitions?: [];
  readonly BalancingStrategy?: string;
  readonly GameServerProtectionPolicy?: string;
  readonly AutoScalingGroupArn?: string;
  readonly Status?: string;
  readonly StatusReason?: string;
  readonly SuspendedActions?: [];
  readonly CreationTime?: Date;
  readonly LastUpdatedTime?: Date;
}

export interface GameServerGroupAutoScalingPolicy {
  readonly EstimatedInstanceWarmup?: number;
  readonly TargetTrackingConfiguration: TargetTrackingConfiguration;
}

export interface GameServerInstance {
  readonly GameServerGroupName?: string;
  readonly GameServerGroupArn?: string;
  readonly InstanceId?: string;
  readonly InstanceStatus?: string;
}

export interface GameSession {
  readonly GameSessionId?: string;
  readonly Name?: string;
  readonly FleetId?: string;
  readonly FleetArn?: string;
  readonly CreationTime?: Date;
  readonly TerminationTime?: Date;
  readonly CurrentPlayerSessionCount?: number;
  readonly MaximumPlayerSessionCount?: number;
  readonly Status?: string;
  readonly StatusReason?: string;
  readonly GameProperties?: [];
  readonly IpAddress?: string;
  readonly DnsName?: string;
  readonly Port?: number;
  readonly PlayerSessionCreationPolicy?: string;
  readonly CreatorId?: string;
  readonly GameSessionData?: string;
  readonly MatchmakerData?: string;
  readonly Location?: string;
}

export interface GameSessionConnectionInfo {
  readonly GameSessionArn?: string;
  readonly IpAddress?: string;
  readonly DnsName?: string;
  readonly Port?: number;
  readonly MatchedPlayerSessions?: [];
}

export interface GameSessionDetail {
  readonly GameSession?: GameSession;
  readonly ProtectionPolicy?: string;
}

export interface GameSessionFullException {
  readonly Message?: string;
}

export interface GameSessionPlacement {
  readonly PlacementId?: string;
  readonly GameSessionQueueName?: string;
  readonly Status?: string;
  readonly GameProperties?: [];
  readonly MaximumPlayerSessionCount?: number;
  readonly GameSessionName?: string;
  readonly GameSessionId?: string;
  readonly GameSessionArn?: string;
  readonly GameSessionRegion?: string;
  readonly PlayerLatencies?: [];
  readonly StartTime?: Date;
  readonly EndTime?: Date;
  readonly IpAddress?: string;
  readonly DnsName?: string;
  readonly Port?: number;
  readonly PlacedPlayerSessions?: [];
  readonly GameSessionData?: string;
  readonly MatchmakerData?: string;
}

export interface GameSessionQueue {
  readonly Name?: string;
  readonly GameSessionQueueArn?: string;
  readonly TimeoutInSeconds?: number;
  readonly PlayerLatencyPolicies?: [];
  readonly Destinations?: [];
  readonly FilterConfiguration?: FilterConfiguration;
  readonly PriorityConfiguration?: PriorityConfiguration;
  readonly CustomEventData?: string;
  readonly NotificationTarget?: string;
}

export interface GameSessionQueueDestination {
  readonly DestinationArn?: string;
}

export interface GetGameSessionLogUrlInput {
  readonly GameSessionId: string;
}

export interface GetGameSessionLogUrlOutput {
  readonly PreSignedUrl?: string;
}

export interface GetInstanceAccessInput {
  readonly FleetId: string;
  readonly InstanceId: string;
}

export interface GetInstanceAccessOutput {
  readonly InstanceAccess?: InstanceAccess;
}

export interface IdempotentParameterMismatchException {
  readonly Message?: string;
}

export interface Instance {
  readonly FleetId?: string;
  readonly FleetArn?: string;
  readonly InstanceId?: string;
  readonly IpAddress?: string;
  readonly DnsName?: string;
  readonly OperatingSystem?: string;
  readonly Type?: string;
  readonly Status?: string;
  readonly CreationTime?: Date;
  readonly Location?: string;
}

export interface InstanceAccess {
  readonly FleetId?: string;
  readonly InstanceId?: string;
  readonly IpAddress?: string;
  readonly OperatingSystem?: string;
  readonly Credentials?: InstanceCredentials;
}

export interface InstanceCredentials {
  readonly UserName?: string;
  readonly Secret?: string;
}

export interface InstanceDefinition {
  readonly InstanceType: string;
  readonly WeightedCapacity?: string;
}

export interface InternalServiceException {
  readonly Message?: string;
}

export interface InvalidFleetStatusException {
  readonly Message?: string;
}

export interface InvalidGameSessionStatusException {
  readonly Message?: string;
}

export interface InvalidRequestException {
  readonly Message?: string;
}

export interface IpPermission {
  readonly FromPort: number;
  readonly ToPort: number;
  readonly IpRange: string;
  readonly Protocol: string;
}

export interface LaunchTemplateSpecification {
  readonly LaunchTemplateId?: string;
  readonly LaunchTemplateName?: string;
  readonly Version?: string;
}

export interface LimitExceededException {
  readonly Message?: string;
}

export interface ListAliasesInput {
  readonly RoutingStrategyType?: string;
  readonly Name?: string;
  readonly Limit?: number;
  readonly NextToken?: string;
}

export interface ListAliasesOutput {
  readonly Aliases?: [];
  readonly NextToken?: string;
}

export interface ListBuildsInput {
  readonly Status?: string;
  readonly Limit?: number;
  readonly NextToken?: string;
}

export interface ListBuildsOutput {
  readonly Builds?: [];
  readonly NextToken?: string;
}

export interface ListFleetsInput {
  readonly BuildId?: string;
  readonly ScriptId?: string;
  readonly Limit?: number;
  readonly NextToken?: string;
}

export interface ListFleetsOutput {
  readonly FleetIds?: [];
  readonly NextToken?: string;
}

export interface ListGameServerGroupsInput {
  readonly Limit?: number;
  readonly NextToken?: string;
}

export interface ListGameServerGroupsOutput {
  readonly GameServerGroups?: [];
  readonly NextToken?: string;
}

export interface ListGameServersInput {
  readonly GameServerGroupName: string;
  readonly SortOrder?: string;
  readonly Limit?: number;
  readonly NextToken?: string;
}

export interface ListGameServersOutput {
  readonly GameServers?: [];
  readonly NextToken?: string;
}

export interface ListScriptsInput {
  readonly Limit?: number;
  readonly NextToken?: string;
}

export interface ListScriptsOutput {
  readonly Scripts?: [];
  readonly NextToken?: string;
}

export interface ListTagsForResourceRequest {
  readonly ResourceARN: string;
}

export interface ListTagsForResourceResponse {
  readonly Tags?: [];
}

export interface LocationAttributes {
  readonly LocationState?: LocationState;
  readonly StoppedActions?: [];
  readonly UpdateStatus?: string;
}

export interface LocationConfiguration {
  readonly Location?: string;
}

export interface LocationState {
  readonly Location?: string;
  readonly Status?: string;
}

export interface MatchedPlayerSession {
  readonly PlayerId?: string;
  readonly PlayerSessionId?: string;
}

export interface MatchmakingConfiguration {
  readonly Name?: string;
  readonly ConfigurationArn?: string;
  readonly Description?: string;
  readonly GameSessionQueueArns?: [];
  readonly RequestTimeoutSeconds?: number;
  readonly AcceptanceTimeoutSeconds?: number;
  readonly AcceptanceRequired?: boolean;
  readonly RuleSetName?: string;
  readonly RuleSetArn?: string;
  readonly NotificationTarget?: string;
  readonly AdditionalPlayerCount?: number;
  readonly CustomEventData?: string;
  readonly CreationTime?: Date;
  readonly GameProperties?: [];
  readonly GameSessionData?: string;
  readonly BackfillMode?: string;
  readonly FlexMatchMode?: string;
}

export interface MatchmakingRuleSet {
  readonly RuleSetName?: string;
  readonly RuleSetArn?: string;
  readonly RuleSetBody: string;
  readonly CreationTime?: Date;
}

export interface MatchmakingTicket {
  readonly TicketId?: string;
  readonly ConfigurationName?: string;
  readonly ConfigurationArn?: string;
  readonly Status?: string;
  readonly StatusReason?: string;
  readonly StatusMessage?: string;
  readonly StartTime?: Date;
  readonly EndTime?: Date;
  readonly Players?: [];
  readonly GameSessionConnectionInfo?: GameSessionConnectionInfo;
  readonly EstimatedWaitTime?: number;
}

export interface NotFoundException {
  readonly Message?: string;
}

export interface OutOfCapacityException {
  readonly Message?: string;
}

export interface PlacedPlayerSession {
  readonly PlayerId?: string;
  readonly PlayerSessionId?: string;
}

export interface Player {
  readonly PlayerId?: string;
  readonly PlayerAttributes?: {[key: string]: any};
  readonly Team?: string;
  readonly LatencyInMs?: {[key: string]: any};
}

export interface PlayerLatency {
  readonly PlayerId?: string;
  readonly RegionIdentifier?: string;
  readonly LatencyInMilliseconds?: unknown;
}

export interface PlayerLatencyPolicy {
  readonly MaximumIndividualPlayerLatencyMilliseconds?: number;
  readonly PolicyDurationSeconds?: number;
}

export interface PlayerSession {
  readonly PlayerSessionId?: string;
  readonly PlayerId?: string;
  readonly GameSessionId?: string;
  readonly FleetId?: string;
  readonly FleetArn?: string;
  readonly CreationTime?: Date;
  readonly TerminationTime?: Date;
  readonly Status?: string;
  readonly IpAddress?: string;
  readonly DnsName?: string;
  readonly Port?: number;
  readonly PlayerData?: string;
}

export interface PriorityConfiguration {
  readonly PriorityOrder?: [];
  readonly LocationOrder?: [];
}

export interface PutScalingPolicyInput {
  readonly Name: string;
  readonly FleetId: string;
  readonly ScalingAdjustment?: number;
  readonly ScalingAdjustmentType?: string;
  readonly Threshold?: unknown;
  readonly ComparisonOperator?: string;
  readonly EvaluationPeriods?: number;
  readonly MetricName: string;
  readonly PolicyType?: string;
  readonly TargetConfiguration?: TargetConfiguration;
}

export interface PutScalingPolicyOutput {
  readonly Name?: string;
}

export interface RegisterGameServerInput {
  readonly GameServerGroupName: string;
  readonly GameServerId: string;
  readonly InstanceId: string;
  readonly ConnectionInfo?: string;
  readonly GameServerData?: string;
}

export interface RegisterGameServerOutput {
  readonly GameServer?: GameServer;
}

export interface RequestUploadCredentialsInput {
  readonly BuildId: string;
}

export interface RequestUploadCredentialsOutput {
  readonly UploadCredentials?: AwsCredentials;
  readonly StorageLocation?: S3Location;
}

export interface ResolveAliasInput {
  readonly AliasId: string;
}

export interface ResolveAliasOutput {
  readonly FleetId?: string;
  readonly FleetArn?: string;
}

export interface ResourceCreationLimitPolicy {
  readonly NewGameSessionsPerCreator?: number;
  readonly PolicyPeriodInMinutes?: number;
}

export interface ResumeGameServerGroupInput {
  readonly GameServerGroupName: string;
  readonly ResumeActions: [];
}

export interface ResumeGameServerGroupOutput {
  readonly GameServerGroup?: GameServerGroup;
}

export interface RoutingStrategy {
  readonly Type?: string;
  readonly FleetId?: string;
  readonly Message?: string;
}

export interface RuntimeConfiguration {
  readonly ServerProcesses?: [];
  readonly MaxConcurrentGameSessionActivations?: number;
  readonly GameSessionActivationTimeoutSeconds?: number;
}

export interface S3Location {
  readonly Bucket?: string;
  readonly Key?: string;
  readonly RoleArn?: string;
  readonly ObjectVersion?: string;
}

export interface ScalingPolicy {
  readonly FleetId?: string;
  readonly FleetArn?: string;
  readonly Name?: string;
  readonly Status?: string;
  readonly ScalingAdjustment?: number;
  readonly ScalingAdjustmentType?: string;
  readonly ComparisonOperator?: string;
  readonly Threshold?: unknown;
  readonly EvaluationPeriods?: number;
  readonly MetricName?: string;
  readonly PolicyType?: string;
  readonly TargetConfiguration?: TargetConfiguration;
  readonly UpdateStatus?: string;
  readonly Location?: string;
}

export interface Script {
  readonly ScriptId?: string;
  readonly ScriptArn?: string;
  readonly Name?: string;
  readonly Version?: string;
  readonly SizeOnDisk?: number;
  readonly CreationTime?: Date;
  readonly StorageLocation?: S3Location;
}

export interface SearchGameSessionsInput {
  readonly FleetId?: string;
  readonly AliasId?: string;
  readonly Location?: string;
  readonly FilterExpression?: string;
  readonly SortExpression?: string;
  readonly Limit?: number;
  readonly NextToken?: string;
}

export interface SearchGameSessionsOutput {
  readonly GameSessions?: [];
  readonly NextToken?: string;
}

export interface ServerProcess {
  readonly LaunchPath: string;
  readonly Parameters?: string;
  readonly ConcurrentExecutions: number;
}

export interface StartFleetActionsInput {
  readonly FleetId: string;
  readonly Actions: [];
  readonly Location?: string;
}

export interface StartFleetActionsOutput {
  readonly FleetId?: string;
  readonly FleetArn?: string;
}

export interface StartGameSessionPlacementInput {
  readonly PlacementId: string;
  readonly GameSessionQueueName: string;
  readonly GameProperties?: [];
  readonly MaximumPlayerSessionCount: number;
  readonly GameSessionName?: string;
  readonly PlayerLatencies?: [];
  readonly DesiredPlayerSessions?: [];
  readonly GameSessionData?: string;
}

export interface StartGameSessionPlacementOutput {
  readonly GameSessionPlacement?: GameSessionPlacement;
}

export interface StartMatchBackfillInput {
  readonly TicketId?: string;
  readonly ConfigurationName: string;
  readonly GameSessionArn?: string;
  readonly Players: [];
}

export interface StartMatchBackfillOutput {
  readonly MatchmakingTicket?: MatchmakingTicket;
}

export interface StartMatchmakingInput {
  readonly TicketId?: string;
  readonly ConfigurationName: string;
  readonly Players: [];
}

export interface StartMatchmakingOutput {
  readonly MatchmakingTicket?: MatchmakingTicket;
}

export interface StopFleetActionsInput {
  readonly FleetId: string;
  readonly Actions: [];
  readonly Location?: string;
}

export interface StopFleetActionsOutput {
  readonly FleetId?: string;
  readonly FleetArn?: string;
}

export interface StopGameSessionPlacementInput {
  readonly PlacementId: string;
}

export interface StopGameSessionPlacementOutput {
  readonly GameSessionPlacement?: GameSessionPlacement;
}

export interface StopMatchmakingInput {
  readonly TicketId: string;
}

export interface StopMatchmakingOutput {
}

export interface SuspendGameServerGroupInput {
  readonly GameServerGroupName: string;
  readonly SuspendActions: [];
}

export interface SuspendGameServerGroupOutput {
  readonly GameServerGroup?: GameServerGroup;
}

export interface Tag {
  readonly Key: string;
  readonly Value: string;
}

export interface TagResourceRequest {
  readonly ResourceARN: string;
  readonly Tags: [];
}

export interface TagResourceResponse {
}

export interface TaggingFailedException {
  readonly Message?: string;
}

export interface TargetConfiguration {
  readonly TargetValue: unknown;
}

export interface TargetTrackingConfiguration {
  readonly TargetValue: unknown;
}

export interface TerminalRoutingStrategyException {
  readonly Message?: string;
}

export interface UnauthorizedException {
  readonly Message?: string;
}

export interface UnsupportedRegionException {
  readonly Message?: string;
}

export interface UntagResourceRequest {
  readonly ResourceARN: string;
  readonly TagKeys: [];
}

export interface UntagResourceResponse {
}

export interface UpdateAliasInput {
  readonly AliasId: string;
  readonly Name?: string;
  readonly Description?: string;
  readonly RoutingStrategy?: RoutingStrategy;
}

export interface UpdateAliasOutput {
  readonly Alias?: Alias;
}

export interface UpdateBuildInput {
  readonly BuildId: string;
  readonly Name?: string;
  readonly Version?: string;
}

export interface UpdateBuildOutput {
  readonly Build?: Build;
}

export interface UpdateFleetAttributesInput {
  readonly FleetId: string;
  readonly Name?: string;
  readonly Description?: string;
  readonly NewGameSessionProtectionPolicy?: string;
  readonly ResourceCreationLimitPolicy?: ResourceCreationLimitPolicy;
  readonly MetricGroups?: [];
}

export interface UpdateFleetAttributesOutput {
  readonly FleetId?: string;
}

export interface UpdateFleetCapacityInput {
  readonly FleetId: string;
  readonly DesiredInstances?: number;
  readonly MinSize?: number;
  readonly MaxSize?: number;
  readonly Location?: string;
}

export interface UpdateFleetCapacityOutput {
  readonly FleetId?: string;
  readonly FleetArn?: string;
  readonly Location?: string;
}

export interface UpdateFleetPortSettingsInput {
  readonly FleetId: string;
  readonly InboundPermissionAuthorizations?: [];
  readonly InboundPermissionRevocations?: [];
}

export interface UpdateFleetPortSettingsOutput {
  readonly FleetId?: string;
}

export interface UpdateGameServerGroupInput {
  readonly GameServerGroupName: string;
  readonly RoleArn?: string;
  readonly InstanceDefinitions?: [];
  readonly GameServerProtectionPolicy?: string;
  readonly BalancingStrategy?: string;
}

export interface UpdateGameServerGroupOutput {
  readonly GameServerGroup?: GameServerGroup;
}

export interface UpdateGameServerInput {
  readonly GameServerGroupName: string;
  readonly GameServerId: string;
  readonly GameServerData?: string;
  readonly UtilizationStatus?: string;
  readonly HealthCheck?: string;
}

export interface UpdateGameServerOutput {
  readonly GameServer?: GameServer;
}

export interface UpdateGameSessionInput {
  readonly GameSessionId: string;
  readonly MaximumPlayerSessionCount?: number;
  readonly Name?: string;
  readonly PlayerSessionCreationPolicy?: string;
  readonly ProtectionPolicy?: string;
}

export interface UpdateGameSessionOutput {
  readonly GameSession?: GameSession;
}

export interface UpdateGameSessionQueueInput {
  readonly Name: string;
  readonly TimeoutInSeconds?: number;
  readonly PlayerLatencyPolicies?: [];
  readonly Destinations?: [];
  readonly FilterConfiguration?: FilterConfiguration;
  readonly PriorityConfiguration?: PriorityConfiguration;
  readonly CustomEventData?: string;
  readonly NotificationTarget?: string;
}

export interface UpdateGameSessionQueueOutput {
  readonly GameSessionQueue?: GameSessionQueue;
}

export interface UpdateMatchmakingConfigurationInput {
  readonly Name: string;
  readonly Description?: string;
  readonly GameSessionQueueArns?: [];
  readonly RequestTimeoutSeconds?: number;
  readonly AcceptanceTimeoutSeconds?: number;
  readonly AcceptanceRequired?: boolean;
  readonly RuleSetName?: string;
  readonly NotificationTarget?: string;
  readonly AdditionalPlayerCount?: number;
  readonly CustomEventData?: string;
  readonly GameProperties?: [];
  readonly GameSessionData?: string;
  readonly BackfillMode?: string;
  readonly FlexMatchMode?: string;
}

export interface UpdateMatchmakingConfigurationOutput {
  readonly Configuration?: MatchmakingConfiguration;
}

export interface UpdateRuntimeConfigurationInput {
  readonly FleetId: string;
  readonly RuntimeConfiguration: RuntimeConfiguration;
}

export interface UpdateRuntimeConfigurationOutput {
  readonly RuntimeConfiguration?: RuntimeConfiguration;
}

export interface UpdateScriptInput {
  readonly ScriptId: string;
  readonly Name?: string;
  readonly Version?: string;
  readonly StorageLocation?: S3Location;
  readonly ZipFile?: unknown;
}

export interface UpdateScriptOutput {
  readonly Script?: Script;
}

export interface ValidateMatchmakingRuleSetInput {
  readonly RuleSetBody: string;
}

export interface ValidateMatchmakingRuleSetOutput {
  readonly Valid?: boolean;
}

export interface VpcPeeringAuthorization {
  readonly GameLiftAwsAccountId?: string;
  readonly PeerVpcAwsAccountId?: string;
  readonly PeerVpcId?: string;
  readonly CreationTime?: Date;
  readonly ExpirationTime?: Date;
}

export interface VpcPeeringConnection {
  readonly FleetId?: string;
  readonly FleetArn?: string;
  readonly IpV4CidrBlock?: string;
  readonly VpcPeeringConnectionId?: string;
  readonly Status?: VpcPeeringConnectionStatus;
  readonly PeerVpcId?: string;
  readonly GameLiftVpcId?: string;
}

export interface VpcPeeringConnectionStatus {
  readonly Code?: string;
  readonly Message?: string;
}


