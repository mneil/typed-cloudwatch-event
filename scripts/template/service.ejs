/**
 * STOP. This file is autogenerated. DO NOT EDIT by hand
 */
<%_
const typeMap = {
  string: 'string',
  boolean: 'boolean',
  list: '[]',
  long: 'number',
  integer: 'number',
  exponential: 'number',
  long: 'number',
  timestamp: 'Date',
  map: '{[key: string]: any}',
}
function toMemberType(shape, member) {
  const theType = typeMap[shape.type];
  if(theType) {
    return theType;
  }
  if(shape.type == 'structure') {
    return member;
  }
  return 'unknown';
}
-%>
<%_ for (const [key, value] of Object.entries(operations)) {
  // only process input values for requestParameters
  if(!value.input) {
    continue;
  }
  -%>
export interface <%= key %> {
  <%_
  const shapeName = value.input.shape
  const shape = shapes[shapeName]

  for (const [member, details] of Object.entries(shape.members)) {
  -%>
  readonly <%- member %>: <%- toMemberType(shapes[details.shape], details.shape) %>;
  <%_ }; -%>
}
<% }; %>

<% for (const [key, shape] of Object.entries(shapes)) {
  if(shape.type !== 'structure') {
    continue;
  }
%>
interface <%= key %> {
  <%_
  for (const [member, details] of Object.entries(shape.members)) {
  -%>
  readonly <%- member %>: <%- toMemberType(shapes[details.shape], details.shape) %>;
  <%_ }; -%>
}
<% }; %>
